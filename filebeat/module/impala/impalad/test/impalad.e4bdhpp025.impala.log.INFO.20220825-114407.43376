Log file created at: 2022/08/25 11:44:07
Running on machine: e4bdhpp025
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
I0825 11:44:07.164520 43376 logging.cc:120] stdout will be logged to this file.
E0825 11:44:07.164758 43376 logging.cc:121] stderr will be logged to this file.
I0825 11:44:07.165140 43376 minidump.cc:231] Setting minidump size limit to 20971520.
I0825 11:44:07.165199 43376 atomicops-internals-x86.cc:98] vendor GenuineIntel  family 6  model 15  sse2 1  cmpxchg16b 1
I0825 11:44:07.207929 43376 authentication.cc:1014] Using LDAP authentication with server ldap://e4bdhpp008:3890
W0825 11:44:07.207948 43376 authentication.cc:1018] LDAP authentication is being used, but without TLS. ALL PASSWORDS WILL GO OVER THE NETWORK IN THE CLEAR.
I0825 11:44:07.207991 43376 authentication.cc:733] Using internal kerberos principal "impala/e4bdhpp025@PANEL.COM"
I0825 11:44:07.207999 43376 authentication.cc:1081] Internal communication is authenticated with Kerberos
I0825 11:44:07.210979 43376 init.cc:362] Logged in from keytab as impala/e4bdhpp025@PANEL.COM (short username impala)
I0825 11:44:07.211422 43376 authentication.cc:864] Kerberos ticket granted to impala/e4bdhpp025@PANEL.COM
I0825 11:44:07.211447 43376 authentication.cc:733] Using external kerberos principal "impala/impala.ha.com@PANEL.COM"
I0825 11:44:07.211454 43376 authentication.cc:1097] External communication is authenticated with Kerberos
I0825 11:44:07.211460 43376 authentication.cc:1101] External communication is authenticated with LDAP
I0825 11:44:07.212337 43376 init.cc:231] impalad version 2.12.0-RELEASE RELEASE (build 56d0ad4872bc05d499438c75e05bb6c85c3a3b83)
Built on Mon Sep  3 17:40:29 CST 2018
I0825 11:44:07.212364 43376 init.cc:232] Using hostname: e4bdhpp025
I0825 11:44:07.213045 43376 logging.cc:156] Flags (see also /varz are on debug webserver):
--flagfile=/etc/impala/conf/impalad_flags
--fromenv=
--tryfromenv=
--undefok=
--tab_completion_columns=80
--tab_completion_word=
--help=false
--helpfull=false
--helpmatch=
--helpon=
--helppackage=false
--helpshort=false
--helpxml=false
--version=false
--catalog_service_port=26000
--initial_hms_cnxn_timeout_s=120
--load_catalog_in_background=false
--max_hdfs_partitions_parallel_load=5
--max_nonhdfs_partitions_parallel_load=20
--num_metadata_loading_threads=16
--sentry_catalog_polling_frequency_s=60
--sentry_config=
--asm_module_dir=
--disable_optimization_passes=false
--dump_ir=false
--opt_module_dir=
--perf_map=false
--print_llvm_ir_instruction_count=false
--unopt_module_dir=
--abort_on_config_error=true
--be_port=22000
--be_principal=impala/e4bdhpp025@PANEL.COM
--buffer_pool_clean_pages_limit=10%
--buffer_pool_limit=85%
--compact_catalog_topic=true
--disable_kudu=false
--disable_mem_pools=false
--enable_minidumps=true
--enable_process_lifetime_heap_profiling=false
--enable_stats_extrapolation=false
--heap_profile_dir=
--hostname=e4bdhpp025
--inc_stats_size_limit_bytes=209715200
--keytab_file=/etc/security/keytabs/proxy_impala.keytab
--krb5_conf=
--krb5_debug_file=
--kudu_operation_timeout_ms=180000
--load_auth_to_local_rules=false
--log_filename=impalad
--max_log_files=10
--max_minidumps=9
--mem_limit=311385128960
--min_buffer_size=8192
--minidump_path=/var/log/impala/minidumps/impalad
--minidump_size_limit_hint_kb=20480
--principal=impala/impala.ha.com@PANEL.COM
--read_size=8388608
--redaction_rules_file=
--redirect_stdout_stderr=true
--reserved_words_version=2.11.0
--tcmalloc_max_total_thread_cache_bytes=0
--local_library_dir=/tmp
--max_audit_event_log_files=0
--memory_maintenance_sleep_time_ms=10000
--pause_monitor_sleep_time_ms=500
--pause_monitor_warn_threshold_ms=10000
--data_stream_sender_buffer_size=16384
--data_source_batch_size=1024
--exchg_node_buffer_size_bytes=10485760
--enable_quadratic_probing=true
--skip_lzo_version_check=false
--enable_orc_scanner=true
--suppress_unknown_disk_id_warnings=false
--max_row_batches=0
--min_filter_reject_ratio=0.10000000000000001
--kudu_max_row_batches=0
--kudu_read_mode=READ_LATEST
--kudu_scanner_keep_alive_period_sec=15
--pick_only_leaders_for_tests=false
--kudu_error_buffer_size=10485760
--kudu_mutation_buffer_size=10485760
--convert_legacy_hive_parquet_utc_timestamps=true
--max_page_header_size=8388608
--runtime_filter_wait_time_ms=1000
--accepted_cnxn_queue_depth=10000
--enable_ldap_auth=true
--internal_principals_whitelist=hdfs
--kerberos_reinit_interval=60
--ldap_allow_anonymous_binds=false
--ldap_baseDN=ou=Users,dc=zeta,dc=com
--ldap_bind_pattern=
--ldap_ca_certificate=
--ldap_domain=
--ldap_manual_config=false
--ldap_passwords_in_clear_ok=true
--ldap_tls=false
--ldap_uri=ldap://e4bdhpp008:3890
--sasl_path=
--use_kudu_kinit=true
--num_acceptor_threads=2
--num_reactor_threads=0
--rpc_negotiation_thread_count=64
--rpc_negotiation_timeout_ms=300000
--rpc_retry_interval_ms=5
--concurrent_scratch_ios_per_device=2
--madvise_huge_pages=true
--mmap_buffers=false
--datastream_sender_timeout_ms=120000
--insert_inherit_permissions=false
--backend_client_connection_num_retries=3
--backend_client_rpc_timeout_ms=300000
--catalog_client_connection_num_retries=3
--catalog_client_rpc_timeout_ms=0
--catalog_service_host=e4bdhpp008
--coordinator_rpc_threads=12
--disable_admission_control=false
--enable_webserver=true
--num_hdfs_worker_threads=16
--state_store_host=e4bdhpp009
--state_store_subscriber_port=23000
--use_krpc=true
--status_report_interval=5
--s3a_access_key_cmd=
--s3a_secret_key_cmd=
--max_cached_file_handles=20000
--max_free_io_buffers=128
--num_adls_io_threads=16
--num_disks=0
--num_file_handle_cache_partitions=16
--num_io_threads_per_rotational_disk=0
--num_io_threads_per_solid_state_disk=0
--num_remote_hdfs_io_threads=8
--num_s3_io_threads=16
--num_threads_per_disk=0
--unused_file_handle_timeout_sec=21600
--adls_read_chunk_size=131072
--use_hdfs_pread=false
--datastream_service_deserialization_queue_size=10000
--datastream_service_num_deserialization_threads=16
--log_mem_usage_interval=0
--report_status_retry_interval_ms=100
--max_filter_error_rate=0.75
--num_threads_per_core=3
--use_local_tz_for_unix_timestamp_conversions=false
--allow_multiple_scratch_dirs_per_device=false
--disk_spill_encryption=false
--scratch_dirs=/data1/impalad,/data10/impalad,/data11/impalad,/data12/impalad,/data2/impalad,/data3/impalad,/data4/impalad,/data5/impalad,/data6/impalad,/data7/impalad,/data8/impalad,/data9/impalad
--queue_wait_timeout_ms=60000
--default_pool_max_queued=200
--default_pool_max_requests=-1
--default_pool_mem_limit=
--disable_pool_max_requests=false
--disable_pool_mem_limits=false
--fair_scheduler_allocation_path=/etc/impala/conf/fair-scheduler.xml
--llama_site_path=/etc/impala/conf/llama-site.xml
--require_username=false
--datastream_service_num_svc_threads=0
--datastream_service_queue_mem_limit=5%
--authorization_policy_file=/user/impala/impala-policy.ini
--authorization_policy_provider_class=org.apache.sentry.provider.file.LocalGroupResourceAuthorizationProvider
--authorized_proxy_user_config=hive=*;dimmetrics=*;impala=*;metaspace=*;datastudio=*;apprc=*;taskflow2=*
--authorized_proxy_user_config_delimiter=,
--kudu_master_hosts=
--server_name=e4bdhpp010
--abort_on_failed_audit_event=true
--abort_on_failed_lineage_event=true
--audit_event_log_dir=
--beeswax_port=21000
--cancellation_thread_pool_size=5
--default_query_options=
--fe_service_threads=64
--hs2_port=21050
--idle_query_timeout=0
--idle_session_timeout=0
--is_coordinator=true
--is_executor=true
--lineage_event_log_dir=
--log_query_to_file=true
--max_audit_event_log_file_size=5000
--max_lineage_log_file_size=5000
--max_profile_log_file_size=5000
--max_profile_log_files=10
--max_result_cache_size=100000
--profile_log_dir=
--query_log_size=25
--ssl_cipher_list=
--ssl_client_ca_certificate=
--ssl_minimum_version=tlsv1
--ssl_private_key=
--ssl_private_key_password_cmd=
--ssl_server_certificate=
--statestore_subscriber_cnxn_attempts=10
--statestore_subscriber_cnxn_retry_interval_ms=3000
--statestore_subscriber_timeout_seconds=60
--state_store_port=24000
--statestore_heartbeat_frequency_ms=1000
--statestore_heartbeat_tcp_timeout_seconds=3
--statestore_max_missed_heartbeats=10
--statestore_max_subscribers=10000
--statestore_num_heartbeat_threads=10
--statestore_num_priority_update_threads=10
--statestore_num_update_threads=10
--statestore_priority_update_frequency_ms=100
--statestore_update_frequency_ms=2000
--statestore_update_tcp_timeout_seconds=300
--force_lowercase_usernames=false
--sasl_connect_tcp_timeout_ms=300000
--num_cores=0
--web_log_bytes=1048576
--non_impala_java_vlog=0
--periodic_counter_update_period_ms=500
--enable_webserver_doc_root=true
--webserver_authentication_domain=
--webserver_certificate_file=
--webserver_doc_root=/usr/hdp/current/impala-client
--webserver_interface=
--webserver_password_file=
--webserver_port=25000
--webserver_private_key_file=
--webserver_private_key_password_cmd=
--webserver_x_frame_options=DENY
--alsologtoemail=
--alsologtostderr=false
--colorlogtostderr=false
--drop_log_memory=true
--log_backtrace_at=
--log_dir=/var/log/impala
--log_link=
--log_prefix=true
--logbuflevel=-1
--logbufsecs=30
--logemaillevel=999
--logmailer=/bin/mail
--logtostderr=false
--max_log_size=1800
--minloglevel=0
--stderrthreshold=4
--stop_logging_if_full_disk=false
--symbolize_stacktrace=true
--v=1
--vmodule=
I0825 11:44:07.213282 43376 init.cc:237] Cpu Info:
  Model: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz
  Cores: 56
  Max Possible Cores: 56
  L1 Cache: 32.00 KB (Line: 64.00 B)
  L2 Cache: 256.00 KB (Line: 64.00 B)
  L3 Cache: 35.00 MB (Line: 64.00 B)
  Hardware Supports:
    ssse3
    sse4_1
    sse4_2
    popcnt
    avx
    avx2
    pclmulqdq
  Numa Nodes: 2
  Numa Nodes of Cores: 0->0 | 1->0 | 2->0 | 3->0 | 4->0 | 5->0 | 6->0 | 7->0 | 8->0 | 9->0 | 10->0 | 11->0 | 12->0 | 13->0 | 14->1 | 15->1 | 16->1 | 17->1 | 18->1 | 19->1 | 20->1 | 21->1 | 22->1 | 23->1 | 24->1 | 25->1 | 26->1 | 27->1 | 28->0 | 29->0 | 30->0 | 31->0 | 32->0 | 33->0 | 34->0 | 35->0 | 36->0 | 37->0 | 38->0 | 39->0 | 40->0 | 41->0 | 42->1 | 43->1 | 44->1 | 45->1 | 46->1 | 47->1 | 48->1 | 49->1 | 50->1 | 51->1 | 52->1 | 53->1 | 54->1 | 55->1 |
I0825 11:44:07.213306 43376 init.cc:238] Disk Info: 
  Num disks 16: 
    sdo (rotational=true)
    sdc (rotational=true)
    sdd (rotational=true)
    sdg (rotational=true)
    sdl (rotational=true)
    sdm (rotational=true)
    sdi (rotational=true)
    sdn (rotational=true)
    sdk (rotational=true)
    sdj (rotational=true)
    sdh (rotational=true)
    sdb (rotational=true)
    sda (rotational=true)
    sdf (rotational=false)
    sde (rotational=false)
    dm- (rotational=true)

I0825 11:44:07.213390 43376 init.cc:239] Physical Memory: 378.41 GB
Transparent Huge Pages Config:
  enabled: always madvise [never]
  defrag: always madvise [never]
  khugepaged defrag: [yes] no
I0825 11:44:07.213408 43376 init.cc:240] OS version: Linux version 2.6.32-696.el6.x86_64 (mockbuild@c1bm.rdu2.centos.org) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-18) (GCC) ) #1 SMP Tue Mar 21 19:29:05 UTC 2017
Clock: clocksource: 'tsc', clockid_t: CLOCK_MONOTONIC
I0825 11:44:07.213420 43376 init.cc:241] Process ID: 43376
I0825 11:44:07.213435 43376 init.cc:242] Default AES cipher mode for spill-to-disk: AES-GCM
I0825 11:44:09.432147 43376 llvm-codegen.cc:152] CPU class for runtime code generation: broadwell
I0825 11:44:09.432221 43376 llvm-codegen.cc:154] Detected CPU flags: +sse2,+cx16,-tbm,-avx512ifma,-avx512dq,-fma4,+prfchw,+bmi2,-xsavec,+fsgsbase,+popcnt,+aes,-xsaves,-avx512er,-avx512vpopcntdq,-clwb,-avx512f,-clzero,-pku,+mmx,-lwp,-xop,+rdseed,-sse4a,-avx512bw,-clflushopt,+xsave,-avx512vl,-avx512cd,+avx,+rtm,+fma,+bmi,+rdrnd,-mwaitx,+sse4.1,+sse4.2,+avx2,+sse,+lzcnt,+pclmul,-prefetchwt1,+f16c,+ssse3,-sgx,+cmov,-avx512vbmi,+movbe,+xsaveopt,-sha,+adx,-avx512pf,+sse3
I0825 11:44:09.432425 43376 llvm-codegen.cc:157] CPU flags enabled for runtime code generation: +sse2,+cx16,-tbm,-avx512ifma,-avx512dq,-fma4,+prfchw,+bmi2,-xsavec,+fsgsbase,+popcnt,+aes,-xsaves,-avx512er,-avx512vpopcntdq,-clwb,-avx512f,-clzero,-pku,+mmx,-lwp,-xop,+rdseed,-sse4a,-avx512bw,-clflushopt,+xsave,-avx512vl,-avx512cd,+avx,+rtm,+fma,+bmi,+rdrnd,-mwaitx,+sse4.1,+sse4.2,+avx2,+sse,+lzcnt,+pclmul,-prefetchwt1,+f16c,+ssse3,-sgx,+cmov,-avx512vbmi,+movbe,+xsaveopt,-sha,+adx,-avx512pf,+sse3
I0825 11:44:10.324185 43376 GlogAppender.java:137] Logging (re)initialized. Impala: VLOG, All other: INFO
I0825 11:44:10.328023 43376 JniFrontend.java:135] Authorization is 'ENABLED' using  file based policy from: /user/impala/impala-policy.ini
I0825 11:44:10.328835 43376 JniFrontend.java:141] Java Input arguments:
-Djava.library.path=/usr/hdp/current/impala-client/lib
Java System properties:
awt.toolkit:sun.awt.X11.XToolkit
file.encoding.pkg:sun.io
java.specification.version:1.8
sun.cpu.isalist:
sun.jnu.encoding:ANSI_X3.4-1968
java.class.path:/var/lib/impala/*.jar:/usr/share/java/mysql-connector-java.jar:/etc/impala/conf:/etc/impala/conf:/etc/impala/conf:/etc/impala/conf:/usr/hdp/current/impala-client/lib/libthrift-0.9.0.jar::/usr/hdp/current/impala-client/lib/activation-1.1.jar:/usr/hdp/current/impala-client/lib/ant-1.5.jar:/usr/hdp/current/impala-client/lib/ant-1.9.1.jar:/usr/hdp/current/impala-client/lib/ant-contrib-1.0b3.jar:/usr/hdp/current/impala-client/lib/ant-launcher-1.9.1.jar:/usr/hdp/current/impala-client/lib/antlr-2.7.7.jar:/usr/hdp/current/impala-client/lib/antlr-runtime-3.3.jar:/usr/hdp/current/impala-client/lib/aopalliance-1.0.jar:/usr/hdp/current/impala-client/lib/apacheds-i18n-2.0.0-M15.jar:/usr/hdp/current/impala-client/lib/apacheds-jdbm1-2.0.0-M2.jar:/usr/hdp/current/impala-client/lib/apacheds-kerberos-codec-2.0.0-M15.jar:/usr/hdp/current/impala-client/lib/apache-log4j-extras-1.2.17.jar:/usr/hdp/current/impala-client/lib/api-asn1-api-1.0.0-M20.jar:/usr/hdp/current/impala-client/lib/api-util-1.0.0-M20.jar:/usr/hdp/current/impala-client/lib/asm-3.1.jar:/usr/hdp/current/impala-client/lib/asm-commons-3.1.jar:/usr/hdp/current/impala-client/lib/asm-tree-3.1.jar:/usr/hdp/current/impala-client/lib/async-1.4.1.jar:/usr/hdp/current/impala-client/lib/audience-annotations-0.7.0.jar:/usr/hdp/current/impala-client/lib/avro-1.7.6-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/aws-java-sdk-bundle-1.11.134.jar:/usr/hdp/current/impala-client/lib/azure-data-lake-store-sdk-2.2.5.jar:/usr/hdp/current/impala-client/lib/bonecp-0.7.1.RELEASE.jar:/usr/hdp/current/impala-client/lib/calcite-avatica-1.0.0-incubating.jar:/usr/hdp/current/impala-client/lib/calcite-core-1.0.0-incubating.jar:/usr/hdp/current/impala-client/lib/calcite-linq4j-1.0.0-incubating.jar:/usr/hdp/current/impala-client/lib/commons-beanutils-1.8.3.jar:/usr/hdp/current/impala-client/lib/commons-beanutils-core-1.8.0.jar:/usr/hdp/current/impala-client/lib/commons-cli-1.2.jar:/usr/hdp/current/impala-client/lib/commons-codec-1.9.jar:/usr/hdp/current/impala-client/lib/commons-collections-3.2.2.jar:/usr/hdp/current/impala-client/lib/commons-compiler-2.7.6.jar:/usr/hdp/current/impala-client/lib/commons-compress-1.4.1.jar:/usr/hdp/current/impala-client/lib/commons-configuration-1.6.jar:/usr/hdp/current/impala-client/lib/commons-daemon-1.0.13.jar:/usr/hdp/current/impala-client/lib/commons-dbcp-1.4.jar:/usr/hdp/current/impala-client/lib/commons-digester-1.8.jar:/usr/hdp/current/impala-client/lib/commons-el-1.0.jar:/usr/hdp/current/impala-client/lib/commons-httpclient-3.1.jar:/usr/hdp/current/impala-client/lib/commons-io-2.4.jar:/usr/hdp/current/impala-client/lib/commons-lang-2.6.jar:/usr/hdp/current/impala-client/lib/commons-lang3-3.1.jar:/usr/hdp/current/impala-client/lib/commons-logging-1.1.3.jar:/usr/hdp/current/impala-client/lib/commons-math-2.2.jar:/usr/hdp/current/impala-client/lib/commons-math3-3.1.1.jar:/usr/hdp/current/impala-client/lib/commons-net-3.1.jar:/usr/hdp/current/impala-client/lib/commons-pool-1.5.4.jar:/usr/hdp/current/impala-client/lib/commons-pool2-2.4.2.jar:/usr/hdp/current/impala-client/lib/core-3.1.1.jar:/usr/hdp/current/impala-client/lib/curator-client-2.7.1.jar:/usr/hdp/current/impala-client/lib/curator-framework-2.7.1.jar:/usr/hdp/current/impala-client/lib/curator-recipes-2.7.1.jar:/usr/hdp/current/impala-client/lib/curator-test-2.11.1.jar:/usr/hdp/current/impala-client/lib/curator-x-discovery-2.11.1.jar:/usr/hdp/current/impala-client/lib/datanucleus-api-jdo-3.2.6.jar:/usr/hdp/current/impala-client/lib/datanucleus-core-3.2.12.jar:/usr/hdp/current/impala-client/lib/datanucleus-rdbms-3.2.12.jar:/usr/hdp/current/impala-client/lib/derby-10.10.2.0.jar:/usr/hdp/current/impala-client/lib/eigenbase-properties-1.1.4.jar:/usr/hdp/current/impala-client/lib/findbugs-annotations-1.3.9-1.jar:/usr/hdp/current/impala-client/lib/flatbuffers-java-1.6.0.1.jar:/usr/hdp/current/impala-client/lib/geronimo-annotation_1.0_spec-1.1.1.jar:/usr/hdp/current/impala-client/lib/geronimo-jaspic_1.0_spec-1.0.jar:/usr/hdp/current/impala-client/lib/geronimo-jta_1.1_spec-1.1.1.jar:/usr/hdp/current/impala-client/lib/groovy-all-2.4.4.jar:/usr/hdp/current/impala-client/lib/gson-2.2.4.jar:/usr/hdp/current/impala-client/lib/guava-11.0.2.jar:/usr/hdp/current/impala-client/lib/guice-3.0.jar:/usr/hdp/current/impala-client/lib/guice-servlet-3.0.jar:/usr/hdp/current/impala-client/lib/hadoop-annotations-2.6.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hadoop-archives-2.6.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hadoop-auth-2.6.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hadoop-aws-2.6.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hadoop-azure-datalake-2.6.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hadoop-common-2.6.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hadoop-hdfs-2.6.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hadoop-mapreduce-client-common-2.6.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hadoop-mapreduce-client-core-2.6.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hadoop-mapreduce-client-jobclient-2.6.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hadoop-mapreduce-client-shuffle-2.6.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hadoop-yarn-api-2.6.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hadoop-yarn-client-2.6.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hadoop-yarn-common-2.6.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hadoop-yarn-server-applicationhistoryservice-2.6.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hadoop-yarn-server-common-2.6.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hadoop-yarn-server-nodemanager-2.6.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hadoop-yarn-server-resourcemanager-2.6.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hadoop-yarn-server-web-proxy-2.6.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hbase-annotations-1.2.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hbase-client-1.2.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hbase-common-1.2.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hbase-protocol-1.2.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/high-scale-lib-1.1.1.jar:/usr/hdp/current/impala-client/lib/hive-ant-1.1.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hive-beeline-1.1.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hive-classification-1.1.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hive-cli-1.1.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hive-common-1.1.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hive-exec-1.1.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hive-hbase-handler-1.1.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hive-hcatalog-core-1.1.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hive-hcatalog-server-extensions-1.1.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hive-metastore-1.1.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hive-serde-1.1.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hive-service-1.1.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hive-shims-1.1.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hive-shims-common-1.1.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hive-shims-scheduler-1.1.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/hsqldb-1.8.0.10.jar:/usr/hdp/current/impala-client/lib/htrace-core-3.2.0-incubating.jar:/usr/hdp/current/impala-client/lib/htrace-core4-4.0.1-incubating.jar:/usr/hdp/current/impala-client/lib/httpclient-4.2.5.jar:/usr/hdp/current/impala-client/lib/httpcore-4.2.5.jar:/usr/hdp/current/impala-client/lib/impala-data-source-api-1.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/impala-frontend-0.1-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/ivy-2.4.0.jar:/usr/hdp/current/impala-client/lib/jackson-annotations-2.2.3.jar:/usr/hdp/current/impala-client/lib/jackson-core-2.2.3.jar:/usr/hdp/current/impala-client/lib/jackson-core-asl-1.9.13.jar:/usr/hdp/current/impala-client/lib/jackson-databind-2.2.3.jar:/usr/hdp/current/impala-client/lib/jackson-jaxrs-1.8.3.jar:/usr/hdp/current/impala-client/lib/jackson-mapper-asl-1.9.13.jar:/usr/hdp/current/impala-client/lib/jackson-xc-1.8.3.jar:/usr/hdp/current/impala-client/lib/jamon-runtime-2.3.1.jar:/usr/hdp/current/impala-client/lib/janino-2.7.6.jar:/usr/hdp/current/impala-client/lib/jasper-compiler-5.5.23.jar:/usr/hdp/current/impala-client/lib/jasper-runtime-5.5.23.jar:/usr/hdp/current/impala-client/lib/java-cup-0.11-a-czt02-cdh.jar:/usr/hdp/current/impala-client/lib/java-cup-runtime-0.11-a-czt01-cdh.jar:/usr/hdp/current/impala-client/lib/javassist-3.18.1-GA.jar:/usr/hdp/current/impala-client/lib/javax.inject-1.jar:/usr/hdp/current/impala-client/lib/javax.jdo-3.2.0-m3.jar:/usr/hdp/current/impala-client/lib/javax.json-1.0.2.jar:/usr/hdp/current/impala-client/lib/java-xmlbuilder-0.4.jar:/usr/hdp/current/impala-client/lib/javax.servlet-2.5.0.v201103041518.jar:/usr/hdp/current/impala-client/lib/jaxb-api-2.2.2.jar:/usr/hdp/current/impala-client/lib/jaxb-impl-2.2.3-1.jar:/usr/hdp/current/impala-client/lib/jcodings-1.0.8.jar:/usr/hdp/current/impala-client/lib/jdo-api-3.0.1.jar:/usr/hdp/current/impala-client/lib/jersey-client-1.9.jar:/usr/hdp/current/impala-client/lib/jersey-core-1.9.jar:/usr/hdp/current/impala-client/lib/jersey-guice-1.9.jar:/usr/hdp/current/impala-client/lib/jersey-json-1.9.jar:/usr/hdp/current/impala-client/lib/jersey-server-1.9.jar:/usr/hdp/current/impala-client/lib/jersey-servlet-1.14.jar:/usr/hdp/current/impala-client/lib/jets3t-0.9.0.jar:/usr/hdp/current/impala-client/lib/jettison-1.1.jar:/usr/hdp/current/impala-client/lib/jetty-6.1.26.cloudera.4.jar:/usr/hdp/current/impala-client/lib/jetty-all-7.6.0.v20120127.jar:/usr/hdp/current/impala-client/lib/jetty-continuation-7.6.16.v20140903.jar:/usr/hdp/current/impala-client/lib/jetty-http-7.6.16.v20140903.jar:/usr/hdp/current/impala-client/lib/jetty-io-7.6.16.v20140903.jar:/usr/hdp/current/impala-client/lib/jetty-security-7.6.16.v20140903.jar:/usr/hdp/current/impala-client/lib/jetty-server-7.6.16.v20140903.jar:/usr/hdp/current/impala-client/lib/jetty-servlet-7.6.16.v20140903.jar:/usr/hdp/current/impala-client/lib/jetty-util-6.1.26.cloudera.4.jar:/usr/hdp/current/impala-client/lib/jetty-util-7.6.16.v20140903.jar:/usr/hdp/current/impala-client/lib/jline-2.12.jar:/usr/hdp/current/impala-client/lib/jms-1.1.jar:/usr/hdp/current/impala-client/lib/joda-time-2.8.1.jar:/usr/hdp/current/impala-client/lib/joni-2.1.2.jar:/usr/hdp/current/impala-client/lib/jpam-1.1.jar:/usr/hdp/current/impala-client/lib/jsch-0.1.42.jar:/usr/hdp/current/impala-client/lib/json-simple-1.1.1.jar:/usr/hdp/current/impala-client/lib/jsp-api-2.1.jar:/usr/hdp/current/impala-client/lib/jsr305-3.0.0.jar:/usr/hdp/current/impala-client/lib/jta-1.1.jar:/usr/hdp/current/impala-client/lib/kudu-client-1.7.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/leveldbjni-all-1.8.jar:/usr/hdp/current/impala-client/lib/libfb303-0.9.0.jar:/usr/hdp/current/impala-client/lib/libgcc_s.so.1:/usr/hdp/current/impala-client/lib/libhadoop.so:/usr/hdp/current/impala-client/lib/libhadoop.so.1.0.0:/usr/hdp/current/impala-client/lib/libhdfs.so:/usr/hdp/current/impala-client/lib/libhdfs.so.0.0.0:/usr/hdp/current/impala-client/lib/libkudu_client.so.0:/usr/hdp/current/impala-client/lib/libkudu_client.so.0.1.0:/usr/hdp/current/impala-client/lib/libstdc++.so.6:/usr/hdp/current/impala-client/lib/libstdc++.so.6.0.20:/usr/hdp/current/impala-client/lib/libthrift-0.9.0.jar:/usr/hdp/current/impala-client/lib/log4j-1.2.17.jar:/usr/hdp/current/impala-client/lib/logredactor-1.0.3.jar:/usr/hdp/current/impala-client/lib/mail-1.4.1.jar:/usr/hdp/current/impala-client/lib/metrics-core-2.2.0.jar:/usr/hdp/current/impala-client/lib/metrics-core-3.0.2.jar:/usr/hdp/current/impala-client/lib/metrics-core-3.2.2.jar:/usr/hdp/current/impala-client/lib/metrics-healthchecks-3.0.2.jar:/usr/hdp/current/impala-client/lib/metrics-json-3.0.2.jar:/usr/hdp/current/impala-client/lib/metrics-jvm-3.0.2.jar:/usr/hdp/current/impala-client/lib/metrics-servlets-3.0.2.jar:/usr/hdp/current/impala-client/lib/mockito-all-1.9.5.jar:/usr/hdp/current/impala-client/lib/netty-3.10.5.Final.jar:/usr/hdp/current/impala-client/lib/netty-all-4.0.23.Final.jar:/usr/hdp/current/impala-client/lib/okhttp-2.4.0.jar:/usr/hdp/current/impala-client/lib/okio-1.4.0.jar:/usr/hdp/current/impala-client/lib/opencsv-2.3.jar:/usr/hdp/current/impala-client/lib/oro-2.0.8.jar:/usr/hdp/current/impala-client/lib/paranamer-2.3.jar:/usr/hdp/current/impala-client/lib/parquet-hadoop-bundle-1.5.0-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/pentaho-aggdesigner-algorithm-5.1.5-jhyde.jar:/usr/hdp/current/impala-client/lib/postgresql-9.0-801.jdbc4.jar:/usr/hdp/current/impala-client/lib/protobuf-java-2.5.0.jar:/usr/hdp/current/impala-client/lib/sentry-binding-hive-1.5.1-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/sentry-binding-hive-conf-1.5.1-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/sentry-binding-hive-follower-1.5.1-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/sentry-core-common-1.5.1-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/sentry-core-model-db-1.5.1-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/sentry-core-model-indexer-1.5.1-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/sentry-core-model-kafka-1.5.1-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/sentry-core-model-search-1.5.1-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/sentry-hdfs-common-1.5.1-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/sentry-policy-common-1.5.1-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/sentry-policy-db-1.5.1-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/sentry-policy-indexer-1.5.1-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/sentry-policy-kafka-1.5.1-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/sentry-policy-search-1.5.1-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/sentry-provider-cache-1.5.1-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/sentry-provider-common-1.5.1-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/sentry-provider-db-1.5.1-cdh5.15.0-SNAPSHOT-sh.jar:/usr/hdp/current/impala-client/lib/sentry-provider-file-1.5.1-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/servlet-api-2.5.jar:/usr/hdp/current/impala-client/lib/shiro-core-1.2.3.jar:/usr/hdp/current/impala-client/lib/slf4j-api-1.7.25.jar:/usr/hdp/current/impala-client/lib/slf4j-log4j12-1.7.25.jar:/usr/hdp/current/impala-client/lib/snappy-java-1.0.4.1.jar:/usr/hdp/current/impala-client/lib/ST4-4.0.4.jar:/usr/hdp/current/impala-client/lib/stax-api-1.0.1.jar:/usr/hdp/current/impala-client/lib/stax-api-1.0-2.jar:/usr/hdp/current/impala-client/lib/stringtemplate-3.2.1.jar:/usr/hdp/current/impala-client/lib/super-csv-2.2.0.jar:/usr/hdp/current/impala-client/lib/transaction-api-1.1.jar:/usr/hdp/current/impala-client/lib/velocity-1.5.jar:/usr/hdp/current/impala-client/lib/xercesImpl-2.9.1.jar:/usr/hdp/current/impala-client/lib/xml-apis-1.3.04.jar:/usr/hdp/current/impala-client/lib/xmlenc-0.52.jar:/usr/hdp/current/impala-client/lib/xz-1.0.jar:/usr/hdp/current/impala-client/lib/yarn-extras-0.1-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/zookeeper-3.4.5-cdh5.15.0-SNAPSHOT.jar:/usr/hdp/current/impala-client/lib/:/usr/hdp/current/impala-client/lib/openssl::/usr/hdp/current/impala-client/lib/libcrypto.so:/usr/hdp/current/impala-client/lib/libcrypto.so.1.0.0:/usr/hdp/current/impala-client/lib/libssl.so:/usr/hdp/current/impala-client/lib/libssl.so.1.0.0::
java.vm.vendor:Oracle Corporation
sun.arch.data.model:64
java.vendor.url:http://java.oracle.com/
user.timezone:Asia/Chungking
os.name:Linux
java.vm.specification.version:1.8
user.country:US
sun.boot.library.path:/usr/local/jdk/jre/lib/amd64
sun.cpu.endian:little
user.home:/var/lib/impala
user.language:en
java.specification.vendor:Oracle Corporation
java.home:/usr/local/jdk/jre
file.separator:/
line.separator:

java.vm.specification.vendor:Oracle Corporation
java.specification.name:Java Platform API Specification
java.awt.graphicsenv:sun.awt.X11GraphicsEnvironment
sun.boot.class.path:/usr/local/jdk/jre/lib/resources.jar:/usr/local/jdk/jre/lib/rt.jar:/usr/local/jdk/jre/lib/sunrsasign.jar:/usr/local/jdk/jre/lib/jsse.jar:/usr/local/jdk/jre/lib/jce.jar:/usr/local/jdk/jre/lib/charsets.jar:/usr/local/jdk/jre/lib/jfr.jar:/usr/local/jdk/jre/classes
sun.management.compiler:HotSpot 64-Bit Tiered Compilers
java.runtime.version:1.8.0_161-b12
user.name:impala
path.separator::
os.version:2.6.32-696.el6.x86_64
java.endorsed.dirs:/usr/local/jdk/jre/lib/endorsed
java.runtime.name:Java(TM) SE Runtime Environment
file.encoding:ANSI_X3.4-1968
java.vm.name:Java HotSpot(TM) 64-Bit Server VM
java.vendor.url.bug:http://bugreport.sun.com/bugreport/
java.io.tmpdir:/tmp
java.version:1.8.0_161
user.dir:/var/lib/impala
os.arch:amd64
java.vm.specification.name:Java Virtual Machine Specification
java.awt.printerjob:sun.print.PSPrinterJob
sun.os.patch.level:unknown
java.library.path:/usr/hdp/current/impala-client/lib
java.vm.info:mixed mode
java.vendor:Oracle Corporation
java.vm.version:25.161-b12
java.ext.dirs:/usr/local/jdk/jre/lib/ext:/usr/java/packages/lib/ext
sun.io.unicode.encoding:UnicodeLittle
java.class.version:52.0
W0825 11:44:10.639098 43376 HiveConf.java:2897] HiveConf of name hive.async.log.enabled does not exist
W0825 11:44:10.639830 43376 HiveConf.java:2897] HiveConf of name hive.default.fileformat.managed does not exist
I0825 11:44:10.840791 43376 SimpleFileProviderBackend.java:151] Parsing /user/impala/impala-policy.ini
I0825 11:44:10.841038 43376 SimpleFileProviderBackend.java:152] Filesystem: hdfs://cluster1
I0825 11:44:12.392230 43376 SimpleFileProviderBackend.java:181] Section databases needs no further processing
I0825 11:44:13.314707 43376 exec-env.cc:176] Using KRPC.
I0825 11:44:13.341221 43376 AllocationFileLoaderService.java:212] Loading allocation file /etc/impala/conf/fair-scheduler.xml
I0825 11:44:13.380331 43660 AllocationFileLoaderService.java:212] Loading allocation file /etc/impala/conf/fair-scheduler.xml
I0825 11:44:13.381739 43661 RequestPoolService.java:151] Loading Llama configuration: /etc/impala/conf/llama-site.xml
W0825 11:44:13.425139 43376 openssl_util.cc:107] It appears that OpenSSL has been previously initialized by code outside of Kudu. Please use kudu::client::DisableOpenSSLInitialization() to avoid potential crashes due to conflicting initialization.
I0825 11:44:13.433257 43376 rpc-mgr.cc:148] Registered KRPC service: impala.DataStreamService
I0825 11:44:13.434083 43376 exec-env.cc:364] Using global memory limit: 290.00 GB
I0825 11:44:13.434109 43376 exec-env.cc:366] Buffer pool limit: 246.50 GB
I0825 11:44:13.437327 43376 webserver.cc:223] Starting webserver on 0.0.0.0:25000
I0825 11:44:13.437366 43376 webserver.cc:237] Document root: /usr/hdp/current/impala-client
I0825 11:44:13.437636 43376 webserver.cc:327] Webserver started
I0825 11:44:13.437696 43376 scheduler.cc:68] Starting scheduler
I0825 11:44:13.437716 43376 scheduler.cc:74] Scheduler using 11.11.206.249 as IP address
I0825 11:44:13.461622 43376 impala-server.cc:1246] Default query options:TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 0,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:13.489447 43376 tmp-file-mgr.cc:122] Using scratch directory /data1/impalad/impala-scratch on disk 12
I0825 11:44:13.504999 43376 tmp-file-mgr.cc:122] Using scratch directory /data10/impalad/impala-scratch on disk 4
I0825 11:44:13.531870 43376 tmp-file-mgr.cc:122] Using scratch directory /data11/impalad/impala-scratch on disk 5
I0825 11:44:13.562351 43376 tmp-file-mgr.cc:122] Using scratch directory /data12/impalad/impala-scratch on disk 7
I0825 11:44:13.579728 43376 tmp-file-mgr.cc:122] Using scratch directory /data2/impalad/impala-scratch on disk 11
I0825 11:44:13.617111 43376 tmp-file-mgr.cc:122] Using scratch directory /data3/impalad/impala-scratch on disk 1
I0825 11:44:13.622714 43376 tmp-file-mgr.cc:122] Using scratch directory /data4/impalad/impala-scratch on disk 2
I0825 11:44:13.683423 43376 tmp-file-mgr.cc:122] Using scratch directory /data5/impalad/impala-scratch on disk 3
I0825 11:44:13.742345 43376 tmp-file-mgr.cc:122] Using scratch directory /data6/impalad/impala-scratch on disk 10
I0825 11:44:13.798453 43376 tmp-file-mgr.cc:122] Using scratch directory /data7/impalad/impala-scratch on disk 6
I0825 11:44:13.845737 43376 tmp-file-mgr.cc:122] Using scratch directory /data8/impalad/impala-scratch on disk 9
I0825 11:44:13.909694 43376 tmp-file-mgr.cc:122] Using scratch directory /data9/impalad/impala-scratch on disk 8
I0825 11:44:13.910111 43376 simple-logger.cc:83] Logging to: /var/log/impala/profiles//impala_profile_log_1.1-1661399053909
I0825 11:44:13.910281 43376 impala-server.cc:541] Event logging is disabled
I0825 11:44:13.910302 43376 impala-server.cc:449] Lineage logging is disabled
I0825 11:44:13.931499 43376 exec-env.cc:402] Starting statestore subscriber service
I0825 11:44:13.931607 43376 statestore-subscriber.cc:196] Starting statestore subscriber
I0825 11:44:13.934034 43376 thrift-server.cc:454] ThriftServer 'StatestoreSubscriber' started on port: 23000
I0825 11:44:13.934103 43376 statestore-subscriber.cc:223] Registering with statestore
I0825 11:44:13.940809 43376 statestore-subscriber.cc:181] Subscriber registration ID: 974ddf6b1fb50f51:439a3ce3f617088c
I0825 11:44:13.940960 43376 statestore-subscriber.cc:227] statestore registration successful
I0825 11:44:13.941313 43376 Frontend.java:791] Waiting for first catalog update from the statestore.
I0825 11:44:13.941460 43376 Frontend.java:800] Waiting for local catalog to be initialized, attempt: 0
I0825 11:44:13.951560 43934 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp009@PANEL.COM" on an internal connection
I0825 11:44:13.961994 43934 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp009@PANEL.COM" on an internal connection
I0825 11:44:14.066150 43934 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp009@PANEL.COM" on an internal connection
W0825 11:44:14.094055 43937 HiveConf.java:2897] HiveConf of name hive.async.log.enabled does not exist
W0825 11:44:14.094491 43937 HiveConf.java:2897] HiveConf of name hive.default.fileformat.managed does not exist
I0825 11:44:15.942932 43376 Frontend.java:800] Waiting for local catalog to be initialized, attempt: 1
I0825 11:44:16.390260 43937 SimpleFileProviderBackend.java:151] Parsing /user/impala/impala-policy.ini
I0825 11:44:16.390468 43937 SimpleFileProviderBackend.java:152] Filesystem: hdfs://cluster1
I0825 11:44:17.604522 43937 SimpleFileProviderBackend.java:181] Section databases needs no further processing
I0825 11:44:17.943527 43376 Frontend.java:796] Local catalog initialized after: 4002 ms.
I0825 11:44:17.949518 43376 impala-server.cc:2086] Initialized coordinator/executor Impala server on e4bdhpp025:22000
I0825 11:44:17.949561 43376 exec-env.cc:418] Starting KRPC service
I0825 11:44:17.951794 43376 rpc-mgr.cc:168] Started 2 acceptor threads
I0825 11:44:17.952081 43376 thrift-server.cc:454] ThriftServer 'backend' started on port: 22000
I0825 11:44:17.952111 43376 impala-server.cc:2093] Impala InternalService listening on 22000
I0825 11:44:17.952363 43376 thrift-server.cc:454] ThriftServer 'hiveserver2-frontend' started on port: 21050
I0825 11:44:17.952389 43376 impala-server.cc:2097] Impala HiveServer2 Service listening on 21050
I0825 11:44:17.952589 43376 thrift-server.cc:454] ThriftServer 'beeswax-frontend' started on port: 21000
I0825 11:44:17.952618 43376 impala-server.cc:2101] Impala Beeswax Service listening on 21000
I0825 11:44:17.952638 43376 impala-server.cc:2105] Impala has started.
I0825 11:44:18.750058 43937 impala-server.cc:1399] Catalog topic update applied with version: 866831 new min catalog object version: 749205
I0825 11:44:29.108623 44128 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp023@PANEL.COM" on an internal connection
I0825 11:44:29.109779 44439 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=3f4fe8d6be4b062b:8ba1f28f00000000
I0825 11:44:29.109848 44439 query-exec-mgr.cc:46] StartQueryFInstances() query_id=3f4fe8d6be4b062b:8ba1f28f00000000 coord=e4bdhpp023:22000
I0825 11:44:29.109911 44439 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:44:29.109927 44439 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:44:29.109951 44439 query-state.cc:178] Buffer pool limit for 3f4fe8d6be4b062b:8ba1f28f00000000: 819200000
I0825 11:44:29.109990 44439 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 3f4fe8d6be4b062b:8ba1f28f00000000
I0825 11:44:29.110069 44440 query-state.cc:300] StartFInstances(): query_id=3f4fe8d6be4b062b:8ba1f28f00000000 #instances=1
I0825 11:44:29.110330 44440 query-state.cc:313] descriptor table for query=3f4fe8d6be4b062b:8ba1f28f00000000
tuples:
Tuple(id=0 size=583 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=576 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=576 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=STRING col_path=[10] offset=32 null=(offset=576 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[48] offset=48 null=(offset=576 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=STRING col_path=[39] offset=64 null=(offset=576 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=BIGINT col_path=[29] offset=352 null=(offset=578 mask=40) slot_idx=22 field_idx=-1), Slot(id=6 type=STRING col_path=[11] offset=80 null=(offset=576 mask=20) slot_idx=5 field_idx=-1), Slot(id=7 type=STRING col_path=[12] offset=96 null=(offset=576 mask=40) slot_idx=6 field_idx=-1), Slot(id=8 type=STRING col_path=[13] offset=112 null=(offset=576 mask=80) slot_idx=7 field_idx=-1), Slot(id=9 type=STRING col_path=[38] offset=128 null=(offset=577 mask=1) slot_idx=8 field_idx=-1), Slot(id=10 type=STRING col_path=[43] offset=144 null=(offset=577 mask=2) slot_idx=9 field_idx=-1), Slot(id=11 type=TIMESTAMP col_path=[15] offset=160 null=(offset=577 mask=4) slot_idx=10 field_idx=-1), Slot(id=12 type=TIMESTAMP col_path=[16] offset=176 null=(offset=577 mask=8) slot_idx=11 field_idx=-1), Slot(id=13 type=DECIMAL(16,2) col_path=[2] offset=360 null=(offset=578 mask=80) slot_idx=23 field_idx=-1), Slot(id=14 type=DECIMAL(17,2) col_path=[3] offset=368 null=(offset=579 mask=1) slot_idx=24 field_idx=-1), Slot(id=15 type=DECIMAL(17,2) col_path=[4] offset=376 null=(offset=579 mask=2) slot_idx=25 field_idx=-1), Slot(id=16 type=DECIMAL(17,2) col_path=[5] offset=384 null=(offset=579 mask=4) slot_idx=26 field_idx=-1), Slot(id=17 type=DOUBLE col_path=[6] offset=392 null=(offset=579 mask=8) slot_idx=27 field_idx=-1), Slot(id=18 type=DECIMAL(27,2) col_path=[7] offset=192 null=(offset=577 mask=10) slot_idx=12 field_idx=-1), Slot(id=19 type=BIGINT col_path=[25] offset=400 null=(offset=579 mask=10) slot_idx=28 field_idx=-1), Slot(id=20 type=BIGINT col_path=[27] offset=408 null=(offset=579 mask=20) slot_idx=29 field_idx=-1), Slot(id=21 type=DECIMAL(26,2) col_path=[28] offset=208 null=(offset=577 mask=20) slot_idx=13 field_idx=-1), Slot(id=22 type=DOUBLE col_path=[8] offset=416 null=(offset=579 mask=40) slot_idx=30 field_idx=-1), Slot(id=23 type=DECIMAL(27,2) col_path=[9] offset=224 null=(offset=577 mask=40) slot_idx=14 field_idx=-1), Slot(id=24 type=BIGINT col_path=[26] offset=424 null=(offset=579 mask=80) slot_idx=31 field_idx=-1), Slot(id=25 type=BIGINT col_path=[17] offset=432 null=(offset=580 mask=1) slot_idx=32 field_idx=-1), Slot(id=26 type=INT col_path=[18] offset=568 null=(offset=582 mask=2) slot_idx=49 field_idx=-1), Slot(id=27 type=DECIMAL(26,2) col_path=[41] offset=240 null=(offset=577 mask=80) slot_idx=15 field_idx=-1), Slot(id=28 type=DOUBLE col_path=[49] offset=440 null=(offset=580 mask=2) slot_idx=33 field_idx=-1), Slot(id=29 type=BIGINT col_path=[42] offset=448 null=(offset=580 mask=4) slot_idx=34 field_idx=-1), Slot(id=30 type=BIGINT col_path=[44] offset=456 null=(offset=580 mask=8) slot_idx=35 field_idx=-1), Slot(id=31 type=BIGINT col_path=[21] offset=464 null=(offset=580 mask=10) slot_idx=36 field_idx=-1), Slot(id=32 type=BIGINT col_path=[22] offset=472 null=(offset=580 mask=20) slot_idx=37 field_idx=-1), Slot(id=33 type=DOUBLE col_path=[45] offset=480 null=(offset=580 mask=40) slot_idx=38 field_idx=-1), Slot(id=34 type=BIGINT col_path=[20] offset=488 null=(offset=580 mask=80) slot_idx=39 field_idx=-1), Slot(id=35 type=DOUBLE col_path=[46] offset=496 null=(offset=581 mask=1) slot_idx=40 field_idx=-1), Slot(id=36 type=DOUBLE col_path=[47] offset=504 null=(offset=581 mask=2) slot_idx=41 field_idx=-1), Slot(id=37 type=BIGINT col_path=[19] offset=512 null=(offset=581 mask=4) slot_idx=42 field_idx=-1), Slot(id=38 type=DECIMAL(26,2) col_path=[30] offset=256 null=(offset=578 mask=1) slot_idx=16 field_idx=-1), Slot(id=39 type=DECIMAL(31,4) col_path=[31] offset=272 null=(offset=578 mask=2) slot_idx=17 field_idx=-1), Slot(id=40 type=DECIMAL(26,2) col_path=[23] offset=288 null=(offset=578 mask=4) slot_idx=18 field_idx=-1), Slot(id=41 type=BIGINT col_path=[24] offset=520 null=(offset=581 mask=8) slot_idx=43 field_idx=-1), Slot(id=42 type=BIGINT col_path=[32] offset=528 null=(offset=581 mask=10) slot_idx=44 field_idx=-1), Slot(id=43 type=BIGINT col_path=[33] offset=536 null=(offset=581 mask=20) slot_idx=45 field_idx=-1), Slot(id=44 type=BIGINT col_path=[40] offset=544 null=(offset=581 mask=40) slot_idx=46 field_idx=-1), Slot(id=45 type=BIGINT col_path=[34] offset=552 null=(offset=581 mask=80) slot_idx=47 field_idx=-1), Slot(id=46 type=BIGINT col_path=[35] offset=560 null=(offset=582 mask=1) slot_idx=48 field_idx=-1), Slot(id=47 type=INT col_path=[36] offset=572 null=(offset=582 mask=4) slot_idx=50 field_idx=-1), Slot(id=48 type=STRING col_path=[50] offset=304 null=(offset=578 mask=8) slot_idx=19 field_idx=-1), Slot(id=49 type=STRING col_path=[14] offset=320 null=(offset=578 mask=10) slot_idx=20 field_idx=-1), Slot(id=50 type=STRING col_path=[37] offset=336 null=(offset=578 mask=20) slot_idx=21 field_idx=-1)] tuple_path=[])
I0825 11:44:29.110540 44441 query-state.cc:395] Executing instance. instance_id=3f4fe8d6be4b062b:8ba1f28f00000005 fragment_idx=1 per_fragment_instance_idx=4 coord_state_idx=5 #in-flight=1
I0825 11:44:29.110735 44441 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '3f4fe8d6be4b062b:8ba1f28f00000005': 190
I0825 11:44:29.129776 44440 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3f4fe8d6be4b062b:8ba1f28f00000000 refcnt=2
W0825 11:44:29.166950 43858 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:44:29.169010 43858 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297896886_BP-1820042964-11.11.206.232-1548063025113
W0825 11:44:29.169198 43831 ShortCircuitCache.java:773] ShortCircuitCache(0x45360bf1): failed to get 1297896886_BP-1820042964-11.11.206.232-1548063025113
I0825 11:44:29.939241 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:44:29.939814 44634 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:44:29.954123 44634 impala-hs2-server.cc:539] GetTables(): request=TGetTablesReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x8b\xd1\xe49$\xe1O\t\xa7\x9a\xd5\x01\xb1)\xc3\xe7",
      02: secret (string) = "\x92\x8b\xe5T\xbc\xbbN\x0f\xa0O\xc2\xed\xb0M\x88\x03",
    },
  },
  03: schemaName (string) = "dw20",
}
I0825 11:44:30.313776 44634 impala-hs2-server.cc:552] GetTables(): return_val=TGetTablesResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xd9h\xa6$SMM\xc9\x00\x00\x00\x00\x16\x10\xb8X",
      02: secret (string) = "\xd9h\xa6$SMM\xc9\x00\x00\x00\x00\x16\x10\xb8X",
    },
    02: operationType (i32) = 4,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:44:30.316984 44634 impala-hs2-server.cc:683] CloseOperation(): query_id=c94d4d5324a668d9:58b8101600000000
I0825 11:44:30.317062 44634 impala-server.cc:1015] UnregisterQuery(): query_id=c94d4d5324a668d9:58b8101600000000
I0825 11:44:30.317201 44634 impala-server.cc:1102] Cancel(): query_id=c94d4d5324a668d9:58b8101600000000
I0825 11:44:30.334690 44634 impala-hs2-server.cc:539] GetTables(): request=TGetTablesReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x8b\xd1\xe49$\xe1O\t\xa7\x9a\xd5\x01\xb1)\xc3\xe7",
      02: secret (string) = "\x92\x8b\xe5T\xbc\xbbN\x0f\xa0O\xc2\xed\xb0M\x88\x03",
    },
  },
  03: schemaName (string) = "dw20",
}
I0825 11:44:30.531863 44634 impala-hs2-server.cc:552] GetTables(): return_val=TGetTablesResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xe4\r!U\xcc\xc6K\x05\x00\x00\x00\x00[<\xb8\xd5",
      02: secret (string) = "\xe4\r!U\xcc\xc6K\x05\x00\x00\x00\x00[<\xb8\xd5",
    },
    02: operationType (i32) = 4,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:44:30.535131 44634 impala-hs2-server.cc:683] CloseOperation(): query_id=54bc6cc55210de4:d5b83c5b00000000
I0825 11:44:30.535177 44634 impala-server.cc:1015] UnregisterQuery(): query_id=54bc6cc55210de4:d5b83c5b00000000
I0825 11:44:30.535194 44634 impala-server.cc:1102] Cancel(): query_id=54bc6cc55210de4:d5b83c5b00000000
I0825 11:44:30.544612 44634 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x8b\xd1\xe49$\xe1O\t\xa7\x9a\xd5\x01\xb1)\xc3\xe7",
      02: secret (string) = "\x92\x8b\xe5T\xbc\xbbN\x0f\xa0O\xc2\xed\xb0M\x88\x03",
    },
  },
}
I0825 11:44:30.545389 44634 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:50316 closed, closing 1 associated session(s)
W0825 11:44:31.419371 43864 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:44:31.419631 43864 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297896886_BP-1820042964-11.11.206.232-1548063025113
I0825 11:44:32.356822 44443 runtime-state.cc:170] Error from query 3f4fe8d6be4b062b:8ba1f28f00000000: Memory limit exceeded: Could not allocate string buffer of 9 bytes for ORC file 'hdfs://cluster1/apps/hive/warehouse/dw04_sjfx.db/app_auap_yk_ppl/000001_0'.
HDFS_SCAN_NODE (id=0) could not allocate 9.00 B without exceeding limit.
Error occurred on backend e4bdhpp025:22000 by fragment 3f4fe8d6be4b062b:8ba1f28f00000005
Memory left in process limit: 288.85 GB
Memory left in query limit: 542.32 KB
Query(3f4fe8d6be4b062b:8ba1f28f00000000): Limit=976.56 MB Reservation=0 ReservationLimit=781.25 MB OtherMemory=976.03 MB Total=976.03 MB Peak=976.03 MB
  Fragment 3f4fe8d6be4b062b:8ba1f28f00000005: Reservation=0 OtherMemory=976.03 MB Total=976.03 MB Peak=976.03 MB
    HDFS_SCAN_NODE (id=0): Total=974.46 MB Peak=974.46 MB
      Exprs: Total=4.00 KB Peak=4.00 KB
    KrpcDataStreamSender (dst_id=1): Total=224.00 B Peak=224.00 B
    CodeGen: Total=211.00 B Peak=128.00 KB
I0825 11:44:32.357081 44443 hdfs-scan-node.cc:541] Scan node (id=0) ran into a parse error for scan range hdfs://cluster1/apps/hive/warehouse/dw04_sjfx.db/app_auap_yk_ppl/000001_0(190429715:102400). Processed 0 bytes.
I0825 11:44:34.829249 44439 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=814cbb9e7a17833a:fbb6e2100000000
I0825 11:44:34.829434 44439 query-exec-mgr.cc:46] StartQueryFInstances() query_id=814cbb9e7a17833a:fbb6e2100000000 coord=e4bdhpp023:22000
I0825 11:44:34.829500 44439 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:34.829521 44439 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:34.829548 44439 query-state.cc:178] Buffer pool limit for 814cbb9e7a17833a:fbb6e2100000000: 6871947673
I0825 11:44:34.829615 44439 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 814cbb9e7a17833a:fbb6e2100000000
I0825 11:44:34.829778 44855 query-state.cc:300] StartFInstances(): query_id=814cbb9e7a17833a:fbb6e2100000000 #instances=1
I0825 11:44:34.829869 44855 query-state.cc:313] descriptor table for query=814cbb9e7a17833a:fbb6e2100000000
tuples:
Tuple(id=0 size=97 slots=[Slot(id=2 type=DECIMAL(38,0) col_path=[2] offset=0 null=(offset=96 mask=1) slot_idx=0 field_idx=-1), Slot(id=3 type=STRING col_path=[3] offset=16 null=(offset=96 mask=2) slot_idx=1 field_idx=-1), Slot(id=4 type=DECIMAL(38,0) col_path=[4] offset=32 null=(offset=96 mask=4) slot_idx=2 field_idx=-1), Slot(id=5 type=STRING col_path=[5] offset=48 null=(offset=96 mask=8) slot_idx=3 field_idx=-1), Slot(id=6 type=STRING col_path=[6] offset=64 null=(offset=96 mask=10) slot_idx=4 field_idx=-1), Slot(id=7 type=STRING col_path=[7] offset=80 null=(offset=96 mask=20) slot_idx=5 field_idx=-1)] tuple_path=[])
I0825 11:44:34.830063 44856 query-state.cc:395] Executing instance. instance_id=814cbb9e7a17833a:fbb6e2100000001 fragment_idx=1 per_fragment_instance_idx=0 coord_state_idx=1 #in-flight=2
I0825 11:44:34.830250 44856 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '814cbb9e7a17833a:fbb6e2100000001': 190
I0825 11:44:34.830677 44855 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=814cbb9e7a17833a:fbb6e2100000000 refcnt=2
I0825 11:44:34.830857 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:44:34.831272 44858 impala-hs2-server.cc:270] OpenSession(): username=
W0825 11:44:34.853940 43862 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:44:34.854152 43862 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1324210723_BP-1820042964-11.11.206.232-1548063025113
W0825 11:44:34.854332 43836 ShortCircuitCache.java:773] ShortCircuitCache(0x45360bf1): failed to get 1324210723_BP-1820042964-11.11.206.232-1548063025113
I0825 11:44:34.858392 44858 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xd4\x1a\xb3[\xc3\x9bL\x18\xb8\xe6\xb7\xce\xa5\xde*7",
      02: secret (string) = "\x98\x86\n\xbb\xd30K\x83\xa7D\xeb/-\xfae\x15",
    },
  },
  02: statement (string) = "use dw18_la",
  04: runAsync (bool) = true,
}
I0825 11:44:34.858515 44858 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xd4\x1a\xb3[\xc3\x9bL\x18\xb8\xe6\xb7\xce\xa5\xde*7",
      02: secret (string) = "\x98\x86\n\xbb\xd30K\x83\xa7D\xeb/-\xfae\x15",
    },
  },
  02: statement (string) = "use dw18_la",
  04: runAsync (bool) = true,
}
I0825 11:44:34.893625 44858 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:34.917773 44858 Frontend.java:935] Analyzing query: use dw18_la
I0825 11:44:35.294507 44858 Frontend.java:947] Analysis finished.
I0825 11:44:35.297871 44856 query-state.cc:403] Instance completed. instance_id=814cbb9e7a17833a:fbb6e2100000001 #in-flight=1 status=OK
I0825 11:44:35.297968 44856 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=814cbb9e7a17833a:fbb6e2100000000 refcnt=1
I0825 11:44:35.362305 44858 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xef\xd1\xd7\xf6\xb9tGN\x00\x00\x00\x00X`\xeb9",
      02: secret (string) = "\xef\xd1\xd7\xf6\xb9tGN\x00\x00\x00\x00X`\xeb9",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:44:35.366418 44858 impala-hs2-server.cc:683] CloseOperation(): query_id=4e4774b9f6d7d1ef:39eb605800000000
I0825 11:44:35.366497 44858 impala-server.cc:1015] UnregisterQuery(): query_id=4e4774b9f6d7d1ef:39eb605800000000
I0825 11:44:35.366514 44858 impala-server.cc:1102] Cancel(): query_id=4e4774b9f6d7d1ef:39eb605800000000
I0825 11:44:35.392030 44858 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xd4\x1a\xb3[\xc3\x9bL\x18\xb8\xe6\xb7\xce\xa5\xde*7",
      02: secret (string) = "\x98\x86\n\xbb\xd30K\x83\xa7D\xeb/-\xfae\x15",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:44:35.392102 44858 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xd4\x1a\xb3[\xc3\x9bL\x18\xb8\xe6\xb7\xce\xa5\xde*7",
      02: secret (string) = "\x98\x86\n\xbb\xd30K\x83\xa7D\xeb/-\xfae\x15",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:44:35.392743 44858 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:35.395314 44858 Frontend.java:935] Analyzing query: set mem_limit='8g'
I0825 11:44:35.396405 44858 Frontend.java:947] Analysis finished.
I0825 11:44:35.407907 44858 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "e\xe1\xc7\xeahN@\xc3\x00\x00\x00\x00H\xe7a@",
      02: secret (string) = "e\xe1\xc7\xeahN@\xc3\x00\x00\x00\x00H\xe7a@",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:44:35.411872 44858 impala-hs2-server.cc:683] CloseOperation(): query_id=c3404e68eac7e165:4061e74800000000
I0825 11:44:35.411898 44858 impala-server.cc:1015] UnregisterQuery(): query_id=c3404e68eac7e165:4061e74800000000
I0825 11:44:35.411912 44858 impala-server.cc:1102] Cancel(): query_id=c3404e68eac7e165:4061e74800000000
I0825 11:44:35.417109 44858 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xd4\x1a\xb3[\xc3\x9bL\x18\xb8\xe6\xb7\xce\xa5\xde*7",
      02: secret (string) = "\x98\x86\n\xbb\xd30K\x83\xa7D\xeb/-\xfae\x15",
    },
  },
  02: statement (string) = "DESCRIBE `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120`",
  04: runAsync (bool) = true,
}
I0825 11:44:35.417196 44858 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xd4\x1a\xb3[\xc3\x9bL\x18\xb8\xe6\xb7\xce\xa5\xde*7",
      02: secret (string) = "\x98\x86\n\xbb\xd30K\x83\xa7D\xeb/-\xfae\x15",
    },
  },
  02: statement (string) = "DESCRIBE `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120`",
  04: runAsync (bool) = true,
}
I0825 11:44:35.417558 44858 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:35.419804 44858 Frontend.java:935] Analyzing query: DESCRIBE `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120`
I0825 11:44:35.425268 44858 Frontend.java:947] Analysis finished.
I0825 11:44:35.471907 44858 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xb5\x0e\x1fVj\xd4D\x14\x00\x00\x00\x00\rNZ\xb1",
      02: secret (string) = "\xb5\x0e\x1fVj\xd4D\x14\x00\x00\x00\x00\rNZ\xb1",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:44:35.474628 44858 impala-hs2-server.cc:683] CloseOperation(): query_id=1444d46a561f0eb5:b15a4e0d00000000
I0825 11:44:35.474656 44858 impala-server.cc:1015] UnregisterQuery(): query_id=1444d46a561f0eb5:b15a4e0d00000000
I0825 11:44:35.474675 44858 impala-server.cc:1102] Cancel(): query_id=1444d46a561f0eb5:b15a4e0d00000000
I0825 11:44:35.477617 44858 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xd4\x1a\xb3[\xc3\x9bL\x18\xb8\xe6\xb7\xce\xa5\xde*7",
      02: secret (string) = "\x98\x86\n\xbb\xd30K\x83\xa7D\xeb/-\xfae\x15",
    },
  },
  02: statement (string) = "SELECT COUNT(1) [...](2898)",
  04: runAsync (bool) = true,
}
I0825 11:44:35.477656 44858 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xd4\x1a\xb3[\xc3\x9bL\x18\xb8\xe6\xb7\xce\xa5\xde*7",
      02: secret (string) = "\x98\x86\n\xbb\xd30K\x83\xa7D\xeb/-\xfae\x15",
    },
  },
  02: statement (string) = "SELECT COUNT(1) [...](2898)",
  04: runAsync (bool) = true,
}
I0825 11:44:35.478130 44858 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:35.480484 44858 Frontend.java:935] Analyzing query: SELECT COUNT(1) AS `EXPR_1`  FROM (SELECT `b_la_v_foreign_counterparty_c120`.`oulabel` AS `bi_15518877374181664639` , `b_la_v_foreign_counterparty_c120`.`oulabel_t` AS `bi_10491841080111616035` , `b_la_v_foreign_counterparty_c120`.`contractid` AS `bi_16048134125873699212` , `b_la_v_foreign_counterparty_c120`.`relativorrelationid` AS `bi_11047500209402619491` , `b_la_v_foreign_counterparty_c120`.`counterpartyname` AS `bi_8739345836465617530` , `b_la_v_foreign_counterparty_c120`.`counterpartyname_key` AS `bi_6439070652440084537`  FROM (SELECT `temp_sql_wrapper_table`.`oulabel` AS `oulabel` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`contractid` AS `contractid` , `temp_sql_wrapper_table`.`relativorrelationid` AS `relativorrelationid` , `temp_sql_wrapper_table`.`counterpartyname` AS `counterpartyname` , `temp_sql_wrapper_table`.`counterpartyname_key` AS `counterpartyname_key`  FROM (SELECT `temp_sub_query_table`.`oulabel`, `temp_sub_query_table`.`oulabel_t`, `temp_sub_query_table`.`contractid`, `temp_sub_query_table`.`relativorrelationid`, `temp_sub_query_table`.`counterpartyname`, `temp_sub_query_table`.`counterpartyname_key` FROM (SELECT `b_la_v_foreign_contractrelativorrelation_c120`.`rowkey`, `b_la_v_foreign_contractrelativorrelation_c120`.`id`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`contractid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativorrelationid`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname_key`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_name`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_relativeid`, `b_la_v_foreign_contractrelativorrelation_c120`.`regionsign`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgname`, `b_la_v_foreign_contractrelativorrelation_c120`.`mdmcode`, `b_la_v_foreign_contractrelativorrelation_c120`.`creator`, `b_la_v_foreign_contractrelativorrelation_c120`.`created`, `b_la_v_foreign_contractrelativorrelation_c120`.`editor`, `b_la_v_foreign_contractrelativorrelation_c120`.`edited`, `b_la_v_foreign_contractrelativorrelation_c120`.`isdeleted`, `b_la_v_foreign_contractrelativorrelation_c120`.`etl_date` FROM `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120` `b_la_v_foreign_contractrelativorrelation_c120` ) `temp_sub_query_table` WHERE (`temp_sub_query_table`.`oulabel_t` LIKE '%辽河油田%') ) `temp_sql_wrapper_table`) `b_la_v_foreign_counterparty_c120`) `tableWithoutPaging` 
I0825 11:44:35.574410 44858 Frontend.java:947] Analysis finished.
I0825 11:44:35.626750 44858 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:35.626864 44858 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:35.737309 44858 admission-controller.cc:508] Schedule for id=1b4fa2fe3368c81a:31b7125d00000000 in pool_name=root.default cluster_mem_needed=8.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
I0825 11:44:35.737556 44858 admission-controller.cc:513] Stats: agg_num_running=0, agg_num_queued=0, agg_mem_reserved=0,  local_host(local_mem_admitted=0, num_admitted_running=0, num_queued=0, backend_mem_reserved=0)
I0825 11:44:35.737582 44858 admission-controller.cc:529] Admitted query id=1b4fa2fe3368c81a:31b7125d00000000
I0825 11:44:35.737612 44858 coordinator.cc:93] Exec() query_id=1b4fa2fe3368c81a:31b7125d00000000 stmt=SELECT COUNT(1) AS `EXPR_1`  FROM (SELECT `b_la_v_foreign_counterparty_c120`.`oulabel` AS `bi_15518877374181664639` , `b_la_v_foreign_counterparty_c120`.`oulabel_t` AS `bi_10491841080111616035` , `b_la_v_foreign_counterparty_c120`.`contractid` AS `bi_16048134125873699212` , `b_la_v_foreign_counterparty_c120`.`relativorrelationid` AS `bi_11047500209402619491` , `b_la_v_foreign_counterparty_c120`.`counterpartyname` AS `bi_8739345836465617530` , `b_la_v_foreign_counterparty_c120`.`counterpartyname_key` AS `bi_6439070652440084537`  FROM (SELECT `temp_sql_wrapper_table`.`oulabel` AS `oulabel` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`contractid` AS `contractid` , `temp_sql_wrapper_table`.`relativorrelationid` AS `relativorrelationid` , `temp_sql_wrapper_table`.`counterpartyname` AS `counterpartyname` , `temp_sql_wrapper_table`.`counterpartyname_key` AS `counterpartyname_key`  FROM (SELECT `temp_sub_query_table`.`oulabel`, `temp_sub_query_table`.`oulabel_t`, `temp_sub_query_table`.`contractid`, `temp_sub_query_table`.`relativorrelationid`, `temp_sub_query_table`.`counterpartyname`, `temp_sub_query_table`.`counterpartyname_key` FROM (SELECT `b_la_v_foreign_contractrelativorrelation_c120`.`rowkey`, `b_la_v_foreign_contractrelativorrelation_c120`.`id`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`contractid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativorrelationid`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname_key`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_name`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_relativeid`, `b_la_v_foreign_contractrelativorrelation_c120`.`regionsign`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgname`, `b_la_v_foreign_contractrelativorrelation_c120`.`mdmcode`, `b_la_v_foreign_contractrelativorrelation_c120`.`creator`, `b_la_v_foreign_contractrelativorrelation_c120`.`created`, `b_la_v_foreign_contractrelativorrelation_c120`.`editor`, `b_la_v_foreign_contractrelativorrelation_c120`.`edited`, `b_la_v_foreign_contractrelativorrelation_c120`.`isdeleted`, `b_la_v_foreign_contractrelativorrelation_c120`.`etl_date` FROM `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120` `b_la_v_foreign_contractrelativorrelation_c120` ) `temp_sub_query_table` WHERE (`temp_sub_query_table`.`oulabel_t` LIKE '%辽河油田%') ) `temp_sql_wrapper_table`) `b_la_v_foreign_counterparty_c120`) `tableWithoutPaging` 
I0825 11:44:35.737649 44858 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:35.737666 44858 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:35.737761 44858 coordinator.cc:349] starting execution on 1 backends for query_id=1b4fa2fe3368c81a:31b7125d00000000
I0825 11:44:35.743966 44128 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp025@PANEL.COM" on an internal connection
I0825 11:44:35.744369 44904 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=1b4fa2fe3368c81a:31b7125d00000000
I0825 11:44:35.744411 44904 query-exec-mgr.cc:46] StartQueryFInstances() query_id=1b4fa2fe3368c81a:31b7125d00000000 coord=e4bdhpp025:22000
I0825 11:44:35.744455 44904 query-state.cc:178] Buffer pool limit for 1b4fa2fe3368c81a:31b7125d00000000: 6871947673
I0825 11:44:35.744500 44904 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 1b4fa2fe3368c81a:31b7125d00000000
I0825 11:44:35.744661 44905 query-state.cc:300] StartFInstances(): query_id=1b4fa2fe3368c81a:31b7125d00000000 #instances=2
I0825 11:44:35.744755 44858 coordinator.cc:362] started execution on 1 backends for query_id=1b4fa2fe3368c81a:31b7125d00000000
I0825 11:44:35.744767 44905 query-state.cc:313] descriptor table for query=1b4fa2fe3368c81a:31b7125d00000000
tuples:
Tuple(id=5 size=8 slots=[Slot(id=62 type=BIGINT col_path=[] offset=0 null=(offset=0 mask=0) slot_idx=0 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=17 slots=[Slot(id=3 type=STRING col_path=[3] offset=0 null=(offset=16 mask=1) slot_idx=0 field_idx=-1)] tuple_path=[])
I0825 11:44:35.744931 44906 query-state.cc:395] Executing instance. instance_id=1b4fa2fe3368c81a:31b7125d00000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=0 #in-flight=2
I0825 11:44:35.745180 44907 query-state.cc:395] Executing instance. instance_id=1b4fa2fe3368c81a:31b7125d00000001 fragment_idx=1 per_fragment_instance_idx=0 coord_state_idx=0 #in-flight=3
I0825 11:44:35.745342 44907 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '1b4fa2fe3368c81a:31b7125d00000001': 190
I0825 11:44:35.746003 44905 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=1b4fa2fe3368c81a:31b7125d00000000 refcnt=4
I0825 11:44:35.746174 44858 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x1a\xc8h3\xfe\xa2O\x1b\x00\x00\x00\x00]\x12\xb71",
      02: secret (string) = "\x1a\xc8h3\xfe\xa2O\x1b\x00\x00\x00\x00]\x12\xb71",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
W0825 11:44:35.916972 43857 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:44:35.917213 43857 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1324210723_BP-1820042964-11.11.206.232-1548063025113
I0825 11:44:36.040570 44906 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=1b4fa2fe3368c81a:31b7125d00000000, node=2
I0825 11:44:36.040697 44906 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=1b4fa2fe3368c81a:31b7125d00000000 node_id=2
I0825 11:44:36.041394 44907 query-state.cc:403] Instance completed. instance_id=1b4fa2fe3368c81a:31b7125d00000001 #in-flight=2 status=OK
I0825 11:44:36.041437 44907 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=1b4fa2fe3368c81a:31b7125d00000000 refcnt=3
I0825 11:44:36.042524 44858 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=1b4fa2fe3368c81a:31b7125d00000000
I0825 11:44:36.042630 44858 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[1] {
      [0] = TColumnDesc {
        01: columnName (string) = "expr_1",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
    },
  },
}
I0825 11:44:36.044322 44858 coordinator.cc:527] All backends finished successfully. query_id=1b4fa2fe3368c81a:31b7125d00000000
I0825 11:44:36.044340 44906 query-state.cc:403] Instance completed. instance_id=1b4fa2fe3368c81a:31b7125d00000000 #in-flight=1 status=OK
I0825 11:44:36.044364 44858 coordinator.cc:783] Release admission control resources for query_id=1b4fa2fe3368c81a:31b7125d00000000
I0825 11:44:36.044391 44906 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=1b4fa2fe3368c81a:31b7125d00000000 refcnt=2
I0825 11:44:36.045336 44858 impala-hs2-server.cc:683] CloseOperation(): query_id=1b4fa2fe3368c81a:31b7125d00000000
I0825 11:44:36.045359 44858 impala-server.cc:1015] UnregisterQuery(): query_id=1b4fa2fe3368c81a:31b7125d00000000
I0825 11:44:36.045373 44858 impala-server.cc:1102] Cancel(): query_id=1b4fa2fe3368c81a:31b7125d00000000
I0825 11:44:36.045387 44858 coordinator.cc:629] Cancel() query_id=1b4fa2fe3368c81a:31b7125d00000000
I0825 11:44:36.045415 44858 coordinator.cc:639] CancelBackends() query_id=1b4fa2fe3368c81a:31b7125d00000000, tried to cancel 0 backends
I0825 11:44:36.047655 44858 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=1b4fa2fe3368c81a:31b7125d00000000 refcnt=1
I0825 11:44:36.053656 44858 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xd4\x1a\xb3[\xc3\x9bL\x18\xb8\xe6\xb7\xce\xa5\xde*7",
      02: secret (string) = "\x98\x86\n\xbb\xd30K\x83\xa7D\xeb/-\xfae\x15",
    },
  },
}
I0825 11:44:36.054340 44858 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:51448 closed, closing 1 associated session(s)
I0825 11:44:37.296425 43461 logging-support.cc:297] Old log file deleted during log rotation: /var/log/impala/impalad.e4bdhpp025.impala.log.INFO.20220807-002324.53606
I0825 11:44:37.360599 43461 logging-support.cc:297] Old log file deleted during log rotation: /var/log/impala/impalad.e4bdhpp025.impala.log.WARNING.20220703-120827.17955
I0825 11:44:37.384891 43461 logging-support.cc:297] Old log file deleted during log rotation: /var/log/impala/impalad.e4bdhpp025.impala.log.ERROR.20220703-120827.17955
I0825 11:44:37.394775 43461 minidump.cc:186] Removed old minidump file : "/var/log/impala/minidumps/impalad/8f587549-3a55-4b30-8c496bab-e84186a3.dmp"
I0825 11:44:38.321911 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:44:38.322659 44965 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:44:38.323544 44965 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\b@v\x9d\xe0\xe3H\xce\xb1v3\xda\x01\xce9\x03",
      02: secret (string) = "H\x9e\v\\\x1aRN\x93\x93~\xef\x98]\x184\xad",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:44:38.396747 44965 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\b@v\x9d\xe0\xe3H\xce\xb1v3\xda\x01\xce9\x03",
      02: secret (string) = "H\x9e\v\\\x1aRN\x93\x93~\xef\x98]\x184\xad",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:44:38.396885 44965 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\b@v\x9d\xe0\xe3H\xce\xb1v3\xda\x01\xce9\x03",
      02: secret (string) = "H\x9e\v\\\x1aRN\x93\x93~\xef\x98]\x184\xad",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:44:38.397773 44965 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:38.400130 44965 Frontend.java:935] Analyzing query: use `dw04_sjfx`;
I0825 11:44:38.400660 44965 Frontend.java:947] Analysis finished.
I0825 11:44:38.436887 44965 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xf1\x92\xb6u&1F\xdf\x00\x00\x00\x00\xb0\xabK:",
      02: secret (string) = "\xf1\x92\xb6u&1F\xdf\x00\x00\x00\x00\xb0\xabK:",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:44:38.445888 44965 impala-hs2-server.cc:683] CloseOperation(): query_id=df46312675b692f1:3a4babb000000000
I0825 11:44:38.445955 44965 impala-server.cc:1015] UnregisterQuery(): query_id=df46312675b692f1:3a4babb000000000
I0825 11:44:38.445971 44965 impala-server.cc:1102] Cancel(): query_id=df46312675b692f1:3a4babb000000000
I0825 11:44:38.498649 44965 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\b@v\x9d\xe0\xe3H\xce\xb1v3\xda\x01\xce9\x03",
      02: secret (string) = "H\x9e\v\\\x1aRN\x93\x93~\xef\x98]\x184\xad",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:44:38.498759 44965 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\b@v\x9d\xe0\xe3H\xce\xb1v3\xda\x01\xce9\x03",
      02: secret (string) = "H\x9e\v\\\x1aRN\x93\x93~\xef\x98]\x184\xad",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:44:38.499158 44965 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:38.501720 44965 Frontend.java:935] Analyzing query: set REQUEST_POOL = 'agilebi';
I0825 11:44:38.502053 44965 Frontend.java:947] Analysis finished.
I0825 11:44:38.502418 44965 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "kh,F\xba'L\xcb\x00\x00\x00\x00\xd3\xfdv\xd4",
      02: secret (string) = "kh,F\xba'L\xcb\x00\x00\x00\x00\xd3\xfdv\xd4",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:44:38.504925 44965 impala-hs2-server.cc:683] CloseOperation(): query_id=cb4c27ba462c686b:d476fdd300000000
I0825 11:44:38.504966 44965 impala-server.cc:1015] UnregisterQuery(): query_id=cb4c27ba462c686b:d476fdd300000000
I0825 11:44:38.504982 44965 impala-server.cc:1102] Cancel(): query_id=cb4c27ba462c686b:d476fdd300000000
I0825 11:44:38.520821 44965 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\b@v\x9d\xe0\xe3H\xce\xb1v3\xda\x01\xce9\x03",
      02: secret (string) = "H\x9e\v\\\x1aRN\x93\x93~\xef\x98]\x184\xad",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:44:38.520951 44965 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\b@v\x9d\xe0\xe3H\xce\xb1v3\xda\x01\xce9\x03",
      02: secret (string) = "H\x9e\v\\\x1aRN\x93\x93~\xef\x98]\x184\xad",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:44:38.521221 44965 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:38.523239 44965 Frontend.java:935] Analyzing query: set MEM_LIMIT = 1024000000;
I0825 11:44:38.523459 44965 Frontend.java:947] Analysis finished.
I0825 11:44:38.523725 44965 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x15\x1a\x03\xdd>yI}\x00\x00\x00\x00\x10\x00\xdd\xca",
      02: secret (string) = "\x15\x1a\x03\xdd>yI}\x00\x00\x00\x00\x10\x00\xdd\xca",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:44:38.525961 44965 impala-hs2-server.cc:683] CloseOperation(): query_id=7d49793edd031a15:cadd001000000000
I0825 11:44:38.526012 44965 impala-server.cc:1015] UnregisterQuery(): query_id=7d49793edd031a15:cadd001000000000
I0825 11:44:38.526031 44965 impala-server.cc:1102] Cancel(): query_id=7d49793edd031a15:cadd001000000000
I0825 11:44:38.527721 44965 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\b@v\x9d\xe0\xe3H\xce\xb1v3\xda\x01\xce9\x03",
      02: secret (string) = "H\x9e\v\\\x1aRN\x93\x93~\xef\x98]\x184\xad",
    },
  },
  02: statement (string) = "DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_PPL`",
  04: runAsync (bool) = true,
}
I0825 11:44:38.527758 44965 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\b@v\x9d\xe0\xe3H\xce\xb1v3\xda\x01\xce9\x03",
      02: secret (string) = "H\x9e\v\\\x1aRN\x93\x93~\xef\x98]\x184\xad",
    },
  },
  02: statement (string) = "DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_PPL`",
  04: runAsync (bool) = true,
}
I0825 11:44:38.528002 44965 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:38.530192 44965 Frontend.java:935] Analyzing query: DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_PPL`
I0825 11:44:38.530666 44965 Frontend.java:947] Analysis finished.
I0825 11:44:38.564553 44965 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xd9\xad\x92\t\xfd\x90M1\x00\x00\x00\x00\xc6\xabE\x8c",
      02: secret (string) = "\xd9\xad\x92\t\xfd\x90M1\x00\x00\x00\x00\xc6\xabE\x8c",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:44:38.566927 44965 impala-hs2-server.cc:683] CloseOperation(): query_id=314d90fd0992add9:8c45abc600000000
I0825 11:44:38.567001 44965 impala-server.cc:1015] UnregisterQuery(): query_id=314d90fd0992add9:8c45abc600000000
I0825 11:44:38.567018 44965 impala-server.cc:1102] Cancel(): query_id=314d90fd0992add9:8c45abc600000000
I0825 11:44:38.798993 44965 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\b@v\x9d\xe0\xe3H\xce\xb1v3\xda\x01\xce9\x03",
      02: secret (string) = "H\x9e\v\\\x1aRN\x93\x93~\xef\x98]\x184\xad",
    },
  },
  02: statement (string) = "select   `bi_177[...](15324)",
  04: runAsync (bool) = true,
}
I0825 11:44:38.799088 44965 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\b@v\x9d\xe0\xe3H\xce\xb1v3\xda\x01\xce9\x03",
      02: secret (string) = "H\x9e\v\\\x1aRN\x93\x93~\xef\x98]\x184\xad",
    },
  },
  02: statement (string) = "select   `bi_177[...](15324)",
  04: runAsync (bool) = true,
}
I0825 11:44:38.799468 44965 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:38.801951 44965 Frontend.java:935] Analyzing query: select   `bi_1777753835894362515`.`帐号` as `bi_4405066279117047118` , `bi_1777753835894362515`.`卡号` as `bi_10248578450533883095` , `bi_1777753835894362515`.`卡类型描述` as `bi_6246159538240244065` , `bi_1777753835894362515`.`是否为副卡` as `bi_13540389403478941567` , `bi_1777753835894362515`.`交易主要站点` as `bi_2740263195203761510` , `bi_1777753835894362515`.`个人卡消费过加油站站点数量` as `bi_3616459640308034135` , `bi_1777753835894362515`.`交易类型描述` as `bi_10331142289063080322` , `bi_1777753835894362515`.`商品类型` as `bi_8759647043076232228` , `bi_1777753835894362515`.`商品类型描述` as `bi_14353747127936749017` , `bi_1777753835894362515`.`发卡单位` as `bi_10646976700040736340` , `bi_1777753835894362515`.`发卡单位与销售单位是否一致` as `bi_3120723227421642544` , `bi_1777753835894362515`.`首次交易日期` as `bi_14455382331679438995` , `bi_1777753835894362515`.`最近交易日期` as `bi_5478771142720032093` , `bi_1777753835894362515`.`平均油量升数` as `bi_617034579827635996` , `bi_1777753835894362515`.`平均消费金额` as `bi_15112077538935800504` , `bi_1777753835894362515`.`平均折扣金额` as `bi_3277906557631314998` , `bi_1777753835894362515`.`平均余额` as `bi_15647197458875151506` , `bi_1777753835894362515`.`日均消费笔数` as `bi_7064249764713199839` , `bi_1777753835894362515`.`日均消费金额` as `bi_10854565843347455823` , `bi_1777753835894362515`.`单日消费次数过多次数` as `bi_2261074975467520775` , `bi_1777753835894362515`.`个人卡夜间消费总次数` as `bi_11404968094779050130` , `bi_1777753835894362515`.`个人卡夜间消费总金额` as `bi_15065943078847283073` , `bi_1777753835894362515`.`日均夜间消费笔数` as `bi_15868460132744503901` , `bi_1777753835894362515`.`日均夜间消费金额` as `bi_15516783331422952374` , `bi_1777753835894362515`.`单日夜间消费次数过多次数` as `bi_16171388146955820514` , `bi_1777753835894362515`.`睡眠次数` as `bi_17048143494310675370` , `bi_1777753835894362515`.`是否仍在睡眠` as `bi_15197978810704604447` , `bi_1777753835894362515`.`个人卡累计消费金额` as `bi_7591110132802393138` , `bi_1777753835894362515`.`个人卡消费金额方差` as `bi_160391765441068244` , `bi_1777753835894362515`.`个人卡累计消费次数` as `bi_4156841468949947680` , `bi_1777753835894362515`.`个人卡消费金额为小数次数` as `bi_9794343777229462837` , `bi_1777753835894362515`.`个人卡消费过油品类型数量` as `bi_10293590438327478000` , `bi_1777753835894362515`.`个人卡消费过汽油品类型数量` as `bi_1177732512630799779` , `bi_1777753835894362515`.`个人卡汽油消费次数占比` as `bi_11456242312036654846` , `bi_1777753835894362515`.`个人卡汽油单笔高额消费次数` as `bi_9834182397780633995` , `bi_1777753835894362515`.`个人卡柴油消费次数占比` as `bi_6459884238352011348` , `bi_1777753835894362515`.`个人卡天然气消费次数占比` as `bi_16651092651258988174` , `bi_1777753835894362515`.`ic卡大额非油消费次数` as `bi_7054304210906615051` , `bi_1777753835894362515`.`非油累计消费金额` as `bi_16397999138841287705` , `bi_1777753835894362515`.`非油与成品油消费金额比例` as `bi_4542996461810298499` , `bi_1777753835894362515`.`个人卡累计充值金额` as `bi_4841881326785682188` , `bi_1777753835894362515`.`单日充值次数过多次数` as `bi_9422150591649301309` , `bi_1777753835894362515`.`即消费且余额低的次数831743621` as `bi_16833265966592949464` , `bi_1777753835894362515`.`同一班次消费的次数` as `bi_11088153473180053847` , `bi_1777753835894362515`.`密码重置次数` as `bi_3598974696379994152` , `bi_1777753835894362515`.`笔折扣额的消费的次数_2085032453` as `bi_5097711375700122218` , `bi_1777753835894362515`.`个人卡余额充足时充钱的次数` as `bi_8205063281634656287` , `bi_1777753835894362515`.`是否曾频繁转账` as `bi_14482952946536492029` , `bi_1777753835894362515`.`是否异常加油卡` as `bi_8782608630523284142` , `bi_1777753835894362515`.`单位名称` as `bi_14261383855208495737` , `bi_1777753835894362515`.`所属` as `bi_7873307995921860050` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_1777753835894362515`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_8081399462078118933` , TRIM(`bi_1777753835894362515`.`交易主要站点`) as `bi_616911404683852598`   from (select   `bi_152610414374251569`.`帐号` as `帐号` , `bi_152610414374251569`.`卡号` as `卡号` , `bi_152610414374251569`.`卡类型描述` as `卡类型描述` , `bi_152610414374251569`.`是否为副卡` as `是否为副卡` , `bi_152610414374251569`.`交易主要站点` as `交易主要站点` , `bi_152610414374251569`.`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量` , `bi_152610414374251569`.`交易类型描述` as `交易类型描述` , `bi_152610414374251569`.`商品类型` as `商品类型` , `bi_152610414374251569`.`商品类型描述` as `商品类型描述` , `bi_152610414374251569`.`发卡单位` as `发卡单位` , `bi_152610414374251569`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `bi_152610414374251569`.`首次交易日期` as `首次交易日期` , `bi_152610414374251569`.`最近交易日期` as `最近交易日期` , `bi_152610414374251569`.`平均油量升数` as `平均油量升数` , `bi_152610414374251569`.`平均消费金额` as `平均消费金额` , `bi_152610414374251569`.`平均折扣金额` as `平均折扣金额` , `bi_152610414374251569`.`平均余额` as `平均余额` , `bi_152610414374251569`.`日均消费笔数` as `日均消费笔数` , `bi_152610414374251569`.`日均消费金额` as `日均消费金额` , `bi_152610414374251569`.`单日消费次数过多次数` as `单日消费次数过多次数` , `bi_152610414374251569`.`个人卡夜间消费总次数` as `个人卡夜间消费总次数` , `bi_152610414374251569`.`个人卡夜间消费总金额` as `个人卡夜间消费总金额` , `bi_152610414374251569`.`日均夜间消费笔数` as `日均夜间消费笔数` , `bi_152610414374251569`.`日均夜间消费金额` as `日均夜间消费金额` , `bi_152610414374251569`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `bi_152610414374251569`.`睡眠次数` as `睡眠次数` , `bi_152610414374251569`.`是否仍在睡眠` as `是否仍在睡眠` , `bi_152610414374251569`.`个人卡累计消费金额` as `个人卡累计消费金额` , `bi_152610414374251569`.`个人卡消费金额方差` as `个人卡消费金额方差` , `bi_152610414374251569`.`个人卡累计消费次数` as `个人卡累计消费次数` , `bi_152610414374251569`.`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数` , `bi_152610414374251569`.`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量` , `bi_152610414374251569`.`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量` , `bi_152610414374251569`.`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比` , `bi_152610414374251569`.`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数` , `bi_152610414374251569`.`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比` , `bi_152610414374251569`.`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比` , `bi_152610414374251569`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `bi_152610414374251569`.`非油累计消费金额` as `非油累计消费金额` , `bi_152610414374251569`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `bi_152610414374251569`.`个人卡累计充值金额` as `个人卡累计充值金额` , `bi_152610414374251569`.`单日充值次数过多次数` as `单日充值次数过多次数` , `bi_152610414374251569`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `bi_152610414374251569`.`同一班次消费的次数` as `同一班次消费的次数` , `bi_152610414374251569`.`密码重置次数` as `密码重置次数` , `bi_152610414374251569`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `bi_152610414374251569`.`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数` , `bi_152610414374251569`.`是否曾频繁转账` as `是否曾频繁转账` , `bi_152610414374251569`.`是否异常加油卡` as `是否异常加油卡` , `bi_152610414374251569`.`单位名称` as `单位名称` , `bi_152610414374251569`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`个人卡夜间消费总次数` as `个人卡夜间消费总次数`,`个人卡夜间消费总金额` as `个人卡夜间消费总金额`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`个人卡累计消费金额` as `个人卡累计消费金额`,`个人卡消费金额方差` as `个人卡消费金额方差`,`个人卡累计消费次数` as `个人卡累计消费次数`,`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数`,`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比`,`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`个人卡累计充值金额` as `个人卡累计充值金额`,`单日充值次数过多次数` as `单日充值次数过多次数`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`个人卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`个人卡夜间消费总次数`,`个人卡夜间消费总金额`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`个人卡累计消费金额`,`个人卡消费金额方差`,`个人卡累计消费次数`,`个人卡消费金额为小数次数`,`个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比`,`个人卡天然气消费次数占比`,`ic卡大额非油消费次数`,`非油累计消费金额`,`非油与成品油消费金额比例`,`个人卡累计充值金额`,`单日充值次数过多次数`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,     
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `个人卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`, 
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`, 
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`,
       `单日消费次数过多次数`, 
       `个人卡夜间消费总次数`,
       `个人卡夜间消费总金额`,
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`, 
       `睡眠次数`,
       `是否仍在睡眠`,
       `个人卡累计消费金额`,
       `加油卡消费金额方差` `个人卡消费金额方差`,
       `个人卡累计消费次数`,
       `加油卡消费金额为小数次数` `个人卡消费金额为小数次数`,
       `个人卡消费过油品类型数量`,
       `个人卡消费过汽油品类型数量`,
       `个人卡汽油消费次数占比`,
       `个人卡汽油单笔高额消费次数`,
       `个人卡柴油消费次数占比`,
       `个人卡天然气消费次数占比`,
       `IC卡大额非油消费次数`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `个人卡累计充值金额`,
       `单日充值次数过多次数`, 
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `个人卡余额充足时充钱的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM DW04_SJFX.APP_AUAP_YK_PPL) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `bi_152610414374251569`  
     ) `bi_1777753835894362515`
      limit 1200001 
I0825 11:44:38.852237 44965 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:44:38.852420 44965 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:44:38.904966 44965 Frontend.java:947] Analysis finished.
I0825 11:44:38.909561 44965 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:44:38.909633 44965 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:44:38.924624 44965 admission-controller.cc:508] Schedule for id=3848f640041a6144:24e1ab1500000000 in pool_name=root.agilebi cluster_mem_needed=6.68 GB PoolConfig: max_requests=500 max_queued=200 max_mem=800.00 GB
I0825 11:44:38.924721 44965 admission-controller.cc:513] Stats: agg_num_running=2, agg_num_queued=0, agg_mem_reserved=14.31 GB,  local_host(local_mem_admitted=0, num_admitted_running=0, num_queued=0, backend_mem_reserved=976.56 MB)
I0825 11:44:38.924796 44965 admission-controller.cc:529] Admitted query id=3848f640041a6144:24e1ab1500000000
I0825 11:44:38.924822 44965 coordinator.cc:93] Exec() query_id=3848f640041a6144:24e1ab1500000000 stmt=select   `bi_1777753835894362515`.`帐号` as `bi_4405066279117047118` , `bi_1777753835894362515`.`卡号` as `bi_10248578450533883095` , `bi_1777753835894362515`.`卡类型描述` as `bi_6246159538240244065` , `bi_1777753835894362515`.`是否为副卡` as `bi_13540389403478941567` , `bi_1777753835894362515`.`交易主要站点` as `bi_2740263195203761510` , `bi_1777753835894362515`.`个人卡消费过加油站站点数量` as `bi_3616459640308034135` , `bi_1777753835894362515`.`交易类型描述` as `bi_10331142289063080322` , `bi_1777753835894362515`.`商品类型` as `bi_8759647043076232228` , `bi_1777753835894362515`.`商品类型描述` as `bi_14353747127936749017` , `bi_1777753835894362515`.`发卡单位` as `bi_10646976700040736340` , `bi_1777753835894362515`.`发卡单位与销售单位是否一致` as `bi_3120723227421642544` , `bi_1777753835894362515`.`首次交易日期` as `bi_14455382331679438995` , `bi_1777753835894362515`.`最近交易日期` as `bi_5478771142720032093` , `bi_1777753835894362515`.`平均油量升数` as `bi_617034579827635996` , `bi_1777753835894362515`.`平均消费金额` as `bi_15112077538935800504` , `bi_1777753835894362515`.`平均折扣金额` as `bi_3277906557631314998` , `bi_1777753835894362515`.`平均余额` as `bi_15647197458875151506` , `bi_1777753835894362515`.`日均消费笔数` as `bi_7064249764713199839` , `bi_1777753835894362515`.`日均消费金额` as `bi_10854565843347455823` , `bi_1777753835894362515`.`单日消费次数过多次数` as `bi_2261074975467520775` , `bi_1777753835894362515`.`个人卡夜间消费总次数` as `bi_11404968094779050130` , `bi_1777753835894362515`.`个人卡夜间消费总金额` as `bi_15065943078847283073` , `bi_1777753835894362515`.`日均夜间消费笔数` as `bi_15868460132744503901` , `bi_1777753835894362515`.`日均夜间消费金额` as `bi_15516783331422952374` , `bi_1777753835894362515`.`单日夜间消费次数过多次数` as `bi_16171388146955820514` , `bi_1777753835894362515`.`睡眠次数` as `bi_17048143494310675370` , `bi_1777753835894362515`.`是否仍在睡眠` as `bi_15197978810704604447` , `bi_1777753835894362515`.`个人卡累计消费金额` as `bi_7591110132802393138` , `bi_1777753835894362515`.`个人卡消费金额方差` as `bi_160391765441068244` , `bi_1777753835894362515`.`个人卡累计消费次数` as `bi_4156841468949947680` , `bi_1777753835894362515`.`个人卡消费金额为小数次数` as `bi_9794343777229462837` , `bi_1777753835894362515`.`个人卡消费过油品类型数量` as `bi_10293590438327478000` , `bi_1777753835894362515`.`个人卡消费过汽油品类型数量` as `bi_1177732512630799779` , `bi_1777753835894362515`.`个人卡汽油消费次数占比` as `bi_11456242312036654846` , `bi_1777753835894362515`.`个人卡汽油单笔高额消费次数` as `bi_9834182397780633995` , `bi_1777753835894362515`.`个人卡柴油消费次数占比` as `bi_6459884238352011348` , `bi_1777753835894362515`.`个人卡天然气消费次数占比` as `bi_16651092651258988174` , `bi_1777753835894362515`.`ic卡大额非油消费次数` as `bi_7054304210906615051` , `bi_1777753835894362515`.`非油累计消费金额` as `bi_16397999138841287705` , `bi_1777753835894362515`.`非油与成品油消费金额比例` as `bi_4542996461810298499` , `bi_1777753835894362515`.`个人卡累计充值金额` as `bi_4841881326785682188` , `bi_1777753835894362515`.`单日充值次数过多次数` as `bi_9422150591649301309` , `bi_1777753835894362515`.`即消费且余额低的次数831743621` as `bi_16833265966592949464` , `bi_1777753835894362515`.`同一班次消费的次数` as `bi_11088153473180053847` , `bi_1777753835894362515`.`密码重置次数` as `bi_3598974696379994152` , `bi_1777753835894362515`.`笔折扣额的消费的次数_2085032453` as `bi_5097711375700122218` , `bi_1777753835894362515`.`个人卡余额充足时充钱的次数` as `bi_8205063281634656287` , `bi_1777753835894362515`.`是否曾频繁转账` as `bi_14482952946536492029` , `bi_1777753835894362515`.`是否异常加油卡` as `bi_8782608630523284142` , `bi_1777753835894362515`.`单位名称` as `bi_14261383855208495737` , `bi_1777753835894362515`.`所属` as `bi_7873307995921860050` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_1777753835894362515`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_8081399462078118933` , TRIM(`bi_1777753835894362515`.`交易主要站点`) as `bi_616911404683852598`   from (select   `bi_152610414374251569`.`帐号` as `帐号` , `bi_152610414374251569`.`卡号` as `卡号` , `bi_152610414374251569`.`卡类型描述` as `卡类型描述` , `bi_152610414374251569`.`是否为副卡` as `是否为副卡` , `bi_152610414374251569`.`交易主要站点` as `交易主要站点` , `bi_152610414374251569`.`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量` , `bi_152610414374251569`.`交易类型描述` as `交易类型描述` , `bi_152610414374251569`.`商品类型` as `商品类型` , `bi_152610414374251569`.`商品类型描述` as `商品类型描述` , `bi_152610414374251569`.`发卡单位` as `发卡单位` , `bi_152610414374251569`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `bi_152610414374251569`.`首次交易日期` as `首次交易日期` , `bi_152610414374251569`.`最近交易日期` as `最近交易日期` , `bi_152610414374251569`.`平均油量升数` as `平均油量升数` , `bi_152610414374251569`.`平均消费金额` as `平均消费金额` , `bi_152610414374251569`.`平均折扣金额` as `平均折扣金额` , `bi_152610414374251569`.`平均余额` as `平均余额` , `bi_152610414374251569`.`日均消费笔数` as `日均消费笔数` , `bi_152610414374251569`.`日均消费金额` as `日均消费金额` , `bi_152610414374251569`.`单日消费次数过多次数` as `单日消费次数过多次数` , `bi_152610414374251569`.`个人卡夜间消费总次数` as `个人卡夜间消费总次数` , `bi_152610414374251569`.`个人卡夜间消费总金额` as `个人卡夜间消费总金额` , `bi_152610414374251569`.`日均夜间消费笔数` as `日均夜间消费笔数` , `bi_152610414374251569`.`日均夜间消费金额` as `日均夜间消费金额` , `bi_152610414374251569`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `bi_152610414374251569`.`睡眠次数` as `睡眠次数` , `bi_152610414374251569`.`是否仍在睡眠` as `是否仍在睡眠` , `bi_152610414374251569`.`个人卡累计消费金额` as `个人卡累计消费金额` , `bi_152610414374251569`.`个人卡消费金额方差` as `个人卡消费金额方差` , `bi_152610414374251569`.`个人卡累计消费次数` as `个人卡累计消费次数` , `bi_152610414374251569`.`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数` , `bi_152610414374251569`.`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量` , `bi_152610414374251569`.`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量` , `bi_152610414374251569`.`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比` , `bi_152610414374251569`.`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数` , `bi_152610414374251569`.`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比` , `bi_152610414374251569`.`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比` , `bi_152610414374251569`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `bi_152610414374251569`.`非油累计消费金额` as `非油累计消费金额` , `bi_152610414374251569`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `bi_152610414374251569`.`个人卡累计充值金额` as `个人卡累计充值金额` , `bi_152610414374251569`.`单日充值次数过多次数` as `单日充值次数过多次数` , `bi_152610414374251569`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `bi_152610414374251569`.`同一班次消费的次数` as `同一班次消费的次数` , `bi_152610414374251569`.`密码重置次数` as `密码重置次数` , `bi_152610414374251569`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `bi_152610414374251569`.`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数` , `bi_152610414374251569`.`是否曾频繁转账` as `是否曾频繁转账` , `bi_152610414374251569`.`是否异常加油卡` as `是否异常加油卡` , `bi_152610414374251569`.`单位名称` as `单位名称` , `bi_152610414374251569`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`个人卡夜间消费总次数` as `个人卡夜间消费总次数`,`个人卡夜间消费总金额` as `个人卡夜间消费总金额`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`个人卡累计消费金额` as `个人卡累计消费金额`,`个人卡消费金额方差` as `个人卡消费金额方差`,`个人卡累计消费次数` as `个人卡累计消费次数`,`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数`,`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比`,`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`个人卡累计充值金额` as `个人卡累计充值金额`,`单日充值次数过多次数` as `单日充值次数过多次数`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`个人卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`个人卡夜间消费总次数`,`个人卡夜间消费总金额`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`个人卡累计消费金额`,`个人卡消费金额方差`,`个人卡累计消费次数`,`个人卡消费金额为小数次数`,`个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比`,`个人卡天然气消费次数占比`,`ic卡大额非油消费次数`,`非油累计消费金额`,`非油与成品油消费金额比例`,`个人卡累计充值金额`,`单日充值次数过多次数`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,     
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `个人卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`, 
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`, 
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`,
       `单日消费次数过多次数`, 
       `个人卡夜间消费总次数`,
       `个人卡夜间消费总金额`,
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`, 
       `睡眠次数`,
       `是否仍在睡眠`,
       `个人卡累计消费金额`,
       `加油卡消费金额方差` `个人卡消费金额方差`,
       `个人卡累计消费次数`,
       `加油卡消费金额为小数次数` `个人卡消费金额为小数次数`,
       `个人卡消费过油品类型数量`,
       `个人卡消费过汽油品类型数量`,
       `个人卡汽油消费次数占比`,
       `个人卡汽油单笔高额消费次数`,
       `个人卡柴油消费次数占比`,
       `个人卡天然气消费次数占比`,
       `IC卡大额非油消费次数`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `个人卡累计充值金额`,
       `单日充值次数过多次数`, 
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `个人卡余额充足时充钱的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM DW04_SJFX.APP_AUAP_YK_PPL) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `bi_152610414374251569`  
     ) `bi_1777753835894362515`
      limit 1200001 
I0825 11:44:38.924926 44965 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:44:38.924947 44965 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:44:38.925056 44965 coordinator.cc:349] starting execution on 7 backends for query_id=3848f640041a6144:24e1ab1500000000
I0825 11:44:38.926069 43663 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp013 Port: 22000>Connection refused
I0825 11:44:38.926460 44904 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=3848f640041a6144:24e1ab1500000000
I0825 11:44:38.927135 44904 query-exec-mgr.cc:46] StartQueryFInstances() query_id=3848f640041a6144:24e1ab1500000000 coord=e4bdhpp025:22000
I0825 11:44:38.927148 43663 thrift-client.cc:78] Couldn't open transport for e4bdhpp013:22000 (connect() failed: Connection refused)
I0825 11:44:38.927165 44904 query-state.cc:178] Buffer pool limit for 3848f640041a6144:24e1ab1500000000: 819200000
I0825 11:44:38.927232 43663 thrift-client.cc:94] Unable to connect to e4bdhpp013:22000
I0825 11:44:38.927266 43663 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:44:38.927296 44904 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 3848f640041a6144:24e1ab1500000000
I0825 11:44:38.927453 44976 query-state.cc:300] StartFInstances(): query_id=3848f640041a6144:24e1ab1500000000 #instances=2
I0825 11:44:38.927565 43663 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp013 Port: 22000>Connection refused
I0825 11:44:38.927639 43663 thrift-client.cc:78] Couldn't open transport for e4bdhpp013:22000 (connect() failed: Connection refused)
I0825 11:44:38.927665 43663 thrift-client.cc:94] Unable to connect to e4bdhpp013:22000
I0825 11:44:38.927687 43663 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:44:38.927704 44976 query-state.cc:313] descriptor table for query=3848f640041a6144:24e1ab1500000000
tuples:
Tuple(id=0 size=583 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=576 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=576 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=STRING col_path=[10] offset=32 null=(offset=576 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[48] offset=48 null=(offset=576 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=STRING col_path=[39] offset=64 null=(offset=576 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=BIGINT col_path=[29] offset=352 null=(offset=578 mask=40) slot_idx=22 field_idx=-1), Slot(id=6 type=STRING col_path=[11] offset=80 null=(offset=576 mask=20) slot_idx=5 field_idx=-1), Slot(id=7 type=STRING col_path=[12] offset=96 null=(offset=576 mask=40) slot_idx=6 field_idx=-1), Slot(id=8 type=STRING col_path=[13] offset=112 null=(offset=576 mask=80) slot_idx=7 field_idx=-1), Slot(id=9 type=STRING col_path=[38] offset=128 null=(offset=577 mask=1) slot_idx=8 field_idx=-1), Slot(id=10 type=STRING col_path=[43] offset=144 null=(offset=577 mask=2) slot_idx=9 field_idx=-1), Slot(id=11 type=TIMESTAMP col_path=[15] offset=160 null=(offset=577 mask=4) slot_idx=10 field_idx=-1), Slot(id=12 type=TIMESTAMP col_path=[16] offset=176 null=(offset=577 mask=8) slot_idx=11 field_idx=-1), Slot(id=13 type=DECIMAL(16,2) col_path=[2] offset=360 null=(offset=578 mask=80) slot_idx=23 field_idx=-1), Slot(id=14 type=DECIMAL(17,2) col_path=[3] offset=368 null=(offset=579 mask=1) slot_idx=24 field_idx=-1), Slot(id=15 type=DECIMAL(17,2) col_path=[4] offset=376 null=(offset=579 mask=2) slot_idx=25 field_idx=-1), Slot(id=16 type=DECIMAL(17,2) col_path=[5] offset=384 null=(offset=579 mask=4) slot_idx=26 field_idx=-1), Slot(id=17 type=DOUBLE col_path=[6] offset=392 null=(offset=579 mask=8) slot_idx=27 field_idx=-1), Slot(id=18 type=DECIMAL(27,2) col_path=[7] offset=192 null=(offset=577 mask=10) slot_idx=12 field_idx=-1), Slot(id=19 type=BIGINT col_path=[25] offset=400 null=(offset=579 mask=10) slot_idx=28 field_idx=-1), Slot(id=20 type=BIGINT col_path=[27] offset=408 null=(offset=579 mask=20) slot_idx=29 field_idx=-1), Slot(id=21 type=DECIMAL(26,2) col_path=[28] offset=208 null=(offset=577 mask=20) slot_idx=13 field_idx=-1), Slot(id=22 type=DOUBLE col_path=[8] offset=416 null=(offset=579 mask=40) slot_idx=30 field_idx=-1), Slot(id=23 type=DECIMAL(27,2) col_path=[9] offset=224 null=(offset=577 mask=40) slot_idx=14 field_idx=-1), Slot(id=24 type=BIGINT col_path=[26] offset=424 null=(offset=579 mask=80) slot_idx=31 field_idx=-1), Slot(id=25 type=BIGINT col_path=[17] offset=432 null=(offset=580 mask=1) slot_idx=32 field_idx=-1), Slot(id=26 type=INT col_path=[18] offset=568 null=(offset=582 mask=2) slot_idx=49 field_idx=-1), Slot(id=27 type=DECIMAL(26,2) col_path=[41] offset=240 null=(offset=577 mask=80) slot_idx=15 field_idx=-1), Slot(id=28 type=DOUBLE col_path=[49] offset=440 null=(offset=580 mask=2) slot_idx=33 field_idx=-1), Slot(id=29 type=BIGINT col_path=[42] offset=448 null=(offset=580 mask=4) slot_idx=34 field_idx=-1), Slot(id=30 type=BIGINT col_path=[44] offset=456 null=(offset=580 mask=8) slot_idx=35 field_idx=-1), Slot(id=31 type=BIGINT col_path=[21] offset=464 null=(offset=580 mask=10) slot_idx=36 field_idx=-1), Slot(id=32 type=BIGINT col_path=[22] offset=472 null=(offset=580 mask=20) slot_idx=37 field_idx=-1), Slot(id=33 type=DOUBLE col_path=[45] offset=480 null=(offset=580 mask=40) slot_idx=38 field_idx=-1), Slot(id=34 type=BIGINT col_path=[20] offset=488 null=(offset=580 mask=80) slot_idx=39 field_idx=-1), Slot(id=35 type=DOUBLE col_path=[46] offset=496 null=(offset=581 mask=1) slot_idx=40 field_idx=-1), Slot(id=36 type=DOUBLE col_path=[47] offset=504 null=(offset=581 mask=2) slot_idx=41 field_idx=-1), Slot(id=37 type=BIGINT col_path=[19] offset=512 null=(offset=581 mask=4) slot_idx=42 field_idx=-1), Slot(id=38 type=DECIMAL(26,2) col_path=[30] offset=256 null=(offset=578 mask=1) slot_idx=16 field_idx=-1), Slot(id=39 type=DECIMAL(31,4) col_path=[31] offset=272 null=(offset=578 mask=2) slot_idx=17 field_idx=-1), Slot(id=40 type=DECIMAL(26,2) col_path=[23] offset=288 null=(offset=578 mask=4) slot_idx=18 field_idx=-1), Slot(id=41 type=BIGINT col_path=[24] offset=520 null=(offset=581 mask=8) slot_idx=43 field_idx=-1), Slot(id=42 type=BIGINT col_path=[32] offset=528 null=(offset=581 mask=10) slot_idx=44 field_idx=-1), Slot(id=43 type=BIGINT col_path=[33] offset=536 null=(offset=581 mask=20) slot_idx=45 field_idx=-1), Slot(id=44 type=BIGINT col_path=[40] offset=544 null=(offset=581 mask=40) slot_idx=46 field_idx=-1), Slot(id=45 type=BIGINT col_path=[34] offset=552 null=(offset=581 mask=80) slot_idx=47 field_idx=-1), Slot(id=46 type=BIGINT col_path=[35] offset=560 null=(offset=582 mask=1) slot_idx=48 field_idx=-1), Slot(id=47 type=INT col_path=[36] offset=572 null=(offset=582 mask=4) slot_idx=50 field_idx=-1), Slot(id=48 type=STRING col_path=[50] offset=304 null=(offset=578 mask=8) slot_idx=19 field_idx=-1), Slot(id=49 type=STRING col_path=[14] offset=320 null=(offset=578 mask=10) slot_idx=20 field_idx=-1), Slot(id=50 type=STRING col_path=[37] offset=336 null=(offset=578 mask=20) slot_idx=21 field_idx=-1)] tuple_path=[])
I0825 11:44:38.927963 44977 query-state.cc:395] Executing instance. instance_id=3848f640041a6144:24e1ab1500000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=6 #in-flight=2
I0825 11:44:38.928002 43663 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp013 Port: 22000>Connection refused
I0825 11:44:38.928033 44978 query-state.cc:395] Executing instance. instance_id=3848f640041a6144:24e1ab1500000006 fragment_idx=1 per_fragment_instance_idx=5 coord_state_idx=6 #in-flight=3
I0825 11:44:38.929261 43663 thrift-client.cc:78] Couldn't open transport for e4bdhpp013:22000 (connect() failed: Connection refused)
I0825 11:44:38.929298 43663 thrift-client.cc:94] Unable to connect to e4bdhpp013:22000
I0825 11:44:38.929311 43663 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:44:38.929347 44978 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '3848f640041a6144:24e1ab1500000006': 190
I0825 11:44:38.929803 44976 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3848f640041a6144:24e1ab1500000000 refcnt=4
W0825 11:44:38.955689 43831 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:44:38.956045 43831 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297896886_BP-1820042964-11.11.206.232-1548063025113
I0825 11:44:39.805541 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:44:39.806118 45179 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:44:39.832630 45179 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xca 5\xd8\x8c^H\xe6\x85\xd5\xc5a\x06\xa8\x88\xac",
      02: secret (string) = "a~\xf2\xa1\xf2CC\xa9\x95#\x8cB\xb7`l\x0f",
    },
  },
  02: statement (string) = "use dw20",
  04: runAsync (bool) = true,
}
I0825 11:44:39.832742 45179 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xca 5\xd8\x8c^H\xe6\x85\xd5\xc5a\x06\xa8\x88\xac",
      02: secret (string) = "a~\xf2\xa1\xf2CC\xa9\x95#\x8cB\xb7`l\x0f",
    },
  },
  02: statement (string) = "use dw20",
  04: runAsync (bool) = true,
}
I0825 11:44:39.833405 45179 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:39.835830 45179 Frontend.java:935] Analyzing query: use dw20
I0825 11:44:39.836724 45179 Frontend.java:947] Analysis finished.
I0825 11:44:39.872747 45179 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x8c\xb1\xe7\xb2\x9b\xf5J,\x00\x00\x00\x00>\xd29,",
      02: secret (string) = "\x8c\xb1\xe7\xb2\x9b\xf5J,\x00\x00\x00\x00>\xd29,",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:44:39.878270 45179 impala-hs2-server.cc:683] CloseOperation(): query_id=2c4af59bb2e7b18c:2c39d23e00000000
I0825 11:44:39.878329 45179 impala-server.cc:1015] UnregisterQuery(): query_id=2c4af59bb2e7b18c:2c39d23e00000000
I0825 11:44:39.878346 45179 impala-server.cc:1102] Cancel(): query_id=2c4af59bb2e7b18c:2c39d23e00000000
I0825 11:44:39.891543 45184 query-exec-mgr.cc:95] QueryState: query_id=3848f640041a6144:24e1ab1500000000 refcnt=4
I0825 11:44:39.891698 45184 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3848f640041a6144:24e1ab1500000000 refcnt=4
I0825 11:44:39.900648 45179 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xca 5\xd8\x8c^H\xe6\x85\xd5\xc5a\x06\xa8\x88\xac",
      02: secret (string) = "a~\xf2\xa1\xf2CC\xa9\x95#\x8cB\xb7`l\x0f",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:44:39.900704 45179 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xca 5\xd8\x8c^H\xe6\x85\xd5\xc5a\x06\xa8\x88\xac",
      02: secret (string) = "a~\xf2\xa1\xf2CC\xa9\x95#\x8cB\xb7`l\x0f",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:44:39.901091 45179 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:39.903746 45179 Frontend.java:935] Analyzing query: set mem_limit='8g'
I0825 11:44:39.904044 45179 Frontend.java:947] Analysis finished.
I0825 11:44:39.904485 45179 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x88\x88.\xc0\x18(D\xbf\x00\x00\x00\x00K\xed\xc5\x9b",
      02: secret (string) = "\x88\x88.\xc0\x18(D\xbf\x00\x00\x00\x00K\xed\xc5\x9b",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:44:39.908097 45179 impala-hs2-server.cc:683] CloseOperation(): query_id=bf442818c02e8888:9bc5ed4b00000000
I0825 11:44:39.908205 45179 impala-server.cc:1015] UnregisterQuery(): query_id=bf442818c02e8888:9bc5ed4b00000000
I0825 11:44:39.908229 45179 impala-server.cc:1102] Cancel(): query_id=bf442818c02e8888:9bc5ed4b00000000
I0825 11:44:39.914824 45179 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xca 5\xd8\x8c^H\xe6\x85\xd5\xc5a\x06\xa8\x88\xac",
      02: secret (string) = "a~\xf2\xa1\xf2CC\xa9\x95#\x8cB\xb7`l\x0f",
    },
  },
  02: statement (string) = "DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`",
  04: runAsync (bool) = true,
}
I0825 11:44:39.914877 45179 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xca 5\xd8\x8c^H\xe6\x85\xd5\xc5a\x06\xa8\x88\xac",
      02: secret (string) = "a~\xf2\xa1\xf2CC\xa9\x95#\x8cB\xb7`l\x0f",
    },
  },
  02: statement (string) = "DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`",
  04: runAsync (bool) = true,
}
I0825 11:44:39.915102 45179 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:39.917464 45179 Frontend.java:935] Analyzing query: DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`
I0825 11:44:39.918781 45179 Frontend.java:947] Analysis finished.
I0825 11:44:39.967891 45179 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "*\x97K\xc4\x1b\xa3Gu\x00\x00\x00\x00\xa9\r&G",
      02: secret (string) = "*\x97K\xc4\x1b\xa3Gu\x00\x00\x00\x00\xa9\r&G",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:44:39.970824 45179 impala-hs2-server.cc:683] CloseOperation(): query_id=7547a31bc44b972a:47260da900000000
I0825 11:44:39.970901 45179 impala-server.cc:1015] UnregisterQuery(): query_id=7547a31bc44b972a:47260da900000000
I0825 11:44:39.970939 45179 impala-server.cc:1102] Cancel(): query_id=7547a31bc44b972a:47260da900000000
I0825 11:44:39.978639 45179 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xca 5\xd8\x8c^H\xe6\x85\xd5\xc5a\x06\xa8\x88\xac",
      02: secret (string) = "a~\xf2\xa1\xf2CC\xa9\x95#\x8cB\xb7`l\x0f",
    },
  },
  02: statement (string) = "DESCRIBE `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120`",
  04: runAsync (bool) = true,
}
I0825 11:44:39.978727 45179 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xca 5\xd8\x8c^H\xe6\x85\xd5\xc5a\x06\xa8\x88\xac",
      02: secret (string) = "a~\xf2\xa1\xf2CC\xa9\x95#\x8cB\xb7`l\x0f",
    },
  },
  02: statement (string) = "DESCRIBE `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120`",
  04: runAsync (bool) = true,
}
I0825 11:44:39.979128 45179 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:39.981556 45179 Frontend.java:935] Analyzing query: DESCRIBE `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120`
I0825 11:44:39.982456 45179 Frontend.java:947] Analysis finished.
I0825 11:44:40.020473 45179 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x9e^S\xe14\xc7K\x9b\x00\x00\x00\x00\x9d;\x0eG",
      02: secret (string) = "\x9e^S\xe14\xc7K\x9b\x00\x00\x00\x00\x9d;\x0eG",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:44:40.022410 45179 impala-hs2-server.cc:683] CloseOperation(): query_id=9b4bc734e1535e9e:470e3b9d00000000
I0825 11:44:40.022439 45179 impala-server.cc:1015] UnregisterQuery(): query_id=9b4bc734e1535e9e:470e3b9d00000000
I0825 11:44:40.022460 45179 impala-server.cc:1102] Cancel(): query_id=9b4bc734e1535e9e:470e3b9d00000000
I0825 11:44:40.036762 45179 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xca 5\xd8\x8c^H\xe6\x85\xd5\xc5a\x06\xa8\x88\xac",
      02: secret (string) = "a~\xf2\xa1\xf2CC\xa9\x95#\x8cB\xb7`l\x0f",
    },
  },
  02: statement (string) = "SELECT COUNT(1) [...](29234)",
  04: runAsync (bool) = true,
}
I0825 11:44:40.036849 45179 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xca 5\xd8\x8c^H\xe6\x85\xd5\xc5a\x06\xa8\x88\xac",
      02: secret (string) = "a~\xf2\xa1\xf2CC\xa9\x95#\x8cB\xb7`l\x0f",
    },
  },
  02: statement (string) = "SELECT COUNT(1) [...](29234)",
  04: runAsync (bool) = true,
}
I0825 11:44:40.037266 45179 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:40.040246 45179 Frontend.java:935] Analyzing query: SELECT COUNT(1) AS `EXPR_1`  FROM (SELECT `bi_1629896623040163776`.`bi_16209772373942822610` AS `bi_2944829011289479947` , `bi_1629896623040163776`.`bi_7173110153481771205` AS `bi_5953783576266104954` , `bi_1629896623040163776`.`bi_13491404487973529010` AS `bi_13655597951839598282` , `bi_1629896623040163776`.`bi_16709338949652660965` AS `bi_13573710983760428890` , `bi_1629896623040163776`.`bi_7778611651735101528` AS `bi_13817896909621530670` , `bi_1629896623040163776`.`bi_14306997686607670121` AS `bi_18248539146770547393` , `bi_1629896623040163776`.`bi_14501539644612575132` AS `bi_14976186021494732360` , `bi_1629896623040163776`.`bi_4746155211965198907` AS `bi_17259628858125739362` , `bi_1629896623040163776`.`bi_5365439428354097443` AS `bi_2555956919959810295` , `bi_1629896623040163776`.`bi_17739814079848908328` AS `bi_13034846614870329522` , `bi_1629896623040163776`.`bi_2232887874484344045` AS `bi_13490087918498918727` , `bi_1629896623040163776`.`bi_369040516142209005` AS `bi_2328756620035106277` , `bi_1629896623040163776`.`bi_1740799749612446421` AS `bi_16428435346825106840` , `bi_1629896623040163776`.`bi_6559770015537514515` AS `bi_7415399836459864143` , `bi_1629896623040163776`.`bi_9889475954848287171` AS `bi_2356362670806359424` , `bi_1629896623040163776`.`bi_15189533194949851777` AS `bi_10662244814440924847` , `bi_1629896623040163776`.`bi_13231105150099224340` AS `bi_2328940806037813596` , `bi_1629896623040163776`.`bi_17211859388080424960` AS `bi_8560968020071645437` , `bi_1629896623040163776`.`bi_18212787982254017333` AS `bi_16504308885056355441` , `bi_1629896623040163776`.`bi_7541878364736470844` AS `bi_16378247719528958848` , `bi_1629896623040163776`.`bi_7009582161161962629` AS `bi_1609568228441625187` , `bi_1629896623040163776`.`bi_5792701378059420076` AS `bi_11892599068060811879` , `bi_1629896623040163776`.`bi_8397122565340895029` AS `bi_16992178380690073238` , `bi_1629896623040163776`.`bi_3349638123191173855` AS `bi_3112912313127363565` , `bi_1629896623040163776`.`bi_17231762347014911121` AS `bi_11553703802893646166` , `bi_1629896623040163776`.`bi_15445715632339295217` AS `bi_9197148227539578406` , `bi_1629896623040163776`.`bi_12472218524279170739` AS `bi_10209036311467977518` , `bi_1629896623040163776`.`bi_9114563080665146699` AS `bi_10949189359338245209` , `bi_1629896623040163776`.`bi_221030768505386166` AS `bi_2088623641132852051` , `bi_1629896623040163776`.`bi_7769959159290483840` AS `bi_9364752072844994980` , `bi_1629896623040163776`.`bi_12538280534418618029` AS `bi_11796317628036368486` , `bi_1629896623040163776`.`bi_8874241118748090656` AS `bi_6153022619153359078` , `bi_1629896623040163776`.`bi_13865388329565152770` AS `bi_17443246627620264516` , `bi_1629896623040163776`.`bi_12020212433864986146` AS `bi_13723858199496398933` , `bi_1629896623040163776`.`bi_12093476229320587287` AS `bi_3581630941043703681` , `bi_1629896623040163776`.`bi_16675125230853471997` AS `bi_13681721794718965570` , `bi_1629896623040163776`.`bi_5623662814544693635` AS `bi_10791170134402539197` , `bi_1629896623040163776`.`bi_637607595999269167` AS `bi_13513081267924706892` , `bi_1629896623040163776`.`bi_13683947135958082930` AS `bi_2746795928583001368` , `bi_1629896623040163776`.`bi_11924957536007553338` AS `bi_2617547140475864180` , `bi_1629896623040163776`.`bi_614967852965536978` AS `bi_3842000631415872702` , `bi_1629896623040163776`.`bi_5003822878387321743` AS `bi_16935043003514788035` , `bi_1629896623040163776`.`bi_6413940051808780525` AS `bi_8541756125762500444` , `bi_1629896623040163776`.`bi_11216260561419591329` AS `bi_17225725155727075212` , `bi_1629896623040163776`.`bi_15719283721382345906` AS `bi_13136658416044849864` , `bi_1629896623040163776`.`bi_11240345001390265760` AS `bi_177195317430621159` , `bi_1629896623040163776`.`bi_2135828979746422287` AS `bi_2499397883029971127` , `bi_1629896623040163776`.`bi_8234557137695700893` AS `bi_11017376164915385890` , `bi_1629896623040163776`.`bi_5133013160763149225` AS `bi_13434050382395210788` , `bi_1629896623040163776`.`bi_17983062736628275974` AS `bi_10062226076270961956` , `bi_1629896623040163776`.`bi_2661014466711632970` AS `bi_11954887862629511296` , `bi_1629896623040163776`.`bi_14227120684205422351` AS `bi_3492117412568164931` , `bi_1629896623040163776`.`bi_13689588754024198241` AS `bi_10321027500048826608` , `bi_1629896623040163776`.`bi_11029029363983356005` AS `bi_12606902770956817023` , `bi_1629896623040163776`.`bi_6920746512342794880` AS `bi_18075442816513788371` , `bi_1629896623040163776`.`bi_1980803134228074743` AS `bi_14099783523586614727` , `bi_1629896623040163776`.`bi_14864370397929992779` AS `bi_12695042023592498839` , `bi_1629896623040163776`.`bi_8546227886955607403` AS `bi_4239208797248000886` , `bi_1629896623040163776`.`bi_16284813439853843418` AS `bi_17200077373672864161` , `bi_1629896623040163776`.`bi_8240392853651162418` AS `bi_11317402924233406435` , `bi_1629896623040163776`.`bi_16971073333655604621` AS `bi_15276381302277830685` , `bi_1629896623040163776`.`bi_7696488040904043695` AS `bi_7068643571779168619` , `bi_1629896623040163776`.`bi_11474226421585588418` AS `bi_12580580155088099418` , `bi_1629896623040163776`.`bi_15889015133263562243` AS `bi_13884138320943147833` , `bi_1629896623040163776`.`bi_15223331806579081282` AS `bi_2330031524634543350` , `bi_1629896623040163776`.`bi_4248969569151347242` AS `bi_17683842236254744848` , `bi_1629896623040163776`.`bi_17576126933562249528` AS `bi_8516348224075478202` , `bi_1629896623040163776`.`bi_16329074359970793714` AS `bi_14886448026198219230` , `bi_1629896623040163776`.`bi_4893616353618505239` AS `bi_12508236557050679229` , `bi_1629896623040163776`.`bi_3903104604239561382` AS `bi_5816734382253970954` , `bi_1629896623040163776`.`bi_7824035878402166299` AS `bi_10549367430348653081` , `bi_1629896623040163776`.`bi_17834913520635724437` AS `bi_10051309301799120584` , `bi_1629896623040163776`.`bi_4063566549861858298` AS `bi_2431801150469390209` , `bi_1629896623040163776`.`bi_3338788862406713265` AS `bi_7134455716998779934` , `bi_1629896623040163776`.`bi_1963530120962417240` AS `bi_8313462920143718994` , `bi_1629896623040163776`.`bi_5127572173810565873` AS `bi_5328426818013642486` , `bi_1629896623040163776`.`bi_2440282083506678752` AS `bi_12330724632518875914` , `bi_1629896623040163776`.`bi_5524861625849511082` AS `bi_13066215156244610375` , `bi_1629896623040163776`.`bi_10802066210367618989` AS `bi_6506957220190519877` , `bi_1629896623040163776`.`bi_16755292640996306616` AS `bi_13761244412986156037` , `bi_1629896623040163776`.`bi_7327920818219899768` AS `bi_1879664572254281294` , `bi_1629896623040163776`.`bi_13360343267273546668` AS `bi_9364379469724839143` , `bi_1629896623040163776`.`bi_1467213175407054496` AS `bi_9834010471098361478` , `bi_1629896623040163776`.`bi_13600932575276159557` AS `bi_14599308429882337222` , `bi_1629896623040163776`.`bi_10699817008190601050` AS `bi_5857300416620086706` , `bi_1629896623040163776`.`bi_15916860084426853186` AS `bi_1226706381962868243` , `bi_1629896623040163776`.`bi_4007708937737028237` AS `bi_11934267513367244994` , `bi_1629896623040163776`.`bi_7467729968303243062` AS `bi_16894441783425939474` , `bi_1629896623040163776`.`bi_16247278283018779660` AS `bi_15531617539929850014` , `bi_1629896623040163776`.`bi_14123165879102550317` AS `bi_6022429888095396909` , `bi_16518359572041906452`.`bi_15518877374181664639` AS `bi_6056028648987336680` , `bi_16518359572041906452`.`bi_10491841080111616035` AS `bi_4118596661015424762` , `bi_16518359572041906452`.`bi_16048134125873699212` AS `bi_6868808138102825637` , `bi_16518359572041906452`.`bi_11047500209402619491` AS `bi_9304741866346676519` , `bi_16518359572041906452`.`bi_8739345836465617530` AS `bi_7290290633155521899` , `bi_16518359572041906452`.`bi_6439070652440084537` AS `bi_18289883686699341751`  FROM (SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey` AS `bi_16209772373942822610` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator` AS `bi_7173110153481771205` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`created` AS `bi_13491404487973529010` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor` AS `bi_16709338949652660965` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited` AS `bi_7778611651735101528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`id` AS `bi_14306997686607670121` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel` AS `bi_14501539644612575132` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ouname` AS `bi_4746155211965198907` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t` AS `bi_5365439428354097443` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode` AS `bi_17739814079848908328` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`code` AS `bi_2232887874484344045` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode` AS `bi_369040516142209005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetype` AS `bi_1740799749612446421` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename` AS `bi_6559770015537514515` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameprotocol` AS `bi_9889475954848287171` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`name` AS `bi_15189533194949851777` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectsflag` AS `bi_13231105150099224340` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssum` AS `bi_17211859388080424960` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtype` AS `bi_18212787982254017333` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename` AS `bi_7541878364736470844` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`type` AS `bi_7009582161161962629` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename` AS `bi_5792701378059420076` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtype` AS `bi_8397122565340895029` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename` AS `bi_3349638123191173855` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtype` AS `bi_17231762347014911121` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename` AS `bi_15445715632339295217` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatus` AS `bi_12472218524279170739` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname` AS `bi_9114563080665146699` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcontract` AS `bi_221030768505386166` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`foreigninterestinvolved` AS `bi_7769959159290483840` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactions` AS `bi_12538280534418618029` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditch` AS `bi_8874241118748090656` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname` AS `bi_13865388329565152770` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditch` AS `bi_12020212433864986146` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname` AS `bi_12093476229320587287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocation` AS `bi_16675125230853471997` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname` AS `bi_5623662814544693635` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptid` AS `bi_637607595999269167` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname` AS `bi_13683947135958082930` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw` AS `bi_11924957536007553338` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate` AS `bi_614967852965536978` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate` AS `bi_5003822878387321743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate` AS `bi_6413940051808780525` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment` AS `bi_11216260561419591329` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark` AS `bi_15719283721382345906` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertaker` AS `bi_11240345001390265760` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone` AS `bi_2135828979746422287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername` AS `bi_8234557137695700893` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion` AS `bi_5133013160763149225` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedept` AS `bi_17983062736628275974` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname` AS `bi_2661014466711632970` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptcharger` AS `bi_14227120684205422351` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername` AS `bi_13689588754024198241` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate` AS `bi_11029029363983356005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate` AS `bi_6920746512342794880` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate` AS `bi_1980803134228074743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`stage` AS `bi_14864370397929992779` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`status` AS `bi_8546227886955607403` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode` AS `bi_16284813439853843418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`thirdfundditch` AS `bi_8240392853651162418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`supplypaytype` AS `bi_16971073333655604621` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`pricetype` AS `bi_7696488040904043695` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`paymentsupply` AS `bi_11474226421585588418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`istax` AS `bi_15889015133263562243` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectid` AS `bi_15223331806579081282` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`secondobjectid` AS `bi_4248969569151347242` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isunderframework` AS `bi_17576126933562249528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkid` AS `bi_16329074359970793714` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname` AS `bi_4893616353618505239` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreason` AS `bi_3903104604239561382` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail` AS `bi_7824035878402166299` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname` AS `bi_17834913520635724437` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`closedsettlement` AS `bi_4063566549861858298` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`innercontractid` AS `bi_3338788862406713265` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid` AS `bi_1963530120962417240` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname` AS `bi_5127572173810565873` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype` AS `bi_2440282083506678752` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey` AS `bi_5524861625849511082` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isstamped` AS `bi_10802066210367618989` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsid` AS `bi_16755292640996306616` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isonlinesign` AS `bi_7327920818219899768` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid` AS `bi_13360343267273546668` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isdeleted` AS `bi_1467213175407054496` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode` AS `bi_13600932575276159557` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname` AS `bi_10699817008190601050` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short` AS `bi_15916860084426853186` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode` AS `bi_4007708937737028237` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname` AS `bi_7467729968303243062` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short` AS `bi_16247278283018779660` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` AS `bi_14123165879102550317`  FROM (SELECT `temp_sql_wrapper_table`.`rowkey` AS `rowkey` , `temp_sql_wrapper_table`.`creator` AS `creator` , `temp_sql_wrapper_table`.`created` AS `created` , `temp_sql_wrapper_table`.`editor` AS `editor` , `temp_sql_wrapper_table`.`edited` AS `edited` , `temp_sql_wrapper_table`.`id` AS `id` , `temp_sql_wrapper_table`.`oulabel` AS `oulabel` , `temp_sql_wrapper_table`.`ouname` AS `ouname` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`declarecode` AS `declarecode` , `temp_sql_wrapper_table`.`code` AS `code` , `temp_sql_wrapper_table`.`interiorcode` AS `interiorcode` , `temp_sql_wrapper_table`.`choicetype` AS `choicetype` , `temp_sql_wrapper_table`.`choicetypename` AS `choicetypename` , `temp_sql_wrapper_table`.`frameprotocol` AS `frameprotocol` , `temp_sql_wrapper_table`.`name` AS `name` , `temp_sql_wrapper_table`.`objectsflag` AS `objectsflag` , `temp_sql_wrapper_table`.`objectssum` AS `objectssum` , `temp_sql_wrapper_table`.`objectssumtype` AS `objectssumtype` , `temp_sql_wrapper_table`.`objectssumtypename` AS `objectssumtypename` , `temp_sql_wrapper_table`.`type` AS `type` , `temp_sql_wrapper_table`.`typename` AS `typename` , `temp_sql_wrapper_table`.`subtype` AS `subtype` , `temp_sql_wrapper_table`.`subtypename` AS `subtypename` , `temp_sql_wrapper_table`.`endtype` AS `endtype` , `temp_sql_wrapper_table`.`endtypename` AS `endtypename` , `temp_sql_wrapper_table`.`ourstatus` AS `ourstatus` , `temp_sql_wrapper_table`.`ourstatusname` AS `ourstatusname` , `temp_sql_wrapper_table`.`interiorcontract` AS `interiorcontract` , `temp_sql_wrapper_table`.`foreigninterestinvolved` AS `foreigninterestinvolved` , `temp_sql_wrapper_table`.`connectedtransactions` AS `connectedtransactions` , `temp_sql_wrapper_table`.`fundditch` AS `fundditch` , `temp_sql_wrapper_table`.`fundditchname` AS `fundditchname` , `temp_sql_wrapper_table`.`subfundditch` AS `subfundditch` , `temp_sql_wrapper_table`.`subfundditchname` AS `subfundditchname` , `temp_sql_wrapper_table`.`fundallocation` AS `fundallocation` , `temp_sql_wrapper_table`.`fundallocationname` AS `fundallocationname` , `temp_sql_wrapper_table`.`deptid` AS `deptid` , `temp_sql_wrapper_table`.`deptidname` AS `deptidname` , `temp_sql_wrapper_table`.`dependlaw` AS `dependlaw` , `temp_sql_wrapper_table`.`startperformingdate` AS `startperformingdate` , `temp_sql_wrapper_table`.`endperformingdate` AS `endperformingdate` , `temp_sql_wrapper_table`.`performfinishdate` AS `performfinishdate` , `temp_sql_wrapper_table`.`performfinishcomment` AS `performfinishcomment` , `temp_sql_wrapper_table`.`remark` AS `remark` , `temp_sql_wrapper_table`.`undertaker` AS `undertaker` , `temp_sql_wrapper_table`.`undertakerphone` AS `undertakerphone` , `temp_sql_wrapper_table`.`undertakername` AS `undertakername` , `temp_sql_wrapper_table`.`undertakeropinion` AS `undertakeropinion` , `temp_sql_wrapper_table`.`undertakedept` AS `undertakedept` , `temp_sql_wrapper_table`.`undertakedeptname` AS `undertakedeptname` , `temp_sql_wrapper_table`.`deptcharger` AS `deptcharger` , `temp_sql_wrapper_table`.`deptchargername` AS `deptchargername` , `temp_sql_wrapper_table`.`submitteddate` AS `submitteddate` , `temp_sql_wrapper_table`.`createdate` AS `createdate` , `temp_sql_wrapper_table`.`modifydate` AS `modifydate` , `temp_sql_wrapper_table`.`stage` AS `stage` , `temp_sql_wrapper_table`.`status` AS `status` , `temp_sql_wrapper_table`.`localcode` AS `localcode` , `temp_sql_wrapper_table`.`thirdfundditch` AS `thirdfundditch` , `temp_sql_wrapper_table`.`supplypaytype` AS `supplypaytype` , `temp_sql_wrapper_table`.`pricetype` AS `pricetype` , `temp_sql_wrapper_table`.`paymentsupply` AS `paymentsupply` , `temp_sql_wrapper_table`.`istax` AS `istax` , `temp_sql_wrapper_table`.`objectid` AS `objectid` , `temp_sql_wrapper_table`.`secondobjectid` AS `secondobjectid` , `temp_sql_wrapper_table`.`isunderframework` AS `isunderframework` , `temp_sql_wrapper_table`.`frameworkid` AS `frameworkid` , `temp_sql_wrapper_table`.`frameworkname` AS `frameworkname` , `temp_sql_wrapper_table`.`notbiddingreason` AS `notbiddingreason` , `temp_sql_wrapper_table`.`notbiddingreasondetail` AS `notbiddingreasondetail` , `temp_sql_wrapper_table`.`connectedtransactionsname` AS `connectedtransactionsname` , `temp_sql_wrapper_table`.`closedsettlement` AS `closedsettlement` , `temp_sql_wrapper_table`.`innercontractid` AS `innercontractid` , `temp_sql_wrapper_table`.`performanceid` AS `performanceid` , `temp_sql_wrapper_table`.`relatormodel_counterpartyname` AS `relatormodel_counterpartyname` , `temp_sql_wrapper_table`.`relatormodel_orgtype` AS `relatormodel_orgtype` , `temp_sql_wrapper_table`.`relatormodel_rowkey` AS `relatormodel_rowkey` , `temp_sql_wrapper_table`.`isstamped` AS `isstamped` , `temp_sql_wrapper_table`.`connectedtransactionsid` AS `connectedtransactionsid` , `temp_sql_wrapper_table`.`isonlinesign` AS `isonlinesign` , `temp_sql_wrapper_table`.`signexaminationfileid` AS `signexaminationfileid` , `temp_sql_wrapper_table`.`isdeleted` AS `isdeleted` , `temp_sql_wrapper_table`.`groupcode` AS `groupcode` , `temp_sql_wrapper_table`.`groupname` AS `groupname` , `temp_sql_wrapper_table`.`groupname_short` AS `groupname_short` , `temp_sql_wrapper_table`.`regcode` AS `regcode` , `temp_sql_wrapper_table`.`regname` AS `regname` , `temp_sql_wrapper_table`.`regname_short` AS `regname_short` , `temp_sql_wrapper_table`.`etl_date` AS `etl_date`  FROM (SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`created`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`id`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ouname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`code`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameprotocol`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`name`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectsflag`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssum`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`type`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatus`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcontract`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`foreigninterestinvolved`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactions`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocation`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertaker`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedept`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptcharger`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`stage`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`status`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`thirdfundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`supplypaytype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`pricetype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`paymentsupply`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`istax`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`secondobjectid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isunderframework`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreason`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`closedsettlement`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`innercontractid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isstamped`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isonlinesign`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isdeleted`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` FROM `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120` `cnpc_view_ctms_v2_b_contractinfo_c120` ) `temp_sql_wrapper_table`) `cnpc_view_ctms_v2_b_contractinfo_c120`) `bi_1629896623040163776` LEFT OUTER JOIN (SELECT `b_la_v_foreign_counterparty_c120`.`oulabel` AS `bi_15518877374181664639` , `b_la_v_foreign_counterparty_c120`.`oulabel_t` AS `bi_10491841080111616035` , `b_la_v_foreign_counterparty_c120`.`contractid` AS `bi_16048134125873699212` , `b_la_v_foreign_counterparty_c120`.`relativorrelationid` AS `bi_11047500209402619491` , `b_la_v_foreign_counterparty_c120`.`counterpartyname` AS `bi_8739345836465617530` , `b_la_v_foreign_counterparty_c120`.`counterpartyname_key` AS `bi_6439070652440084537`  FROM (SELECT `temp_sql_wrapper_table`.`oulabel` AS `oulabel` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`contractid` AS `contractid` , `temp_sql_wrapper_table`.`relativorrelationid` AS `relativorrelationid` , `temp_sql_wrapper_table`.`counterpartyname` AS `counterpartyname` , `temp_sql_wrapper_table`.`counterpartyname_key` AS `counterpartyname_key`  FROM (SELECT `temp_sub_query_table`.`oulabel`, `temp_sub_query_table`.`oulabel_t`, `temp_sub_query_table`.`contractid`, `temp_sub_query_table`.`relativorrelationid`, `temp_sub_query_table`.`counterpartyname`, `temp_sub_query_table`.`counterpartyname_key` FROM (SELECT `b_la_v_foreign_contractrelativorrelation_c120`.`rowkey`, `b_la_v_foreign_contractrelativorrelation_c120`.`id`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`contractid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativorrelationid`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname_key`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_name`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_relativeid`, `b_la_v_foreign_contractrelativorrelation_c120`.`regionsign`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgname`, `b_la_v_foreign_contractrelativorrelation_c120`.`mdmcode`, `b_la_v_foreign_contractrelativorrelation_c120`.`creator`, `b_la_v_foreign_contractrelativorrelation_c120`.`created`, `b_la_v_foreign_contractrelativorrelation_c120`.`editor`, `b_la_v_foreign_contractrelativorrelation_c120`.`edited`, `b_la_v_foreign_contractrelativorrelation_c120`.`isdeleted`, `b_la_v_foreign_contractrelativorrelation_c120`.`etl_date` FROM `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120` `b_la_v_foreign_contractrelativorrelation_c120` ) `temp_sub_query_table` WHERE (`temp_sub_query_table`.`oulabel_t` LIKE '%辽河油田%') ) `temp_sql_wrapper_table`) `b_la_v_foreign_counterparty_c120`) `bi_16518359572041906452` ON (`bi_16518359572041906452`.`bi_16048134125873699212`=`bi_1629896623040163776`.`bi_14306997686607670121`)) `tableWithoutPaging` 
I0825 11:44:40.082113 45179 Frontend.java:947] Analysis finished.
I0825 11:44:40.091681 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.091773 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.092447 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.092489 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.093143 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.093189 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.095063 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.095114 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.095526 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.095558 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.095912 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.095942 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.096313 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.096351 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.096719 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.096750 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.097079 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.097110 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.097453 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.097523 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.097908 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.097959 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.098309 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.098340 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.098677 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.098707 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.099054 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.099084 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.099421 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.099452 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.099822 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.099844 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.100205 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.100234 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.100592 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.100644 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.101016 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.101102 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.101488 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.101536 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.102008 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.102054 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.102488 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.102517 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.102880 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.102902 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.103314 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.103359 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.103734 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.103776 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.104169 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.104192 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.104542 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.104575 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.104948 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.104969 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.105304 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.105347 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.105686 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.105707 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.106062 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.106088 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.106447 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.106503 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.106843 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.106884 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.107249 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.107286 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.107650 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.107695 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.108075 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.108108 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.108444 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.108474 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.108845 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.108883 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.109230 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.109251 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.109596 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.109633 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.110018 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.110057 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.110417 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.110447 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.110817 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.110850 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.129266 45179 admission-controller.cc:508] Schedule for id=6241cc11a19fe1e9:bb00d49400000000 in pool_name=root.default cluster_mem_needed=16.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
I0825 11:44:40.129350 45179 admission-controller.cc:513] Stats: agg_num_running=0, agg_num_queued=0, agg_mem_reserved=0,  local_host(local_mem_admitted=0, num_admitted_running=0, num_queued=0, backend_mem_reserved=0)
I0825 11:44:40.129379 45179 admission-controller.cc:529] Admitted query id=6241cc11a19fe1e9:bb00d49400000000
I0825 11:44:40.129401 45179 coordinator.cc:93] Exec() query_id=6241cc11a19fe1e9:bb00d49400000000 stmt=SELECT COUNT(1) AS `EXPR_1`  FROM (SELECT `bi_1629896623040163776`.`bi_16209772373942822610` AS `bi_2944829011289479947` , `bi_1629896623040163776`.`bi_7173110153481771205` AS `bi_5953783576266104954` , `bi_1629896623040163776`.`bi_13491404487973529010` AS `bi_13655597951839598282` , `bi_1629896623040163776`.`bi_16709338949652660965` AS `bi_13573710983760428890` , `bi_1629896623040163776`.`bi_7778611651735101528` AS `bi_13817896909621530670` , `bi_1629896623040163776`.`bi_14306997686607670121` AS `bi_18248539146770547393` , `bi_1629896623040163776`.`bi_14501539644612575132` AS `bi_14976186021494732360` , `bi_1629896623040163776`.`bi_4746155211965198907` AS `bi_17259628858125739362` , `bi_1629896623040163776`.`bi_5365439428354097443` AS `bi_2555956919959810295` , `bi_1629896623040163776`.`bi_17739814079848908328` AS `bi_13034846614870329522` , `bi_1629896623040163776`.`bi_2232887874484344045` AS `bi_13490087918498918727` , `bi_1629896623040163776`.`bi_369040516142209005` AS `bi_2328756620035106277` , `bi_1629896623040163776`.`bi_1740799749612446421` AS `bi_16428435346825106840` , `bi_1629896623040163776`.`bi_6559770015537514515` AS `bi_7415399836459864143` , `bi_1629896623040163776`.`bi_9889475954848287171` AS `bi_2356362670806359424` , `bi_1629896623040163776`.`bi_15189533194949851777` AS `bi_10662244814440924847` , `bi_1629896623040163776`.`bi_13231105150099224340` AS `bi_2328940806037813596` , `bi_1629896623040163776`.`bi_17211859388080424960` AS `bi_8560968020071645437` , `bi_1629896623040163776`.`bi_18212787982254017333` AS `bi_16504308885056355441` , `bi_1629896623040163776`.`bi_7541878364736470844` AS `bi_16378247719528958848` , `bi_1629896623040163776`.`bi_7009582161161962629` AS `bi_1609568228441625187` , `bi_1629896623040163776`.`bi_5792701378059420076` AS `bi_11892599068060811879` , `bi_1629896623040163776`.`bi_8397122565340895029` AS `bi_16992178380690073238` , `bi_1629896623040163776`.`bi_3349638123191173855` AS `bi_3112912313127363565` , `bi_1629896623040163776`.`bi_17231762347014911121` AS `bi_11553703802893646166` , `bi_1629896623040163776`.`bi_15445715632339295217` AS `bi_9197148227539578406` , `bi_1629896623040163776`.`bi_12472218524279170739` AS `bi_10209036311467977518` , `bi_1629896623040163776`.`bi_9114563080665146699` AS `bi_10949189359338245209` , `bi_1629896623040163776`.`bi_221030768505386166` AS `bi_2088623641132852051` , `bi_1629896623040163776`.`bi_7769959159290483840` AS `bi_9364752072844994980` , `bi_1629896623040163776`.`bi_12538280534418618029` AS `bi_11796317628036368486` , `bi_1629896623040163776`.`bi_8874241118748090656` AS `bi_6153022619153359078` , `bi_1629896623040163776`.`bi_13865388329565152770` AS `bi_17443246627620264516` , `bi_1629896623040163776`.`bi_12020212433864986146` AS `bi_13723858199496398933` , `bi_1629896623040163776`.`bi_12093476229320587287` AS `bi_3581630941043703681` , `bi_1629896623040163776`.`bi_16675125230853471997` AS `bi_13681721794718965570` , `bi_1629896623040163776`.`bi_5623662814544693635` AS `bi_10791170134402539197` , `bi_1629896623040163776`.`bi_637607595999269167` AS `bi_13513081267924706892` , `bi_1629896623040163776`.`bi_13683947135958082930` AS `bi_2746795928583001368` , `bi_1629896623040163776`.`bi_11924957536007553338` AS `bi_2617547140475864180` , `bi_1629896623040163776`.`bi_614967852965536978` AS `bi_3842000631415872702` , `bi_1629896623040163776`.`bi_5003822878387321743` AS `bi_16935043003514788035` , `bi_1629896623040163776`.`bi_6413940051808780525` AS `bi_8541756125762500444` , `bi_1629896623040163776`.`bi_11216260561419591329` AS `bi_17225725155727075212` , `bi_1629896623040163776`.`bi_15719283721382345906` AS `bi_13136658416044849864` , `bi_1629896623040163776`.`bi_11240345001390265760` AS `bi_177195317430621159` , `bi_1629896623040163776`.`bi_2135828979746422287` AS `bi_2499397883029971127` , `bi_1629896623040163776`.`bi_8234557137695700893` AS `bi_11017376164915385890` , `bi_1629896623040163776`.`bi_5133013160763149225` AS `bi_13434050382395210788` , `bi_1629896623040163776`.`bi_17983062736628275974` AS `bi_10062226076270961956` , `bi_1629896623040163776`.`bi_2661014466711632970` AS `bi_11954887862629511296` , `bi_1629896623040163776`.`bi_14227120684205422351` AS `bi_3492117412568164931` , `bi_1629896623040163776`.`bi_13689588754024198241` AS `bi_10321027500048826608` , `bi_1629896623040163776`.`bi_11029029363983356005` AS `bi_12606902770956817023` , `bi_1629896623040163776`.`bi_6920746512342794880` AS `bi_18075442816513788371` , `bi_1629896623040163776`.`bi_1980803134228074743` AS `bi_14099783523586614727` , `bi_1629896623040163776`.`bi_14864370397929992779` AS `bi_12695042023592498839` , `bi_1629896623040163776`.`bi_8546227886955607403` AS `bi_4239208797248000886` , `bi_1629896623040163776`.`bi_16284813439853843418` AS `bi_17200077373672864161` , `bi_1629896623040163776`.`bi_8240392853651162418` AS `bi_11317402924233406435` , `bi_1629896623040163776`.`bi_16971073333655604621` AS `bi_15276381302277830685` , `bi_1629896623040163776`.`bi_7696488040904043695` AS `bi_7068643571779168619` , `bi_1629896623040163776`.`bi_11474226421585588418` AS `bi_12580580155088099418` , `bi_1629896623040163776`.`bi_15889015133263562243` AS `bi_13884138320943147833` , `bi_1629896623040163776`.`bi_15223331806579081282` AS `bi_2330031524634543350` , `bi_1629896623040163776`.`bi_4248969569151347242` AS `bi_17683842236254744848` , `bi_1629896623040163776`.`bi_17576126933562249528` AS `bi_8516348224075478202` , `bi_1629896623040163776`.`bi_16329074359970793714` AS `bi_14886448026198219230` , `bi_1629896623040163776`.`bi_4893616353618505239` AS `bi_12508236557050679229` , `bi_1629896623040163776`.`bi_3903104604239561382` AS `bi_5816734382253970954` , `bi_1629896623040163776`.`bi_7824035878402166299` AS `bi_10549367430348653081` , `bi_1629896623040163776`.`bi_17834913520635724437` AS `bi_10051309301799120584` , `bi_1629896623040163776`.`bi_4063566549861858298` AS `bi_2431801150469390209` , `bi_1629896623040163776`.`bi_3338788862406713265` AS `bi_7134455716998779934` , `bi_1629896623040163776`.`bi_1963530120962417240` AS `bi_8313462920143718994` , `bi_1629896623040163776`.`bi_5127572173810565873` AS `bi_5328426818013642486` , `bi_1629896623040163776`.`bi_2440282083506678752` AS `bi_12330724632518875914` , `bi_1629896623040163776`.`bi_5524861625849511082` AS `bi_13066215156244610375` , `bi_1629896623040163776`.`bi_10802066210367618989` AS `bi_6506957220190519877` , `bi_1629896623040163776`.`bi_16755292640996306616` AS `bi_13761244412986156037` , `bi_1629896623040163776`.`bi_7327920818219899768` AS `bi_1879664572254281294` , `bi_1629896623040163776`.`bi_13360343267273546668` AS `bi_9364379469724839143` , `bi_1629896623040163776`.`bi_1467213175407054496` AS `bi_9834010471098361478` , `bi_1629896623040163776`.`bi_13600932575276159557` AS `bi_14599308429882337222` , `bi_1629896623040163776`.`bi_10699817008190601050` AS `bi_5857300416620086706` , `bi_1629896623040163776`.`bi_15916860084426853186` AS `bi_1226706381962868243` , `bi_1629896623040163776`.`bi_4007708937737028237` AS `bi_11934267513367244994` , `bi_1629896623040163776`.`bi_7467729968303243062` AS `bi_16894441783425939474` , `bi_1629896623040163776`.`bi_16247278283018779660` AS `bi_15531617539929850014` , `bi_1629896623040163776`.`bi_14123165879102550317` AS `bi_6022429888095396909` , `bi_16518359572041906452`.`bi_15518877374181664639` AS `bi_6056028648987336680` , `bi_16518359572041906452`.`bi_10491841080111616035` AS `bi_4118596661015424762` , `bi_16518359572041906452`.`bi_16048134125873699212` AS `bi_6868808138102825637` , `bi_16518359572041906452`.`bi_11047500209402619491` AS `bi_9304741866346676519` , `bi_16518359572041906452`.`bi_8739345836465617530` AS `bi_7290290633155521899` , `bi_16518359572041906452`.`bi_6439070652440084537` AS `bi_18289883686699341751`  FROM (SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey` AS `bi_16209772373942822610` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator` AS `bi_7173110153481771205` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`created` AS `bi_13491404487973529010` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor` AS `bi_16709338949652660965` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited` AS `bi_7778611651735101528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`id` AS `bi_14306997686607670121` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel` AS `bi_14501539644612575132` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ouname` AS `bi_4746155211965198907` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t` AS `bi_5365439428354097443` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode` AS `bi_17739814079848908328` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`code` AS `bi_2232887874484344045` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode` AS `bi_369040516142209005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetype` AS `bi_1740799749612446421` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename` AS `bi_6559770015537514515` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameprotocol` AS `bi_9889475954848287171` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`name` AS `bi_15189533194949851777` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectsflag` AS `bi_13231105150099224340` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssum` AS `bi_17211859388080424960` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtype` AS `bi_18212787982254017333` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename` AS `bi_7541878364736470844` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`type` AS `bi_7009582161161962629` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename` AS `bi_5792701378059420076` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtype` AS `bi_8397122565340895029` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename` AS `bi_3349638123191173855` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtype` AS `bi_17231762347014911121` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename` AS `bi_15445715632339295217` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatus` AS `bi_12472218524279170739` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname` AS `bi_9114563080665146699` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcontract` AS `bi_221030768505386166` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`foreigninterestinvolved` AS `bi_7769959159290483840` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactions` AS `bi_12538280534418618029` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditch` AS `bi_8874241118748090656` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname` AS `bi_13865388329565152770` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditch` AS `bi_12020212433864986146` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname` AS `bi_12093476229320587287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocation` AS `bi_16675125230853471997` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname` AS `bi_5623662814544693635` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptid` AS `bi_637607595999269167` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname` AS `bi_13683947135958082930` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw` AS `bi_11924957536007553338` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate` AS `bi_614967852965536978` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate` AS `bi_5003822878387321743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate` AS `bi_6413940051808780525` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment` AS `bi_11216260561419591329` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark` AS `bi_15719283721382345906` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertaker` AS `bi_11240345001390265760` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone` AS `bi_2135828979746422287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername` AS `bi_8234557137695700893` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion` AS `bi_5133013160763149225` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedept` AS `bi_17983062736628275974` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname` AS `bi_2661014466711632970` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptcharger` AS `bi_14227120684205422351` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername` AS `bi_13689588754024198241` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate` AS `bi_11029029363983356005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate` AS `bi_6920746512342794880` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate` AS `bi_1980803134228074743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`stage` AS `bi_14864370397929992779` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`status` AS `bi_8546227886955607403` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode` AS `bi_16284813439853843418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`thirdfundditch` AS `bi_8240392853651162418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`supplypaytype` AS `bi_16971073333655604621` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`pricetype` AS `bi_7696488040904043695` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`paymentsupply` AS `bi_11474226421585588418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`istax` AS `bi_15889015133263562243` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectid` AS `bi_15223331806579081282` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`secondobjectid` AS `bi_4248969569151347242` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isunderframework` AS `bi_17576126933562249528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkid` AS `bi_16329074359970793714` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname` AS `bi_4893616353618505239` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreason` AS `bi_3903104604239561382` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail` AS `bi_7824035878402166299` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname` AS `bi_17834913520635724437` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`closedsettlement` AS `bi_4063566549861858298` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`innercontractid` AS `bi_3338788862406713265` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid` AS `bi_1963530120962417240` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname` AS `bi_5127572173810565873` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype` AS `bi_2440282083506678752` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey` AS `bi_5524861625849511082` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isstamped` AS `bi_10802066210367618989` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsid` AS `bi_16755292640996306616` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isonlinesign` AS `bi_7327920818219899768` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid` AS `bi_13360343267273546668` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isdeleted` AS `bi_1467213175407054496` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode` AS `bi_13600932575276159557` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname` AS `bi_10699817008190601050` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short` AS `bi_15916860084426853186` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode` AS `bi_4007708937737028237` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname` AS `bi_7467729968303243062` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short` AS `bi_16247278283018779660` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` AS `bi_14123165879102550317`  FROM (SELECT `temp_sql_wrapper_table`.`rowkey` AS `rowkey` , `temp_sql_wrapper_table`.`creator` AS `creator` , `temp_sql_wrapper_table`.`created` AS `created` , `temp_sql_wrapper_table`.`editor` AS `editor` , `temp_sql_wrapper_table`.`edited` AS `edited` , `temp_sql_wrapper_table`.`id` AS `id` , `temp_sql_wrapper_table`.`oulabel` AS `oulabel` , `temp_sql_wrapper_table`.`ouname` AS `ouname` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`declarecode` AS `declarecode` , `temp_sql_wrapper_table`.`code` AS `code` , `temp_sql_wrapper_table`.`interiorcode` AS `interiorcode` , `temp_sql_wrapper_table`.`choicetype` AS `choicetype` , `temp_sql_wrapper_table`.`choicetypename` AS `choicetypename` , `temp_sql_wrapper_table`.`frameprotocol` AS `frameprotocol` , `temp_sql_wrapper_table`.`name` AS `name` , `temp_sql_wrapper_table`.`objectsflag` AS `objectsflag` , `temp_sql_wrapper_table`.`objectssum` AS `objectssum` , `temp_sql_wrapper_table`.`objectssumtype` AS `objectssumtype` , `temp_sql_wrapper_table`.`objectssumtypename` AS `objectssumtypename` , `temp_sql_wrapper_table`.`type` AS `type` , `temp_sql_wrapper_table`.`typename` AS `typename` , `temp_sql_wrapper_table`.`subtype` AS `subtype` , `temp_sql_wrapper_table`.`subtypename` AS `subtypename` , `temp_sql_wrapper_table`.`endtype` AS `endtype` , `temp_sql_wrapper_table`.`endtypename` AS `endtypename` , `temp_sql_wrapper_table`.`ourstatus` AS `ourstatus` , `temp_sql_wrapper_table`.`ourstatusname` AS `ourstatusname` , `temp_sql_wrapper_table`.`interiorcontract` AS `interiorcontract` , `temp_sql_wrapper_table`.`foreigninterestinvolved` AS `foreigninterestinvolved` , `temp_sql_wrapper_table`.`connectedtransactions` AS `connectedtransactions` , `temp_sql_wrapper_table`.`fundditch` AS `fundditch` , `temp_sql_wrapper_table`.`fundditchname` AS `fundditchname` , `temp_sql_wrapper_table`.`subfundditch` AS `subfundditch` , `temp_sql_wrapper_table`.`subfundditchname` AS `subfundditchname` , `temp_sql_wrapper_table`.`fundallocation` AS `fundallocation` , `temp_sql_wrapper_table`.`fundallocationname` AS `fundallocationname` , `temp_sql_wrapper_table`.`deptid` AS `deptid` , `temp_sql_wrapper_table`.`deptidname` AS `deptidname` , `temp_sql_wrapper_table`.`dependlaw` AS `dependlaw` , `temp_sql_wrapper_table`.`startperformingdate` AS `startperformingdate` , `temp_sql_wrapper_table`.`endperformingdate` AS `endperformingdate` , `temp_sql_wrapper_table`.`performfinishdate` AS `performfinishdate` , `temp_sql_wrapper_table`.`performfinishcomment` AS `performfinishcomment` , `temp_sql_wrapper_table`.`remark` AS `remark` , `temp_sql_wrapper_table`.`undertaker` AS `undertaker` , `temp_sql_wrapper_table`.`undertakerphone` AS `undertakerphone` , `temp_sql_wrapper_table`.`undertakername` AS `undertakername` , `temp_sql_wrapper_table`.`undertakeropinion` AS `undertakeropinion` , `temp_sql_wrapper_table`.`undertakedept` AS `undertakedept` , `temp_sql_wrapper_table`.`undertakedeptname` AS `undertakedeptname` , `temp_sql_wrapper_table`.`deptcharger` AS `deptcharger` , `temp_sql_wrapper_table`.`deptchargername` AS `deptchargername` , `temp_sql_wrapper_table`.`submitteddate` AS `submitteddate` , `temp_sql_wrapper_table`.`createdate` AS `createdate` , `temp_sql_wrapper_table`.`modifydate` AS `modifydate` , `temp_sql_wrapper_table`.`stage` AS `stage` , `temp_sql_wrapper_table`.`status` AS `status` , `temp_sql_wrapper_table`.`localcode` AS `localcode` , `temp_sql_wrapper_table`.`thirdfundditch` AS `thirdfundditch` , `temp_sql_wrapper_table`.`supplypaytype` AS `supplypaytype` , `temp_sql_wrapper_table`.`pricetype` AS `pricetype` , `temp_sql_wrapper_table`.`paymentsupply` AS `paymentsupply` , `temp_sql_wrapper_table`.`istax` AS `istax` , `temp_sql_wrapper_table`.`objectid` AS `objectid` , `temp_sql_wrapper_table`.`secondobjectid` AS `secondobjectid` , `temp_sql_wrapper_table`.`isunderframework` AS `isunderframework` , `temp_sql_wrapper_table`.`frameworkid` AS `frameworkid` , `temp_sql_wrapper_table`.`frameworkname` AS `frameworkname` , `temp_sql_wrapper_table`.`notbiddingreason` AS `notbiddingreason` , `temp_sql_wrapper_table`.`notbiddingreasondetail` AS `notbiddingreasondetail` , `temp_sql_wrapper_table`.`connectedtransactionsname` AS `connectedtransactionsname` , `temp_sql_wrapper_table`.`closedsettlement` AS `closedsettlement` , `temp_sql_wrapper_table`.`innercontractid` AS `innercontractid` , `temp_sql_wrapper_table`.`performanceid` AS `performanceid` , `temp_sql_wrapper_table`.`relatormodel_counterpartyname` AS `relatormodel_counterpartyname` , `temp_sql_wrapper_table`.`relatormodel_orgtype` AS `relatormodel_orgtype` , `temp_sql_wrapper_table`.`relatormodel_rowkey` AS `relatormodel_rowkey` , `temp_sql_wrapper_table`.`isstamped` AS `isstamped` , `temp_sql_wrapper_table`.`connectedtransactionsid` AS `connectedtransactionsid` , `temp_sql_wrapper_table`.`isonlinesign` AS `isonlinesign` , `temp_sql_wrapper_table`.`signexaminationfileid` AS `signexaminationfileid` , `temp_sql_wrapper_table`.`isdeleted` AS `isdeleted` , `temp_sql_wrapper_table`.`groupcode` AS `groupcode` , `temp_sql_wrapper_table`.`groupname` AS `groupname` , `temp_sql_wrapper_table`.`groupname_short` AS `groupname_short` , `temp_sql_wrapper_table`.`regcode` AS `regcode` , `temp_sql_wrapper_table`.`regname` AS `regname` , `temp_sql_wrapper_table`.`regname_short` AS `regname_short` , `temp_sql_wrapper_table`.`etl_date` AS `etl_date`  FROM (SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`created`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`id`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ouname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`code`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameprotocol`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`name`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectsflag`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssum`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`type`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatus`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcontract`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`foreigninterestinvolved`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactions`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocation`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertaker`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedept`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptcharger`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`stage`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`status`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`thirdfundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`supplypaytype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`pricetype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`paymentsupply`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`istax`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`secondobjectid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isunderframework`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreason`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`closedsettlement`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`innercontractid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isstamped`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isonlinesign`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isdeleted`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` FROM `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120` `cnpc_view_ctms_v2_b_contractinfo_c120` ) `temp_sql_wrapper_table`) `cnpc_view_ctms_v2_b_contractinfo_c120`) `bi_1629896623040163776` LEFT OUTER JOIN (SELECT `b_la_v_foreign_counterparty_c120`.`oulabel` AS `bi_15518877374181664639` , `b_la_v_foreign_counterparty_c120`.`oulabel_t` AS `bi_10491841080111616035` , `b_la_v_foreign_counterparty_c120`.`contractid` AS `bi_16048134125873699212` , `b_la_v_foreign_counterparty_c120`.`relativorrelationid` AS `bi_11047500209402619491` , `b_la_v_foreign_counterparty_c120`.`counterpartyname` AS `bi_8739345836465617530` , `b_la_v_foreign_counterparty_c120`.`counterpartyname_key` AS `bi_6439070652440084537`  FROM (SELECT `temp_sql_wrapper_table`.`oulabel` AS `oulabel` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`contractid` AS `contractid` , `temp_sql_wrapper_table`.`relativorrelationid` AS `relativorrelationid` , `temp_sql_wrapper_table`.`counterpartyname` AS `counterpartyname` , `temp_sql_wrapper_table`.`counterpartyname_key` AS `counterpartyname_key`  FROM (SELECT `temp_sub_query_table`.`oulabel`, `temp_sub_query_table`.`oulabel_t`, `temp_sub_query_table`.`contractid`, `temp_sub_query_table`.`relativorrelationid`, `temp_sub_query_table`.`counterpartyname`, `temp_sub_query_table`.`counterpartyname_key` FROM (SELECT `b_la_v_foreign_contractrelativorrelation_c120`.`rowkey`, `b_la_v_foreign_contractrelativorrelation_c120`.`id`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`contractid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativorrelationid`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname_key`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_name`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_relativeid`, `b_la_v_foreign_contractrelativorrelation_c120`.`regionsign`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgname`, `b_la_v_foreign_contractrelativorrelation_c120`.`mdmcode`, `b_la_v_foreign_contractrelativorrelation_c120`.`creator`, `b_la_v_foreign_contractrelativorrelation_c120`.`created`, `b_la_v_foreign_contractrelativorrelation_c120`.`editor`, `b_la_v_foreign_contractrelativorrelation_c120`.`edited`, `b_la_v_foreign_contractrelativorrelation_c120`.`isdeleted`, `b_la_v_foreign_contractrelativorrelation_c120`.`etl_date` FROM `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120` `b_la_v_foreign_contractrelativorrelation_c120` ) `temp_sub_query_table` WHERE (`temp_sub_query_table`.`oulabel_t` LIKE '%辽河油田%') ) `temp_sql_wrapper_table`) `b_la_v_foreign_counterparty_c120`) `bi_16518359572041906452` ON (`bi_16518359572041906452`.`bi_16048134125873699212`=`bi_1629896623040163776`.`bi_14306997686607670121`)) `tableWithoutPaging` 
I0825 11:44:40.129534 45179 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.129560 45179 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.129667 45179 coordinator.cc:349] starting execution on 2 backends for query_id=6241cc11a19fe1e9:bb00d49400000000
I0825 11:44:40.130460 44904 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=6241cc11a19fe1e9:bb00d49400000000
I0825 11:44:40.130609 44904 query-exec-mgr.cc:46] StartQueryFInstances() query_id=6241cc11a19fe1e9:bb00d49400000000 coord=e4bdhpp025:22000
I0825 11:44:40.130630 44904 query-state.cc:178] Buffer pool limit for 6241cc11a19fe1e9:bb00d49400000000: 6871947673
I0825 11:44:40.130677 44904 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 6241cc11a19fe1e9:bb00d49400000000
I0825 11:44:40.130859 45190 query-state.cc:300] StartFInstances(): query_id=6241cc11a19fe1e9:bb00d49400000000 #instances=2
I0825 11:44:40.130970 45190 query-state.cc:313] descriptor table for query=6241cc11a19fe1e9:bb00d49400000000
tuples:
Tuple(id=10 size=8 slots=[Slot(id=518 type=BIGINT col_path=[] offset=0 null=(offset=0 mask=0) slot_idx=0 field_idx=-1)] tuple_path=[])
Tuple(id=4 size=33 slots=[Slot(id=363 type=STRING col_path=[3] offset=0 null=(offset=32 mask=1) slot_idx=0 field_idx=-1), Slot(id=364 type=DECIMAL(38,0) col_path=[4] offset=16 null=(offset=32 mask=2) slot_idx=1 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=17 slots=[Slot(id=5 type=DECIMAL(38,0) col_path=[5] offset=0 null=(offset=16 mask=1) slot_idx=0 field_idx=-1)] tuple_path=[])
I0825 11:44:40.131270 45191 query-state.cc:395] Executing instance. instance_id=6241cc11a19fe1e9:bb00d49400000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=1 #in-flight=4
I0825 11:44:40.131376 45192 query-state.cc:395] Executing instance. instance_id=6241cc11a19fe1e9:bb00d49400000001 fragment_idx=2 per_fragment_instance_idx=0 coord_state_idx=1 #in-flight=5
I0825 11:44:40.131546 45192 hdfs-scan-node.cc:160] Max row batch queue size for scan node '1' in fragment instance '6241cc11a19fe1e9:bb00d49400000001': 190
I0825 11:44:40.131774 45179 coordinator.cc:362] started execution on 2 backends for query_id=6241cc11a19fe1e9:bb00d49400000000
I0825 11:44:40.132216 45190 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=6241cc11a19fe1e9:bb00d49400000000 refcnt=4
I0825 11:44:40.132858 45179 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xe9\xe1\x9f\xa1\x11\xccAb\x00\x00\x00\x00\x94\xd4\x00\xbb",
      02: secret (string) = "\xe9\xe1\x9f\xa1\x11\xccAb\x00\x00\x00\x00\x94\xd4\x00\xbb",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
W0825 11:44:40.154865 43836 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:44:40.155105 43836 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1324210723_BP-1820042964-11.11.206.232-1548063025113
I0825 11:44:40.253083 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:44:40.253578 45211 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:44:40.254267 45211 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "oWs\xfc\xa7\x19J;\xa8\x0f\x1a\xb9\xb9\xce\a\xa4",
      02: secret (string) = "v\x05\x02\x19\xf3\x83L\xe7\xa9\x81\x8b?y\xfe\xe7\xeb",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:44:40.264276 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:44:40.264768 45212 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:44:40.265569 45211 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "oWs\xfc\xa7\x19J;\xa8\x0f\x1a\xb9\xb9\xce\a\xa4",
      02: secret (string) = "v\x05\x02\x19\xf3\x83L\xe7\xa9\x81\x8b?y\xfe\xe7\xeb",
    },
  },
}
I0825 11:44:40.266110 45211 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:52744 closed, closing 1 associated session(s)
I0825 11:44:40.292635 45212 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "r\xdb\x95\x9e\xcd\xd9@/\x8d\x8a\xd2SN\xff\x90\xea",
      02: secret (string) = "\x10H\xdf^{%Av\x93\xa2\x9d\xf3\xa4\x04\xaa\x90",
    },
  },
  02: statement (string) = "use dw20",
  04: runAsync (bool) = true,
}
I0825 11:44:40.292719 45212 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "r\xdb\x95\x9e\xcd\xd9@/\x8d\x8a\xd2SN\xff\x90\xea",
      02: secret (string) = "\x10H\xdf^{%Av\x93\xa2\x9d\xf3\xa4\x04\xaa\x90",
    },
  },
  02: statement (string) = "use dw20",
  04: runAsync (bool) = true,
}
I0825 11:44:40.293280 45212 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:40.295866 45212 Frontend.java:935] Analyzing query: use dw20
I0825 11:44:40.296485 45212 Frontend.java:947] Analysis finished.
I0825 11:44:40.335027 45212 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = ".f\xbf\xb9\xfaGB\xa4\x00\x00\x00\x00!\xab\x0fG",
      02: secret (string) = ".f\xbf\xb9\xfaGB\xa4\x00\x00\x00\x00!\xab\x0fG",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:44:40.339377 45212 impala-hs2-server.cc:683] CloseOperation(): query_id=a44247fab9bf662e:470fab2100000000
I0825 11:44:40.339437 45212 impala-server.cc:1015] UnregisterQuery(): query_id=a44247fab9bf662e:470fab2100000000
I0825 11:44:40.339464 45212 impala-server.cc:1102] Cancel(): query_id=a44247fab9bf662e:470fab2100000000
I0825 11:44:40.365087 45212 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "r\xdb\x95\x9e\xcd\xd9@/\x8d\x8a\xd2SN\xff\x90\xea",
      02: secret (string) = "\x10H\xdf^{%Av\x93\xa2\x9d\xf3\xa4\x04\xaa\x90",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:44:40.365154 45212 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "r\xdb\x95\x9e\xcd\xd9@/\x8d\x8a\xd2SN\xff\x90\xea",
      02: secret (string) = "\x10H\xdf^{%Av\x93\xa2\x9d\xf3\xa4\x04\xaa\x90",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:44:40.365595 45212 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:40.368032 45212 Frontend.java:935] Analyzing query: set mem_limit='8g'
I0825 11:44:40.368321 45212 Frontend.java:947] Analysis finished.
I0825 11:44:40.368762 45212 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x9aZ\xac\x1a\x9f\x98E\xeb\x00\x00\x00\x004\xd8+}",
      02: secret (string) = "\x9aZ\xac\x1a\x9f\x98E\xeb\x00\x00\x00\x004\xd8+}",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:44:40.372246 45212 impala-hs2-server.cc:683] CloseOperation(): query_id=eb45989f1aac5a9a:7d2bd83400000000
I0825 11:44:40.372313 45212 impala-server.cc:1015] UnregisterQuery(): query_id=eb45989f1aac5a9a:7d2bd83400000000
I0825 11:44:40.372350 45212 impala-server.cc:1102] Cancel(): query_id=eb45989f1aac5a9a:7d2bd83400000000
I0825 11:44:40.379228 45212 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "r\xdb\x95\x9e\xcd\xd9@/\x8d\x8a\xd2SN\xff\x90\xea",
      02: secret (string) = "\x10H\xdf^{%Av\x93\xa2\x9d\xf3\xa4\x04\xaa\x90",
    },
  },
  02: statement (string) = "DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`",
  04: runAsync (bool) = true,
}
I0825 11:44:40.379289 45212 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "r\xdb\x95\x9e\xcd\xd9@/\x8d\x8a\xd2SN\xff\x90\xea",
      02: secret (string) = "\x10H\xdf^{%Av\x93\xa2\x9d\xf3\xa4\x04\xaa\x90",
    },
  },
  02: statement (string) = "DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`",
  04: runAsync (bool) = true,
}
I0825 11:44:40.379557 45212 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:40.382071 45212 Frontend.java:935] Analyzing query: DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`
I0825 11:44:40.382810 45212 Frontend.java:947] Analysis finished.
I0825 11:44:40.419508 45212 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x8c\xfeT\xdc$\x89AY\x00\x00\x00\x00O\xae\\\xb0",
      02: secret (string) = "\x8c\xfeT\xdc$\x89AY\x00\x00\x00\x00O\xae\\\xb0",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:44:40.422086 45212 impala-hs2-server.cc:683] CloseOperation(): query_id=59418924dc54fe8c:b05cae4f00000000
I0825 11:44:40.422117 45212 impala-server.cc:1015] UnregisterQuery(): query_id=59418924dc54fe8c:b05cae4f00000000
I0825 11:44:40.422145 45212 impala-server.cc:1102] Cancel(): query_id=59418924dc54fe8c:b05cae4f00000000
I0825 11:44:40.426913 45212 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "r\xdb\x95\x9e\xcd\xd9@/\x8d\x8a\xd2SN\xff\x90\xea",
      02: secret (string) = "\x10H\xdf^{%Av\x93\xa2\x9d\xf3\xa4\x04\xaa\x90",
    },
  },
  02: statement (string) = "DESCRIBE `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120`",
  04: runAsync (bool) = true,
}
I0825 11:44:40.427006 45212 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "r\xdb\x95\x9e\xcd\xd9@/\x8d\x8a\xd2SN\xff\x90\xea",
      02: secret (string) = "\x10H\xdf^{%Av\x93\xa2\x9d\xf3\xa4\x04\xaa\x90",
    },
  },
  02: statement (string) = "DESCRIBE `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120`",
  04: runAsync (bool) = true,
}
I0825 11:44:40.427371 45212 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:40.430073 45212 Frontend.java:935] Analyzing query: DESCRIBE `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120`
I0825 11:44:40.430922 45212 Frontend.java:947] Analysis finished.
I0825 11:44:40.448365 44965 coordinator.cc:362] started execution on 7 backends for query_id=3848f640041a6144:24e1ab1500000000
I0825 11:44:40.448954 44965 coordinator.cc:629] Cancel() query_id=3848f640041a6144:24e1ab1500000000
I0825 11:44:40.448990 44965 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=3848f640041a6144:24e1ab1500000000 backend=e4bdhpp014:22000
I0825 11:44:40.449388 44965 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=3848f640041a6144:24e1ab1500000000 backend=e4bdhpp015:22000
I0825 11:44:40.449950 44965 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=3848f640041a6144:24e1ab1500000000 backend=e4bdhpp018:22000
I0825 11:44:40.451434 44965 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=3848f640041a6144:24e1ab1500000000 backend=e4bdhpp020:22000
I0825 11:44:40.451711 44965 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=3848f640041a6144:24e1ab1500000000 backend=e4bdhpp023:22000
I0825 11:44:40.452198 44965 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=3848f640041a6144:24e1ab1500000000 backend=e4bdhpp025:22000
I0825 11:44:40.452399 44904 impala-internal-service.cc:63] CancelQueryFInstances(): query_id=3848f640041a6144:24e1ab1500000000
I0825 11:44:40.452441 44904 query-exec-mgr.cc:95] QueryState: query_id=3848f640041a6144:24e1ab1500000000 refcnt=4
I0825 11:44:40.452463 44904 query-state.cc:416] Cancel: query_id=3848f640041a6144:24e1ab1500000000
I0825 11:44:40.452489 44904 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=3848f640041a6144:24e1ab1500000006
I0825 11:44:40.452517 44904 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=3848f640041a6144:24e1ab1500000000
I0825 11:44:40.452608 44904 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=3848f640041a6144:24e1ab1500000000 node_id=1
I0825 11:44:40.452665 44904 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3848f640041a6144:24e1ab1500000000 refcnt=4
I0825 11:44:40.452735 44965 coordinator.cc:639] CancelBackends() query_id=3848f640041a6144:24e1ab1500000000, tried to cancel 6 backends
I0825 11:44:40.452765 44965 coordinator.cc:783] Release admission control resources for query_id=3848f640041a6144:24e1ab1500000000
I0825 11:44:40.453194 44965 impala-server.cc:1015] UnregisterQuery(): query_id=3848f640041a6144:24e1ab1500000000
I0825 11:44:40.453233 44965 impala-server.cc:1102] Cancel(): query_id=3848f640041a6144:24e1ab1500000000
I0825 11:44:40.453447 44904 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): 3848f640041a6144:24e1ab1500000000
I0825 11:44:40.453522 44977 query-state.cc:288] Cancelling fragment instances as directed by the coordinator. Returned status: ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): 3848f640041a6144:24e1ab1500000000
I0825 11:44:40.453579 44977 query-state.cc:416] Cancel: query_id=3848f640041a6144:24e1ab1500000000
I0825 11:44:40.453630 44977 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=3848f640041a6144:24e1ab1500000000, node=1
I0825 11:44:40.454151 44439 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): 3848f640041a6144:24e1ab1500000000
I0825 11:44:40.454213 44977 query-state.cc:403] Instance completed. instance_id=3848f640041a6144:24e1ab1500000000 #in-flight=4 status=CANCELLED: Cancelled
I0825 11:44:40.454250 44977 query-state.cc:416] Cancel: query_id=3848f640041a6144:24e1ab1500000000
I0825 11:44:40.454277 44977 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3848f640041a6144:24e1ab1500000000 refcnt=3
I0825 11:44:40.455051 44965 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3848f640041a6144:24e1ab1500000000 refcnt=2
I0825 11:44:40.460063 44128 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp025@PANEL.COM" on an internal connection
I0825 11:44:40.460651 45240 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): 3848f640041a6144:24e1ab1500000000
I0825 11:44:40.460794 44978 query-state.cc:288] Cancelling fragment instances as directed by the coordinator. Returned status: ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): 3848f640041a6144:24e1ab1500000000
I0825 11:44:40.460830 44978 query-state.cc:416] Cancel: query_id=3848f640041a6144:24e1ab1500000000
I0825 11:44:40.465903 44128 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp014@PANEL.COM" on an internal connection
I0825 11:44:40.468039 45241 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): 3848f640041a6144:24e1ab1500000000
I0825 11:44:40.480554 45212 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x94\x9b\xd9\x84\xdfeO\n\x00\x00\x00\x00\xfd\v\xd0H",
      02: secret (string) = "\x94\x9b\xd9\x84\xdfeO\n\x00\x00\x00\x00\xfd\v\xd0H",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:44:40.484011 44128 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp015@PANEL.COM" on an internal connection
I0825 11:44:40.485303 45212 impala-hs2-server.cc:683] CloseOperation(): query_id=a4f65df84d99b94:48d00bfd00000000
I0825 11:44:40.485337 45212 impala-server.cc:1015] UnregisterQuery(): query_id=a4f65df84d99b94:48d00bfd00000000
I0825 11:44:40.485378 45212 impala-server.cc:1102] Cancel(): query_id=a4f65df84d99b94:48d00bfd00000000
I0825 11:44:40.492345 44978 query-state.cc:403] Instance completed. instance_id=3848f640041a6144:24e1ab1500000006 #in-flight=3 status=CANCELLED: Cancelled
I0825 11:44:40.492398 44978 query-state.cc:416] Cancel: query_id=3848f640041a6144:24e1ab1500000000
I0825 11:44:40.492403 45243 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): 3848f640041a6144:24e1ab1500000000
I0825 11:44:40.492436 44978 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3848f640041a6144:24e1ab1500000000 refcnt=1
I0825 11:44:40.497411 44128 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp018@PANEL.COM" on an internal connection
I0825 11:44:40.497769 45244 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): 3848f640041a6144:24e1ab1500000000
I0825 11:44:40.501902 45212 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "r\xdb\x95\x9e\xcd\xd9@/\x8d\x8a\xd2SN\xff\x90\xea",
      02: secret (string) = "\x10H\xdf^{%Av\x93\xa2\x9d\xf3\xa4\x04\xaa\x90",
    },
  },
  02: statement (string) = "SELECT `bi_16298[...](29187)",
  04: runAsync (bool) = true,
}
I0825 11:44:40.502014 45212 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "r\xdb\x95\x9e\xcd\xd9@/\x8d\x8a\xd2SN\xff\x90\xea",
      02: secret (string) = "\x10H\xdf^{%Av\x93\xa2\x9d\xf3\xa4\x04\xaa\x90",
    },
  },
  02: statement (string) = "SELECT `bi_16298[...](29187)",
  04: runAsync (bool) = true,
}
I0825 11:44:40.502496 45212 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:40.502674 44128 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp020@PANEL.COM" on an internal connection
I0825 11:44:40.503247 45245 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): 3848f640041a6144:24e1ab1500000000
I0825 11:44:40.505267 45212 Frontend.java:935] Analyzing query: SELECT `bi_1629896623040163776`.`bi_16209772373942822610` AS `bi_2944829011289479947` , `bi_1629896623040163776`.`bi_7173110153481771205` AS `bi_5953783576266104954` , `bi_1629896623040163776`.`bi_13491404487973529010` AS `bi_13655597951839598282` , `bi_1629896623040163776`.`bi_16709338949652660965` AS `bi_13573710983760428890` , `bi_1629896623040163776`.`bi_7778611651735101528` AS `bi_13817896909621530670` , `bi_1629896623040163776`.`bi_14306997686607670121` AS `bi_18248539146770547393` , `bi_1629896623040163776`.`bi_14501539644612575132` AS `bi_14976186021494732360` , `bi_1629896623040163776`.`bi_4746155211965198907` AS `bi_17259628858125739362` , `bi_1629896623040163776`.`bi_5365439428354097443` AS `bi_2555956919959810295` , `bi_1629896623040163776`.`bi_17739814079848908328` AS `bi_13034846614870329522` , `bi_1629896623040163776`.`bi_2232887874484344045` AS `bi_13490087918498918727` , `bi_1629896623040163776`.`bi_369040516142209005` AS `bi_2328756620035106277` , `bi_1629896623040163776`.`bi_1740799749612446421` AS `bi_16428435346825106840` , `bi_1629896623040163776`.`bi_6559770015537514515` AS `bi_7415399836459864143` , `bi_1629896623040163776`.`bi_9889475954848287171` AS `bi_2356362670806359424` , `bi_1629896623040163776`.`bi_15189533194949851777` AS `bi_10662244814440924847` , `bi_1629896623040163776`.`bi_13231105150099224340` AS `bi_2328940806037813596` , `bi_1629896623040163776`.`bi_17211859388080424960` AS `bi_8560968020071645437` , `bi_1629896623040163776`.`bi_18212787982254017333` AS `bi_16504308885056355441` , `bi_1629896623040163776`.`bi_7541878364736470844` AS `bi_16378247719528958848` , `bi_1629896623040163776`.`bi_7009582161161962629` AS `bi_1609568228441625187` , `bi_1629896623040163776`.`bi_5792701378059420076` AS `bi_11892599068060811879` , `bi_1629896623040163776`.`bi_8397122565340895029` AS `bi_16992178380690073238` , `bi_1629896623040163776`.`bi_3349638123191173855` AS `bi_3112912313127363565` , `bi_1629896623040163776`.`bi_17231762347014911121` AS `bi_11553703802893646166` , `bi_1629896623040163776`.`bi_15445715632339295217` AS `bi_9197148227539578406` , `bi_1629896623040163776`.`bi_12472218524279170739` AS `bi_10209036311467977518` , `bi_1629896623040163776`.`bi_9114563080665146699` AS `bi_10949189359338245209` , `bi_1629896623040163776`.`bi_221030768505386166` AS `bi_2088623641132852051` , `bi_1629896623040163776`.`bi_7769959159290483840` AS `bi_9364752072844994980` , `bi_1629896623040163776`.`bi_12538280534418618029` AS `bi_11796317628036368486` , `bi_1629896623040163776`.`bi_8874241118748090656` AS `bi_6153022619153359078` , `bi_1629896623040163776`.`bi_13865388329565152770` AS `bi_17443246627620264516` , `bi_1629896623040163776`.`bi_12020212433864986146` AS `bi_13723858199496398933` , `bi_1629896623040163776`.`bi_12093476229320587287` AS `bi_3581630941043703681` , `bi_1629896623040163776`.`bi_16675125230853471997` AS `bi_13681721794718965570` , `bi_1629896623040163776`.`bi_5623662814544693635` AS `bi_10791170134402539197` , `bi_1629896623040163776`.`bi_637607595999269167` AS `bi_13513081267924706892` , `bi_1629896623040163776`.`bi_13683947135958082930` AS `bi_2746795928583001368` , `bi_1629896623040163776`.`bi_11924957536007553338` AS `bi_2617547140475864180` , `bi_1629896623040163776`.`bi_614967852965536978` AS `bi_3842000631415872702` , `bi_1629896623040163776`.`bi_5003822878387321743` AS `bi_16935043003514788035` , `bi_1629896623040163776`.`bi_6413940051808780525` AS `bi_8541756125762500444` , `bi_1629896623040163776`.`bi_11216260561419591329` AS `bi_17225725155727075212` , `bi_1629896623040163776`.`bi_15719283721382345906` AS `bi_13136658416044849864` , `bi_1629896623040163776`.`bi_11240345001390265760` AS `bi_177195317430621159` , `bi_1629896623040163776`.`bi_2135828979746422287` AS `bi_2499397883029971127` , `bi_1629896623040163776`.`bi_8234557137695700893` AS `bi_11017376164915385890` , `bi_1629896623040163776`.`bi_5133013160763149225` AS `bi_13434050382395210788` , `bi_1629896623040163776`.`bi_17983062736628275974` AS `bi_10062226076270961956` , `bi_1629896623040163776`.`bi_2661014466711632970` AS `bi_11954887862629511296` , `bi_1629896623040163776`.`bi_14227120684205422351` AS `bi_3492117412568164931` , `bi_1629896623040163776`.`bi_13689588754024198241` AS `bi_10321027500048826608` , `bi_1629896623040163776`.`bi_11029029363983356005` AS `bi_12606902770956817023` , `bi_1629896623040163776`.`bi_6920746512342794880` AS `bi_18075442816513788371` , `bi_1629896623040163776`.`bi_1980803134228074743` AS `bi_14099783523586614727` , `bi_1629896623040163776`.`bi_14864370397929992779` AS `bi_12695042023592498839` , `bi_1629896623040163776`.`bi_8546227886955607403` AS `bi_4239208797248000886` , `bi_1629896623040163776`.`bi_16284813439853843418` AS `bi_17200077373672864161` , `bi_1629896623040163776`.`bi_8240392853651162418` AS `bi_11317402924233406435` , `bi_1629896623040163776`.`bi_16971073333655604621` AS `bi_15276381302277830685` , `bi_1629896623040163776`.`bi_7696488040904043695` AS `bi_7068643571779168619` , `bi_1629896623040163776`.`bi_11474226421585588418` AS `bi_12580580155088099418` , `bi_1629896623040163776`.`bi_15889015133263562243` AS `bi_13884138320943147833` , `bi_1629896623040163776`.`bi_15223331806579081282` AS `bi_2330031524634543350` , `bi_1629896623040163776`.`bi_4248969569151347242` AS `bi_17683842236254744848` , `bi_1629896623040163776`.`bi_17576126933562249528` AS `bi_8516348224075478202` , `bi_1629896623040163776`.`bi_16329074359970793714` AS `bi_14886448026198219230` , `bi_1629896623040163776`.`bi_4893616353618505239` AS `bi_12508236557050679229` , `bi_1629896623040163776`.`bi_3903104604239561382` AS `bi_5816734382253970954` , `bi_1629896623040163776`.`bi_7824035878402166299` AS `bi_10549367430348653081` , `bi_1629896623040163776`.`bi_17834913520635724437` AS `bi_10051309301799120584` , `bi_1629896623040163776`.`bi_4063566549861858298` AS `bi_2431801150469390209` , `bi_1629896623040163776`.`bi_3338788862406713265` AS `bi_7134455716998779934` , `bi_1629896623040163776`.`bi_1963530120962417240` AS `bi_8313462920143718994` , `bi_1629896623040163776`.`bi_5127572173810565873` AS `bi_5328426818013642486` , `bi_1629896623040163776`.`bi_2440282083506678752` AS `bi_12330724632518875914` , `bi_1629896623040163776`.`bi_5524861625849511082` AS `bi_13066215156244610375` , `bi_1629896623040163776`.`bi_10802066210367618989` AS `bi_6506957220190519877` , `bi_1629896623040163776`.`bi_16755292640996306616` AS `bi_13761244412986156037` , `bi_1629896623040163776`.`bi_7327920818219899768` AS `bi_1879664572254281294` , `bi_1629896623040163776`.`bi_13360343267273546668` AS `bi_9364379469724839143` , `bi_1629896623040163776`.`bi_1467213175407054496` AS `bi_9834010471098361478` , `bi_1629896623040163776`.`bi_13600932575276159557` AS `bi_14599308429882337222` , `bi_1629896623040163776`.`bi_10699817008190601050` AS `bi_5857300416620086706` , `bi_1629896623040163776`.`bi_15916860084426853186` AS `bi_1226706381962868243` , `bi_1629896623040163776`.`bi_4007708937737028237` AS `bi_11934267513367244994` , `bi_1629896623040163776`.`bi_7467729968303243062` AS `bi_16894441783425939474` , `bi_1629896623040163776`.`bi_16247278283018779660` AS `bi_15531617539929850014` , `bi_1629896623040163776`.`bi_14123165879102550317` AS `bi_6022429888095396909` , `bi_16518359572041906452`.`bi_15518877374181664639` AS `bi_6056028648987336680` , `bi_16518359572041906452`.`bi_10491841080111616035` AS `bi_4118596661015424762` , `bi_16518359572041906452`.`bi_16048134125873699212` AS `bi_6868808138102825637` , `bi_16518359572041906452`.`bi_11047500209402619491` AS `bi_9304741866346676519` , `bi_16518359572041906452`.`bi_8739345836465617530` AS `bi_7290290633155521899` , `bi_16518359572041906452`.`bi_6439070652440084537` AS `bi_18289883686699341751`  FROM (SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey` AS `bi_16209772373942822610` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator` AS `bi_7173110153481771205` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`created` AS `bi_13491404487973529010` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor` AS `bi_16709338949652660965` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited` AS `bi_7778611651735101528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`id` AS `bi_14306997686607670121` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel` AS `bi_14501539644612575132` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ouname` AS `bi_4746155211965198907` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t` AS `bi_5365439428354097443` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode` AS `bi_17739814079848908328` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`code` AS `bi_2232887874484344045` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode` AS `bi_369040516142209005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetype` AS `bi_1740799749612446421` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename` AS `bi_6559770015537514515` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameprotocol` AS `bi_9889475954848287171` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`name` AS `bi_15189533194949851777` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectsflag` AS `bi_13231105150099224340` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssum` AS `bi_17211859388080424960` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtype` AS `bi_18212787982254017333` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename` AS `bi_7541878364736470844` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`type` AS `bi_7009582161161962629` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename` AS `bi_5792701378059420076` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtype` AS `bi_8397122565340895029` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename` AS `bi_3349638123191173855` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtype` AS `bi_17231762347014911121` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename` AS `bi_15445715632339295217` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatus` AS `bi_12472218524279170739` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname` AS `bi_9114563080665146699` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcontract` AS `bi_221030768505386166` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`foreigninterestinvolved` AS `bi_7769959159290483840` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactions` AS `bi_12538280534418618029` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditch` AS `bi_8874241118748090656` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname` AS `bi_13865388329565152770` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditch` AS `bi_12020212433864986146` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname` AS `bi_12093476229320587287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocation` AS `bi_16675125230853471997` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname` AS `bi_5623662814544693635` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptid` AS `bi_637607595999269167` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname` AS `bi_13683947135958082930` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw` AS `bi_11924957536007553338` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate` AS `bi_614967852965536978` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate` AS `bi_5003822878387321743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate` AS `bi_6413940051808780525` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment` AS `bi_11216260561419591329` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark` AS `bi_15719283721382345906` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertaker` AS `bi_11240345001390265760` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone` AS `bi_2135828979746422287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername` AS `bi_8234557137695700893` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion` AS `bi_5133013160763149225` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedept` AS `bi_17983062736628275974` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname` AS `bi_2661014466711632970` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptcharger` AS `bi_14227120684205422351` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername` AS `bi_13689588754024198241` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate` AS `bi_11029029363983356005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate` AS `bi_6920746512342794880` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate` AS `bi_1980803134228074743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`stage` AS `bi_14864370397929992779` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`status` AS `bi_8546227886955607403` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode` AS `bi_16284813439853843418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`thirdfundditch` AS `bi_8240392853651162418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`supplypaytype` AS `bi_16971073333655604621` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`pricetype` AS `bi_7696488040904043695` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`paymentsupply` AS `bi_11474226421585588418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`istax` AS `bi_15889015133263562243` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectid` AS `bi_15223331806579081282` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`secondobjectid` AS `bi_4248969569151347242` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isunderframework` AS `bi_17576126933562249528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkid` AS `bi_16329074359970793714` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname` AS `bi_4893616353618505239` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreason` AS `bi_3903104604239561382` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail` AS `bi_7824035878402166299` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname` AS `bi_17834913520635724437` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`closedsettlement` AS `bi_4063566549861858298` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`innercontractid` AS `bi_3338788862406713265` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid` AS `bi_1963530120962417240` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname` AS `bi_5127572173810565873` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype` AS `bi_2440282083506678752` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey` AS `bi_5524861625849511082` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isstamped` AS `bi_10802066210367618989` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsid` AS `bi_16755292640996306616` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isonlinesign` AS `bi_7327920818219899768` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid` AS `bi_13360343267273546668` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isdeleted` AS `bi_1467213175407054496` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode` AS `bi_13600932575276159557` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname` AS `bi_10699817008190601050` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short` AS `bi_15916860084426853186` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode` AS `bi_4007708937737028237` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname` AS `bi_7467729968303243062` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short` AS `bi_16247278283018779660` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` AS `bi_14123165879102550317`  FROM (SELECT `temp_sql_wrapper_table`.`rowkey` AS `rowkey` , `temp_sql_wrapper_table`.`creator` AS `creator` , `temp_sql_wrapper_table`.`created` AS `created` , `temp_sql_wrapper_table`.`editor` AS `editor` , `temp_sql_wrapper_table`.`edited` AS `edited` , `temp_sql_wrapper_table`.`id` AS `id` , `temp_sql_wrapper_table`.`oulabel` AS `oulabel` , `temp_sql_wrapper_table`.`ouname` AS `ouname` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`declarecode` AS `declarecode` , `temp_sql_wrapper_table`.`code` AS `code` , `temp_sql_wrapper_table`.`interiorcode` AS `interiorcode` , `temp_sql_wrapper_table`.`choicetype` AS `choicetype` , `temp_sql_wrapper_table`.`choicetypename` AS `choicetypename` , `temp_sql_wrapper_table`.`frameprotocol` AS `frameprotocol` , `temp_sql_wrapper_table`.`name` AS `name` , `temp_sql_wrapper_table`.`objectsflag` AS `objectsflag` , `temp_sql_wrapper_table`.`objectssum` AS `objectssum` , `temp_sql_wrapper_table`.`objectssumtype` AS `objectssumtype` , `temp_sql_wrapper_table`.`objectssumtypename` AS `objectssumtypename` , `temp_sql_wrapper_table`.`type` AS `type` , `temp_sql_wrapper_table`.`typename` AS `typename` , `temp_sql_wrapper_table`.`subtype` AS `subtype` , `temp_sql_wrapper_table`.`subtypename` AS `subtypename` , `temp_sql_wrapper_table`.`endtype` AS `endtype` , `temp_sql_wrapper_table`.`endtypename` AS `endtypename` , `temp_sql_wrapper_table`.`ourstatus` AS `ourstatus` , `temp_sql_wrapper_table`.`ourstatusname` AS `ourstatusname` , `temp_sql_wrapper_table`.`interiorcontract` AS `interiorcontract` , `temp_sql_wrapper_table`.`foreigninterestinvolved` AS `foreigninterestinvolved` , `temp_sql_wrapper_table`.`connectedtransactions` AS `connectedtransactions` , `temp_sql_wrapper_table`.`fundditch` AS `fundditch` , `temp_sql_wrapper_table`.`fundditchname` AS `fundditchname` , `temp_sql_wrapper_table`.`subfundditch` AS `subfundditch` , `temp_sql_wrapper_table`.`subfundditchname` AS `subfundditchname` , `temp_sql_wrapper_table`.`fundallocation` AS `fundallocation` , `temp_sql_wrapper_table`.`fundallocationname` AS `fundallocationname` , `temp_sql_wrapper_table`.`deptid` AS `deptid` , `temp_sql_wrapper_table`.`deptidname` AS `deptidname` , `temp_sql_wrapper_table`.`dependlaw` AS `dependlaw` , `temp_sql_wrapper_table`.`startperformingdate` AS `startperformingdate` , `temp_sql_wrapper_table`.`endperformingdate` AS `endperformingdate` , `temp_sql_wrapper_table`.`performfinishdate` AS `performfinishdate` , `temp_sql_wrapper_table`.`performfinishcomment` AS `performfinishcomment` , `temp_sql_wrapper_table`.`remark` AS `remark` , `temp_sql_wrapper_table`.`undertaker` AS `undertaker` , `temp_sql_wrapper_table`.`undertakerphone` AS `undertakerphone` , `temp_sql_wrapper_table`.`undertakername` AS `undertakername` , `temp_sql_wrapper_table`.`undertakeropinion` AS `undertakeropinion` , `temp_sql_wrapper_table`.`undertakedept` AS `undertakedept` , `temp_sql_wrapper_table`.`undertakedeptname` AS `undertakedeptname` , `temp_sql_wrapper_table`.`deptcharger` AS `deptcharger` , `temp_sql_wrapper_table`.`deptchargername` AS `deptchargername` , `temp_sql_wrapper_table`.`submitteddate` AS `submitteddate` , `temp_sql_wrapper_table`.`createdate` AS `createdate` , `temp_sql_wrapper_table`.`modifydate` AS `modifydate` , `temp_sql_wrapper_table`.`stage` AS `stage` , `temp_sql_wrapper_table`.`status` AS `status` , `temp_sql_wrapper_table`.`localcode` AS `localcode` , `temp_sql_wrapper_table`.`thirdfundditch` AS `thirdfundditch` , `temp_sql_wrapper_table`.`supplypaytype` AS `supplypaytype` , `temp_sql_wrapper_table`.`pricetype` AS `pricetype` , `temp_sql_wrapper_table`.`paymentsupply` AS `paymentsupply` , `temp_sql_wrapper_table`.`istax` AS `istax` , `temp_sql_wrapper_table`.`objectid` AS `objectid` , `temp_sql_wrapper_table`.`secondobjectid` AS `secondobjectid` , `temp_sql_wrapper_table`.`isunderframework` AS `isunderframework` , `temp_sql_wrapper_table`.`frameworkid` AS `frameworkid` , `temp_sql_wrapper_table`.`frameworkname` AS `frameworkname` , `temp_sql_wrapper_table`.`notbiddingreason` AS `notbiddingreason` , `temp_sql_wrapper_table`.`notbiddingreasondetail` AS `notbiddingreasondetail` , `temp_sql_wrapper_table`.`connectedtransactionsname` AS `connectedtransactionsname` , `temp_sql_wrapper_table`.`closedsettlement` AS `closedsettlement` , `temp_sql_wrapper_table`.`innercontractid` AS `innercontractid` , `temp_sql_wrapper_table`.`performanceid` AS `performanceid` , `temp_sql_wrapper_table`.`relatormodel_counterpartyname` AS `relatormodel_counterpartyname` , `temp_sql_wrapper_table`.`relatormodel_orgtype` AS `relatormodel_orgtype` , `temp_sql_wrapper_table`.`relatormodel_rowkey` AS `relatormodel_rowkey` , `temp_sql_wrapper_table`.`isstamped` AS `isstamped` , `temp_sql_wrapper_table`.`connectedtransactionsid` AS `connectedtransactionsid` , `temp_sql_wrapper_table`.`isonlinesign` AS `isonlinesign` , `temp_sql_wrapper_table`.`signexaminationfileid` AS `signexaminationfileid` , `temp_sql_wrapper_table`.`isdeleted` AS `isdeleted` , `temp_sql_wrapper_table`.`groupcode` AS `groupcode` , `temp_sql_wrapper_table`.`groupname` AS `groupname` , `temp_sql_wrapper_table`.`groupname_short` AS `groupname_short` , `temp_sql_wrapper_table`.`regcode` AS `regcode` , `temp_sql_wrapper_table`.`regname` AS `regname` , `temp_sql_wrapper_table`.`regname_short` AS `regname_short` , `temp_sql_wrapper_table`.`etl_date` AS `etl_date`  FROM (SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`created`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`id`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ouname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`code`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameprotocol`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`name`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectsflag`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssum`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`type`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatus`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcontract`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`foreigninterestinvolved`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactions`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocation`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertaker`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedept`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptcharger`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`stage`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`status`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`thirdfundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`supplypaytype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`pricetype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`paymentsupply`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`istax`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`secondobjectid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isunderframework`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreason`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`closedsettlement`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`innercontractid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isstamped`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isonlinesign`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isdeleted`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` FROM `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120` `cnpc_view_ctms_v2_b_contractinfo_c120` ) `temp_sql_wrapper_table`) `cnpc_view_ctms_v2_b_contractinfo_c120`) `bi_1629896623040163776` LEFT OUTER JOIN (SELECT `b_la_v_foreign_counterparty_c120`.`oulabel` AS `bi_15518877374181664639` , `b_la_v_foreign_counterparty_c120`.`oulabel_t` AS `bi_10491841080111616035` , `b_la_v_foreign_counterparty_c120`.`contractid` AS `bi_16048134125873699212` , `b_la_v_foreign_counterparty_c120`.`relativorrelationid` AS `bi_11047500209402619491` , `b_la_v_foreign_counterparty_c120`.`counterpartyname` AS `bi_8739345836465617530` , `b_la_v_foreign_counterparty_c120`.`counterpartyname_key` AS `bi_6439070652440084537`  FROM (SELECT `temp_sql_wrapper_table`.`oulabel` AS `oulabel` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`contractid` AS `contractid` , `temp_sql_wrapper_table`.`relativorrelationid` AS `relativorrelationid` , `temp_sql_wrapper_table`.`counterpartyname` AS `counterpartyname` , `temp_sql_wrapper_table`.`counterpartyname_key` AS `counterpartyname_key`  FROM (SELECT `temp_sub_query_table`.`oulabel`, `temp_sub_query_table`.`oulabel_t`, `temp_sub_query_table`.`contractid`, `temp_sub_query_table`.`relativorrelationid`, `temp_sub_query_table`.`counterpartyname`, `temp_sub_query_table`.`counterpartyname_key` FROM (SELECT `b_la_v_foreign_contractrelativorrelation_c120`.`rowkey`, `b_la_v_foreign_contractrelativorrelation_c120`.`id`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`contractid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativorrelationid`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname_key`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_name`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_relativeid`, `b_la_v_foreign_contractrelativorrelation_c120`.`regionsign`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgname`, `b_la_v_foreign_contractrelativorrelation_c120`.`mdmcode`, `b_la_v_foreign_contractrelativorrelation_c120`.`creator`, `b_la_v_foreign_contractrelativorrelation_c120`.`created`, `b_la_v_foreign_contractrelativorrelation_c120`.`editor`, `b_la_v_foreign_contractrelativorrelation_c120`.`edited`, `b_la_v_foreign_contractrelativorrelation_c120`.`isdeleted`, `b_la_v_foreign_contractrelativorrelation_c120`.`etl_date` FROM `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120` `b_la_v_foreign_contractrelativorrelation_c120` ) `temp_sub_query_table` WHERE (`temp_sub_query_table`.`oulabel_t` LIKE '%辽河油田%') ) `temp_sql_wrapper_table`) `b_la_v_foreign_counterparty_c120`) `bi_16518359572041906452` ON (`bi_16518359572041906452`.`bi_16048134125873699212`=`bi_1629896623040163776`.`bi_14306997686607670121`) LIMIT 100 
I0825 11:44:40.511935 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.512044 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.523754 45212 Frontend.java:947] Analysis finished.
I0825 11:44:40.529120 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.529219 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.529839 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.529878 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.530545 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.530580 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.531309 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.531387 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.531750 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.531781 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.532150 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.532191 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.532528 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.532572 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.532912 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.532943 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.533308 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.533352 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.533710 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.533731 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.534054 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.534075 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.534451 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.534482 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.534835 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.534880 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.535239 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.535269 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.535611 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.535650 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.536018 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.536067 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.536410 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.536433 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.536792 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.536813 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.537143 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.537190 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.537521 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.537552 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.537904 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.537936 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.538352 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.538408 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.538745 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.538794 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.539153 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.539186 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.539513 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.539544 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.539940 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.539992 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.540480 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.540535 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.540889 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.550665 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.551087 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.551121 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.551453 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.551501 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.551842 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.551865 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.552250 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.552278 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.552673 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.552713 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.553054 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.553086 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.553445 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.553488 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.553828 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.553866 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.554199 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.554241 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.554595 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.554634 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.555030 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.555121 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.555558 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.555603 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.556031 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.556064 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.556396 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.556454 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.556809 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.556864 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.558332 45192 query-state.cc:403] Instance completed. instance_id=6241cc11a19fe1e9:bb00d49400000001 #in-flight=2 status=OK
I0825 11:44:40.558432 45192 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=6241cc11a19fe1e9:bb00d49400000000 refcnt=3
I0825 11:44:40.567044 45212 admission-controller.cc:508] Schedule for id=8e4efb02dfcf0f9f:976bc5400000000 in pool_name=root.default cluster_mem_needed=16.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
I0825 11:44:40.567145 45212 admission-controller.cc:513] Stats: agg_num_running=1, agg_num_queued=0, agg_mem_reserved=16.00 GB,  local_host(local_mem_admitted=16.00 GB, num_admitted_running=1, num_queued=0, backend_mem_reserved=8.00 GB)
I0825 11:44:40.567167 45212 admission-controller.cc:529] Admitted query id=8e4efb02dfcf0f9f:976bc5400000000
I0825 11:44:40.567186 45212 coordinator.cc:93] Exec() query_id=8e4efb02dfcf0f9f:976bc5400000000 stmt=SELECT `bi_1629896623040163776`.`bi_16209772373942822610` AS `bi_2944829011289479947` , `bi_1629896623040163776`.`bi_7173110153481771205` AS `bi_5953783576266104954` , `bi_1629896623040163776`.`bi_13491404487973529010` AS `bi_13655597951839598282` , `bi_1629896623040163776`.`bi_16709338949652660965` AS `bi_13573710983760428890` , `bi_1629896623040163776`.`bi_7778611651735101528` AS `bi_13817896909621530670` , `bi_1629896623040163776`.`bi_14306997686607670121` AS `bi_18248539146770547393` , `bi_1629896623040163776`.`bi_14501539644612575132` AS `bi_14976186021494732360` , `bi_1629896623040163776`.`bi_4746155211965198907` AS `bi_17259628858125739362` , `bi_1629896623040163776`.`bi_5365439428354097443` AS `bi_2555956919959810295` , `bi_1629896623040163776`.`bi_17739814079848908328` AS `bi_13034846614870329522` , `bi_1629896623040163776`.`bi_2232887874484344045` AS `bi_13490087918498918727` , `bi_1629896623040163776`.`bi_369040516142209005` AS `bi_2328756620035106277` , `bi_1629896623040163776`.`bi_1740799749612446421` AS `bi_16428435346825106840` , `bi_1629896623040163776`.`bi_6559770015537514515` AS `bi_7415399836459864143` , `bi_1629896623040163776`.`bi_9889475954848287171` AS `bi_2356362670806359424` , `bi_1629896623040163776`.`bi_15189533194949851777` AS `bi_10662244814440924847` , `bi_1629896623040163776`.`bi_13231105150099224340` AS `bi_2328940806037813596` , `bi_1629896623040163776`.`bi_17211859388080424960` AS `bi_8560968020071645437` , `bi_1629896623040163776`.`bi_18212787982254017333` AS `bi_16504308885056355441` , `bi_1629896623040163776`.`bi_7541878364736470844` AS `bi_16378247719528958848` , `bi_1629896623040163776`.`bi_7009582161161962629` AS `bi_1609568228441625187` , `bi_1629896623040163776`.`bi_5792701378059420076` AS `bi_11892599068060811879` , `bi_1629896623040163776`.`bi_8397122565340895029` AS `bi_16992178380690073238` , `bi_1629896623040163776`.`bi_3349638123191173855` AS `bi_3112912313127363565` , `bi_1629896623040163776`.`bi_17231762347014911121` AS `bi_11553703802893646166` , `bi_1629896623040163776`.`bi_15445715632339295217` AS `bi_9197148227539578406` , `bi_1629896623040163776`.`bi_12472218524279170739` AS `bi_10209036311467977518` , `bi_1629896623040163776`.`bi_9114563080665146699` AS `bi_10949189359338245209` , `bi_1629896623040163776`.`bi_221030768505386166` AS `bi_2088623641132852051` , `bi_1629896623040163776`.`bi_7769959159290483840` AS `bi_9364752072844994980` , `bi_1629896623040163776`.`bi_12538280534418618029` AS `bi_11796317628036368486` , `bi_1629896623040163776`.`bi_8874241118748090656` AS `bi_6153022619153359078` , `bi_1629896623040163776`.`bi_13865388329565152770` AS `bi_17443246627620264516` , `bi_1629896623040163776`.`bi_12020212433864986146` AS `bi_13723858199496398933` , `bi_1629896623040163776`.`bi_12093476229320587287` AS `bi_3581630941043703681` , `bi_1629896623040163776`.`bi_16675125230853471997` AS `bi_13681721794718965570` , `bi_1629896623040163776`.`bi_5623662814544693635` AS `bi_10791170134402539197` , `bi_1629896623040163776`.`bi_637607595999269167` AS `bi_13513081267924706892` , `bi_1629896623040163776`.`bi_13683947135958082930` AS `bi_2746795928583001368` , `bi_1629896623040163776`.`bi_11924957536007553338` AS `bi_2617547140475864180` , `bi_1629896623040163776`.`bi_614967852965536978` AS `bi_3842000631415872702` , `bi_1629896623040163776`.`bi_5003822878387321743` AS `bi_16935043003514788035` , `bi_1629896623040163776`.`bi_6413940051808780525` AS `bi_8541756125762500444` , `bi_1629896623040163776`.`bi_11216260561419591329` AS `bi_17225725155727075212` , `bi_1629896623040163776`.`bi_15719283721382345906` AS `bi_13136658416044849864` , `bi_1629896623040163776`.`bi_11240345001390265760` AS `bi_177195317430621159` , `bi_1629896623040163776`.`bi_2135828979746422287` AS `bi_2499397883029971127` , `bi_1629896623040163776`.`bi_8234557137695700893` AS `bi_11017376164915385890` , `bi_1629896623040163776`.`bi_5133013160763149225` AS `bi_13434050382395210788` , `bi_1629896623040163776`.`bi_17983062736628275974` AS `bi_10062226076270961956` , `bi_1629896623040163776`.`bi_2661014466711632970` AS `bi_11954887862629511296` , `bi_1629896623040163776`.`bi_14227120684205422351` AS `bi_3492117412568164931` , `bi_1629896623040163776`.`bi_13689588754024198241` AS `bi_10321027500048826608` , `bi_1629896623040163776`.`bi_11029029363983356005` AS `bi_12606902770956817023` , `bi_1629896623040163776`.`bi_6920746512342794880` AS `bi_18075442816513788371` , `bi_1629896623040163776`.`bi_1980803134228074743` AS `bi_14099783523586614727` , `bi_1629896623040163776`.`bi_14864370397929992779` AS `bi_12695042023592498839` , `bi_1629896623040163776`.`bi_8546227886955607403` AS `bi_4239208797248000886` , `bi_1629896623040163776`.`bi_16284813439853843418` AS `bi_17200077373672864161` , `bi_1629896623040163776`.`bi_8240392853651162418` AS `bi_11317402924233406435` , `bi_1629896623040163776`.`bi_16971073333655604621` AS `bi_15276381302277830685` , `bi_1629896623040163776`.`bi_7696488040904043695` AS `bi_7068643571779168619` , `bi_1629896623040163776`.`bi_11474226421585588418` AS `bi_12580580155088099418` , `bi_1629896623040163776`.`bi_15889015133263562243` AS `bi_13884138320943147833` , `bi_1629896623040163776`.`bi_15223331806579081282` AS `bi_2330031524634543350` , `bi_1629896623040163776`.`bi_4248969569151347242` AS `bi_17683842236254744848` , `bi_1629896623040163776`.`bi_17576126933562249528` AS `bi_8516348224075478202` , `bi_1629896623040163776`.`bi_16329074359970793714` AS `bi_14886448026198219230` , `bi_1629896623040163776`.`bi_4893616353618505239` AS `bi_12508236557050679229` , `bi_1629896623040163776`.`bi_3903104604239561382` AS `bi_5816734382253970954` , `bi_1629896623040163776`.`bi_7824035878402166299` AS `bi_10549367430348653081` , `bi_1629896623040163776`.`bi_17834913520635724437` AS `bi_10051309301799120584` , `bi_1629896623040163776`.`bi_4063566549861858298` AS `bi_2431801150469390209` , `bi_1629896623040163776`.`bi_3338788862406713265` AS `bi_7134455716998779934` , `bi_1629896623040163776`.`bi_1963530120962417240` AS `bi_8313462920143718994` , `bi_1629896623040163776`.`bi_5127572173810565873` AS `bi_5328426818013642486` , `bi_1629896623040163776`.`bi_2440282083506678752` AS `bi_12330724632518875914` , `bi_1629896623040163776`.`bi_5524861625849511082` AS `bi_13066215156244610375` , `bi_1629896623040163776`.`bi_10802066210367618989` AS `bi_6506957220190519877` , `bi_1629896623040163776`.`bi_16755292640996306616` AS `bi_13761244412986156037` , `bi_1629896623040163776`.`bi_7327920818219899768` AS `bi_1879664572254281294` , `bi_1629896623040163776`.`bi_13360343267273546668` AS `bi_9364379469724839143` , `bi_1629896623040163776`.`bi_1467213175407054496` AS `bi_9834010471098361478` , `bi_1629896623040163776`.`bi_13600932575276159557` AS `bi_14599308429882337222` , `bi_1629896623040163776`.`bi_10699817008190601050` AS `bi_5857300416620086706` , `bi_1629896623040163776`.`bi_15916860084426853186` AS `bi_1226706381962868243` , `bi_1629896623040163776`.`bi_4007708937737028237` AS `bi_11934267513367244994` , `bi_1629896623040163776`.`bi_7467729968303243062` AS `bi_16894441783425939474` , `bi_1629896623040163776`.`bi_16247278283018779660` AS `bi_15531617539929850014` , `bi_1629896623040163776`.`bi_14123165879102550317` AS `bi_6022429888095396909` , `bi_16518359572041906452`.`bi_15518877374181664639` AS `bi_6056028648987336680` , `bi_16518359572041906452`.`bi_10491841080111616035` AS `bi_4118596661015424762` , `bi_16518359572041906452`.`bi_16048134125873699212` AS `bi_6868808138102825637` , `bi_16518359572041906452`.`bi_11047500209402619491` AS `bi_9304741866346676519` , `bi_16518359572041906452`.`bi_8739345836465617530` AS `bi_7290290633155521899` , `bi_16518359572041906452`.`bi_6439070652440084537` AS `bi_18289883686699341751`  FROM (SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey` AS `bi_16209772373942822610` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator` AS `bi_7173110153481771205` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`created` AS `bi_13491404487973529010` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor` AS `bi_16709338949652660965` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited` AS `bi_7778611651735101528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`id` AS `bi_14306997686607670121` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel` AS `bi_14501539644612575132` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ouname` AS `bi_4746155211965198907` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t` AS `bi_5365439428354097443` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode` AS `bi_17739814079848908328` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`code` AS `bi_2232887874484344045` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode` AS `bi_369040516142209005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetype` AS `bi_1740799749612446421` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename` AS `bi_6559770015537514515` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameprotocol` AS `bi_9889475954848287171` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`name` AS `bi_15189533194949851777` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectsflag` AS `bi_13231105150099224340` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssum` AS `bi_17211859388080424960` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtype` AS `bi_18212787982254017333` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename` AS `bi_7541878364736470844` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`type` AS `bi_7009582161161962629` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename` AS `bi_5792701378059420076` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtype` AS `bi_8397122565340895029` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename` AS `bi_3349638123191173855` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtype` AS `bi_17231762347014911121` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename` AS `bi_15445715632339295217` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatus` AS `bi_12472218524279170739` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname` AS `bi_9114563080665146699` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcontract` AS `bi_221030768505386166` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`foreigninterestinvolved` AS `bi_7769959159290483840` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactions` AS `bi_12538280534418618029` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditch` AS `bi_8874241118748090656` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname` AS `bi_13865388329565152770` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditch` AS `bi_12020212433864986146` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname` AS `bi_12093476229320587287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocation` AS `bi_16675125230853471997` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname` AS `bi_5623662814544693635` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptid` AS `bi_637607595999269167` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname` AS `bi_13683947135958082930` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw` AS `bi_11924957536007553338` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate` AS `bi_614967852965536978` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate` AS `bi_5003822878387321743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate` AS `bi_6413940051808780525` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment` AS `bi_11216260561419591329` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark` AS `bi_15719283721382345906` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertaker` AS `bi_11240345001390265760` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone` AS `bi_2135828979746422287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername` AS `bi_8234557137695700893` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion` AS `bi_5133013160763149225` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedept` AS `bi_17983062736628275974` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname` AS `bi_2661014466711632970` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptcharger` AS `bi_14227120684205422351` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername` AS `bi_13689588754024198241` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate` AS `bi_11029029363983356005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate` AS `bi_6920746512342794880` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate` AS `bi_1980803134228074743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`stage` AS `bi_14864370397929992779` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`status` AS `bi_8546227886955607403` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode` AS `bi_16284813439853843418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`thirdfundditch` AS `bi_8240392853651162418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`supplypaytype` AS `bi_16971073333655604621` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`pricetype` AS `bi_7696488040904043695` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`paymentsupply` AS `bi_11474226421585588418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`istax` AS `bi_15889015133263562243` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectid` AS `bi_15223331806579081282` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`secondobjectid` AS `bi_4248969569151347242` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isunderframework` AS `bi_17576126933562249528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkid` AS `bi_16329074359970793714` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname` AS `bi_4893616353618505239` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreason` AS `bi_3903104604239561382` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail` AS `bi_7824035878402166299` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname` AS `bi_17834913520635724437` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`closedsettlement` AS `bi_4063566549861858298` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`innercontractid` AS `bi_3338788862406713265` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid` AS `bi_1963530120962417240` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname` AS `bi_5127572173810565873` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype` AS `bi_2440282083506678752` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey` AS `bi_5524861625849511082` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isstamped` AS `bi_10802066210367618989` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsid` AS `bi_16755292640996306616` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isonlinesign` AS `bi_7327920818219899768` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid` AS `bi_13360343267273546668` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isdeleted` AS `bi_1467213175407054496` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode` AS `bi_13600932575276159557` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname` AS `bi_10699817008190601050` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short` AS `bi_15916860084426853186` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode` AS `bi_4007708937737028237` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname` AS `bi_7467729968303243062` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short` AS `bi_16247278283018779660` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` AS `bi_14123165879102550317`  FROM (SELECT `temp_sql_wrapper_table`.`rowkey` AS `rowkey` , `temp_sql_wrapper_table`.`creator` AS `creator` , `temp_sql_wrapper_table`.`created` AS `created` , `temp_sql_wrapper_table`.`editor` AS `editor` , `temp_sql_wrapper_table`.`edited` AS `edited` , `temp_sql_wrapper_table`.`id` AS `id` , `temp_sql_wrapper_table`.`oulabel` AS `oulabel` , `temp_sql_wrapper_table`.`ouname` AS `ouname` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`declarecode` AS `declarecode` , `temp_sql_wrapper_table`.`code` AS `code` , `temp_sql_wrapper_table`.`interiorcode` AS `interiorcode` , `temp_sql_wrapper_table`.`choicetype` AS `choicetype` , `temp_sql_wrapper_table`.`choicetypename` AS `choicetypename` , `temp_sql_wrapper_table`.`frameprotocol` AS `frameprotocol` , `temp_sql_wrapper_table`.`name` AS `name` , `temp_sql_wrapper_table`.`objectsflag` AS `objectsflag` , `temp_sql_wrapper_table`.`objectssum` AS `objectssum` , `temp_sql_wrapper_table`.`objectssumtype` AS `objectssumtype` , `temp_sql_wrapper_table`.`objectssumtypename` AS `objectssumtypename` , `temp_sql_wrapper_table`.`type` AS `type` , `temp_sql_wrapper_table`.`typename` AS `typename` , `temp_sql_wrapper_table`.`subtype` AS `subtype` , `temp_sql_wrapper_table`.`subtypename` AS `subtypename` , `temp_sql_wrapper_table`.`endtype` AS `endtype` , `temp_sql_wrapper_table`.`endtypename` AS `endtypename` , `temp_sql_wrapper_table`.`ourstatus` AS `ourstatus` , `temp_sql_wrapper_table`.`ourstatusname` AS `ourstatusname` , `temp_sql_wrapper_table`.`interiorcontract` AS `interiorcontract` , `temp_sql_wrapper_table`.`foreigninterestinvolved` AS `foreigninterestinvolved` , `temp_sql_wrapper_table`.`connectedtransactions` AS `connectedtransactions` , `temp_sql_wrapper_table`.`fundditch` AS `fundditch` , `temp_sql_wrapper_table`.`fundditchname` AS `fundditchname` , `temp_sql_wrapper_table`.`subfundditch` AS `subfundditch` , `temp_sql_wrapper_table`.`subfundditchname` AS `subfundditchname` , `temp_sql_wrapper_table`.`fundallocation` AS `fundallocation` , `temp_sql_wrapper_table`.`fundallocationname` AS `fundallocationname` , `temp_sql_wrapper_table`.`deptid` AS `deptid` , `temp_sql_wrapper_table`.`deptidname` AS `deptidname` , `temp_sql_wrapper_table`.`dependlaw` AS `dependlaw` , `temp_sql_wrapper_table`.`startperformingdate` AS `startperformingdate` , `temp_sql_wrapper_table`.`endperformingdate` AS `endperformingdate` , `temp_sql_wrapper_table`.`performfinishdate` AS `performfinishdate` , `temp_sql_wrapper_table`.`performfinishcomment` AS `performfinishcomment` , `temp_sql_wrapper_table`.`remark` AS `remark` , `temp_sql_wrapper_table`.`undertaker` AS `undertaker` , `temp_sql_wrapper_table`.`undertakerphone` AS `undertakerphone` , `temp_sql_wrapper_table`.`undertakername` AS `undertakername` , `temp_sql_wrapper_table`.`undertakeropinion` AS `undertakeropinion` , `temp_sql_wrapper_table`.`undertakedept` AS `undertakedept` , `temp_sql_wrapper_table`.`undertakedeptname` AS `undertakedeptname` , `temp_sql_wrapper_table`.`deptcharger` AS `deptcharger` , `temp_sql_wrapper_table`.`deptchargername` AS `deptchargername` , `temp_sql_wrapper_table`.`submitteddate` AS `submitteddate` , `temp_sql_wrapper_table`.`createdate` AS `createdate` , `temp_sql_wrapper_table`.`modifydate` AS `modifydate` , `temp_sql_wrapper_table`.`stage` AS `stage` , `temp_sql_wrapper_table`.`status` AS `status` , `temp_sql_wrapper_table`.`localcode` AS `localcode` , `temp_sql_wrapper_table`.`thirdfundditch` AS `thirdfundditch` , `temp_sql_wrapper_table`.`supplypaytype` AS `supplypaytype` , `temp_sql_wrapper_table`.`pricetype` AS `pricetype` , `temp_sql_wrapper_table`.`paymentsupply` AS `paymentsupply` , `temp_sql_wrapper_table`.`istax` AS `istax` , `temp_sql_wrapper_table`.`objectid` AS `objectid` , `temp_sql_wrapper_table`.`secondobjectid` AS `secondobjectid` , `temp_sql_wrapper_table`.`isunderframework` AS `isunderframework` , `temp_sql_wrapper_table`.`frameworkid` AS `frameworkid` , `temp_sql_wrapper_table`.`frameworkname` AS `frameworkname` , `temp_sql_wrapper_table`.`notbiddingreason` AS `notbiddingreason` , `temp_sql_wrapper_table`.`notbiddingreasondetail` AS `notbiddingreasondetail` , `temp_sql_wrapper_table`.`connectedtransactionsname` AS `connectedtransactionsname` , `temp_sql_wrapper_table`.`closedsettlement` AS `closedsettlement` , `temp_sql_wrapper_table`.`innercontractid` AS `innercontractid` , `temp_sql_wrapper_table`.`performanceid` AS `performanceid` , `temp_sql_wrapper_table`.`relatormodel_counterpartyname` AS `relatormodel_counterpartyname` , `temp_sql_wrapper_table`.`relatormodel_orgtype` AS `relatormodel_orgtype` , `temp_sql_wrapper_table`.`relatormodel_rowkey` AS `relatormodel_rowkey` , `temp_sql_wrapper_table`.`isstamped` AS `isstamped` , `temp_sql_wrapper_table`.`connectedtransactionsid` AS `connectedtransactionsid` , `temp_sql_wrapper_table`.`isonlinesign` AS `isonlinesign` , `temp_sql_wrapper_table`.`signexaminationfileid` AS `signexaminationfileid` , `temp_sql_wrapper_table`.`isdeleted` AS `isdeleted` , `temp_sql_wrapper_table`.`groupcode` AS `groupcode` , `temp_sql_wrapper_table`.`groupname` AS `groupname` , `temp_sql_wrapper_table`.`groupname_short` AS `groupname_short` , `temp_sql_wrapper_table`.`regcode` AS `regcode` , `temp_sql_wrapper_table`.`regname` AS `regname` , `temp_sql_wrapper_table`.`regname_short` AS `regname_short` , `temp_sql_wrapper_table`.`etl_date` AS `etl_date`  FROM (SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`created`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`id`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ouname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`code`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameprotocol`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`name`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectsflag`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssum`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`type`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatus`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcontract`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`foreigninterestinvolved`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactions`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocation`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertaker`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedept`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptcharger`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`stage`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`status`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`thirdfundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`supplypaytype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`pricetype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`paymentsupply`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`istax`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`secondobjectid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isunderframework`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreason`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`closedsettlement`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`innercontractid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isstamped`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isonlinesign`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isdeleted`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` FROM `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120` `cnpc_view_ctms_v2_b_contractinfo_c120` ) `temp_sql_wrapper_table`) `cnpc_view_ctms_v2_b_contractinfo_c120`) `bi_1629896623040163776` LEFT OUTER JOIN (SELECT `b_la_v_foreign_counterparty_c120`.`oulabel` AS `bi_15518877374181664639` , `b_la_v_foreign_counterparty_c120`.`oulabel_t` AS `bi_10491841080111616035` , `b_la_v_foreign_counterparty_c120`.`contractid` AS `bi_16048134125873699212` , `b_la_v_foreign_counterparty_c120`.`relativorrelationid` AS `bi_11047500209402619491` , `b_la_v_foreign_counterparty_c120`.`counterpartyname` AS `bi_8739345836465617530` , `b_la_v_foreign_counterparty_c120`.`counterpartyname_key` AS `bi_6439070652440084537`  FROM (SELECT `temp_sql_wrapper_table`.`oulabel` AS `oulabel` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`contractid` AS `contractid` , `temp_sql_wrapper_table`.`relativorrelationid` AS `relativorrelationid` , `temp_sql_wrapper_table`.`counterpartyname` AS `counterpartyname` , `temp_sql_wrapper_table`.`counterpartyname_key` AS `counterpartyname_key`  FROM (SELECT `temp_sub_query_table`.`oulabel`, `temp_sub_query_table`.`oulabel_t`, `temp_sub_query_table`.`contractid`, `temp_sub_query_table`.`relativorrelationid`, `temp_sub_query_table`.`counterpartyname`, `temp_sub_query_table`.`counterpartyname_key` FROM (SELECT `b_la_v_foreign_contractrelativorrelation_c120`.`rowkey`, `b_la_v_foreign_contractrelativorrelation_c120`.`id`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`contractid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativorrelationid`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname_key`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_name`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_relativeid`, `b_la_v_foreign_contractrelativorrelation_c120`.`regionsign`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgname`, `b_la_v_foreign_contractrelativorrelation_c120`.`mdmcode`, `b_la_v_foreign_contractrelativorrelation_c120`.`creator`, `b_la_v_foreign_contractrelativorrelation_c120`.`created`, `b_la_v_foreign_contractrelativorrelation_c120`.`editor`, `b_la_v_foreign_contractrelativorrelation_c120`.`edited`, `b_la_v_foreign_contractrelativorrelation_c120`.`isdeleted`, `b_la_v_foreign_contractrelativorrelation_c120`.`etl_date` FROM `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120` `b_la_v_foreign_contractrelativorrelation_c120` ) `temp_sub_query_table` WHERE (`temp_sub_query_table`.`oulabel_t` LIKE '%辽河油田%') ) `temp_sql_wrapper_table`) `b_la_v_foreign_counterparty_c120`) `bi_16518359572041906452` ON (`bi_16518359572041906452`.`bi_16048134125873699212`=`bi_1629896623040163776`.`bi_14306997686607670121`) LIMIT 100 
I0825 11:44:40.567371 45212 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:40.567395 45212 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:40.567481 45212 coordinator.cc:349] starting execution on 2 backends for query_id=8e4efb02dfcf0f9f:976bc5400000000
I0825 11:44:40.568620 45240 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=8e4efb02dfcf0f9f:976bc5400000000
I0825 11:44:40.568697 45240 query-exec-mgr.cc:46] StartQueryFInstances() query_id=8e4efb02dfcf0f9f:976bc5400000000 coord=e4bdhpp025:22000
I0825 11:44:40.568717 45240 query-state.cc:178] Buffer pool limit for 8e4efb02dfcf0f9f:976bc5400000000: 6871947673
I0825 11:44:40.568763 45240 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 8e4efb02dfcf0f9f:976bc5400000000
I0825 11:44:40.568926 45261 query-state.cc:300] StartFInstances(): query_id=8e4efb02dfcf0f9f:976bc5400000000 #instances=2
I0825 11:44:40.569278 45261 query-state.cc:313] descriptor table for query=8e4efb02dfcf0f9f:976bc5400000000
tuples:
Tuple(id=4 size=97 slots=[Slot(id=362 type=DECIMAL(38,0) col_path=[2] offset=0 null=(offset=96 mask=1) slot_idx=0 field_idx=-1), Slot(id=363 type=STRING col_path=[3] offset=16 null=(offset=96 mask=2) slot_idx=1 field_idx=-1), Slot(id=364 type=DECIMAL(38,0) col_path=[4] offset=32 null=(offset=96 mask=4) slot_idx=2 field_idx=-1), Slot(id=365 type=STRING col_path=[5] offset=48 null=(offset=96 mask=8) slot_idx=3 field_idx=-1), Slot(id=366 type=STRING col_path=[6] offset=64 null=(offset=96 mask=10) slot_idx=4 field_idx=-1), Slot(id=367 type=STRING col_path=[7] offset=80 null=(offset=96 mask=20) slot_idx=5 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=1452 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=1440 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=1440 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=TIMESTAMP col_path=[2] offset=32 null=(offset=1440 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[3] offset=48 null=(offset=1440 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=TIMESTAMP col_path=[4] offset=64 null=(offset=1440 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=DECIMAL(38,0) col_path=[5] offset=80 null=(offset=1440 mask=20) slot_idx=5 field_idx=-1), Slot(id=6 type=DECIMAL(38,0) col_path=[6] offset=96 null=(offset=1440 mask=40) slot_idx=6 field_idx=-1), Slot(id=7 type=STRING col_path=[7] offset=112 null=(offset=1440 mask=80) slot_idx=7 field_idx=-1), Slot(id=8 type=STRING col_path=[8] offset=128 null=(offset=1441 mask=1) slot_idx=8 field_idx=-1), Slot(id=9 type=STRING col_path=[9] offset=144 null=(offset=1441 mask=2) slot_idx=9 field_idx=-1), Slot(id=10 type=STRING col_path=[10] offset=160 null=(offset=1441 mask=4) slot_idx=10 field_idx=-1), Slot(id=11 type=STRING col_path=[11] offset=176 null=(offset=1441 mask=8) slot_idx=11 field_idx=-1), Slot(id=12 type=DECIMAL(38,0) col_path=[12] offset=192 null=(offset=1441 mask=10) slot_idx=12 field_idx=-1), Slot(id=13 type=STRING col_path=[13] offset=208 null=(offset=1441 mask=20) slot_idx=13 field_idx=-1), Slot(id=14 type=DECIMAL(38,0) col_path=[14] offset=224 null=(offset=1441 mask=40) slot_idx=14 field_idx=-1), Slot(id=15 type=STRING col_path=[15] offset=240 null=(offset=1441 mask=80) slot_idx=15 field_idx=-1), Slot(id=16 type=DECIMAL(38,0) col_path=[16] offset=256 null=(offset=1442 mask=1) slot_idx=16 field_idx=-1), Slot(id=17 type=DECIMAL(20,2) col_path=[17] offset=272 null=(offset=1442 mask=2) slot_idx=17 field_idx=-1), Slot(id=18 type=DECIMAL(38,0) col_path=[18] offset=288 null=(offset=1442 mask=4) slot_idx=18 field_idx=-1), Slot(id=19 type=STRING col_path=[19] offset=304 null=(offset=1442 mask=8) slot_idx=19 field_idx=-1), Slot(id=20 type=DECIMAL(38,0) col_path=[20] offset=320 null=(offset=1442 mask=10) slot_idx=20 field_idx=-1), Slot(id=21 type=STRING col_path=[21] offset=336 null=(offset=1442 mask=20) slot_idx=21 field_idx=-1), Slot(id=22 type=DECIMAL(38,0) col_path=[22] offset=352 null=(offset=1442 mask=40) slot_idx=22 field_idx=-1), Slot(id=23 type=STRING col_path=[23] offset=368 null=(offset=1442 mask=80) slot_idx=23 field_idx=-1), Slot(id=24 type=DECIMAL(38,0) col_path=[24] offset=384 null=(offset=1443 mask=1) slot_idx=24 field_idx=-1), Slot(id=25 type=STRING col_path=[25] offset=400 null=(offset=1443 mask=2) slot_idx=25 field_idx=-1), Slot(id=26 type=DECIMAL(38,0) col_path=[26] offset=416 null=(offset=1443 mask=4) slot_idx=26 field_idx=-1), Slot(id=27 type=STRING col_path=[27] offset=432 null=(offset=1443 mask=8) slot_idx=27 field_idx=-1), Slot(id=28 type=DECIMAL(38,0) col_path=[28] offset=448 null=(offset=1443 mask=10) slot_idx=28 field_idx=-1), Slot(id=29 type=DECIMAL(38,0) col_path=[29] offset=464 null=(offset=1443 mask=20) slot_idx=29 field_idx=-1), Slot(id=30 type=DECIMAL(38,0) col_path=[30] offset=480 null=(offset=1443 mask=40) slot_idx=30 field_idx=-1), Slot(id=31 type=DECIMAL(38,0) col_path=[31] offset=496 null=(offset=1443 mask=80) slot_idx=31 field_idx=-1), Slot(id=32 type=STRING col_path=[32] offset=512 null=(offset=1444 mask=1) slot_idx=32 field_idx=-1), Slot(id=33 type=DECIMAL(38,0) col_path=[33] offset=528 null=(offset=1444 mask=2) slot_idx=33 field_idx=-1), Slot(id=34 type=STRING col_path=[34] offset=544 null=(offset=1444 mask=4) slot_idx=34 field_idx=-1), Slot(id=35 type=DECIMAL(38,0) col_path=[35] offset=560 null=(offset=1444 mask=8) slot_idx=35 field_idx=-1), Slot(id=36 type=STRING col_path=[36] offset=576 null=(offset=1444 mask=10) slot_idx=36 field_idx=-1), Slot(id=37 type=DECIMAL(38,0) col_path=[37] offset=592 null=(offset=1444 mask=20) slot_idx=37 field_idx=-1), Slot(id=38 type=STRING col_path=[38] offset=608 null=(offset=1444 mask=40) slot_idx=38 field_idx=-1), Slot(id=39 type=STRING col_path=[39] offset=624 null=(offset=1444 mask=80) slot_idx=39 field_idx=-1), Slot(id=40 type=TIMESTAMP col_path=[40] offset=640 null=(offset=1445 mask=1) slot_idx=40 field_idx=-1), Slot(id=41 type=TIMESTAMP col_path=[41] offset=656 null=(offset=1445 mask=2) slot_idx=41 field_idx=-1), Slot(id=42 type=TIMESTAMP col_path=[42] offset=672 null=(offset=1445 mask=4) slot_idx=42 field_idx=-1), Slot(id=43 type=STRING col_path=[43] offset=688 null=(offset=1445 mask=8) slot_idx=43 field_idx=-1), Slot(id=44 type=STRING col_path=[44] offset=704 null=(offset=1445 mask=10) slot_idx=44 field_idx=-1), Slot(id=45 type=DECIMAL(38,0) col_path=[45] offset=720 null=(offset=1445 mask=20) slot_idx=45 field_idx=-1), Slot(id=46 type=STRING col_path=[46] offset=736 null=(offset=1445 mask=40) slot_idx=46 field_idx=-1), Slot(id=47 type=STRING col_path=[47] offset=752 null=(offset=1445 mask=80) slot_idx=47 field_idx=-1), Slot(id=48 type=STRING col_path=[48] offset=768 null=(offset=1446 mask=1) slot_idx=48 field_idx=-1), Slot(id=49 type=DECIMAL(38,0) col_path=[49] offset=784 null=(offset=1446 mask=2) slot_idx=49 field_idx=-1), Slot(id=50 type=STRING col_path=[50] offset=800 null=(offset=1446 mask=4) slot_idx=50 field_idx=-1), Slot(id=51 type=DECIMAL(38,0) col_path=[51] offset=816 null=(offset=1446 mask=8) slot_idx=51 field_idx=-1), Slot(id=52 type=STRING col_path=[52] offset=832 null=(offset=1446 mask=10) slot_idx=52 field_idx=-1), Slot(id=53 type=TIMESTAMP col_path=[53] offset=848 null=(offset=1446 mask=20) slot_idx=53 field_idx=-1), Slot(id=54 type=TIMESTAMP col_path=[54] offset=864 null=(offset=1446 mask=40) slot_idx=54 field_idx=-1), Slot(id=55 type=TIMESTAMP col_path=[55] offset=880 null=(offset=1446 mask=80) slot_idx=55 field_idx=-1), Slot(id=56 type=DECIMAL(38,0) col_path=[56] offset=896 null=(offset=1447 mask=1) slot_idx=56 field_idx=-1), Slot(id=57 type=DECIMAL(38,0) col_path=[57] offset=912 null=(offset=1447 mask=2) slot_idx=57 field_idx=-1), Slot(id=58 type=STRING col_path=[58] offset=928 null=(offset=1447 mask=4) slot_idx=58 field_idx=-1), Slot(id=59 type=DECIMAL(38,0) col_path=[59] offset=944 null=(offset=1447 mask=8) slot_idx=59 field_idx=-1), Slot(id=60 type=DECIMAL(38,0) col_path=[60] offset=960 null=(offset=1447 mask=10) slot_idx=60 field_idx=-1), Slot(id=61 type=DECIMAL(38,0) col_path=[61] offset=976 null=(offset=1447 mask=20) slot_idx=61 field_idx=-1), Slot(id=62 type=DECIMAL(20,2) col_path=[62] offset=992 null=(offset=1447 mask=40) slot_idx=62 field_idx=-1), Slot(id=63 type=DECIMAL(38,0) col_path=[63] offset=1008 null=(offset=1447 mask=80) slot_idx=63 field_idx=-1), Slot(id=64 type=DECIMAL(38,0) col_path=[64] offset=1024 null=(offset=1448 mask=1) slot_idx=64 field_idx=-1), Slot(id=65 type=DECIMAL(38,0) col_path=[65] offset=1040 null=(offset=1448 mask=2) slot_idx=65 field_idx=-1), Slot(id=66 type=DECIMAL(38,0) col_path=[66] offset=1056 null=(offset=1448 mask=4) slot_idx=66 field_idx=-1), Slot(id=67 type=DECIMAL(38,0) col_path=[67] offset=1072 null=(offset=1448 mask=8) slot_idx=67 field_idx=-1), Slot(id=68 type=STRING col_path=[68] offset=1088 null=(offset=1448 mask=10) slot_idx=68 field_idx=-1), Slot(id=69 type=DECIMAL(38,0) col_path=[69] offset=1104 null=(offset=1448 mask=20) slot_idx=69 field_idx=-1), Slot(id=70 type=STRING col_path=[70] offset=1120 null=(offset=1448 mask=40) slot_idx=70 field_idx=-1), Slot(id=71 type=STRING col_path=[71] offset=1136 null=(offset=1448 mask=80) slot_idx=71 field_idx=-1), Slot(id=72 type=DECIMAL(38,0) col_path=[72] offset=1152 null=(offset=1449 mask=1) slot_idx=72 field_idx=-1), Slot(id=73 type=DECIMAL(38,0) col_path=[73] offset=1168 null=(offset=1449 mask=2) slot_idx=73 field_idx=-1), Slot(id=74 type=STRING col_path=[74] offset=1184 null=(offset=1449 mask=4) slot_idx=74 field_idx=-1), Slot(id=75 type=STRING col_path=[75] offset=1200 null=(offset=1449 mask=8) slot_idx=75 field_idx=-1), Slot(id=76 type=STRING col_path=[76] offset=1216 null=(offset=1449 mask=10) slot_idx=76 field_idx=-1), Slot(id=77 type=STRING col_path=[77] offset=1232 null=(offset=1449 mask=20) slot_idx=77 field_idx=-1), Slot(id=78 type=DECIMAL(38,0) col_path=[78] offset=1248 null=(offset=1449 mask=40) slot_idx=78 field_idx=-1), Slot(id=79 type=DECIMAL(38,0) col_path=[79] offset=1264 null=(offset=1449 mask=80) slot_idx=79 field_idx=-1), Slot(id=80 type=DECIMAL(38,0) col_path=[80] offset=1280 null=(offset=1450 mask=1) slot_idx=80 field_idx=-1), Slot(id=81 type=STRING col_path=[81] offset=1296 null=(offset=1450 mask=2) slot_idx=81 field_idx=-1), Slot(id=82 type=DECIMAL(38,0) col_path=[82] offset=1312 null=(offset=1450 mask=4) slot_idx=82 field_idx=-1), Slot(id=83 type=STRING col_path=[83] offset=1328 null=(offset=1450 mask=8) slot_idx=83 field_idx=-1), Slot(id=84 type=STRING col_path=[84] offset=1344 null=(offset=1450 mask=10) slot_idx=84 field_idx=-1), Slot(id=85 type=STRING col_path=[85] offset=1360 null=(offset=1450 mask=20) slot_idx=85 field_idx=-1), Slot(id=86 type=STRING col_path=[86] offset=1376 null=(offset=1450 mask=40) slot_idx=86 field_idx=-1), Slot(id=87 type=STRING col_path=[87] offset=1392 null=(offset=1450 mask=80) slot_idx=87 field_idx=-1), Slot(id=88 type=STRING col_path=[88] offset=1408 null=(offset=1451 mask=1) slot_idx=88 field_idx=-1), Slot(id=89 type=TIMESTAMP col_path=[89] offset=1424 null=(offset=1451 mask=2) slot_idx=89 field_idx=-1)] tuple_path=[])
I0825 11:44:40.569422 45262 query-state.cc:395] Executing instance. instance_id=8e4efb02dfcf0f9f:976bc5400000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=1 #in-flight=3
I0825 11:44:40.569496 45263 query-state.cc:395] Executing instance. instance_id=8e4efb02dfcf0f9f:976bc5400000001 fragment_idx=2 per_fragment_instance_idx=0 coord_state_idx=1 #in-flight=4
I0825 11:44:40.569615 45263 hdfs-scan-node.cc:160] Max row batch queue size for scan node '1' in fragment instance '8e4efb02dfcf0f9f:976bc5400000001': 190
I0825 11:44:40.570205 45261 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=8e4efb02dfcf0f9f:976bc5400000000 refcnt=4
I0825 11:44:40.574280 45212 coordinator.cc:362] started execution on 2 backends for query_id=8e4efb02dfcf0f9f:976bc5400000000
I0825 11:44:40.575217 45212 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x9f\x0f\xcf\xdf\x02\xfbN\x8e\x00\x00\x00\x00T\xbcv\t",
      02: secret (string) = "\x9f\x0f\xcf\xdf\x02\xfbN\x8e\x00\x00\x00\x00T\xbcv\t",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
W0825 11:44:41.158025 43859 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:44:41.158504 43859 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1324210723_BP-1820042964-11.11.206.232-1548063025113
I0825 11:44:41.186230 45245 thrift-util.cc:123] TSocket::read() recv() <Host: ::ffff:11.11.206.244 Port: 59422>Connection reset by peer
I0825 11:44:41.186342 45245 thrift-util.cc:123] TAcceptQueueServer client died: ECONNRESET
I0825 11:44:41.344309 45191 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=6241cc11a19fe1e9:bb00d49400000000, node=5
I0825 11:44:41.344367 45191 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=6241cc11a19fe1e9:bb00d49400000000 node_id=5
I0825 11:44:41.348839 45179 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=6241cc11a19fe1e9:bb00d49400000000
I0825 11:44:41.348953 45179 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[1] {
      [0] = TColumnDesc {
        01: columnName (string) = "expr_1",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
    },
  },
}
I0825 11:44:41.350584 45179 coordinator.cc:522] Coordinator waiting for backends to finish, 2 remaining. query_id=6241cc11a19fe1e9:bb00d49400000000
I0825 11:44:41.350832 44904 coordinator.cc:689] Backend completed:  host=e4bdhpp025:22000 remaining=1 query_id=6241cc11a19fe1e9:bb00d49400000000
I0825 11:44:41.350896 44904 coordinator-backend-state.cc:226] query_id=6241cc11a19fe1e9:bb00d49400000000: first in-progress backend: e4bdhpp018:22000
I0825 11:44:41.351125 45191 query-state.cc:403] Instance completed. instance_id=6241cc11a19fe1e9:bb00d49400000000 #in-flight=3 status=OK
I0825 11:44:41.351194 45191 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=6241cc11a19fe1e9:bb00d49400000000 refcnt=2
I0825 11:44:41.352525 44128 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp018@PANEL.COM" on an internal connection
I0825 11:44:41.353554 45179 coordinator.cc:527] All backends finished successfully. query_id=6241cc11a19fe1e9:bb00d49400000000
I0825 11:44:41.353608 45179 coordinator.cc:783] Release admission control resources for query_id=6241cc11a19fe1e9:bb00d49400000000
I0825 11:44:41.355024 45179 impala-hs2-server.cc:683] CloseOperation(): query_id=6241cc11a19fe1e9:bb00d49400000000
I0825 11:44:41.355057 45179 impala-server.cc:1015] UnregisterQuery(): query_id=6241cc11a19fe1e9:bb00d49400000000
I0825 11:44:41.355078 45179 impala-server.cc:1102] Cancel(): query_id=6241cc11a19fe1e9:bb00d49400000000
I0825 11:44:41.355098 45179 coordinator.cc:629] Cancel() query_id=6241cc11a19fe1e9:bb00d49400000000
I0825 11:44:41.355119 45179 coordinator.cc:639] CancelBackends() query_id=6241cc11a19fe1e9:bb00d49400000000, tried to cancel 0 backends
I0825 11:44:41.359702 45179 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=6241cc11a19fe1e9:bb00d49400000000 refcnt=1
I0825 11:44:41.366142 45179 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xca 5\xd8\x8c^H\xe6\x85\xd5\xc5a\x06\xa8\x88\xac",
      02: secret (string) = "a~\xf2\xa1\xf2CC\xa9\x95#\x8cB\xb7`l\x0f",
    },
  },
}
I0825 11:44:41.366966 45179 thrift-util.cc:123] TSocket::read() recv() <Host: ::ffff:11.11.237.129 Port: 52650>Connection reset by peer
I0825 11:44:41.367022 45179 thrift-util.cc:123] TAcceptQueueServer client died: ECONNRESET
I0825 11:44:41.367038 45179 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:52650 closed, closing 1 associated session(s)
I0825 11:44:42.106614 45263 query-state.cc:403] Instance completed. instance_id=8e4efb02dfcf0f9f:976bc5400000001 #in-flight=2 status=OK
I0825 11:44:42.106825 45263 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=8e4efb02dfcf0f9f:976bc5400000000 refcnt=3
I0825 11:44:42.599718 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:44:42.600178 45417 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:44:42.600872 45417 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xdb\x84\x0f\xa4\x19SBb\x91g\xe3\x7f\x7fzz;",
      02: secret (string) = "\x02\xf1-%\x1f\x9bI\xee\xb5\xc8uK]/\xc9 ",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:44:42.615550 45417 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xdb\x84\x0f\xa4\x19SBb\x91g\xe3\x7f\x7fzz;",
      02: secret (string) = "\x02\xf1-%\x1f\x9bI\xee\xb5\xc8uK]/\xc9 ",
    },
  },
}
I0825 11:44:42.616067 45417 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:53290 closed, closing 1 associated session(s)
I0825 11:44:42.748818 45212 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=8e4efb02dfcf0f9f:976bc5400000000
I0825 11:44:42.750571 45212 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[96] {
      [0] = TColumnDesc {
        01: columnName (string) = "bi_2944829011289479947",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "bi_5953783576266104954",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "bi_13655597951839598282",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "bi_13573710983760428890",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "bi_13817896909621530670",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "bi_18248539146770547393",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "bi_14976186021494732360",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 6,
      },
      [7] = TColumnDesc {
        01: columnName (string) = "bi_17259628858125739362",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 7,
      },
      [8] = TColumnDesc {
        01: columnName (string) = "bi_2555956919959810295",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 8,
      },
      [9] = TColumnDesc {
        01: columnName (string) = "bi_13034846614870329522",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 9,
      },
      [10] = TColumnDesc {
        01: columnName (string) = "bi_13490087918498918727",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 10,
      },
      [11] = TColumnDesc {
        01: columnName (string) = "bi_2328756620035106277",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 11,
      },
      [12] = TColumnDesc {
        01: columnName (string) = "bi_16428435346825106840",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 12,
      },
      [13] = TColumnDesc {
        01: columnName (string) = "bi_7415399836459864143",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 13,
      },
      [14] = TColumnDesc {
        01: columnName (string) = "bi_2356362670806359424",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 14,
      },
      [15] = TColumnDesc {
        01: columnName (string) = "bi_10662244814440924847",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 15,
      },
      [16] = TColumnDesc {
        01: columnName (string) = "bi_2328940806037813596",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 16,
      },
      [17] = TColumnDesc {
        01: columnName (string) = "bi_8560968020071645437",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 20,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 17,
      },
      [18] = TColumnDesc {
        01: columnName (string) = "bi_16504308885056355441",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 18,
      },
      [19] = TColumnDesc {
        01: columnName (string) = "bi_16378247719528958848",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 19,
      },
      [20] = TColumnDesc {
        01: columnName (string) = "bi_1609568228441625187",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 20,
      },
      [21] = TColumnDesc {
        01: columnName (string) = "bi_11892599068060811879",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 21,
      },
      [22] = TColumnDesc {
        01: columnName (string) = "bi_16992178380690073238",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 22,
      },
      [23] = TColumnDesc {
        01: columnName (string) = "bi_3112912313127363565",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 23,
      },
      [24] = TColumnDesc {
        01: columnName (string) = "bi_11553703802893646166",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 24,
      },
      [25] = TColumnDesc {
        01: columnName (string) = "bi_9197148227539578406",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 25,
      },
      [26] = TColumnDesc {
        01: columnName (string) = "bi_10209036311467977518",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 26,
      },
      [27] = TColumnDesc {
        01: columnName (string) = "bi_10949189359338245209",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 27,
      },
      [28] = TColumnDesc {
        01: columnName (string) = "bi_2088623641132852051",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 28,
      },
      [29] = TColumnDesc {
        01: columnName (string) = "bi_9364752072844994980",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 29,
      },
      [30] = TColumnDesc {
        01: columnName (string) = "bi_11796317628036368486",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 30,
      },
      [31] = TColumnDesc {
        01: columnName (string) = "bi_6153022619153359078",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 31,
      },
      [32] = TColumnDesc {
        01: columnName (string) = "bi_17443246627620264516",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 32,
      },
      [33] = TColumnDesc {
        01: columnName (string) = "bi_13723858199496398933",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 33,
      },
      [34] = TColumnDesc {
        01: columnName (string) = "bi_3581630941043703681",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 34,
      },
      [35] = TColumnDesc {
        01: columnName (string) = "bi_13681721794718965570",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 35,
      },
      [36] = TColumnDesc {
        01: columnName (string) = "bi_10791170134402539197",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 36,
      },
      [37] = TColumnDesc {
        01: columnName (string) = "bi_13513081267924706892",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 37,
      },
      [38] = TColumnDesc {
        01: columnName (string) = "bi_2746795928583001368",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 38,
      },
      [39] = TColumnDesc {
        01: columnName (string) = "bi_2617547140475864180",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 39,
      },
      [40] = TColumnDesc {
        01: columnName (string) = "bi_3842000631415872702",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 40,
      },
      [41] = TColumnDesc {
        01: columnName (string) = "bi_16935043003514788035",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 41,
      },
      [42] = TColumnDesc {
        01: columnName (string) = "bi_8541756125762500444",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 42,
      },
      [43] = TColumnDesc {
        01: columnName (string) = "bi_17225725155727075212",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 43,
      },
      [44] = TColumnDesc {
        01: columnName (string) = "bi_13136658416044849864",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 44,
      },
      [45] = TColumnDesc {
        01: columnName (string) = "bi_177195317430621159",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 45,
      },
      [46] = TColumnDesc {
        01: columnName (string) = "bi_2499397883029971127",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 46,
      },
      [47] = TColumnDesc {
        01: columnName (string) = "bi_11017376164915385890",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 47,
      },
      [48] = TColumnDesc {
        01: columnName (string) = "bi_13434050382395210788",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 48,
      },
      [49] = TColumnDesc {
        01: columnName (string) = "bi_10062226076270961956",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 49,
      },
      [50] = TColumnDesc {
        01: columnName (string) = "bi_11954887862629511296",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 50,
      },
      [51] = TColumnDesc {
        01: columnName (string) = "bi_3492117412568164931",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TType
I0825 11:44:42.751019 44128 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp018@PANEL.COM" on an internal connection
I0825 11:44:42.752038 45418 coordinator.cc:689] Backend completed:  host=e4bdhpp018:22000 remaining=1 query_id=8e4efb02dfcf0f9f:976bc5400000000
I0825 11:44:42.752108 45418 coordinator-backend-state.cc:226] query_id=8e4efb02dfcf0f9f:976bc5400000000: first in-progress backend: e4bdhpp025:22000
I0825 11:44:42.762578 45212 coordinator.cc:527] All backends finished successfully. query_id=8e4efb02dfcf0f9f:976bc5400000000
I0825 11:44:42.762638 45262 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=8e4efb02dfcf0f9f:976bc5400000000, node=4
I0825 11:44:42.762657 45212 coordinator.cc:783] Release admission control resources for query_id=8e4efb02dfcf0f9f:976bc5400000000
I0825 11:44:42.762681 45262 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=8e4efb02dfcf0f9f:976bc5400000000 node_id=4
I0825 11:44:42.762738 45262 query-state.cc:403] Instance completed. instance_id=8e4efb02dfcf0f9f:976bc5400000000 #in-flight=1 status=OK
I0825 11:44:42.762766 45262 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=8e4efb02dfcf0f9f:976bc5400000000 refcnt=2
I0825 11:44:42.784893 45212 impala-hs2-server.cc:683] CloseOperation(): query_id=8e4efb02dfcf0f9f:976bc5400000000
I0825 11:44:42.784927 45212 impala-server.cc:1015] UnregisterQuery(): query_id=8e4efb02dfcf0f9f:976bc5400000000
I0825 11:44:42.784945 45212 impala-server.cc:1102] Cancel(): query_id=8e4efb02dfcf0f9f:976bc5400000000
I0825 11:44:42.784957 45212 coordinator.cc:629] Cancel() query_id=8e4efb02dfcf0f9f:976bc5400000000
I0825 11:44:42.784971 45212 coordinator.cc:639] CancelBackends() query_id=8e4efb02dfcf0f9f:976bc5400000000, tried to cancel 0 backends
I0825 11:44:42.789579 45212 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=8e4efb02dfcf0f9f:976bc5400000000 refcnt=1
I0825 11:44:42.797657 45212 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "r\xdb\x95\x9e\xcd\xd9@/\x8d\x8a\xd2SN\xff\x90\xea",
      02: secret (string) = "\x10H\xdf^{%Av\x93\xa2\x9d\xf3\xa4\x04\xaa\x90",
    },
  },
}
I0825 11:44:42.798521 45212 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:52750 closed, closing 1 associated session(s)
I0825 11:44:43.468991 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:44:43.469435 45424 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:44:43.487241 45424 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "Y0\x16\x1d\x1b\xf3I,\x99\xd6\xf8x\xe6\xca`\xcf",
      02: secret (string) = "\xb4r\x9c~VzLj\x8c\xb5K\x9c\xc3\xe0b\xd2",
    },
  },
  02: statement (string) = "use dw20",
  04: runAsync (bool) = true,
}
I0825 11:44:43.487295 45424 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "Y0\x16\x1d\x1b\xf3I,\x99\xd6\xf8x\xe6\xca`\xcf",
      02: secret (string) = "\xb4r\x9c~VzLj\x8c\xb5K\x9c\xc3\xe0b\xd2",
    },
  },
  02: statement (string) = "use dw20",
  04: runAsync (bool) = true,
}
I0825 11:44:43.487984 45424 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:43.490525 45424 Frontend.java:935] Analyzing query: use dw20
I0825 11:44:43.491183 45424 Frontend.java:947] Analysis finished.
I0825 11:44:43.526147 45424 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xdd\xa7C\xc8wXKv\x00\x00\x00\x00\xf8;\xf3\xfd",
      02: secret (string) = "\xdd\xa7C\xc8wXKv\x00\x00\x00\x00\xf8;\xf3\xfd",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:44:43.532042 45424 impala-hs2-server.cc:683] CloseOperation(): query_id=764b5877c843a7dd:fdf33bf800000000
I0825 11:44:43.532147 45424 impala-server.cc:1015] UnregisterQuery(): query_id=764b5877c843a7dd:fdf33bf800000000
I0825 11:44:43.532186 45424 impala-server.cc:1102] Cancel(): query_id=764b5877c843a7dd:fdf33bf800000000
I0825 11:44:43.555702 45424 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "Y0\x16\x1d\x1b\xf3I,\x99\xd6\xf8x\xe6\xca`\xcf",
      02: secret (string) = "\xb4r\x9c~VzLj\x8c\xb5K\x9c\xc3\xe0b\xd2",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:44:43.555794 45424 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "Y0\x16\x1d\x1b\xf3I,\x99\xd6\xf8x\xe6\xca`\xcf",
      02: secret (string) = "\xb4r\x9c~VzLj\x8c\xb5K\x9c\xc3\xe0b\xd2",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:44:43.556164 45424 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:43.558432 45424 Frontend.java:935] Analyzing query: set mem_limit='8g'
I0825 11:44:43.558663 45424 Frontend.java:947] Analysis finished.
I0825 11:44:43.558996 45424 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x02\x13H\x95OQ@7\x00\x00\x00\x00\xff\xe9}\x1d",
      02: secret (string) = "\x02\x13H\x95OQ@7\x00\x00\x00\x00\xff\xe9}\x1d",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:44:43.564329 45424 impala-hs2-server.cc:683] CloseOperation(): query_id=3740514f95481302:1d7de9ff00000000
I0825 11:44:43.564414 45424 impala-server.cc:1015] UnregisterQuery(): query_id=3740514f95481302:1d7de9ff00000000
I0825 11:44:43.564450 45424 impala-server.cc:1102] Cancel(): query_id=3740514f95481302:1d7de9ff00000000
I0825 11:44:43.572728 45424 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "Y0\x16\x1d\x1b\xf3I,\x99\xd6\xf8x\xe6\xca`\xcf",
      02: secret (string) = "\xb4r\x9c~VzLj\x8c\xb5K\x9c\xc3\xe0b\xd2",
    },
  },
  02: statement (string) = "DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`",
  04: runAsync (bool) = true,
}
I0825 11:44:43.572815 45424 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "Y0\x16\x1d\x1b\xf3I,\x99\xd6\xf8x\xe6\xca`\xcf",
      02: secret (string) = "\xb4r\x9c~VzLj\x8c\xb5K\x9c\xc3\xe0b\xd2",
    },
  },
  02: statement (string) = "DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`",
  04: runAsync (bool) = true,
}
I0825 11:44:43.573033 45424 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:43.575140 45424 Frontend.java:935] Analyzing query: DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`
I0825 11:44:43.575914 45424 Frontend.java:947] Analysis finished.
I0825 11:44:43.608322 45424 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "M\x1b\xcd\x18\xd1\x8bJ&\x00\x00\x00\x00\x8a\x06\xff\x99",
      02: secret (string) = "M\x1b\xcd\x18\xd1\x8bJ&\x00\x00\x00\x00\x8a\x06\xff\x99",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:44:43.611383 45424 impala-hs2-server.cc:683] CloseOperation(): query_id=264a8bd118cd1b4d:99ff068a00000000
I0825 11:44:43.611403 45424 impala-server.cc:1015] UnregisterQuery(): query_id=264a8bd118cd1b4d:99ff068a00000000
I0825 11:44:43.611419 45424 impala-server.cc:1102] Cancel(): query_id=264a8bd118cd1b4d:99ff068a00000000
I0825 11:44:43.622993 45424 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "Y0\x16\x1d\x1b\xf3I,\x99\xd6\xf8x\xe6\xca`\xcf",
      02: secret (string) = "\xb4r\x9c~VzLj\x8c\xb5K\x9c\xc3\xe0b\xd2",
    },
  },
  02: statement (string) = "SELECT `cnpc_vie[...](18389)",
  04: runAsync (bool) = true,
}
I0825 11:44:43.623049 45424 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "Y0\x16\x1d\x1b\xf3I,\x99\xd6\xf8x\xe6\xca`\xcf",
      02: secret (string) = "\xb4r\x9c~VzLj\x8c\xb5K\x9c\xc3\xe0b\xd2",
    },
  },
  02: statement (string) = "SELECT `cnpc_vie[...](18389)",
  04: runAsync (bool) = true,
}
I0825 11:44:43.623363 45424 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:43.674110 45424 Frontend.java:935] Analyzing query: SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey` AS `bi_16209772373942822610` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator` AS `bi_7173110153481771205` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`created` AS `bi_13491404487973529010` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor` AS `bi_16709338949652660965` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited` AS `bi_7778611651735101528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`id` AS `bi_14306997686607670121` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel` AS `bi_14501539644612575132` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ouname` AS `bi_4746155211965198907` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t` AS `bi_5365439428354097443` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode` AS `bi_17739814079848908328` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`code` AS `bi_2232887874484344045` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode` AS `bi_369040516142209005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetype` AS `bi_1740799749612446421` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename` AS `bi_6559770015537514515` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameprotocol` AS `bi_9889475954848287171` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`name` AS `bi_15189533194949851777` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectsflag` AS `bi_13231105150099224340` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssum` AS `bi_17211859388080424960` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtype` AS `bi_18212787982254017333` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename` AS `bi_7541878364736470844` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`type` AS `bi_7009582161161962629` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename` AS `bi_5792701378059420076` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtype` AS `bi_8397122565340895029` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename` AS `bi_3349638123191173855` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtype` AS `bi_17231762347014911121` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename` AS `bi_15445715632339295217` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatus` AS `bi_12472218524279170739` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname` AS `bi_9114563080665146699` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcontract` AS `bi_221030768505386166` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`foreigninterestinvolved` AS `bi_7769959159290483840` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactions` AS `bi_12538280534418618029` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditch` AS `bi_8874241118748090656` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname` AS `bi_13865388329565152770` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditch` AS `bi_12020212433864986146` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname` AS `bi_12093476229320587287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocation` AS `bi_16675125230853471997` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname` AS `bi_5623662814544693635` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptid` AS `bi_637607595999269167` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname` AS `bi_13683947135958082930` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw` AS `bi_11924957536007553338` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate` AS `bi_614967852965536978` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate` AS `bi_5003822878387321743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate` AS `bi_6413940051808780525` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment` AS `bi_11216260561419591329` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark` AS `bi_15719283721382345906` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertaker` AS `bi_11240345001390265760` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone` AS `bi_2135828979746422287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername` AS `bi_8234557137695700893` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion` AS `bi_5133013160763149225` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedept` AS `bi_17983062736628275974` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname` AS `bi_2661014466711632970` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptcharger` AS `bi_14227120684205422351` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername` AS `bi_13689588754024198241` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate` AS `bi_11029029363983356005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate` AS `bi_6920746512342794880` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate` AS `bi_1980803134228074743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`stage` AS `bi_14864370397929992779` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`status` AS `bi_8546227886955607403` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode` AS `bi_16284813439853843418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`thirdfundditch` AS `bi_8240392853651162418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`supplypaytype` AS `bi_16971073333655604621` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`pricetype` AS `bi_7696488040904043695` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`paymentsupply` AS `bi_11474226421585588418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`istax` AS `bi_15889015133263562243` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectid` AS `bi_15223331806579081282` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`secondobjectid` AS `bi_4248969569151347242` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isunderframework` AS `bi_17576126933562249528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkid` AS `bi_16329074359970793714` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname` AS `bi_4893616353618505239` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreason` AS `bi_3903104604239561382` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail` AS `bi_7824035878402166299` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname` AS `bi_17834913520635724437` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`closedsettlement` AS `bi_4063566549861858298` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`innercontractid` AS `bi_3338788862406713265` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid` AS `bi_1963530120962417240` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname` AS `bi_5127572173810565873` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype` AS `bi_2440282083506678752` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey` AS `bi_5524861625849511082` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isstamped` AS `bi_10802066210367618989` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsid` AS `bi_16755292640996306616` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isonlinesign` AS `bi_7327920818219899768` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid` AS `bi_13360343267273546668` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isdeleted` AS `bi_1467213175407054496` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode` AS `bi_13600932575276159557` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname` AS `bi_10699817008190601050` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short` AS `bi_15916860084426853186` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode` AS `bi_4007708937737028237` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname` AS `bi_7467729968303243062` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short` AS `bi_16247278283018779660` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` AS `bi_14123165879102550317`  FROM (SELECT `temp_sql_wrapper_table`.`rowkey` AS `rowkey` , `temp_sql_wrapper_table`.`creator` AS `creator` , `temp_sql_wrapper_table`.`created` AS `created` , `temp_sql_wrapper_table`.`editor` AS `editor` , `temp_sql_wrapper_table`.`edited` AS `edited` , `temp_sql_wrapper_table`.`id` AS `id` , `temp_sql_wrapper_table`.`oulabel` AS `oulabel` , `temp_sql_wrapper_table`.`ouname` AS `ouname` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`declarecode` AS `declarecode` , `temp_sql_wrapper_table`.`code` AS `code` , `temp_sql_wrapper_table`.`interiorcode` AS `interiorcode` , `temp_sql_wrapper_table`.`choicetype` AS `choicetype` , `temp_sql_wrapper_table`.`choicetypename` AS `choicetypename` , `temp_sql_wrapper_table`.`frameprotocol` AS `frameprotocol` , `temp_sql_wrapper_table`.`name` AS `name` , `temp_sql_wrapper_table`.`objectsflag` AS `objectsflag` , `temp_sql_wrapper_table`.`objectssum` AS `objectssum` , `temp_sql_wrapper_table`.`objectssumtype` AS `objectssumtype` , `temp_sql_wrapper_table`.`objectssumtypename` AS `objectssumtypename` , `temp_sql_wrapper_table`.`type` AS `type` , `temp_sql_wrapper_table`.`typename` AS `typename` , `temp_sql_wrapper_table`.`subtype` AS `subtype` , `temp_sql_wrapper_table`.`subtypename` AS `subtypename` , `temp_sql_wrapper_table`.`endtype` AS `endtype` , `temp_sql_wrapper_table`.`endtypename` AS `endtypename` , `temp_sql_wrapper_table`.`ourstatus` AS `ourstatus` , `temp_sql_wrapper_table`.`ourstatusname` AS `ourstatusname` , `temp_sql_wrapper_table`.`interiorcontract` AS `interiorcontract` , `temp_sql_wrapper_table`.`foreigninterestinvolved` AS `foreigninterestinvolved` , `temp_sql_wrapper_table`.`connectedtransactions` AS `connectedtransactions` , `temp_sql_wrapper_table`.`fundditch` AS `fundditch` , `temp_sql_wrapper_table`.`fundditchname` AS `fundditchname` , `temp_sql_wrapper_table`.`subfundditch` AS `subfundditch` , `temp_sql_wrapper_table`.`subfundditchname` AS `subfundditchname` , `temp_sql_wrapper_table`.`fundallocation` AS `fundallocation` , `temp_sql_wrapper_table`.`fundallocationname` AS `fundallocationname` , `temp_sql_wrapper_table`.`deptid` AS `deptid` , `temp_sql_wrapper_table`.`deptidname` AS `deptidname` , `temp_sql_wrapper_table`.`dependlaw` AS `dependlaw` , `temp_sql_wrapper_table`.`startperformingdate` AS `startperformingdate` , `temp_sql_wrapper_table`.`endperformingdate` AS `endperformingdate` , `temp_sql_wrapper_table`.`performfinishdate` AS `performfinishdate` , `temp_sql_wrapper_table`.`performfinishcomment` AS `performfinishcomment` , `temp_sql_wrapper_table`.`remark` AS `remark` , `temp_sql_wrapper_table`.`undertaker` AS `undertaker` , `temp_sql_wrapper_table`.`undertakerphone` AS `undertakerphone` , `temp_sql_wrapper_table`.`undertakername` AS `undertakername` , `temp_sql_wrapper_table`.`undertakeropinion` AS `undertakeropinion` , `temp_sql_wrapper_table`.`undertakedept` AS `undertakedept` , `temp_sql_wrapper_table`.`undertakedeptname` AS `undertakedeptname` , `temp_sql_wrapper_table`.`deptcharger` AS `deptcharger` , `temp_sql_wrapper_table`.`deptchargername` AS `deptchargername` , `temp_sql_wrapper_table`.`submitteddate` AS `submitteddate` , `temp_sql_wrapper_table`.`createdate` AS `createdate` , `temp_sql_wrapper_table`.`modifydate` AS `modifydate` , `temp_sql_wrapper_table`.`stage` AS `stage` , `temp_sql_wrapper_table`.`status` AS `status` , `temp_sql_wrapper_table`.`localcode` AS `localcode` , `temp_sql_wrapper_table`.`thirdfundditch` AS `thirdfundditch` , `temp_sql_wrapper_table`.`supplypaytype` AS `supplypaytype` , `temp_sql_wrapper_table`.`pricetype` AS `pricetype` , `temp_sql_wrapper_table`.`paymentsupply` AS `paymentsupply` , `temp_sql_wrapper_table`.`istax` AS `istax` , `temp_sql_wrapper_table`.`objectid` AS `objectid` , `temp_sql_wrapper_table`.`secondobjectid` AS `secondobjectid` , `temp_sql_wrapper_table`.`isunderframework` AS `isunderframework` , `temp_sql_wrapper_table`.`frameworkid` AS `frameworkid` , `temp_sql_wrapper_table`.`frameworkname` AS `frameworkname` , `temp_sql_wrapper_table`.`notbiddingreason` AS `notbiddingreason` , `temp_sql_wrapper_table`.`notbiddingreasondetail` AS `notbiddingreasondetail` , `temp_sql_wrapper_table`.`connectedtransactionsname` AS `connectedtransactionsname` , `temp_sql_wrapper_table`.`closedsettlement` AS `closedsettlement` , `temp_sql_wrapper_table`.`innercontractid` AS `innercontractid` , `temp_sql_wrapper_table`.`performanceid` AS `performanceid` , `temp_sql_wrapper_table`.`relatormodel_counterpartyname` AS `relatormodel_counterpartyname` , `temp_sql_wrapper_table`.`relatormodel_orgtype` AS `relatormodel_orgtype` , `temp_sql_wrapper_table`.`relatormodel_rowkey` AS `relatormodel_rowkey` , `temp_sql_wrapper_table`.`isstamped` AS `isstamped` , `temp_sql_wrapper_table`.`connectedtransactionsid` AS `connectedtransactionsid` , `temp_sql_wrapper_table`.`isonlinesign` AS `isonlinesign` , `temp_sql_wrapper_table`.`signexaminationfileid` AS `signexaminationfileid` , `temp_sql_wrapper_table`.`isdeleted` AS `isdeleted` , `temp_sql_wrapper_table`.`groupcode` AS `groupcode` , `temp_sql_wrapper_table`.`groupname` AS `groupname` , `temp_sql_wrapper_table`.`groupname_short` AS `groupname_short` , `temp_sql_wrapper_table`.`regcode` AS `regcode` , `temp_sql_wrapper_table`.`regname` AS `regname` , `temp_sql_wrapper_table`.`regname_short` AS `regname_short` , `temp_sql_wrapper_table`.`etl_date` AS `etl_date`  FROM (SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`created`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`id`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ouname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`code`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameprotocol`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`name`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectsflag`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssum`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`type`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatus`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcontract`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`foreigninterestinvolved`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactions`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocation`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertaker`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedept`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptcharger`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`stage`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`status`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`thirdfundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`supplypaytype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`pricetype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`paymentsupply`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`istax`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`secondobjectid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isunderframework`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreason`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`closedsettlement`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`innercontractid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isstamped`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isonlinesign`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isdeleted`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` FROM `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120` `cnpc_view_ctms_v2_b_contractinfo_c120`  LIMIT 100 ) `temp_sql_wrapper_table`) `cnpc_view_ctms_v2_b_contractinfo_c120` LIMIT 1200001 
I0825 11:44:43.677958 45424 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:43.678036 45424 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:43.678335 45424 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:43.678357 45424 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:43.685055 45424 Frontend.java:947] Analysis finished.
I0825 11:44:43.693810 45424 admission-controller.cc:508] Schedule for id=13401aa18eed68cd:3d12737800000000 in pool_name=root.default cluster_mem_needed=16.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
I0825 11:44:43.693917 45424 admission-controller.cc:513] Stats: agg_num_running=0, agg_num_queued=0, agg_mem_reserved=0,  local_host(local_mem_admitted=0, num_admitted_running=0, num_queued=0, backend_mem_reserved=0)
I0825 11:44:43.693939 45424 admission-controller.cc:529] Admitted query id=13401aa18eed68cd:3d12737800000000
I0825 11:44:43.693958 45424 coordinator.cc:93] Exec() query_id=13401aa18eed68cd:3d12737800000000 stmt=SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey` AS `bi_16209772373942822610` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator` AS `bi_7173110153481771205` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`created` AS `bi_13491404487973529010` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor` AS `bi_16709338949652660965` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited` AS `bi_7778611651735101528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`id` AS `bi_14306997686607670121` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel` AS `bi_14501539644612575132` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ouname` AS `bi_4746155211965198907` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t` AS `bi_5365439428354097443` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode` AS `bi_17739814079848908328` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`code` AS `bi_2232887874484344045` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode` AS `bi_369040516142209005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetype` AS `bi_1740799749612446421` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename` AS `bi_6559770015537514515` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameprotocol` AS `bi_9889475954848287171` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`name` AS `bi_15189533194949851777` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectsflag` AS `bi_13231105150099224340` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssum` AS `bi_17211859388080424960` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtype` AS `bi_18212787982254017333` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename` AS `bi_7541878364736470844` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`type` AS `bi_7009582161161962629` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename` AS `bi_5792701378059420076` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtype` AS `bi_8397122565340895029` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename` AS `bi_3349638123191173855` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtype` AS `bi_17231762347014911121` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename` AS `bi_15445715632339295217` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatus` AS `bi_12472218524279170739` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname` AS `bi_9114563080665146699` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcontract` AS `bi_221030768505386166` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`foreigninterestinvolved` AS `bi_7769959159290483840` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactions` AS `bi_12538280534418618029` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditch` AS `bi_8874241118748090656` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname` AS `bi_13865388329565152770` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditch` AS `bi_12020212433864986146` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname` AS `bi_12093476229320587287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocation` AS `bi_16675125230853471997` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname` AS `bi_5623662814544693635` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptid` AS `bi_637607595999269167` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname` AS `bi_13683947135958082930` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw` AS `bi_11924957536007553338` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate` AS `bi_614967852965536978` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate` AS `bi_5003822878387321743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate` AS `bi_6413940051808780525` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment` AS `bi_11216260561419591329` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark` AS `bi_15719283721382345906` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertaker` AS `bi_11240345001390265760` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone` AS `bi_2135828979746422287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername` AS `bi_8234557137695700893` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion` AS `bi_5133013160763149225` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedept` AS `bi_17983062736628275974` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname` AS `bi_2661014466711632970` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptcharger` AS `bi_14227120684205422351` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername` AS `bi_13689588754024198241` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate` AS `bi_11029029363983356005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate` AS `bi_6920746512342794880` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate` AS `bi_1980803134228074743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`stage` AS `bi_14864370397929992779` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`status` AS `bi_8546227886955607403` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode` AS `bi_16284813439853843418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`thirdfundditch` AS `bi_8240392853651162418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`supplypaytype` AS `bi_16971073333655604621` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`pricetype` AS `bi_7696488040904043695` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`paymentsupply` AS `bi_11474226421585588418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`istax` AS `bi_15889015133263562243` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectid` AS `bi_15223331806579081282` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`secondobjectid` AS `bi_4248969569151347242` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isunderframework` AS `bi_17576126933562249528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkid` AS `bi_16329074359970793714` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname` AS `bi_4893616353618505239` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreason` AS `bi_3903104604239561382` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail` AS `bi_7824035878402166299` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname` AS `bi_17834913520635724437` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`closedsettlement` AS `bi_4063566549861858298` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`innercontractid` AS `bi_3338788862406713265` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid` AS `bi_1963530120962417240` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname` AS `bi_5127572173810565873` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype` AS `bi_2440282083506678752` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey` AS `bi_5524861625849511082` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isstamped` AS `bi_10802066210367618989` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsid` AS `bi_16755292640996306616` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isonlinesign` AS `bi_7327920818219899768` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid` AS `bi_13360343267273546668` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isdeleted` AS `bi_1467213175407054496` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode` AS `bi_13600932575276159557` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname` AS `bi_10699817008190601050` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short` AS `bi_15916860084426853186` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode` AS `bi_4007708937737028237` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname` AS `bi_7467729968303243062` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short` AS `bi_16247278283018779660` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` AS `bi_14123165879102550317`  FROM (SELECT `temp_sql_wrapper_table`.`rowkey` AS `rowkey` , `temp_sql_wrapper_table`.`creator` AS `creator` , `temp_sql_wrapper_table`.`created` AS `created` , `temp_sql_wrapper_table`.`editor` AS `editor` , `temp_sql_wrapper_table`.`edited` AS `edited` , `temp_sql_wrapper_table`.`id` AS `id` , `temp_sql_wrapper_table`.`oulabel` AS `oulabel` , `temp_sql_wrapper_table`.`ouname` AS `ouname` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`declarecode` AS `declarecode` , `temp_sql_wrapper_table`.`code` AS `code` , `temp_sql_wrapper_table`.`interiorcode` AS `interiorcode` , `temp_sql_wrapper_table`.`choicetype` AS `choicetype` , `temp_sql_wrapper_table`.`choicetypename` AS `choicetypename` , `temp_sql_wrapper_table`.`frameprotocol` AS `frameprotocol` , `temp_sql_wrapper_table`.`name` AS `name` , `temp_sql_wrapper_table`.`objectsflag` AS `objectsflag` , `temp_sql_wrapper_table`.`objectssum` AS `objectssum` , `temp_sql_wrapper_table`.`objectssumtype` AS `objectssumtype` , `temp_sql_wrapper_table`.`objectssumtypename` AS `objectssumtypename` , `temp_sql_wrapper_table`.`type` AS `type` , `temp_sql_wrapper_table`.`typename` AS `typename` , `temp_sql_wrapper_table`.`subtype` AS `subtype` , `temp_sql_wrapper_table`.`subtypename` AS `subtypename` , `temp_sql_wrapper_table`.`endtype` AS `endtype` , `temp_sql_wrapper_table`.`endtypename` AS `endtypename` , `temp_sql_wrapper_table`.`ourstatus` AS `ourstatus` , `temp_sql_wrapper_table`.`ourstatusname` AS `ourstatusname` , `temp_sql_wrapper_table`.`interiorcontract` AS `interiorcontract` , `temp_sql_wrapper_table`.`foreigninterestinvolved` AS `foreigninterestinvolved` , `temp_sql_wrapper_table`.`connectedtransactions` AS `connectedtransactions` , `temp_sql_wrapper_table`.`fundditch` AS `fundditch` , `temp_sql_wrapper_table`.`fundditchname` AS `fundditchname` , `temp_sql_wrapper_table`.`subfundditch` AS `subfundditch` , `temp_sql_wrapper_table`.`subfundditchname` AS `subfundditchname` , `temp_sql_wrapper_table`.`fundallocation` AS `fundallocation` , `temp_sql_wrapper_table`.`fundallocationname` AS `fundallocationname` , `temp_sql_wrapper_table`.`deptid` AS `deptid` , `temp_sql_wrapper_table`.`deptidname` AS `deptidname` , `temp_sql_wrapper_table`.`dependlaw` AS `dependlaw` , `temp_sql_wrapper_table`.`startperformingdate` AS `startperformingdate` , `temp_sql_wrapper_table`.`endperformingdate` AS `endperformingdate` , `temp_sql_wrapper_table`.`performfinishdate` AS `performfinishdate` , `temp_sql_wrapper_table`.`performfinishcomment` AS `performfinishcomment` , `temp_sql_wrapper_table`.`remark` AS `remark` , `temp_sql_wrapper_table`.`undertaker` AS `undertaker` , `temp_sql_wrapper_table`.`undertakerphone` AS `undertakerphone` , `temp_sql_wrapper_table`.`undertakername` AS `undertakername` , `temp_sql_wrapper_table`.`undertakeropinion` AS `undertakeropinion` , `temp_sql_wrapper_table`.`undertakedept` AS `undertakedept` , `temp_sql_wrapper_table`.`undertakedeptname` AS `undertakedeptname` , `temp_sql_wrapper_table`.`deptcharger` AS `deptcharger` , `temp_sql_wrapper_table`.`deptchargername` AS `deptchargername` , `temp_sql_wrapper_table`.`submitteddate` AS `submitteddate` , `temp_sql_wrapper_table`.`createdate` AS `createdate` , `temp_sql_wrapper_table`.`modifydate` AS `modifydate` , `temp_sql_wrapper_table`.`stage` AS `stage` , `temp_sql_wrapper_table`.`status` AS `status` , `temp_sql_wrapper_table`.`localcode` AS `localcode` , `temp_sql_wrapper_table`.`thirdfundditch` AS `thirdfundditch` , `temp_sql_wrapper_table`.`supplypaytype` AS `supplypaytype` , `temp_sql_wrapper_table`.`pricetype` AS `pricetype` , `temp_sql_wrapper_table`.`paymentsupply` AS `paymentsupply` , `temp_sql_wrapper_table`.`istax` AS `istax` , `temp_sql_wrapper_table`.`objectid` AS `objectid` , `temp_sql_wrapper_table`.`secondobjectid` AS `secondobjectid` , `temp_sql_wrapper_table`.`isunderframework` AS `isunderframework` , `temp_sql_wrapper_table`.`frameworkid` AS `frameworkid` , `temp_sql_wrapper_table`.`frameworkname` AS `frameworkname` , `temp_sql_wrapper_table`.`notbiddingreason` AS `notbiddingreason` , `temp_sql_wrapper_table`.`notbiddingreasondetail` AS `notbiddingreasondetail` , `temp_sql_wrapper_table`.`connectedtransactionsname` AS `connectedtransactionsname` , `temp_sql_wrapper_table`.`closedsettlement` AS `closedsettlement` , `temp_sql_wrapper_table`.`innercontractid` AS `innercontractid` , `temp_sql_wrapper_table`.`performanceid` AS `performanceid` , `temp_sql_wrapper_table`.`relatormodel_counterpartyname` AS `relatormodel_counterpartyname` , `temp_sql_wrapper_table`.`relatormodel_orgtype` AS `relatormodel_orgtype` , `temp_sql_wrapper_table`.`relatormodel_rowkey` AS `relatormodel_rowkey` , `temp_sql_wrapper_table`.`isstamped` AS `isstamped` , `temp_sql_wrapper_table`.`connectedtransactionsid` AS `connectedtransactionsid` , `temp_sql_wrapper_table`.`isonlinesign` AS `isonlinesign` , `temp_sql_wrapper_table`.`signexaminationfileid` AS `signexaminationfileid` , `temp_sql_wrapper_table`.`isdeleted` AS `isdeleted` , `temp_sql_wrapper_table`.`groupcode` AS `groupcode` , `temp_sql_wrapper_table`.`groupname` AS `groupname` , `temp_sql_wrapper_table`.`groupname_short` AS `groupname_short` , `temp_sql_wrapper_table`.`regcode` AS `regcode` , `temp_sql_wrapper_table`.`regname` AS `regname` , `temp_sql_wrapper_table`.`regname_short` AS `regname_short` , `temp_sql_wrapper_table`.`etl_date` AS `etl_date`  FROM (SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`created`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`id`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ouname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`code`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameprotocol`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`name`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectsflag`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssum`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`type`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatus`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcontract`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`foreigninterestinvolved`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactions`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocation`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertaker`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedept`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptcharger`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`stage`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`status`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`thirdfundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`supplypaytype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`pricetype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`paymentsupply`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`istax`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`secondobjectid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isunderframework`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreason`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`closedsettlement`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`innercontractid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isstamped`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isonlinesign`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isdeleted`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` FROM `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120` `cnpc_view_ctms_v2_b_contractinfo_c120`  LIMIT 100 ) `temp_sql_wrapper_table`) `cnpc_view_ctms_v2_b_contractinfo_c120` LIMIT 1200001 
I0825 11:44:43.694077 45424 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:43.694105 45424 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:43.694213 45424 coordinator.cc:349] starting execution on 2 backends for query_id=13401aa18eed68cd:3d12737800000000
I0825 11:44:43.695163 45240 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=13401aa18eed68cd:3d12737800000000
I0825 11:44:43.695266 45240 query-exec-mgr.cc:46] StartQueryFInstances() query_id=13401aa18eed68cd:3d12737800000000 coord=e4bdhpp025:22000
I0825 11:44:43.695299 45240 query-state.cc:178] Buffer pool limit for 13401aa18eed68cd:3d12737800000000: 6871947673
I0825 11:44:43.695377 45240 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 13401aa18eed68cd:3d12737800000000
I0825 11:44:43.695557 45428 query-state.cc:300] StartFInstances(): query_id=13401aa18eed68cd:3d12737800000000 #instances=1
I0825 11:44:43.695950 45428 query-state.cc:313] descriptor table for query=13401aa18eed68cd:3d12737800000000
tuples:
Tuple(id=0 size=1452 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=1440 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=1440 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=TIMESTAMP col_path=[2] offset=32 null=(offset=1440 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[3] offset=48 null=(offset=1440 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=TIMESTAMP col_path=[4] offset=64 null=(offset=1440 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=DECIMAL(38,0) col_path=[5] offset=80 null=(offset=1440 mask=20) slot_idx=5 field_idx=-1), Slot(id=6 type=DECIMAL(38,0) col_path=[6] offset=96 null=(offset=1440 mask=40) slot_idx=6 field_idx=-1), Slot(id=7 type=STRING col_path=[7] offset=112 null=(offset=1440 mask=80) slot_idx=7 field_idx=-1), Slot(id=8 type=STRING col_path=[8] offset=128 null=(offset=1441 mask=1) slot_idx=8 field_idx=-1), Slot(id=9 type=STRING col_path=[9] offset=144 null=(offset=1441 mask=2) slot_idx=9 field_idx=-1), Slot(id=10 type=STRING col_path=[10] offset=160 null=(offset=1441 mask=4) slot_idx=10 field_idx=-1), Slot(id=11 type=STRING col_path=[11] offset=176 null=(offset=1441 mask=8) slot_idx=11 field_idx=-1), Slot(id=12 type=DECIMAL(38,0) col_path=[12] offset=192 null=(offset=1441 mask=10) slot_idx=12 field_idx=-1), Slot(id=13 type=STRING col_path=[13] offset=208 null=(offset=1441 mask=20) slot_idx=13 field_idx=-1), Slot(id=14 type=DECIMAL(38,0) col_path=[14] offset=224 null=(offset=1441 mask=40) slot_idx=14 field_idx=-1), Slot(id=15 type=STRING col_path=[15] offset=240 null=(offset=1441 mask=80) slot_idx=15 field_idx=-1), Slot(id=16 type=DECIMAL(38,0) col_path=[16] offset=256 null=(offset=1442 mask=1) slot_idx=16 field_idx=-1), Slot(id=17 type=DECIMAL(20,2) col_path=[17] offset=272 null=(offset=1442 mask=2) slot_idx=17 field_idx=-1), Slot(id=18 type=DECIMAL(38,0) col_path=[18] offset=288 null=(offset=1442 mask=4) slot_idx=18 field_idx=-1), Slot(id=19 type=STRING col_path=[19] offset=304 null=(offset=1442 mask=8) slot_idx=19 field_idx=-1), Slot(id=20 type=DECIMAL(38,0) col_path=[20] offset=320 null=(offset=1442 mask=10) slot_idx=20 field_idx=-1), Slot(id=21 type=STRING col_path=[21] offset=336 null=(offset=1442 mask=20) slot_idx=21 field_idx=-1), Slot(id=22 type=DECIMAL(38,0) col_path=[22] offset=352 null=(offset=1442 mask=40) slot_idx=22 field_idx=-1), Slot(id=23 type=STRING col_path=[23] offset=368 null=(offset=1442 mask=80) slot_idx=23 field_idx=-1), Slot(id=24 type=DECIMAL(38,0) col_path=[24] offset=384 null=(offset=1443 mask=1) slot_idx=24 field_idx=-1), Slot(id=25 type=STRING col_path=[25] offset=400 null=(offset=1443 mask=2) slot_idx=25 field_idx=-1), Slot(id=26 type=DECIMAL(38,0) col_path=[26] offset=416 null=(offset=1443 mask=4) slot_idx=26 field_idx=-1), Slot(id=27 type=STRING col_path=[27] offset=432 null=(offset=1443 mask=8) slot_idx=27 field_idx=-1), Slot(id=28 type=DECIMAL(38,0) col_path=[28] offset=448 null=(offset=1443 mask=10) slot_idx=28 field_idx=-1), Slot(id=29 type=DECIMAL(38,0) col_path=[29] offset=464 null=(offset=1443 mask=20) slot_idx=29 field_idx=-1), Slot(id=30 type=DECIMAL(38,0) col_path=[30] offset=480 null=(offset=1443 mask=40) slot_idx=30 field_idx=-1), Slot(id=31 type=DECIMAL(38,0) col_path=[31] offset=496 null=(offset=1443 mask=80) slot_idx=31 field_idx=-1), Slot(id=32 type=STRING col_path=[32] offset=512 null=(offset=1444 mask=1) slot_idx=32 field_idx=-1), Slot(id=33 type=DECIMAL(38,0) col_path=[33] offset=528 null=(offset=1444 mask=2) slot_idx=33 field_idx=-1), Slot(id=34 type=STRING col_path=[34] offset=544 null=(offset=1444 mask=4) slot_idx=34 field_idx=-1), Slot(id=35 type=DECIMAL(38,0) col_path=[35] offset=560 null=(offset=1444 mask=8) slot_idx=35 field_idx=-1), Slot(id=36 type=STRING col_path=[36] offset=576 null=(offset=1444 mask=10) slot_idx=36 field_idx=-1), Slot(id=37 type=DECIMAL(38,0) col_path=[37] offset=592 null=(offset=1444 mask=20) slot_idx=37 field_idx=-1), Slot(id=38 type=STRING col_path=[38] offset=608 null=(offset=1444 mask=40) slot_idx=38 field_idx=-1), Slot(id=39 type=STRING col_path=[39] offset=624 null=(offset=1444 mask=80) slot_idx=39 field_idx=-1), Slot(id=40 type=TIMESTAMP col_path=[40] offset=640 null=(offset=1445 mask=1) slot_idx=40 field_idx=-1), Slot(id=41 type=TIMESTAMP col_path=[41] offset=656 null=(offset=1445 mask=2) slot_idx=41 field_idx=-1), Slot(id=42 type=TIMESTAMP col_path=[42] offset=672 null=(offset=1445 mask=4) slot_idx=42 field_idx=-1), Slot(id=43 type=STRING col_path=[43] offset=688 null=(offset=1445 mask=8) slot_idx=43 field_idx=-1), Slot(id=44 type=STRING col_path=[44] offset=704 null=(offset=1445 mask=10) slot_idx=44 field_idx=-1), Slot(id=45 type=DECIMAL(38,0) col_path=[45] offset=720 null=(offset=1445 mask=20) slot_idx=45 field_idx=-1), Slot(id=46 type=STRING col_path=[46] offset=736 null=(offset=1445 mask=40) slot_idx=46 field_idx=-1), Slot(id=47 type=STRING col_path=[47] offset=752 null=(offset=1445 mask=80) slot_idx=47 field_idx=-1), Slot(id=48 type=STRING col_path=[48] offset=768 null=(offset=1446 mask=1) slot_idx=48 field_idx=-1), Slot(id=49 type=DECIMAL(38,0) col_path=[49] offset=784 null=(offset=1446 mask=2) slot_idx=49 field_idx=-1), Slot(id=50 type=STRING col_path=[50] offset=800 null=(offset=1446 mask=4) slot_idx=50 field_idx=-1), Slot(id=51 type=DECIMAL(38,0) col_path=[51] offset=816 null=(offset=1446 mask=8) slot_idx=51 field_idx=-1), Slot(id=52 type=STRING col_path=[52] offset=832 null=(offset=1446 mask=10) slot_idx=52 field_idx=-1), Slot(id=53 type=TIMESTAMP col_path=[53] offset=848 null=(offset=1446 mask=20) slot_idx=53 field_idx=-1), Slot(id=54 type=TIMESTAMP col_path=[54] offset=864 null=(offset=1446 mask=40) slot_idx=54 field_idx=-1), Slot(id=55 type=TIMESTAMP col_path=[55] offset=880 null=(offset=1446 mask=80) slot_idx=55 field_idx=-1), Slot(id=56 type=DECIMAL(38,0) col_path=[56] offset=896 null=(offset=1447 mask=1) slot_idx=56 field_idx=-1), Slot(id=57 type=DECIMAL(38,0) col_path=[57] offset=912 null=(offset=1447 mask=2) slot_idx=57 field_idx=-1), Slot(id=58 type=STRING col_path=[58] offset=928 null=(offset=1447 mask=4) slot_idx=58 field_idx=-1), Slot(id=59 type=DECIMAL(38,0) col_path=[59] offset=944 null=(offset=1447 mask=8) slot_idx=59 field_idx=-1), Slot(id=60 type=DECIMAL(38,0) col_path=[60] offset=960 null=(offset=1447 mask=10) slot_idx=60 field_idx=-1), Slot(id=61 type=DECIMAL(38,0) col_path=[61] offset=976 null=(offset=1447 mask=20) slot_idx=61 field_idx=-1), Slot(id=62 type=DECIMAL(20,2) col_path=[62] offset=992 null=(offset=1447 mask=40) slot_idx=62 field_idx=-1), Slot(id=63 type=DECIMAL(38,0) col_path=[63] offset=1008 null=(offset=1447 mask=80) slot_idx=63 field_idx=-1), Slot(id=64 type=DECIMAL(38,0) col_path=[64] offset=1024 null=(offset=1448 mask=1) slot_idx=64 field_idx=-1), Slot(id=65 type=DECIMAL(38,0) col_path=[65] offset=1040 null=(offset=1448 mask=2) slot_idx=65 field_idx=-1), Slot(id=66 type=DECIMAL(38,0) col_path=[66] offset=1056 null=(offset=1448 mask=4) slot_idx=66 field_idx=-1), Slot(id=67 type=DECIMAL(38,0) col_path=[67] offset=1072 null=(offset=1448 mask=8) slot_idx=67 field_idx=-1), Slot(id=68 type=STRING col_path=[68] offset=1088 null=(offset=1448 mask=10) slot_idx=68 field_idx=-1), Slot(id=69 type=DECIMAL(38,0) col_path=[69] offset=1104 null=(offset=1448 mask=20) slot_idx=69 field_idx=-1), Slot(id=70 type=STRING col_path=[70] offset=1120 null=(offset=1448 mask=40) slot_idx=70 field_idx=-1), Slot(id=71 type=STRING col_path=[71] offset=1136 null=(offset=1448 mask=80) slot_idx=71 field_idx=-1), Slot(id=72 type=DECIMAL(38,0) col_path=[72] offset=1152 null=(offset=1449 mask=1) slot_idx=72 field_idx=-1), Slot(id=73 type=DECIMAL(38,0) col_path=[73] offset=1168 null=(offset=1449 mask=2) slot_idx=73 field_idx=-1), Slot(id=74 type=STRING col_path=[74] offset=1184 null=(offset=1449 mask=4) slot_idx=74 field_idx=-1), Slot(id=75 type=STRING col_path=[75] offset=1200 null=(offset=1449 mask=8) slot_idx=75 field_idx=-1), Slot(id=76 type=STRING col_path=[76] offset=1216 null=(offset=1449 mask=10) slot_idx=76 field_idx=-1), Slot(id=77 type=STRING col_path=[77] offset=1232 null=(offset=1449 mask=20) slot_idx=77 field_idx=-1), Slot(id=78 type=DECIMAL(38,0) col_path=[78] offset=1248 null=(offset=1449 mask=40) slot_idx=78 field_idx=-1), Slot(id=79 type=DECIMAL(38,0) col_path=[79] offset=1264 null=(offset=1449 mask=80) slot_idx=79 field_idx=-1), Slot(id=80 type=DECIMAL(38,0) col_path=[80] offset=1280 null=(offset=1450 mask=1) slot_idx=80 field_idx=-1), Slot(id=81 type=STRING col_path=[81] offset=1296 null=(offset=1450 mask=2) slot_idx=81 field_idx=-1), Slot(id=82 type=DECIMAL(38,0) col_path=[82] offset=1312 null=(offset=1450 mask=4) slot_idx=82 field_idx=-1), Slot(id=83 type=STRING col_path=[83] offset=1328 null=(offset=1450 mask=8) slot_idx=83 field_idx=-1), Slot(id=84 type=STRING col_path=[84] offset=1344 null=(offset=1450 mask=10) slot_idx=84 field_idx=-1), Slot(id=85 type=STRING col_path=[85] offset=1360 null=(offset=1450 mask=20) slot_idx=85 field_idx=-1), Slot(id=86 type=STRING col_path=[86] offset=1376 null=(offset=1450 mask=40) slot_idx=86 field_idx=-1), Slot(id=87 type=STRING col_path=[87] offset=1392 null=(offset=1450 mask=80) slot_idx=87 field_idx=-1), Slot(id=88 type=STRING col_path=[88] offset=1408 null=(offset=1451 mask=1) slot_idx=88 field_idx=-1), Slot(id=89 type=TIMESTAMP col_path=[89] offset=1424 null=(offset=1451 mask=2) slot_idx=89 field_idx=-1)] tuple_path=[])
I0825 11:44:43.696168 45429 query-state.cc:395] Executing instance. instance_id=13401aa18eed68cd:3d12737800000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=1 #in-flight=2
I0825 11:44:43.696405 45424 coordinator.cc:362] started execution on 2 backends for query_id=13401aa18eed68cd:3d12737800000000
I0825 11:44:43.696660 45428 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=13401aa18eed68cd:3d12737800000000 refcnt=3
I0825 11:44:43.697376 45424 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xcdh\xed\x8e\xa1\x1a@\x13\x00\x00\x00\x00xs\x12=",
      02: secret (string) = "\xcdh\xed\x8e\xa1\x1a@\x13\x00\x00\x00\x00xs\x12=",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:44:44.319074 44128 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp018@PANEL.COM" on an internal connection
I0825 11:44:44.319865 45435 coordinator.cc:689] Backend completed:  host=e4bdhpp018:22000 remaining=1 query_id=13401aa18eed68cd:3d12737800000000
I0825 11:44:44.319962 45435 coordinator-backend-state.cc:226] query_id=13401aa18eed68cd:3d12737800000000: first in-progress backend: e4bdhpp025:22000
I0825 11:44:44.322644 45424 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=13401aa18eed68cd:3d12737800000000
I0825 11:44:44.323547 45424 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[90] {
      [0] = TColumnDesc {
        01: columnName (string) = "bi_16209772373942822610",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "bi_7173110153481771205",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "bi_13491404487973529010",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "bi_16709338949652660965",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "bi_7778611651735101528",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "bi_14306997686607670121",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "bi_14501539644612575132",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 6,
      },
      [7] = TColumnDesc {
        01: columnName (string) = "bi_4746155211965198907",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 7,
      },
      [8] = TColumnDesc {
        01: columnName (string) = "bi_5365439428354097443",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 8,
      },
      [9] = TColumnDesc {
        01: columnName (string) = "bi_17739814079848908328",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 9,
      },
      [10] = TColumnDesc {
        01: columnName (string) = "bi_2232887874484344045",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 10,
      },
      [11] = TColumnDesc {
        01: columnName (string) = "bi_369040516142209005",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 11,
      },
      [12] = TColumnDesc {
        01: columnName (string) = "bi_1740799749612446421",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 12,
      },
      [13] = TColumnDesc {
        01: columnName (string) = "bi_6559770015537514515",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 13,
      },
      [14] = TColumnDesc {
        01: columnName (string) = "bi_9889475954848287171",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 14,
      },
      [15] = TColumnDesc {
        01: columnName (string) = "bi_15189533194949851777",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 15,
      },
      [16] = TColumnDesc {
        01: columnName (string) = "bi_13231105150099224340",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 16,
      },
      [17] = TColumnDesc {
        01: columnName (string) = "bi_17211859388080424960",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 20,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 17,
      },
      [18] = TColumnDesc {
        01: columnName (string) = "bi_18212787982254017333",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 18,
      },
      [19] = TColumnDesc {
        01: columnName (string) = "bi_7541878364736470844",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 19,
      },
      [20] = TColumnDesc {
        01: columnName (string) = "bi_7009582161161962629",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 20,
      },
      [21] = TColumnDesc {
        01: columnName (string) = "bi_5792701378059420076",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 21,
      },
      [22] = TColumnDesc {
        01: columnName (string) = "bi_8397122565340895029",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 22,
      },
      [23] = TColumnDesc {
        01: columnName (string) = "bi_3349638123191173855",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 23,
      },
      [24] = TColumnDesc {
        01: columnName (string) = "bi_17231762347014911121",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 24,
      },
      [25] = TColumnDesc {
        01: columnName (string) = "bi_15445715632339295217",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 25,
      },
      [26] = TColumnDesc {
        01: columnName (string) = "bi_12472218524279170739",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 26,
      },
      [27] = TColumnDesc {
        01: columnName (string) = "bi_9114563080665146699",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 27,
      },
      [28] = TColumnDesc {
        01: columnName (string) = "bi_221030768505386166",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 28,
      },
      [29] = TColumnDesc {
        01: columnName (string) = "bi_7769959159290483840",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 29,
      },
      [30] = TColumnDesc {
        01: columnName (string) = "bi_12538280534418618029",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 30,
      },
      [31] = TColumnDesc {
        01: columnName (string) = "bi_8874241118748090656",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 31,
      },
      [32] = TColumnDesc {
        01: columnName (string) = "bi_13865388329565152770",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 32,
      },
      [33] = TColumnDesc {
        01: columnName (string) = "bi_12020212433864986146",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 33,
      },
      [34] = TColumnDesc {
        01: columnName (string) = "bi_12093476229320587287",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 34,
      },
      [35] = TColumnDesc {
        01: columnName (string) = "bi_16675125230853471997",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 35,
      },
      [36] = TColumnDesc {
        01: columnName (string) = "bi_5623662814544693635",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 36,
      },
      [37] = TColumnDesc {
        01: columnName (string) = "bi_637607595999269167",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 37,
      },
      [38] = TColumnDesc {
        01: columnName (string) = "bi_13683947135958082930",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 38,
      },
      [39] = TColumnDesc {
        01: columnName (string) = "bi_11924957536007553338",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 39,
      },
      [40] = TColumnDesc {
        01: columnName (string) = "bi_614967852965536978",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 40,
      },
      [41] = TColumnDesc {
        01: columnName (string) = "bi_5003822878387321743",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 41,
      },
      [42] = TColumnDesc {
        01: columnName (string) = "bi_6413940051808780525",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 42,
      },
      [43] = TColumnDesc {
        01: columnName (string) = "bi_11216260561419591329",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 43,
      },
      [44] = TColumnDesc {
        01: columnName (string) = "bi_15719283721382345906",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 44,
      },
      [45] = TColumnDesc {
        01: columnName (string) = "bi_11240345001390265760",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 45,
      },
      [46] = TColumnDesc {
        01: columnName (string) = "bi_2135828979746422287",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 46,
      },
      [47] = TColumnDesc {
        01: columnName (string) = "bi_8234557137695700893",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 47,
      },
      [48] = TColumnDesc {
        01: columnName (string) = "bi_5133013160763149225",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 48,
      },
      [49] = TColumnDesc {
        01: columnName (string) = "bi_17983062736628275974",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 49,
      },
      [50] = TColumnDesc {
        01: columnName (string) = "bi_2661014466711632970",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 50,
      },
      [51] = TColumnDesc {
        01: columnName (string) = "bi_14227120684205422351",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifie
I0825 11:44:44.337146 45424 coordinator.cc:527] All backends finished successfully. query_id=13401aa18eed68cd:3d12737800000000
I0825 11:44:44.337188 45429 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=13401aa18eed68cd:3d12737800000000, node=1
I0825 11:44:44.337263 45424 coordinator.cc:783] Release admission control resources for query_id=13401aa18eed68cd:3d12737800000000
I0825 11:44:44.337291 45429 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=13401aa18eed68cd:3d12737800000000 node_id=1
I0825 11:44:44.337337 45429 query-state.cc:403] Instance completed. instance_id=13401aa18eed68cd:3d12737800000000 #in-flight=1 status=OK
I0825 11:44:44.337358 45429 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=13401aa18eed68cd:3d12737800000000 refcnt=2
I0825 11:44:44.355931 45424 impala-hs2-server.cc:683] CloseOperation(): query_id=13401aa18eed68cd:3d12737800000000
I0825 11:44:44.355963 45424 impala-server.cc:1015] UnregisterQuery(): query_id=13401aa18eed68cd:3d12737800000000
I0825 11:44:44.355978 45424 impala-server.cc:1102] Cancel(): query_id=13401aa18eed68cd:3d12737800000000
I0825 11:44:44.355989 45424 coordinator.cc:629] Cancel() query_id=13401aa18eed68cd:3d12737800000000
I0825 11:44:44.356001 45424 coordinator.cc:639] CancelBackends() query_id=13401aa18eed68cd:3d12737800000000, tried to cancel 0 backends
I0825 11:44:44.358155 45424 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=13401aa18eed68cd:3d12737800000000 refcnt=1
I0825 11:44:44.361119 45424 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "Y0\x16\x1d\x1b\xf3I,\x99\xd6\xf8x\xe6\xca`\xcf",
      02: secret (string) = "\xb4r\x9c~VzLj\x8c\xb5K\x9c\xc3\xe0b\xd2",
    },
  },
}
I0825 11:44:44.362112 45424 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:53492 closed, closing 1 associated session(s)
I0825 11:44:47.458312 43940 impala-server.cc:1399] Catalog topic update applied with version: 866832 new min catalog object version: 749205
I0825 11:44:51.480244 44439 impala-internal-service.cc:63] CancelQueryFInstances(): query_id=3f4fe8d6be4b062b:8ba1f28f00000000
I0825 11:44:51.480391 44439 query-exec-mgr.cc:95] QueryState: query_id=3f4fe8d6be4b062b:8ba1f28f00000000 refcnt=2
I0825 11:44:51.480409 44439 query-state.cc:416] Cancel: query_id=3f4fe8d6be4b062b:8ba1f28f00000000
I0825 11:44:51.480423 44439 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=3f4fe8d6be4b062b:8ba1f28f00000005
I0825 11:44:51.480437 44439 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3f4fe8d6be4b062b:8ba1f28f00000000 refcnt=2
I0825 11:44:51.506628 44441 query-state.cc:403] Instance completed. instance_id=3f4fe8d6be4b062b:8ba1f28f00000005 #in-flight=0 status=CANCELLED: Cancelled
I0825 11:44:51.506731 44441 query-state.cc:416] Cancel: query_id=3f4fe8d6be4b062b:8ba1f28f00000000
I0825 11:44:51.506753 44441 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3f4fe8d6be4b062b:8ba1f28f00000000 refcnt=1
I0825 11:44:57.637997 43937 impala-server.cc:1399] Catalog topic update applied with version: 866833 new min catalog object version: 749205
I0825 11:44:59.294665 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:44:59.295158 46098 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:44:59.295984 46098 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "c(e\xc4\xf6GEw\x9b\x1c'\xb1;)\xab\xd0",
      02: secret (string) = "\xf4m\x9f'\x92\xa0L\x97\xb9@\x04\x9d\xcf\x8cRj",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:44:59.296506 46098 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "c(e\xc4\xf6GEw\x9b\x1c'\xb1;)\xab\xd0",
      02: secret (string) = "\xf4m\x9f'\x92\xa0L\x97\xb9@\x04\x9d\xcf\x8cRj",
    },
  },
}
I0825 11:44:59.296865 46098 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:44:59.297736 46098 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe4\xa2\x10\x8e\xd1\xffLo\xa5\xf1`\xfd\xf4\x8e\xe9\xf3",
      02: secret (string) = "\xe5\x7fV\xb2\xbb\xe2Ec\x9bYBY\x9e\xb8\xf5\xe5",
    },
  },
  02: statement (string) = "USE dw01",
  04: runAsync (bool) = true,
}
I0825 11:44:59.297827 46098 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe4\xa2\x10\x8e\xd1\xffLo\xa5\xf1`\xfd\xf4\x8e\xe9\xf3",
      02: secret (string) = "\xe5\x7fV\xb2\xbb\xe2Ec\x9bYBY\x9e\xb8\xf5\xe5",
    },
  },
  02: statement (string) = "USE dw01",
  04: runAsync (bool) = true,
}
I0825 11:44:59.298782 46098 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:59.301779 46098 Frontend.java:935] Analyzing query: USE dw01
I0825 11:44:59.304548 46098 Frontend.java:947] Analysis finished.
I0825 11:44:59.343901 46098 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xf2G\xa8\xa01,H\xef\x00\x00\x00\x00\x10}\x83\xae",
      02: secret (string) = "\xf2G\xa8\xa01,H\xef\x00\x00\x00\x00\x10}\x83\xae",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:44:59.349150 46098 impala-hs2-server.cc:683] CloseOperation(): query_id=ef482c31a0a847f2:ae837d1000000000
I0825 11:44:59.349215 46098 impala-server.cc:1015] UnregisterQuery(): query_id=ef482c31a0a847f2:ae837d1000000000
I0825 11:44:59.349233 46098 impala-server.cc:1102] Cancel(): query_id=ef482c31a0a847f2:ae837d1000000000
I0825 11:44:59.350080 46098 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe4\xa2\x10\x8e\xd1\xffLo\xa5\xf1`\xfd\xf4\x8e\xe9\xf3",
      02: secret (string) = "\xe5\x7fV\xb2\xbb\xe2Ec\x9bYBY\x9e\xb8\xf5\xe5",
    },
  },
  02: statement (string) = "SET KrbUserName=apprc",
  04: runAsync (bool) = true,
}
I0825 11:44:59.350143 46098 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe4\xa2\x10\x8e\xd1\xffLo\xa5\xf1`\xfd\xf4\x8e\xe9\xf3",
      02: secret (string) = "\xe5\x7fV\xb2\xbb\xe2Ec\x9bYBY\x9e\xb8\xf5\xe5",
    },
  },
  02: statement (string) = "SET KrbUserName=apprc",
  04: runAsync (bool) = true,
}
I0825 11:44:59.350529 46098 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:59.352882 46098 Frontend.java:935] Analyzing query: SET KrbUserName=apprc
I0825 11:44:59.353169 46098 Frontend.java:947] Analysis finished.
I0825 11:44:59.407474 46098 status.cc:125] Invalid query option: KrbUserName
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:44:59.407748 46098 impala-server.cc:1015] UnregisterQuery(): query_id=d94fefaab1367315:4a4bdeb400000000
I0825 11:44:59.407801 46098 impala-server.cc:1102] Cancel(): query_id=d94fefaab1367315:4a4bdeb400000000
I0825 11:44:59.409881 46098 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe4\xa2\x10\x8e\xd1\xffLo\xa5\xf1`\xfd\xf4\x8e\xe9\xf3",
      02: secret (string) = "\xe5\x7fV\xb2\xbb\xe2Ec\x9bYBY\x9e\xb8\xf5\xe5",
    },
  },
  02: statement (string) = "SET alias=`bi_6749357856600458205`",
  04: runAsync (bool) = true,
}
I0825 11:44:59.409978 46098 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe4\xa2\x10\x8e\xd1\xffLo\xa5\xf1`\xfd\xf4\x8e\xe9\xf3",
      02: secret (string) = "\xe5\x7fV\xb2\xbb\xe2Ec\x9bYBY\x9e\xb8\xf5\xe5",
    },
  },
  02: statement (string) = "SET alias=`bi_6749357856600458205`",
  04: runAsync (bool) = true,
}
I0825 11:44:59.410575 46098 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:59.413455 46098 Frontend.java:935] Analyzing query: SET alias=`bi_6749357856600458205`
I0825 11:44:59.414441 46098 Frontend.java:947] Analysis finished.
I0825 11:44:59.471485 46098 status.cc:125] Invalid query option: alias
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:44:59.471730 46098 impala-server.cc:1015] UnregisterQuery(): query_id=7548149363a4e4c6:ef30613400000000
I0825 11:44:59.471778 46098 impala-server.cc:1102] Cancel(): query_id=7548149363a4e4c6:ef30613400000000
I0825 11:44:59.473402 46098 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe4\xa2\x10\x8e\xd1\xffLo\xa5\xf1`\xfd\xf4\x8e\xe9\xf3",
      02: secret (string) = "\xe5\x7fV\xb2\xbb\xe2Ec\x9bYBY\x9e\xb8\xf5\xe5",
    },
  },
  02: statement (string) = "SET mem_limit=8g",
  04: runAsync (bool) = true,
}
I0825 11:44:59.473482 46098 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe4\xa2\x10\x8e\xd1\xffLo\xa5\xf1`\xfd\xf4\x8e\xe9\xf3",
      02: secret (string) = "\xe5\x7fV\xb2\xbb\xe2Ec\x9bYBY\x9e\xb8\xf5\xe5",
    },
  },
  02: statement (string) = "SET mem_limit=8g",
  04: runAsync (bool) = true,
}
I0825 11:44:59.473982 46098 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:59.476485 46098 Frontend.java:935] Analyzing query: SET mem_limit=8g
I0825 11:44:59.476748 46098 Frontend.java:947] Analysis finished.
I0825 11:44:59.477135 46098 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "N\xcd\x10\x1d\xfc\xdaJB\x00\x00\x00\x00S-\xf3\xce",
      02: secret (string) = "N\xcd\x10\x1d\xfc\xdaJB\x00\x00\x00\x00S-\xf3\xce",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:44:59.477903 46098 impala-hs2-server.cc:683] CloseOperation(): query_id=424adafc1d10cd4e:cef32d5300000000
I0825 11:44:59.477934 46098 impala-server.cc:1015] UnregisterQuery(): query_id=424adafc1d10cd4e:cef32d5300000000
I0825 11:44:59.477962 46098 impala-server.cc:1102] Cancel(): query_id=424adafc1d10cd4e:cef32d5300000000
I0825 11:44:59.478478 46098 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe4\xa2\x10\x8e\xd1\xffLo\xa5\xf1`\xfd\xf4\x8e\xe9\xf3",
      02: secret (string) = "\xe5\x7fV\xb2\xbb\xe2Ec\x9bYBY\x9e\xb8\xf5\xe5",
    },
  },
  02: statement (string) = "SET queryType=JDBC",
  04: runAsync (bool) = true,
}
I0825 11:44:59.478545 46098 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe4\xa2\x10\x8e\xd1\xffLo\xa5\xf1`\xfd\xf4\x8e\xe9\xf3",
      02: secret (string) = "\xe5\x7fV\xb2\xbb\xe2Ec\x9bYBY\x9e\xb8\xf5\xe5",
    },
  },
  02: statement (string) = "SET queryType=JDBC",
  04: runAsync (bool) = true,
}
I0825 11:44:59.478807 46098 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:59.481015 46098 Frontend.java:935] Analyzing query: SET queryType=JDBC
I0825 11:44:59.481209 46098 Frontend.java:947] Analysis finished.
I0825 11:44:59.537127 46098 status.cc:125] Invalid query option: queryType
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:44:59.539454 46098 impala-server.cc:1015] UnregisterQuery(): query_id=104e72d1fd0d21a9:674e73ea00000000
I0825 11:44:59.539530 46098 impala-server.cc:1102] Cancel(): query_id=104e72d1fd0d21a9:674e73ea00000000
I0825 11:44:59.541105 46098 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe4\xa2\x10\x8e\xd1\xffLo\xa5\xf1`\xfd\xf4\x8e\xe9\xf3",
      02: secret (string) = "\xe5\x7fV\xb2\xbb\xe2Ec\x9bYBY\x9e\xb8\xf5\xe5",
    },
  },
  02: statement (string) = "SET timeoutSeconds=1800",
  04: runAsync (bool) = true,
}
I0825 11:44:59.541153 46098 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe4\xa2\x10\x8e\xd1\xffLo\xa5\xf1`\xfd\xf4\x8e\xe9\xf3",
      02: secret (string) = "\xe5\x7fV\xb2\xbb\xe2Ec\x9bYBY\x9e\xb8\xf5\xe5",
    },
  },
  02: statement (string) = "SET timeoutSeconds=1800",
  04: runAsync (bool) = true,
}
I0825 11:44:59.541579 46098 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:59.543905 46098 Frontend.java:935] Analyzing query: SET timeoutSeconds=1800
I0825 11:44:59.544152 46098 Frontend.java:947] Analysis finished.
I0825 11:44:59.596902 46098 status.cc:125] Invalid query option: timeoutSeconds
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:44:59.597113 46098 impala-server.cc:1015] UnregisterQuery(): query_id=1a40d5a21ff67afd:713f3dc400000000
I0825 11:44:59.597151 46098 impala-server.cc:1102] Cancel(): query_id=1a40d5a21ff67afd:713f3dc400000000
I0825 11:44:59.598707 46098 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe4\xa2\x10\x8e\xd1\xffLo\xa5\xf1`\xfd\xf4\x8e\xe9\xf3",
      02: secret (string) = "\xe5\x7fV\xb2\xbb\xe2Ec\x9bYBY\x9e\xb8\xf5\xe5",
    },
  },
  02: statement (string) = "SET useSSL=false",
  04: runAsync (bool) = true,
}
I0825 11:44:59.598760 46098 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe4\xa2\x10\x8e\xd1\xffLo\xa5\xf1`\xfd\xf4\x8e\xe9\xf3",
      02: secret (string) = "\xe5\x7fV\xb2\xbb\xe2Ec\x9bYBY\x9e\xb8\xf5\xe5",
    },
  },
  02: statement (string) = "SET useSSL=false",
  04: runAsync (bool) = true,
}
I0825 11:44:59.599201 46098 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:59.601935 46098 Frontend.java:935] Analyzing query: SET useSSL=false
I0825 11:44:59.602209 46098 Frontend.java:947] Analysis finished.
I0825 11:44:59.656087 46098 status.cc:125] Invalid query option: useSSL
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:44:59.656287 46098 impala-server.cc:1015] UnregisterQuery(): query_id=154399a3e484cd64:6bc14f600000000
I0825 11:44:59.656335 46098 impala-server.cc:1102] Cancel(): query_id=154399a3e484cd64:6bc14f600000000
I0825 11:44:59.659436 46098 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe4\xa2\x10\x8e\xd1\xffLo\xa5\xf1`\xfd\xf4\x8e\xe9\xf3",
      02: secret (string) = "\xe5\x7fV\xb2\xbb\xe2Ec\x9bYBY\x9e\xb8\xf5\xe5",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:44:59.659533 46098 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe4\xa2\x10\x8e\xd1\xffLo\xa5\xf1`\xfd\xf4\x8e\xe9\xf3",
      02: secret (string) = "\xe5\x7fV\xb2\xbb\xe2Ec\x9bYBY\x9e\xb8\xf5\xe5",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:44:59.659937 46098 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:59.662254 46098 Frontend.java:935] Analyzing query: DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`
I0825 11:44:59.663209 46098 Frontend.java:947] Analysis finished.
I0825 11:44:59.712427 46098 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x94\xdc\xceU\xcd\xf8M\xfa\x00\x00\x00\x00\xddv1\xea",
      02: secret (string) = "\x94\xdc\xceU\xcd\xf8M\xfa\x00\x00\x00\x00\xddv1\xea",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:44:59.714776 46098 impala-hs2-server.cc:683] CloseOperation(): query_id=fa4df8cd55cedc94:ea3176dd00000000
I0825 11:44:59.714874 46098 impala-server.cc:1015] UnregisterQuery(): query_id=fa4df8cd55cedc94:ea3176dd00000000
I0825 11:44:59.714910 46098 impala-server.cc:1102] Cancel(): query_id=fa4df8cd55cedc94:ea3176dd00000000
I0825 11:44:59.717593 46098 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe4\xa2\x10\x8e\xd1\xffLo\xa5\xf1`\xfd\xf4\x8e\xe9\xf3",
      02: secret (string) = "\xe5\x7fV\xb2\xbb\xe2Ec\x9bYBY\x9e\xb8\xf5\xe5",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:44:59.718735 46098 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe4\xa2\x10\x8e\xd1\xffLo\xa5\xf1`\xfd\xf4\x8e\xe9\xf3",
      02: secret (string) = "\xe5\x7fV\xb2\xbb\xe2Ec\x9bYBY\x9e\xb8\xf5\xe5",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:44:59.719308 46098 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:59.721707 46098 Frontend.java:935] Analyzing query: DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`
I0825 11:44:59.726387 46098 Frontend.java:947] Analysis finished.
I0825 11:44:59.821632 46098 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xd2\xbc\xa3\x14`\xce@\t\x00\x00\x00\x00\xb0 ,\x94",
      02: secret (string) = "\xd2\xbc\xa3\x14`\xce@\t\x00\x00\x00\x00\xb0 ,\x94",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:44:59.823604 46098 impala-hs2-server.cc:683] CloseOperation(): query_id=940ce6014a3bcd2:942c20b000000000
I0825 11:44:59.824926 46098 impala-server.cc:1015] UnregisterQuery(): query_id=940ce6014a3bcd2:942c20b000000000
I0825 11:44:59.825039 46098 impala-server.cc:1102] Cancel(): query_id=940ce6014a3bcd2:942c20b000000000
I0825 11:44:59.827571 46098 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe4\xa2\x10\x8e\xd1\xffLo\xa5\xf1`\xfd\xf4\x8e\xe9\xf3",
      02: secret (string) = "\xe5\x7fV\xb2\xbb\xe2Ec\x9bYBY\x9e\xb8\xf5\xe5",
    },
  },
  02: statement (string) = "SELECT `temp`.`\xe9[...](2563)",
  04: runAsync (bool) = true,
}
I0825 11:44:59.827741 46098 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe4\xa2\x10\x8e\xd1\xffLo\xa5\xf1`\xfd\xf4\x8e\xe9\xf3",
      02: secret (string) = "\xe5\x7fV\xb2\xbb\xe2Ec\x9bYBY\x9e\xb8\xf5\xe5",
    },
  },
  02: statement (string) = "SELECT `temp`.`\xe9[...](2563)",
  04: runAsync (bool) = true,
}
I0825 11:44:59.828274 46098 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:59.831308 46098 Frontend.java:935] Analyzing query: SELECT `temp`.`采购订单类型`, `temp`.`采购订单日期`, `temp`.`收货站点`, `temp`.`商品类目描述`, `temp`.`订单金额_不含税`, `temp`.`是否完成交货`, `temp`.`该行是否被删除`, `temp`.`该行是否退货` FROM (SELECT `temp_sub_query_table`.`采购订单类型`, `temp_sub_query_table`.`采购订单日期`, `temp_sub_query_table`.`收货站点`, `temp_sub_query_table`.`商品类目描述`, `temp_sub_query_table`.`订单金额_不含税`, `temp_sub_query_table`.`是否完成交货`, `temp_sub_query_table`.`该行是否被删除`, `temp_sub_query_table`.`该行是否退货` FROM (SELECT `APP_GSMS_HOS_CGDD`.`采购订单编号`, `APP_GSMS_HOS_CGDD`.`采购订单行项目`, `APP_GSMS_HOS_CGDD`.`采购订单类型`, `APP_GSMS_HOS_CGDD`.`采购订单类型描述`, `APP_GSMS_HOS_CGDD`.`采购订单日期`, `APP_GSMS_HOS_CGDD`.`供应商编码`, `APP_GSMS_HOS_CGDD`.`供应商名称`, `APP_GSMS_HOS_CGDD`.`收货站点`, `APP_GSMS_HOS_CGDD`.`站点名称`, `APP_GSMS_HOS_CGDD`.`商品编码`, `APP_GSMS_HOS_CGDD`.`商品描述`, `APP_GSMS_HOS_CGDD`.`商品类目`, `APP_GSMS_HOS_CGDD`.`商品类目描述`, `APP_GSMS_HOS_CGDD`.`订单单位`, `APP_GSMS_HOS_CGDD`.`订单数量`, `APP_GSMS_HOS_CGDD`.`净价`, `APP_GSMS_HOS_CGDD`.`订单金额_不含税`, `APP_GSMS_HOS_CGDD`.`订单金额_含税`, `APP_GSMS_HOS_CGDD`.`税率`, `APP_GSMS_HOS_CGDD`.`税额`, `APP_GSMS_HOS_CGDD`.`是否完成交货`, `APP_GSMS_HOS_CGDD`.`是否开具发票`, `APP_GSMS_HOS_CGDD`.`该行是否被删除`, `APP_GSMS_HOS_CGDD`.`该行是否退货`, `APP_GSMS_HOS_CGDD`.`所属`, `APP_GSMS_HOS_CGDD`.`单位名称` FROM `DW04`.`APP_GSMS_HOS_CGDD`) AS temp_sub_query_table WHERE (( `temp_sub_query_table`.`单位名称` IN ('乌鲁木齐石化分公司', '独山子石化分公司', '中国石油集团西部钻探工程有限公司', '中国石油运输有限公司', '西部管道分公司', '新疆油田分公司', '吐哈油田分公司', '塔里木油田分公司', '中石油新疆销售有限公司', '中石油克拉玛依石化有限责任公司', '中国石油集团工程有限公司北京项目管理分公司') ) AND ((`temp_sub_query_table`.`订单金额_不含税` < 10000000) AND (( `temp_sub_query_table`.`采购订单类型` IN ('Z003', 'Z005') ) AND (( `temp_sub_query_table`.`该行是否被删除` IN (' ') ) AND (( `temp_sub_query_table`.`该行是否退货` IN ('否') ) AND ((`temp_sub_query_table`.`商品类目描述` = '白酒') AND ( `temp_sub_query_table`.`是否完成交货` IN ('是') )))))))) AS temp WHERE (1 = 0)
I0825 11:44:59.844555 46098 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:59.844655 46098 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:59.845311 46098 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:59.845360 46098 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:59.852375 46098 Frontend.java:947] Analysis finished.
I0825 11:44:59.856588 46098 admission-controller.cc:508] Schedule for id=7041ef29e1f82bff:14ee48cf00000000 in pool_name=root.default cluster_mem_needed=8.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
I0825 11:44:59.858134 46098 admission-controller.cc:513] Stats: agg_num_running=0, agg_num_queued=0, agg_mem_reserved=0,  local_host(local_mem_admitted=0, num_admitted_running=0, num_queued=0, backend_mem_reserved=0)
I0825 11:44:59.858191 46098 admission-controller.cc:529] Admitted query id=7041ef29e1f82bff:14ee48cf00000000
I0825 11:44:59.858220 46098 coordinator.cc:93] Exec() query_id=7041ef29e1f82bff:14ee48cf00000000 stmt=SELECT `temp`.`采购订单类型`, `temp`.`采购订单日期`, `temp`.`收货站点`, `temp`.`商品类目描述`, `temp`.`订单金额_不含税`, `temp`.`是否完成交货`, `temp`.`该行是否被删除`, `temp`.`该行是否退货` FROM (SELECT `temp_sub_query_table`.`采购订单类型`, `temp_sub_query_table`.`采购订单日期`, `temp_sub_query_table`.`收货站点`, `temp_sub_query_table`.`商品类目描述`, `temp_sub_query_table`.`订单金额_不含税`, `temp_sub_query_table`.`是否完成交货`, `temp_sub_query_table`.`该行是否被删除`, `temp_sub_query_table`.`该行是否退货` FROM (SELECT `APP_GSMS_HOS_CGDD`.`采购订单编号`, `APP_GSMS_HOS_CGDD`.`采购订单行项目`, `APP_GSMS_HOS_CGDD`.`采购订单类型`, `APP_GSMS_HOS_CGDD`.`采购订单类型描述`, `APP_GSMS_HOS_CGDD`.`采购订单日期`, `APP_GSMS_HOS_CGDD`.`供应商编码`, `APP_GSMS_HOS_CGDD`.`供应商名称`, `APP_GSMS_HOS_CGDD`.`收货站点`, `APP_GSMS_HOS_CGDD`.`站点名称`, `APP_GSMS_HOS_CGDD`.`商品编码`, `APP_GSMS_HOS_CGDD`.`商品描述`, `APP_GSMS_HOS_CGDD`.`商品类目`, `APP_GSMS_HOS_CGDD`.`商品类目描述`, `APP_GSMS_HOS_CGDD`.`订单单位`, `APP_GSMS_HOS_CGDD`.`订单数量`, `APP_GSMS_HOS_CGDD`.`净价`, `APP_GSMS_HOS_CGDD`.`订单金额_不含税`, `APP_GSMS_HOS_CGDD`.`订单金额_含税`, `APP_GSMS_HOS_CGDD`.`税率`, `APP_GSMS_HOS_CGDD`.`税额`, `APP_GSMS_HOS_CGDD`.`是否完成交货`, `APP_GSMS_HOS_CGDD`.`是否开具发票`, `APP_GSMS_HOS_CGDD`.`该行是否被删除`, `APP_GSMS_HOS_CGDD`.`该行是否退货`, `APP_GSMS_HOS_CGDD`.`所属`, `APP_GSMS_HOS_CGDD`.`单位名称` FROM `DW04`.`APP_GSMS_HOS_CGDD`) AS temp_sub_query_table WHERE (( `temp_sub_query_table`.`单位名称` IN ('乌鲁木齐石化分公司', '独山子石化分公司', '中国石油集团西部钻探工程有限公司', '中国石油运输有限公司', '西部管道分公司', '新疆油田分公司', '吐哈油田分公司', '塔里木油田分公司', '中石油新疆销售有限公司', '中石油克拉玛依石化有限责任公司', '中国石油集团工程有限公司北京项目管理分公司') ) AND ((`temp_sub_query_table`.`订单金额_不含税` < 10000000) AND (( `temp_sub_query_table`.`采购订单类型` IN ('Z003', 'Z005') ) AND (( `temp_sub_query_table`.`该行是否被删除` IN (' ') ) AND (( `temp_sub_query_table`.`该行是否退货` IN ('否') ) AND ((`temp_sub_query_table`.`商品类目描述` = '白酒') AND ( `temp_sub_query_table`.`是否完成交货` IN ('是') )))))))) AS temp WHERE (1 = 0)
I0825 11:44:59.858314 46098 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:44:59.858345 46098 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:44:59.858392 46098 coordinator.cc:349] starting execution on 1 backends for query_id=7041ef29e1f82bff:14ee48cf00000000
I0825 11:44:59.858831 45240 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=7041ef29e1f82bff:14ee48cf00000000
I0825 11:44:59.858898 45240 query-exec-mgr.cc:46] StartQueryFInstances() query_id=7041ef29e1f82bff:14ee48cf00000000 coord=e4bdhpp025:22000
I0825 11:44:59.858938 45240 query-state.cc:178] Buffer pool limit for 7041ef29e1f82bff:14ee48cf00000000: 6871947673
I0825 11:44:59.859020 45240 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 7041ef29e1f82bff:14ee48cf00000000
I0825 11:44:59.859212 46214 query-state.cc:300] StartFInstances(): query_id=7041ef29e1f82bff:14ee48cf00000000 #instances=1
I0825 11:44:59.859318 46214 query-state.cc:313] descriptor table for query=7041ef29e1f82bff:14ee48cf00000000
tuples:
Tuple(id=0 size=121 slots=[Slot(id=2 type=STRING col_path=[2] offset=0 null=(offset=120 mask=1) slot_idx=0 field_idx=-1), Slot(id=4 type=TIMESTAMP col_path=[4] offset=16 null=(offset=120 mask=2) slot_idx=1 field_idx=-1), Slot(id=7 type=STRING col_path=[7] offset=32 null=(offset=120 mask=4) slot_idx=2 field_idx=-1), Slot(id=12 type=STRING col_path=[12] offset=48 null=(offset=120 mask=8) slot_idx=3 field_idx=-1), Slot(id=16 type=DECIMAL(16,2) col_path=[16] offset=112 null=(offset=120 mask=80) slot_idx=7 field_idx=-1), Slot(id=20 type=STRING col_path=[20] offset=64 null=(offset=120 mask=10) slot_idx=4 field_idx=-1), Slot(id=22 type=STRING col_path=[22] offset=80 null=(offset=120 mask=20) slot_idx=5 field_idx=-1), Slot(id=23 type=STRING col_path=[23] offset=96 null=(offset=120 mask=40) slot_idx=6 field_idx=-1)] tuple_path=[])
I0825 11:44:59.859326 46098 coordinator.cc:362] started execution on 1 backends for query_id=7041ef29e1f82bff:14ee48cf00000000
I0825 11:44:59.859422 46215 query-state.cc:395] Executing instance. instance_id=7041ef29e1f82bff:14ee48cf00000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=0 #in-flight=1
I0825 11:44:59.859884 46214 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=7041ef29e1f82bff:14ee48cf00000000 refcnt=3
I0825 11:44:59.860440 46098 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xff+\xf8\xe1)\xefAp\x00\x00\x00\x00\xcfH\xee\x14",
      02: secret (string) = "\xff+\xf8\xe1)\xefAp\x00\x00\x00\x00\xcfH\xee\x14",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:44:59.861383 46098 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=7041ef29e1f82bff:14ee48cf00000000
I0825 11:44:59.861574 46098 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[8] {
      [0] = TColumnDesc {
        01: columnName (string) = "\xe9\x87\x87\xe8\xb4\xad\xe8\xae\xa2\xe5\x8d\x95\xe7\xb1\xbb\xe5\x9e\x8b",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "\xe9\x87\x87\xe8\xb4\xad\xe8\xae\xa2\xe5\x8d\x95\xe6\x97\xa5\xe6\x9c\x9f",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "\xe6\x94\xb6\xe8\xb4\xa7\xe7\xab\x99\xe7\x82\xb9",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "\xe5\x95\x86\xe5\x93\x81\xe7\xb1\xbb\xe7\x9b\xae\xe6\x8f\x8f\xe8\xbf\xb0",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "\xe8\xae\xa2\xe5\x8d\x95\xe9\x87\x91\xe9\xa2\x9d_\xe4\xb8\x8d\xe5\x90\xab\xe7\xa8\x8e",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 16,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "\xe6\x98\xaf\xe5\x90\xa6\xe5\xae\x8c\xe6\x88\x90\xe4\xba\xa4\xe8\xb4\xa7",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "\xe8\xaf\xa5\xe8\xa1\x8c\xe6\x98\xaf\xe5\x90\xa6\xe8\xa2\xab\xe5\x88\xa0\xe9\x99\xa4",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 6,
      },
      [7] = TColumnDesc {
        01: columnName (string) = "\xe8\xaf\xa5\xe8\xa1\x8c\xe6\x98\xaf\xe5\x90\xa6\xe9\x80\x80\xe8\xb4\xa7",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 7,
      },
    },
  },
}
I0825 11:44:59.862159 46098 impala-hs2-server.cc:683] CloseOperation(): query_id=7041ef29e1f82bff:14ee48cf00000000
I0825 11:44:59.862196 46098 impala-server.cc:1015] UnregisterQuery(): query_id=7041ef29e1f82bff:14ee48cf00000000
I0825 11:44:59.862218 46098 impala-server.cc:1102] Cancel(): query_id=7041ef29e1f82bff:14ee48cf00000000
I0825 11:44:59.862242 46098 coordinator.cc:629] Cancel() query_id=7041ef29e1f82bff:14ee48cf00000000
I0825 11:44:59.862265 46098 coordinator.cc:639] CancelBackends() query_id=7041ef29e1f82bff:14ee48cf00000000, tried to cancel 0 backends
I0825 11:44:59.862289 46098 coordinator.cc:783] Release admission control resources for query_id=7041ef29e1f82bff:14ee48cf00000000
I0825 11:44:59.862308 46215 query-state.cc:403] Instance completed. instance_id=7041ef29e1f82bff:14ee48cf00000000 #in-flight=0 status=OK
I0825 11:44:59.862357 46215 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=7041ef29e1f82bff:14ee48cf00000000 refcnt=2
I0825 11:44:59.863265 46098 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=7041ef29e1f82bff:14ee48cf00000000 refcnt=1
I0825 11:44:59.863847 46098 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe4\xa2\x10\x8e\xd1\xffLo\xa5\xf1`\xfd\xf4\x8e\xe9\xf3",
      02: secret (string) = "\xe5\x7fV\xb2\xbb\xe2Ec\x9bYBY\x9e\xb8\xf5\xe5",
    },
  },
}
I0825 11:44:59.864214 46098 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:57126 closed, closing 2 associated session(s)
I0825 11:44:59.934042 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:44:59.934589 46219 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:44:59.935284 46219 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x8e\xe8?\x8e\xa1\xdbO\xc2\xa3\x9a\x84~G.\x8e\xef",
      02: secret (string) = "4\x91>\xaab\xdfK\xf3\xafH\x1e\xb3\x94\"*\x97",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:44:59.935747 46219 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x8e\xe8?\x8e\xa1\xdbO\xc2\xa3\x9a\x84~G.\x8e\xef",
      02: secret (string) = "4\x91>\xaab\xdfK\xf3\xafH\x1e\xb3\x94\"*\x97",
    },
  },
}
I0825 11:44:59.936105 46219 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:44:59.936729 46219 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x85!3+ZXI\x13\xacJ?\xd5\x14\xe8\xf2T",
      02: secret (string) = "\xbc\xd2\xd4\xafu\x87@\f\x99d\xe8\xe36\nz\xe5",
    },
  },
  02: statement (string) = "USE dw01",
  04: runAsync (bool) = true,
}
I0825 11:44:59.936805 46219 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x85!3+ZXI\x13\xacJ?\xd5\x14\xe8\xf2T",
      02: secret (string) = "\xbc\xd2\xd4\xafu\x87@\f\x99d\xe8\xe36\nz\xe5",
    },
  },
  02: statement (string) = "USE dw01",
  04: runAsync (bool) = true,
}
I0825 11:44:59.937577 46219 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:59.940768 46219 Frontend.java:935] Analyzing query: USE dw01
I0825 11:44:59.945129 46219 Frontend.java:947] Analysis finished.
I0825 11:44:59.980886 46219 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "4\x9b\xdf\\\r\x10EI\x00\x00\x00\x00\xd6LF\xdd",
      02: secret (string) = "4\x9b\xdf\\\r\x10EI\x00\x00\x00\x00\xd6LF\xdd",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:44:59.981822 46219 impala-hs2-server.cc:683] CloseOperation(): query_id=4945100d5cdf9b34:dd464cd600000000
I0825 11:44:59.981868 46219 impala-server.cc:1015] UnregisterQuery(): query_id=4945100d5cdf9b34:dd464cd600000000
I0825 11:44:59.981891 46219 impala-server.cc:1102] Cancel(): query_id=4945100d5cdf9b34:dd464cd600000000
I0825 11:44:59.982605 46219 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x85!3+ZXI\x13\xacJ?\xd5\x14\xe8\xf2T",
      02: secret (string) = "\xbc\xd2\xd4\xafu\x87@\f\x99d\xe8\xe36\nz\xe5",
    },
  },
  02: statement (string) = "SET KrbUserName=apprc",
  04: runAsync (bool) = true,
}
I0825 11:44:59.982651 46219 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x85!3+ZXI\x13\xacJ?\xd5\x14\xe8\xf2T",
      02: secret (string) = "\xbc\xd2\xd4\xafu\x87@\f\x99d\xe8\xe36\nz\xe5",
    },
  },
  02: statement (string) = "SET KrbUserName=apprc",
  04: runAsync (bool) = true,
}
I0825 11:44:59.983057 46219 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:44:59.985354 46219 Frontend.java:935] Analyzing query: SET KrbUserName=apprc
I0825 11:44:59.985620 46219 Frontend.java:947] Analysis finished.
I0825 11:45:00.043257 46219 status.cc:125] Invalid query option: KrbUserName
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:45:00.045845 46219 impala-server.cc:1015] UnregisterQuery(): query_id=634aace9cb6c405a:dd026fe000000000
I0825 11:45:00.045899 46219 impala-server.cc:1102] Cancel(): query_id=634aace9cb6c405a:dd026fe000000000
I0825 11:45:00.047169 46219 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x85!3+ZXI\x13\xacJ?\xd5\x14\xe8\xf2T",
      02: secret (string) = "\xbc\xd2\xd4\xafu\x87@\f\x99d\xe8\xe36\nz\xe5",
    },
  },
  02: statement (string) = "SET alias=`bi_6749357856600458205`",
  04: runAsync (bool) = true,
}
I0825 11:45:00.047276 46219 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x85!3+ZXI\x13\xacJ?\xd5\x14\xe8\xf2T",
      02: secret (string) = "\xbc\xd2\xd4\xafu\x87@\f\x99d\xe8\xe36\nz\xe5",
    },
  },
  02: statement (string) = "SET alias=`bi_6749357856600458205`",
  04: runAsync (bool) = true,
}
I0825 11:45:00.047667 46219 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:45:00.049926 46219 Frontend.java:935] Analyzing query: SET alias=`bi_6749357856600458205`
I0825 11:45:00.050194 46219 Frontend.java:947] Analysis finished.
I0825 11:45:00.101151 46219 status.cc:125] Invalid query option: alias
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:45:00.101394 46219 impala-server.cc:1015] UnregisterQuery(): query_id=ee45a7355f825496:e3bfdf9b00000000
I0825 11:45:00.101436 46219 impala-server.cc:1102] Cancel(): query_id=ee45a7355f825496:e3bfdf9b00000000
I0825 11:45:00.102543 46219 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x85!3+ZXI\x13\xacJ?\xd5\x14\xe8\xf2T",
      02: secret (string) = "\xbc\xd2\xd4\xafu\x87@\f\x99d\xe8\xe36\nz\xe5",
    },
  },
  02: statement (string) = "SET mem_limit=8g",
  04: runAsync (bool) = true,
}
I0825 11:45:00.102597 46219 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x85!3+ZXI\x13\xacJ?\xd5\x14\xe8\xf2T",
      02: secret (string) = "\xbc\xd2\xd4\xafu\x87@\f\x99d\xe8\xe36\nz\xe5",
    },
  },
  02: statement (string) = "SET mem_limit=8g",
  04: runAsync (bool) = true,
}
I0825 11:45:00.102994 46219 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:45:00.105249 46219 Frontend.java:935] Analyzing query: SET mem_limit=8g
I0825 11:45:00.105526 46219 Frontend.java:947] Analysis finished.
I0825 11:45:00.105953 46219 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xc0\xf1\x14cB\xf0G\\\x00\x00\x00\x00\xc0\x92\xecR",
      02: secret (string) = "\xc0\xf1\x14cB\xf0G\\\x00\x00\x00\x00\xc0\x92\xecR",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:45:00.106700 46219 impala-hs2-server.cc:683] CloseOperation(): query_id=5c47f0426314f1c0:52ec92c000000000
I0825 11:45:00.106731 46219 impala-server.cc:1015] UnregisterQuery(): query_id=5c47f0426314f1c0:52ec92c000000000
I0825 11:45:00.106746 46219 impala-server.cc:1102] Cancel(): query_id=5c47f0426314f1c0:52ec92c000000000
I0825 11:45:00.107273 46219 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x85!3+ZXI\x13\xacJ?\xd5\x14\xe8\xf2T",
      02: secret (string) = "\xbc\xd2\xd4\xafu\x87@\f\x99d\xe8\xe36\nz\xe5",
    },
  },
  02: statement (string) = "SET queryType=JDBC",
  04: runAsync (bool) = true,
}
I0825 11:45:00.107316 46219 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x85!3+ZXI\x13\xacJ?\xd5\x14\xe8\xf2T",
      02: secret (string) = "\xbc\xd2\xd4\xafu\x87@\f\x99d\xe8\xe36\nz\xe5",
    },
  },
  02: statement (string) = "SET queryType=JDBC",
  04: runAsync (bool) = true,
}
I0825 11:45:00.107602 46219 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:45:00.109704 46219 Frontend.java:935] Analyzing query: SET queryType=JDBC
I0825 11:45:00.109925 46219 Frontend.java:947] Analysis finished.
I0825 11:45:00.167692 46219 status.cc:125] Invalid query option: queryType
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:45:00.167925 46219 impala-server.cc:1015] UnregisterQuery(): query_id=1e492edc48623b3d:924b784200000000
I0825 11:45:00.167981 46219 impala-server.cc:1102] Cancel(): query_id=1e492edc48623b3d:924b784200000000
I0825 11:45:00.169330 46219 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x85!3+ZXI\x13\xacJ?\xd5\x14\xe8\xf2T",
      02: secret (string) = "\xbc\xd2\xd4\xafu\x87@\f\x99d\xe8\xe36\nz\xe5",
    },
  },
  02: statement (string) = "SET timeoutSeconds=1800",
  04: runAsync (bool) = true,
}
I0825 11:45:00.169422 46219 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x85!3+ZXI\x13\xacJ?\xd5\x14\xe8\xf2T",
      02: secret (string) = "\xbc\xd2\xd4\xafu\x87@\f\x99d\xe8\xe36\nz\xe5",
    },
  },
  02: statement (string) = "SET timeoutSeconds=1800",
  04: runAsync (bool) = true,
}
I0825 11:45:00.169992 46219 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:45:00.172928 46219 Frontend.java:935] Analyzing query: SET timeoutSeconds=1800
I0825 11:45:00.173336 46219 Frontend.java:947] Analysis finished.
I0825 11:45:00.231508 46219 status.cc:125] Invalid query option: timeoutSeconds
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:45:00.231691 46219 impala-server.cc:1015] UnregisterQuery(): query_id=846de18fd380059:9aa774a900000000
I0825 11:45:00.231729 46219 impala-server.cc:1102] Cancel(): query_id=846de18fd380059:9aa774a900000000
I0825 11:45:00.232877 46219 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x85!3+ZXI\x13\xacJ?\xd5\x14\xe8\xf2T",
      02: secret (string) = "\xbc\xd2\xd4\xafu\x87@\f\x99d\xe8\xe36\nz\xe5",
    },
  },
  02: statement (string) = "SET useSSL=false",
  04: runAsync (bool) = true,
}
I0825 11:45:00.232944 46219 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x85!3+ZXI\x13\xacJ?\xd5\x14\xe8\xf2T",
      02: secret (string) = "\xbc\xd2\xd4\xafu\x87@\f\x99d\xe8\xe36\nz\xe5",
    },
  },
  02: statement (string) = "SET useSSL=false",
  04: runAsync (bool) = true,
}
I0825 11:45:00.233338 46219 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:45:00.235639 46219 Frontend.java:935] Analyzing query: SET useSSL=false
I0825 11:45:00.235919 46219 Frontend.java:947] Analysis finished.
I0825 11:45:00.286784 46219 status.cc:125] Invalid query option: useSSL
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:45:00.287606 46219 impala-server.cc:1015] UnregisterQuery(): query_id=2a47c1ee6f196860:7edd2c1100000000
I0825 11:45:00.287657 46219 impala-server.cc:1102] Cancel(): query_id=2a47c1ee6f196860:7edd2c1100000000
I0825 11:45:00.290371 46219 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x85!3+ZXI\x13\xacJ?\xd5\x14\xe8\xf2T",
      02: secret (string) = "\xbc\xd2\xd4\xafu\x87@\f\x99d\xe8\xe36\nz\xe5",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:45:00.294153 46219 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x85!3+ZXI\x13\xacJ?\xd5\x14\xe8\xf2T",
      02: secret (string) = "\xbc\xd2\xd4\xafu\x87@\f\x99d\xe8\xe36\nz\xe5",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:45:00.294821 46219 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:45:00.297680 46219 Frontend.java:935] Analyzing query: DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`
I0825 11:45:00.299017 46219 Frontend.java:947] Analysis finished.
I0825 11:45:00.349445 46219 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x9f\xc5\xe2\"\xe7+B\x06\x00\x00\x00\x00\xe8\xbc\xbb\x9c",
      02: secret (string) = "\x9f\xc5\xe2\"\xe7+B\x06\x00\x00\x00\x00\xe8\xbc\xbb\x9c",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:45:00.353380 46219 impala-hs2-server.cc:683] CloseOperation(): query_id=6422be722e2c59f:9cbbbce800000000
I0825 11:45:00.353498 46219 impala-server.cc:1015] UnregisterQuery(): query_id=6422be722e2c59f:9cbbbce800000000
I0825 11:45:00.353538 46219 impala-server.cc:1102] Cancel(): query_id=6422be722e2c59f:9cbbbce800000000
I0825 11:45:00.355988 46219 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x85!3+ZXI\x13\xacJ?\xd5\x14\xe8\xf2T",
      02: secret (string) = "\xbc\xd2\xd4\xafu\x87@\f\x99d\xe8\xe36\nz\xe5",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:45:00.356091 46219 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x85!3+ZXI\x13\xacJ?\xd5\x14\xe8\xf2T",
      02: secret (string) = "\xbc\xd2\xd4\xafu\x87@\f\x99d\xe8\xe36\nz\xe5",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:45:00.356698 46219 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:45:00.359565 46219 Frontend.java:935] Analyzing query: DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`
I0825 11:45:00.360996 46219 Frontend.java:947] Analysis finished.
I0825 11:45:00.414090 46219 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x05\x1c|[\x0eo@\x9f\x00\x00\x00\x00 r\xd0I",
      02: secret (string) = "\x05\x1c|[\x0eo@\x9f\x00\x00\x00\x00 r\xd0I",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:45:00.416461 46219 impala-hs2-server.cc:683] CloseOperation(): query_id=9f406f0e5b7c1c05:49d0722000000000
I0825 11:45:00.416550 46219 impala-server.cc:1015] UnregisterQuery(): query_id=9f406f0e5b7c1c05:49d0722000000000
I0825 11:45:00.416604 46219 impala-server.cc:1102] Cancel(): query_id=9f406f0e5b7c1c05:49d0722000000000
I0825 11:45:00.418870 46219 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x85!3+ZXI\x13\xacJ?\xd5\x14\xe8\xf2T",
      02: secret (string) = "\xbc\xd2\xd4\xafu\x87@\f\x99d\xe8\xe36\nz\xe5",
    },
  },
  02: statement (string) = "SELECT `temp`.`\xe9[...](2549)",
  04: runAsync (bool) = true,
}
I0825 11:45:00.419168 46219 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x85!3+ZXI\x13\xacJ?\xd5\x14\xe8\xf2T",
      02: secret (string) = "\xbc\xd2\xd4\xafu\x87@\f\x99d\xe8\xe36\nz\xe5",
    },
  },
  02: statement (string) = "SELECT `temp`.`\xe9[...](2549)",
  04: runAsync (bool) = true,
}
I0825 11:45:00.419710 46219 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:45:00.422715 46219 Frontend.java:935] Analyzing query: SELECT `temp`.`采购订单类型`, `temp`.`采购订单日期`, `temp`.`收货站点`, `temp`.`商品类目描述`, `temp`.`订单金额_不含税`, `temp`.`是否完成交货`, `temp`.`该行是否被删除`, `temp`.`该行是否退货` FROM (SELECT `temp_sub_query_table`.`采购订单类型`, `temp_sub_query_table`.`采购订单日期`, `temp_sub_query_table`.`收货站点`, `temp_sub_query_table`.`商品类目描述`, `temp_sub_query_table`.`订单金额_不含税`, `temp_sub_query_table`.`是否完成交货`, `temp_sub_query_table`.`该行是否被删除`, `temp_sub_query_table`.`该行是否退货` FROM (SELECT `APP_GSMS_HOS_CGDD`.`采购订单编号`, `APP_GSMS_HOS_CGDD`.`采购订单行项目`, `APP_GSMS_HOS_CGDD`.`采购订单类型`, `APP_GSMS_HOS_CGDD`.`采购订单类型描述`, `APP_GSMS_HOS_CGDD`.`采购订单日期`, `APP_GSMS_HOS_CGDD`.`供应商编码`, `APP_GSMS_HOS_CGDD`.`供应商名称`, `APP_GSMS_HOS_CGDD`.`收货站点`, `APP_GSMS_HOS_CGDD`.`站点名称`, `APP_GSMS_HOS_CGDD`.`商品编码`, `APP_GSMS_HOS_CGDD`.`商品描述`, `APP_GSMS_HOS_CGDD`.`商品类目`, `APP_GSMS_HOS_CGDD`.`商品类目描述`, `APP_GSMS_HOS_CGDD`.`订单单位`, `APP_GSMS_HOS_CGDD`.`订单数量`, `APP_GSMS_HOS_CGDD`.`净价`, `APP_GSMS_HOS_CGDD`.`订单金额_不含税`, `APP_GSMS_HOS_CGDD`.`订单金额_含税`, `APP_GSMS_HOS_CGDD`.`税率`, `APP_GSMS_HOS_CGDD`.`税额`, `APP_GSMS_HOS_CGDD`.`是否完成交货`, `APP_GSMS_HOS_CGDD`.`是否开具发票`, `APP_GSMS_HOS_CGDD`.`该行是否被删除`, `APP_GSMS_HOS_CGDD`.`该行是否退货`, `APP_GSMS_HOS_CGDD`.`所属`, `APP_GSMS_HOS_CGDD`.`单位名称` FROM `DW04`.`APP_GSMS_HOS_CGDD`) AS temp_sub_query_table WHERE (( `temp_sub_query_table`.`单位名称` IN ('乌鲁木齐石化分公司', '独山子石化分公司', '中国石油集团西部钻探工程有限公司', '中国石油运输有限公司', '西部管道分公司', '新疆油田分公司', '吐哈油田分公司', '塔里木油田分公司', '中石油新疆销售有限公司', '中石油克拉玛依石化有限责任公司', '中国石油集团工程有限公司北京项目管理分公司') ) AND ((`temp_sub_query_table`.`订单金额_不含税` < 10000000) AND (( `temp_sub_query_table`.`采购订单类型` IN ('Z003', 'Z005') ) AND (( `temp_sub_query_table`.`该行是否被删除` IN (' ') ) AND (( `temp_sub_query_table`.`该行是否退货` IN ('否') ) AND ((`temp_sub_query_table`.`商品类目描述` = '白酒') AND ( `temp_sub_query_table`.`是否完成交货` IN ('是') )))))))) AS temp
I0825 11:45:00.435653 46219 Frontend.java:947] Analysis finished.
I0825 11:45:00.441638 46219 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:45:00.441782 46219 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:45:00.442167 46219 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:45:00.442210 46219 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:45:00.442493 46219 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:45:00.442539 46219 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:45:00.442858 46219 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:45:00.443046 46219 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:45:00.443377 46219 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:45:00.443907 46219 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:45:00.444244 46219 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:45:00.444298 46219 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:45:00.444732 46219 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:45:00.444875 46219 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:45:00.461369 46219 admission-controller.cc:508] Schedule for id=2b4244d880a0537b:216c86000000000 in pool_name=root.default cluster_mem_needed=40.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
I0825 11:45:00.461510 46219 admission-controller.cc:513] Stats: agg_num_running=0, agg_num_queued=0, agg_mem_reserved=0,  local_host(local_mem_admitted=0, num_admitted_running=0, num_queued=0, backend_mem_reserved=0)
I0825 11:45:00.461547 46219 admission-controller.cc:529] Admitted query id=2b4244d880a0537b:216c86000000000
I0825 11:45:00.461582 46219 coordinator.cc:93] Exec() query_id=2b4244d880a0537b:216c86000000000 stmt=SELECT `temp`.`采购订单类型`, `temp`.`采购订单日期`, `temp`.`收货站点`, `temp`.`商品类目描述`, `temp`.`订单金额_不含税`, `temp`.`是否完成交货`, `temp`.`该行是否被删除`, `temp`.`该行是否退货` FROM (SELECT `temp_sub_query_table`.`采购订单类型`, `temp_sub_query_table`.`采购订单日期`, `temp_sub_query_table`.`收货站点`, `temp_sub_query_table`.`商品类目描述`, `temp_sub_query_table`.`订单金额_不含税`, `temp_sub_query_table`.`是否完成交货`, `temp_sub_query_table`.`该行是否被删除`, `temp_sub_query_table`.`该行是否退货` FROM (SELECT `APP_GSMS_HOS_CGDD`.`采购订单编号`, `APP_GSMS_HOS_CGDD`.`采购订单行项目`, `APP_GSMS_HOS_CGDD`.`采购订单类型`, `APP_GSMS_HOS_CGDD`.`采购订单类型描述`, `APP_GSMS_HOS_CGDD`.`采购订单日期`, `APP_GSMS_HOS_CGDD`.`供应商编码`, `APP_GSMS_HOS_CGDD`.`供应商名称`, `APP_GSMS_HOS_CGDD`.`收货站点`, `APP_GSMS_HOS_CGDD`.`站点名称`, `APP_GSMS_HOS_CGDD`.`商品编码`, `APP_GSMS_HOS_CGDD`.`商品描述`, `APP_GSMS_HOS_CGDD`.`商品类目`, `APP_GSMS_HOS_CGDD`.`商品类目描述`, `APP_GSMS_HOS_CGDD`.`订单单位`, `APP_GSMS_HOS_CGDD`.`订单数量`, `APP_GSMS_HOS_CGDD`.`净价`, `APP_GSMS_HOS_CGDD`.`订单金额_不含税`, `APP_GSMS_HOS_CGDD`.`订单金额_含税`, `APP_GSMS_HOS_CGDD`.`税率`, `APP_GSMS_HOS_CGDD`.`税额`, `APP_GSMS_HOS_CGDD`.`是否完成交货`, `APP_GSMS_HOS_CGDD`.`是否开具发票`, `APP_GSMS_HOS_CGDD`.`该行是否被删除`, `APP_GSMS_HOS_CGDD`.`该行是否退货`, `APP_GSMS_HOS_CGDD`.`所属`, `APP_GSMS_HOS_CGDD`.`单位名称` FROM `DW04`.`APP_GSMS_HOS_CGDD`) AS temp_sub_query_table WHERE (( `temp_sub_query_table`.`单位名称` IN ('乌鲁木齐石化分公司', '独山子石化分公司', '中国石油集团西部钻探工程有限公司', '中国石油运输有限公司', '西部管道分公司', '新疆油田分公司', '吐哈油田分公司', '塔里木油田分公司', '中石油新疆销售有限公司', '中石油克拉玛依石化有限责任公司', '中国石油集团工程有限公司北京项目管理分公司') ) AND ((`temp_sub_query_table`.`订单金额_不含税` < 10000000) AND (( `temp_sub_query_table`.`采购订单类型` IN ('Z003', 'Z005') ) AND (( `temp_sub_query_table`.`该行是否被删除` IN (' ') ) AND (( `temp_sub_query_table`.`该行是否退货` IN ('否') ) AND ((`temp_sub_query_table`.`商品类目描述` = '白酒') AND ( `temp_sub_query_table`.`是否完成交货` IN ('是') )))))))) AS temp
I0825 11:45:00.461668 46219 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:45:00.461688 46219 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:45:00.461784 46219 coordinator.cc:349] starting execution on 5 backends for query_id=2b4244d880a0537b:216c86000000000
I0825 11:45:00.462599 45240 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=2b4244d880a0537b:216c86000000000
I0825 11:45:00.462679 45240 query-exec-mgr.cc:46] StartQueryFInstances() query_id=2b4244d880a0537b:216c86000000000 coord=e4bdhpp025:22000
I0825 11:45:00.462707 45240 query-state.cc:178] Buffer pool limit for 2b4244d880a0537b:216c86000000000: 6871947673
I0825 11:45:00.462770 45240 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 2b4244d880a0537b:216c86000000000
I0825 11:45:00.462916 46257 query-state.cc:300] StartFInstances(): query_id=2b4244d880a0537b:216c86000000000 #instances=2
I0825 11:45:00.463066 46257 query-state.cc:313] descriptor table for query=2b4244d880a0537b:216c86000000000
tuples:
Tuple(id=3 size=202 slots=[Slot(id=60 type=STRING col_path=[20] offset=0 null=(offset=200 mask=1) slot_idx=0 field_idx=-1), Slot(id=61 type=STRING col_path=[20] offset=16 null=(offset=200 mask=2) slot_idx=1 field_idx=-1), Slot(id=62 type=DECIMAL(16,2) col_path=[16] offset=192 null=(offset=201 mask=10) slot_idx=12 field_idx=-1), Slot(id=63 type=STRING col_path=[22] offset=32 null=(offset=200 mask=4) slot_idx=2 field_idx=-1), Slot(id=64 type=STRING col_path=[22] offset=48 null=(offset=200 mask=8) slot_idx=3 field_idx=-1), Slot(id=65 type=STRING col_path=[23] offset=64 null=(offset=200 mask=10) slot_idx=4 field_idx=-1), Slot(id=66 type=STRING col_path=[23] offset=80 null=(offset=200 mask=20) slot_idx=5 field_idx=-1), Slot(id=67 type=STRING col_path=[2] offset=96 null=(offset=200 mask=40) slot_idx=6 field_idx=-1), Slot(id=68 type=STRING col_path=[2] offset=112 null=(offset=200 mask=80) slot_idx=7 field_idx=-1), Slot(id=69 type=STRING col_path=[12] offset=128 null=(offset=201 mask=1) slot_idx=8 field_idx=-1), Slot(id=70 type=STRING col_path=[12] offset=144 null=(offset=201 mask=2) slot_idx=9 field_idx=-1), Slot(id=71 type=STRING col_path=[25] offset=160 null=(offset=201 mask=4) slot_idx=10 field_idx=-1), Slot(id=72 type=STRING col_path=[25] offset=176 null=(offset=201 mask=8) slot_idx=11 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=138 slots=[Slot(id=2 type=STRING col_path=[2] offset=0 null=(offset=136 mask=1) slot_idx=0 field_idx=-1), Slot(id=4 type=TIMESTAMP col_path=[4] offset=16 null=(offset=136 mask=2) slot_idx=1 field_idx=-1), Slot(id=7 type=STRING col_path=[7] offset=32 null=(offset=136 mask=4) slot_idx=2 field_idx=-1), Slot(id=12 type=STRING col_path=[12] offset=48 null=(offset=136 mask=8) slot_idx=3 field_idx=-1), Slot(id=16 type=DECIMAL(16,2) col_path=[16] offset=128 null=(offset=137 mask=1) slot_idx=8 field_idx=-1), Slot(id=20 type=STRING col_path=[20] offset=64 null=(offset=136 mask=10) slot_idx=4 field_idx=-1), Slot(id=22 type=STRING col_path=[22] offset=80 null=(offset=136 mask=20) slot_idx=5 field_idx=-1), Slot(id=23 type=STRING col_path=[23] offset=96 null=(offset=136 mask=40) slot_idx=6 field_idx=-1), Slot(id=25 type=STRING col_path=[25] offset=112 null=(offset=136 mask=80) slot_idx=7 field_idx=-1)] tuple_path=[])
I0825 11:45:00.463308 46258 query-state.cc:395] Executing instance. instance_id=2b4244d880a0537b:216c86000000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=4 #in-flight=1
I0825 11:45:00.463384 46259 query-state.cc:395] Executing instance. instance_id=2b4244d880a0537b:216c86000000002 fragment_idx=1 per_fragment_instance_idx=1 coord_state_idx=4 #in-flight=2
I0825 11:45:00.463546 46259 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '2b4244d880a0537b:216c86000000002': 190
I0825 11:45:00.464355 46257 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:00.473403 46219 coordinator.cc:362] started execution on 5 backends for query_id=2b4244d880a0537b:216c86000000000
I0825 11:45:00.474519 46219 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "{S\xa0\x80\xd8DB+\x00\x00\x00\x00`\xc8\x16\x02",
      02: secret (string) = "{S\xa0\x80\xd8DB+\x00\x00\x00\x00`\xc8\x16\x02",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:45:00.570291 44439 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=5d455d25f184998f:3a98a1ed00000000
I0825 11:45:00.602490 44439 query-exec-mgr.cc:46] StartQueryFInstances() query_id=5d455d25f184998f:3a98a1ed00000000 coord=e4bdhpp023:22000
I0825 11:45:00.604445 44439 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:45:00.604532 44439 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:45:00.604586 44439 query-state.cc:178] Buffer pool limit for 5d455d25f184998f:3a98a1ed00000000: 6871947673
I0825 11:45:00.604673 44439 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 5d455d25f184998f:3a98a1ed00000000
I0825 11:45:00.604954 46320 query-state.cc:300] StartFInstances(): query_id=5d455d25f184998f:3a98a1ed00000000 #instances=1
I0825 11:45:00.605175 46320 query-state.cc:313] descriptor table for query=5d455d25f184998f:3a98a1ed00000000
tuples:
Tuple(id=3 size=234 slots=[Slot(id=65 type=STRING col_path=[20] offset=0 null=(offset=232 mask=1) slot_idx=0 field_idx=-1), Slot(id=66 type=STRING col_path=[20] offset=16 null=(offset=232 mask=2) slot_idx=1 field_idx=-1), Slot(id=67 type=DECIMAL(16,2) col_path=[16] offset=224 null=(offset=233 mask=40) slot_idx=14 field_idx=-1), Slot(id=68 type=STRING col_path=[22] offset=32 null=(offset=232 mask=4) slot_idx=2 field_idx=-1), Slot(id=69 type=STRING col_path=[22] offset=48 null=(offset=232 mask=8) slot_idx=3 field_idx=-1), Slot(id=70 type=STRING col_path=[23] offset=64 null=(offset=232 mask=10) slot_idx=4 field_idx=-1), Slot(id=71 type=STRING col_path=[23] offset=80 null=(offset=232 mask=20) slot_idx=5 field_idx=-1), Slot(id=72 type=STRING col_path=[2] offset=96 null=(offset=232 mask=40) slot_idx=6 field_idx=-1), Slot(id=73 type=STRING col_path=[2] offset=112 null=(offset=232 mask=80) slot_idx=7 field_idx=-1), Slot(id=74 type=STRING col_path=[12] offset=128 null=(offset=233 mask=1) slot_idx=8 field_idx=-1), Slot(id=75 type=STRING col_path=[12] offset=144 null=(offset=233 mask=2) slot_idx=9 field_idx=-1), Slot(id=76 type=STRING col_path=[10] offset=160 null=(offset=233 mask=4) slot_idx=10 field_idx=-1), Slot(id=77 type=STRING col_path=[10] offset=176 null=(offset=233 mask=8) slot_idx=11 field_idx=-1), Slot(id=78 type=STRING col_path=[25] offset=192 null=(offset=233 mask=10) slot_idx=12 field_idx=-1), Slot(id=79 type=STRING col_path=[25] offset=208 null=(offset=233 mask=20) slot_idx=13 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=202 slots=[Slot(id=2 type=STRING col_path=[2] offset=0 null=(offset=200 mask=1) slot_idx=0 field_idx=-1), Slot(id=4 type=TIMESTAMP col_path=[4] offset=16 null=(offset=200 mask=2) slot_idx=1 field_idx=-1), Slot(id=6 type=STRING col_path=[6] offset=32 null=(offset=200 mask=4) slot_idx=2 field_idx=-1), Slot(id=7 type=STRING col_path=[7] offset=48 null=(offset=200 mask=8) slot_idx=3 field_idx=-1), Slot(id=8 type=STRING col_path=[8] offset=64 null=(offset=200 mask=10) slot_idx=4 field_idx=-1), Slot(id=10 type=STRING col_path=[10] offset=80 null=(offset=200 mask=20) slot_idx=5 field_idx=-1), Slot(id=12 type=STRING col_path=[12] offset=96 null=(offset=200 mask=40) slot_idx=6 field_idx=-1), Slot(id=14 type=DECIMAL(16,3) col_path=[14] offset=176 null=(offset=201 mask=8) slot_idx=11 field_idx=-1), Slot(id=15 type=DECIMAL(16,2) col_path=[15] offset=184 null=(offset=201 mask=10) slot_idx=12 field_idx=-1), Slot(id=16 type=DECIMAL(16,2) col_path=[16] offset=192 null=(offset=201 mask=20) slot_idx=13 field_idx=-1), Slot(id=20 type=STRING col_path=[20] offset=112 null=(offset=200 mask=80) slot_idx=7 field_idx=-1), Slot(id=22 type=STRING col_path=[22] offset=128 null=(offset=201 mask=1) slot_idx=8 field_idx=-1), Slot(id=23 type=STRING col_path=[23] offset=144 null=(offset=201 mask=2) slot_idx=9 field_idx=-1), Slot(id=25 type=STRING col_path=[25] offset=160 null=(offset=201 mask=4) slot_idx=10 field_idx=-1)] tuple_path=[])
I0825 11:45:00.605373 46321 query-state.cc:395] Executing instance. instance_id=5d455d25f184998f:3a98a1ed00000002 fragment_idx=1 per_fragment_instance_idx=1 coord_state_idx=4 #in-flight=3
I0825 11:45:00.605518 46321 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '5d455d25f184998f:3a98a1ed00000002': 190
I0825 11:45:00.606333 46320 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5d455d25f184998f:3a98a1ed00000000 refcnt=2
W0825 11:45:00.675949 43831 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:45:00.676717 43833 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:45:00.677726 43834 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:45:00.681140 43828 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:45:00.681650 43832 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:45:00.683209 43827 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:45:00.686877 43830 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:45:00.687296 43831 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297065000_BP-1820042964-11.11.206.232-1548063025113
W0825 11:45:00.687536 43833 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064223_BP-1820042964-11.11.206.232-1548063025113
W0825 11:45:00.687723 43834 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064427_BP-1820042964-11.11.206.232-1548063025113
W0825 11:45:00.687913 43828 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064312_BP-1820042964-11.11.206.232-1548063025113
W0825 11:45:00.688345 43832 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064614_BP-1820042964-11.11.206.232-1548063025113
W0825 11:45:00.690485 43827 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064589_BP-1820042964-11.11.206.232-1548063025113
W0825 11:45:00.690780 43830 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064597_BP-1820042964-11.11.206.232-1548063025113
I0825 11:45:01.531091 46690 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:01.545082 46690 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:01.813830 44132 thrift-util.cc:123] TAcceptQueueServer: Caught TException: No more data to read.
I0825 11:45:04.586572 46971 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:04.588682 46971 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:07.630384 46971 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:07.635416 46971 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:08.511361 44128 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp018@PANEL.COM" on an internal connection
I0825 11:45:10.025908 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:45:10.035719 47516 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:45:10.041376 47516 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "@\xb0\xc8\x9b\x8f\xf5M\xc6\xa6e\x94A\x01\x9bs\xfb",
      02: secret (string) = "\x9a\x1a\xdej>\xefN\x04\x9b\x18es\x1c\x81S\xc4",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:45:10.148834 47516 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "@\xb0\xc8\x9b\x8f\xf5M\xc6\xa6e\x94A\x01\x9bs\xfb",
      02: secret (string) = "\x9a\x1a\xdej>\xefN\x04\x9b\x18es\x1c\x81S\xc4",
    },
  },
}
I0825 11:45:10.150838 47516 thrift-util.cc:123] TSocket::read() recv() <Host: ::ffff:11.11.237.129 Port: 59552>Connection reset by peer
I0825 11:45:10.152189 47516 thrift-util.cc:123] TAcceptQueueServer client died: ECONNRESET
I0825 11:45:10.152500 47516 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:59552 closed, closing 1 associated session(s)
I0825 11:45:10.666450 46971 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:10.672605 46971 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:10.933099 44439 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=144f9322515abfd8:1f10cba200000000
I0825 11:45:10.934406 44439 query-exec-mgr.cc:46] StartQueryFInstances() query_id=144f9322515abfd8:1f10cba200000000 coord=e4bdhpp023:22000
I0825 11:45:10.939867 44439 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:45:10.942620 44439 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:45:10.943120 44439 query-state.cc:178] Buffer pool limit for 144f9322515abfd8:1f10cba200000000: 6871947673
I0825 11:45:10.943732 44439 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 144f9322515abfd8:1f10cba200000000
I0825 11:45:10.950862 47548 query-state.cc:300] StartFInstances(): query_id=144f9322515abfd8:1f10cba200000000 #instances=1
I0825 11:45:10.966709 47548 query-state.cc:313] descriptor table for query=144f9322515abfd8:1f10cba200000000
tuples:
Tuple(id=1 size=0 slots=[] tuple_path=[])
Tuple(id=0 size=952 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=944 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=944 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=STRING col_path=[2] offset=32 null=(offset=944 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[3] offset=48 null=(offset=944 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=STRING col_path=[4] offset=64 null=(offset=944 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=STRING col_path=[5] offset=80 null=(offset=944 mask=20) slot_idx=5 field_idx=-1), Slot(id=6 type=STRING col_path=[6] offset=96 null=(offset=944 mask=40) slot_idx=6 field_idx=-1), Slot(id=7 type=STRING col_path=[7] offset=112 null=(offset=944 mask=80) slot_idx=7 field_idx=-1), Slot(id=8 type=STRING col_path=[8] offset=128 null=(offset=945 mask=1) slot_idx=8 field_idx=-1), Slot(id=9 type=STRING col_path=[9] offset=144 null=(offset=945 mask=2) slot_idx=9 field_idx=-1), Slot(id=10 type=STRING col_path=[10] offset=160 null=(offset=945 mask=4) slot_idx=10 field_idx=-1), Slot(id=11 type=TIMESTAMP col_path=[11] offset=176 null=(offset=945 mask=8) slot_idx=11 field_idx=-1), Slot(id=12 type=STRING col_path=[12] offset=192 null=(offset=945 mask=10) slot_idx=12 field_idx=-1), Slot(id=13 type=STRING col_path=[13] offset=208 null=(offset=945 mask=20) slot_idx=13 field_idx=-1), Slot(id=14 type=STRING col_path=[14] offset=224 null=(offset=945 mask=40) slot_idx=14 field_idx=-1), Slot(id=15 type=STRING col_path=[15] offset=240 null=(offset=945 mask=80) slot_idx=15 field_idx=-1), Slot(id=16 type=STRING col_path=[16] offset=256 null=(offset=946 mask=1) slot_idx=16 field_idx=-1), Slot(id=17 type=STRING col_path=[17] offset=272 null=(offset=946 mask=2) slot_idx=17 field_idx=-1), Slot(id=18 type=DECIMAL(38,2) col_path=[18] offset=288 null=(offset=946 mask=4) slot_idx=18 field_idx=-1), Slot(id=19 type=STRING col_path=[19] offset=304 null=(offset=946 mask=8) slot_idx=19 field_idx=-1), Slot(id=20 type=STRING col_path=[20] offset=320 null=(offset=946 mask=10) slot_idx=20 field_idx=-1), Slot(id=21 type=DECIMAL(38,2) col_path=[21] offset=336 null=(offset=946 mask=20) slot_idx=21 field_idx=-1), Slot(id=22 type=DECIMAL(38,5) col_path=[22] offset=352 null=(offset=946 mask=40) slot_idx=22 field_idx=-1), Slot(id=23 type=STRING col_path=[23] offset=368 null=(offset=946 mask=80) slot_idx=23 field_idx=-1), Slot(id=24 type=STRING col_path=[24] offset=384 null=(offset=947 mask=1) slot_idx=24 field_idx=-1), Slot(id=25 type=STRING col_path=[25] offset=400 null=(offset=947 mask=2) slot_idx=25 field_idx=-1), Slot(id=26 type=STRING col_path=[26] offset=416 null=(offset=947 mask=4) slot_idx=26 field_idx=-1), Slot(id=27 type=STRING col_path=[27] offset=432 null=(offset=947 mask=8) slot_idx=27 field_idx=-1), Slot(id=28 type=STRING col_path=[28] offset=448 null=(offset=947 mask=10) slot_idx=28 field_idx=-1), Slot(id=29 type=STRING col_path=[29] offset=464 null=(offset=947 mask=20) slot_idx=29 field_idx=-1), Slot(id=30 type=STRING col_path=[30] offset=480 null=(offset=947 mask=40) slot_idx=30 field_idx=-1), Slot(id=31 type=STRING col_path=[31] offset=496 null=(offset=947 mask=80) slot_idx=31 field_idx=-1), Slot(id=32 type=STRING col_path=[32] offset=512 null=(offset=948 mask=1) slot_idx=32 field_idx=-1), Slot(id=33 type=STRING col_path=[33] offset=528 null=(offset=948 mask=2) slot_idx=33 field_idx=-1), Slot(id=34 type=DECIMAL(38,3) col_path=[34] offset=544 null=(offset=948 mask=4) slot_idx=34 field_idx=-1), Slot(id=35 type=STRING col_path=[35] offset=560 null=(offset=948 mask=8) slot_idx=35 field_idx=-1), Slot(id=36 type=DECIMAL(38,3) col_path=[36] offset=576 null=(offset=948 mask=10) slot_idx=36 field_idx=-1), Slot(id=37 type=DECIMAL(38,2) col_path=[37] offset=592 null=(offset=948 mask=20) slot_idx=37 field_idx=-1), Slot(id=38 type=STRING col_path=[38] offset=608 null=(offset=948 mask=40) slot_idx=38 field_idx=-1), Slot(id=39 type=STRING col_path=[39] offset=624 null=(offset=948 mask=80) slot_idx=39 field_idx=-1), Slot(id=40 type=STRING col_path=[40] offset=640 null=(offset=949 mask=1) slot_idx=40 field_idx=-1), Slot(id=41 type=STRING col_path=[41] offset=656 null=(offset=949 mask=2) slot_idx=41 field_idx=-1), Slot(id=42 type=STRING col_path=[42] offset=672 null=(offset=949 mask=4) slot_idx=42 field_idx=-1), Slot(id=43 type=STRING col_path=[43] offset=688 null=(offset=949 mask=8) slot_idx=43 field_idx=-1), Slot(id=44 type=STRING col_path=[44] offset=704 null=(offset=949 mask=10) slot_idx=44 field_idx=-1), Slot(id=45 type=STRING col_path=[45] offset=720 null=(offset=949 mask=20) slot_idx=45 field_idx=-1), Slot(id=46 type=STRING col_path=[46] offset=736 null=(offset=949 mask=40) slot_idx=46 field_idx=-1), Slot(id=47 type=STRING col_path=[47] offset=752 null=(offset=949 mask=80) slot_idx=47 field_idx=-1), Slot(id=48 type=STRING col_path=[48] offset=768 null=(offset=950 mask=1) slot_idx=48 field_idx=-1), Slot(id=49 type=STRING col_path=[49] offset=784 null=(offset=950 mask=2) slot_idx=49 field_idx=-1), Slot(id=50 type=STRING col_path=[50] offset=800 null=(offset=950 mask=4) slot_idx=50 field_idx=-1), Slot(id=51 type=STRING col_path=[51] offset=816 null=(offset=950 mask=8) slot_idx=51 field_idx=-1), Slot(id=52 type=STRING col_path=[52] offset=832 null=(offset=950 mask=10) slot_idx=52 field_idx=-1), Slot(id=53 type=STRING col_path=[53] offset=848 null=(offset=950 mask=20) slot_idx=53 field_idx=-1), Slot(id=54 type=STRING col_path=[54] offset=864 null=(offset=950 mask=40) slot_idx=54 field_idx=-1), Slot(id=55 type=STRING col_path=[55] offset=880 null=(offset=950 mask=80) slot_idx=55 field_idx=-1), Slot(id=56 type=STRING col_path=[56] offset=896 null=(offset=951 mask=1) slot_idx=56 field_idx=-1), Slot(id=57 type=STRING col_path=[57] offset=912 null=(offset=951 mask=2) slot_idx=57 field_idx=-1), Slot(id=58 type=TIMESTAMP col_path=[58] offset=928 null=(offset=951 mask=4) slot_idx=58 field_idx=-1)] tuple_path=[])
I0825 11:45:10.989199 47553 query-state.cc:395] Executing instance. instance_id=144f9322515abfd8:1f10cba200000004 fragment_idx=1 per_fragment_instance_idx=3 coord_state_idx=4 #in-flight=4
I0825 11:45:10.997757 47553 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '144f9322515abfd8:1f10cba200000004': 190
I0825 11:45:11.015170 47548 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=144f9322515abfd8:1f10cba200000000 refcnt=2
W0825 11:45:11.038421 43864 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:45:11.048652 43864 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1146318760_BP-1820042964-11.11.206.232-1548063025113
W0825 11:45:12.073549 43828 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:45:12.080847 43836 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:45:12.086257 43831 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:45:12.091619 43835 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:45:12.092525 43828 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1146320160_BP-1820042964-11.11.206.232-1548063025113
W0825 11:45:12.093263 43836 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1146319828_BP-1820042964-11.11.206.232-1548063025113
W0825 11:45:12.093976 43831 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1146318760_BP-1820042964-11.11.206.232-1548063025113
W0825 11:45:12.094748 43835 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1146320635_BP-1820042964-11.11.206.232-1548063025113
I0825 11:45:12.310385 47560 hdfs-scan-node.cc:522] Error preparing scanner for scan range hdfs://cluster1/apps/hive/warehouse/dw20.db/c_fm_lshspz_f070/000276_0(338302138:102400).
I0825 11:45:12.442799 47553 query-state.cc:403] Instance completed. instance_id=144f9322515abfd8:1f10cba200000004 #in-flight=3 status=OK
I0825 11:45:12.448503 47553 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=144f9322515abfd8:1f10cba200000000 refcnt=1
I0825 11:45:12.864933 46219 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=2b4244d880a0537b:216c86000000000
I0825 11:45:12.869032 46219 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[8] {
      [0] = TColumnDesc {
        01: columnName (string) = "\xe9\x87\x87\xe8\xb4\xad\xe8\xae\xa2\xe5\x8d\x95\xe7\xb1\xbb\xe5\x9e\x8b",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "\xe9\x87\x87\xe8\xb4\xad\xe8\xae\xa2\xe5\x8d\x95\xe6\x97\xa5\xe6\x9c\x9f",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "\xe6\x94\xb6\xe8\xb4\xa7\xe7\xab\x99\xe7\x82\xb9",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "\xe5\x95\x86\xe5\x93\x81\xe7\xb1\xbb\xe7\x9b\xae\xe6\x8f\x8f\xe8\xbf\xb0",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "\xe8\xae\xa2\xe5\x8d\x95\xe9\x87\x91\xe9\xa2\x9d_\xe4\xb8\x8d\xe5\x90\xab\xe7\xa8\x8e",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 16,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "\xe6\x98\xaf\xe5\x90\xa6\xe5\xae\x8c\xe6\x88\x90\xe4\xba\xa4\xe8\xb4\xa7",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "\xe8\xaf\xa5\xe8\xa1\x8c\xe6\x98\xaf\xe5\x90\xa6\xe8\xa2\xab\xe5\x88\xa0\xe9\x99\xa4",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 6,
      },
      [7] = TColumnDesc {
        01: columnName (string) = "\xe8\xaf\xa5\xe8\xa1\x8c\xe6\x98\xaf\xe5\x90\xa6\xe9\x80\x80\xe8\xb4\xa7",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 7,
      },
    },
  },
}
I0825 11:45:13.703981 46971 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:13.711743 46971 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:13.740955 44128 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp018@PANEL.COM" on an internal connection
I0825 11:45:14.620249 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:45:14.635983 47890 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:45:14.638367 47890 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "t\x9f\xb2!S\xf2Bq\x89U\xcc\x82\xa9%\x9a\x13",
      02: secret (string) = "\x81\x90\xe2{\xf3\x8bH\xee\x8f\xa6\x90N\x02\xbe|\xa1",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:45:14.775571 47890 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "t\x9f\xb2!S\xf2Bq\x89U\xcc\x82\xa9%\x9a\x13",
      02: secret (string) = "\x81\x90\xe2{\xf3\x8bH\xee\x8f\xa6\x90N\x02\xbe|\xa1",
    },
  },
}
I0825 11:45:14.781306 47890 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:60588 closed, closing 1 associated session(s)
I0825 11:45:14.796420 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:45:14.807049 47899 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:45:14.838335 47899 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = ".O\xf1\xf8r\xe0D\x91\x91[\x951\xa4\xea\xff\xf9",
      02: secret (string) = "\xed\t\xc4\xc1t\xb8L\x1c\xbb!\xc0$k2J\x87",
    },
  },
  02: statement (string) = "use dw20",
  04: runAsync (bool) = true,
}
I0825 11:45:14.838600 47899 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = ".O\xf1\xf8r\xe0D\x91\x91[\x951\xa4\xea\xff\xf9",
      02: secret (string) = "\xed\t\xc4\xc1t\xb8L\x1c\xbb!\xc0$k2J\x87",
    },
  },
  02: statement (string) = "use dw20",
  04: runAsync (bool) = true,
}
I0825 11:45:14.839605 47899 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:45:14.843833 47899 Frontend.java:935] Analyzing query: use dw20
I0825 11:45:14.844940 47899 Frontend.java:947] Analysis finished.
I0825 11:45:14.931238 47899 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xd26Q\xc7'\x7fA\x92\x00\x00\x00\x00\x9f\xb7\xd1J",
      02: secret (string) = "\xd26Q\xc7'\x7fA\x92\x00\x00\x00\x00\x9f\xb7\xd1J",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:45:14.949865 47899 impala-hs2-server.cc:683] CloseOperation(): query_id=92417f27c75136d2:4ad1b79f00000000
I0825 11:45:14.950408 47899 impala-server.cc:1015] UnregisterQuery(): query_id=92417f27c75136d2:4ad1b79f00000000
I0825 11:45:14.950671 47899 impala-server.cc:1102] Cancel(): query_id=92417f27c75136d2:4ad1b79f00000000
I0825 11:45:14.976814 47899 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = ".O\xf1\xf8r\xe0D\x91\x91[\x951\xa4\xea\xff\xf9",
      02: secret (string) = "\xed\t\xc4\xc1t\xb8L\x1c\xbb!\xc0$k2J\x87",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:45:14.980770 47899 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = ".O\xf1\xf8r\xe0D\x91\x91[\x951\xa4\xea\xff\xf9",
      02: secret (string) = "\xed\t\xc4\xc1t\xb8L\x1c\xbb!\xc0$k2J\x87",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:45:14.982493 47899 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:45:14.990058 47899 Frontend.java:935] Analyzing query: set mem_limit='8g'
I0825 11:45:14.994134 47899 Frontend.java:947] Analysis finished.
I0825 11:45:15.001102 47899 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x9eW\x0f\x1f\x04\x1bDT\x00\x00\x00\x00\x8d-MK",
      02: secret (string) = "\x9eW\x0f\x1f\x04\x1bDT\x00\x00\x00\x00\x8d-MK",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:45:15.018203 47899 impala-hs2-server.cc:683] CloseOperation(): query_id=54441b041f0f579e:4b4d2d8d00000000
I0825 11:45:15.018450 47899 impala-server.cc:1015] UnregisterQuery(): query_id=54441b041f0f579e:4b4d2d8d00000000
I0825 11:45:15.019788 47899 impala-server.cc:1102] Cancel(): query_id=54441b041f0f579e:4b4d2d8d00000000
I0825 11:45:15.028455 47899 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = ".O\xf1\xf8r\xe0D\x91\x91[\x951\xa4\xea\xff\xf9",
      02: secret (string) = "\xed\t\xc4\xc1t\xb8L\x1c\xbb!\xc0$k2J\x87",
    },
  },
  02: statement (string) = "DESCRIBE `dw20`.`c_fm_lshspz_f070`",
  04: runAsync (bool) = true,
}
I0825 11:45:15.028782 47899 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = ".O\xf1\xf8r\xe0D\x91\x91[\x951\xa4\xea\xff\xf9",
      02: secret (string) = "\xed\t\xc4\xc1t\xb8L\x1c\xbb!\xc0$k2J\x87",
    },
  },
  02: statement (string) = "DESCRIBE `dw20`.`c_fm_lshspz_f070`",
  04: runAsync (bool) = true,
}
I0825 11:45:15.031685 47899 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:45:15.040441 47899 Frontend.java:935] Analyzing query: DESCRIBE `dw20`.`c_fm_lshspz_f070`
I0825 11:45:15.043543 47899 Frontend.java:947] Analysis finished.
I0825 11:45:15.209869 47899 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "<\x92O\x010 D\xdc\x00\x00\x00\x00\xa3\x89\xa0\x00",
      02: secret (string) = "<\x92O\x010 D\xdc\x00\x00\x00\x00\xa3\x89\xa0\x00",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:45:15.213760 47899 impala-hs2-server.cc:683] CloseOperation(): query_id=dc442030014f923c:a089a300000000
I0825 11:45:15.214032 47899 impala-server.cc:1015] UnregisterQuery(): query_id=dc442030014f923c:a089a300000000
I0825 11:45:15.216478 47899 impala-server.cc:1102] Cancel(): query_id=dc442030014f923c:a089a300000000
I0825 11:45:15.220386 47899 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = ".O\xf1\xf8r\xe0D\x91\x91[\x951\xa4\xea\xff\xf9",
      02: secret (string) = "\xed\t\xc4\xc1t\xb8L\x1c\xbb!\xc0$k2J\x87",
    },
  },
  02: statement (string) = "SELECT COUNT(1) [...](1843)",
  04: runAsync (bool) = true,
}
I0825 11:45:15.220789 47899 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = ".O\xf1\xf8r\xe0D\x91\x91[\x951\xa4\xea\xff\xf9",
      02: secret (string) = "\xed\t\xc4\xc1t\xb8L\x1c\xbb!\xc0$k2J\x87",
    },
  },
  02: statement (string) = "SELECT COUNT(1) [...](1843)",
  04: runAsync (bool) = true,
}
I0825 11:45:15.221619 47899 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:45:15.231565 47899 Frontend.java:935] Analyzing query: SELECT COUNT(1) AS `EXPR_1`  FROM (SELECT `c_fm_lshspz_f070`.`f_unitid`, `c_fm_lshspz_f070`.`f_unitmc`, `c_fm_lshspz_f070`.`property`, `c_fm_lshspz_f070`.`f_bkbh`, `c_fm_lshspz_f070`.`f_bkmc`, `c_fm_lshspz_f070`.`f_code`, `c_fm_lshspz_f070`.`f_stmc`, `c_fm_lshspz_f070`.`f_zrzxmx`, `c_fm_lshspz_f070`.`f_year`, `c_fm_lshspz_f070`.`f_date`, `c_fm_lshspz_f070`.`f_pzbh`, `c_fm_lshspz_f070`.`f_vdate`, `c_fm_lshspz_f070`.`f_jy`, `c_fm_lshspz_f070`.`f_kmbh1`, `c_fm_lshspz_f070`.`f_kmmc1`, `c_fm_lshspz_f070`.`f_kmbh`, `c_fm_lshspz_f070`.`f_kmmc`, `c_fm_lshspz_f070`.`f_jzfx`, `c_fm_lshspz_f070`.`f_je`, `c_fm_lshspz_f070`.`f_wbbh`, `c_fm_lshspz_f070`.`f_wbmc`, `c_fm_lshspz_f070`.`f_wb`, `c_fm_lshspz_f070`.`f_hl`, `c_fm_lshspz_f070`.`f_dwbh`, `c_fm_lshspz_f070`.`f_dwmc`, `c_fm_lshspz_f070`.`f_bmbh`, `c_fm_lshspz_f070`.`f_bmmc`, `c_fm_lshspz_f070`.`f_zgbh`, `c_fm_lshspz_f070`.`f_name`, `c_fm_lshspz_f070`.`f_hslb`, `c_fm_lshspz_f070`.`f_hsbh`, `c_fm_lshspz_f070`.`f_hsmc`, `c_fm_lshspz_f070`.`f_cpbh`, `c_fm_lshspz_f070`.`f_cpmc`, `c_fm_lshspz_f070`.`f_zysl`, `c_fm_lshspz_f070`.`f_cydw`, `c_fm_lshspz_f070`.`f_sl`, `c_fm_lshspz_f070`.`f_dj`, `c_fm_lshspz_f070`.`f_bzdw`, `c_fm_lshspz_f070`.`f_cbbh`, `c_fm_lshspz_f070`.`f_cbmc`, `c_fm_lshspz_f070`.`f_xjbh`, `c_fm_lshspz_f070`.`f_xjmc`, `c_fm_lshspz_f070`.`f_yslb`, `c_fm_lshspz_f070`.`f_lbmc`, `c_fm_lshspz_f070`.`f_ysbh`, `c_fm_lshspz_f070`.`f_ysmc`, `c_fm_lshspz_f070`.`f_pjh`, `c_fm_lshspz_f070`.`f_zf01`, `c_fm_lshspz_f070`.`f_zfmc01`, `c_fm_lshspz_f070`.`f_zf02`, `c_fm_lshspz_f070`.`f_zfmc02`, `c_fm_lshspz_f070`.`f_zf04`, `c_fm_lshspz_f070`.`f_zfmc04`, `c_fm_lshspz_f070`.`f_zf06`, `c_fm_lshspz_f070`.`f_zfmc06`, `c_fm_lshspz_f070`.`src_usrname`, `c_fm_lshspz_f070`.`src_tabname`, `c_fm_lshspz_f070`.`etl_date` FROM `dw20`.`c_fm_lshspz_f070` `c_fm_lshspz_f070` ) `tableWithoutPaging` 
I0825 11:45:15.243906 47899 Frontend.java:947] Analysis finished.
I0825 11:45:15.394088 47899 admission-controller.cc:508] Schedule for id=f8489d8976a47c18:5b9b3bd800000000 in pool_name=root.default cluster_mem_needed=40.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
I0825 11:45:15.396973 47899 admission-controller.cc:513] Stats: agg_num_running=2, agg_num_queued=0, agg_mem_reserved=80.00 GB,  local_host(local_mem_admitted=40.00 GB, num_admitted_running=1, num_queued=0, backend_mem_reserved=16.00 GB)
I0825 11:45:15.400576 47899 admission-controller.cc:529] Admitted query id=f8489d8976a47c18:5b9b3bd800000000
I0825 11:45:15.401121 47899 coordinator.cc:93] Exec() query_id=f8489d8976a47c18:5b9b3bd800000000 stmt=SELECT COUNT(1) AS `EXPR_1`  FROM (SELECT `c_fm_lshspz_f070`.`f_unitid`, `c_fm_lshspz_f070`.`f_unitmc`, `c_fm_lshspz_f070`.`property`, `c_fm_lshspz_f070`.`f_bkbh`, `c_fm_lshspz_f070`.`f_bkmc`, `c_fm_lshspz_f070`.`f_code`, `c_fm_lshspz_f070`.`f_stmc`, `c_fm_lshspz_f070`.`f_zrzxmx`, `c_fm_lshspz_f070`.`f_year`, `c_fm_lshspz_f070`.`f_date`, `c_fm_lshspz_f070`.`f_pzbh`, `c_fm_lshspz_f070`.`f_vdate`, `c_fm_lshspz_f070`.`f_jy`, `c_fm_lshspz_f070`.`f_kmbh1`, `c_fm_lshspz_f070`.`f_kmmc1`, `c_fm_lshspz_f070`.`f_kmbh`, `c_fm_lshspz_f070`.`f_kmmc`, `c_fm_lshspz_f070`.`f_jzfx`, `c_fm_lshspz_f070`.`f_je`, `c_fm_lshspz_f070`.`f_wbbh`, `c_fm_lshspz_f070`.`f_wbmc`, `c_fm_lshspz_f070`.`f_wb`, `c_fm_lshspz_f070`.`f_hl`, `c_fm_lshspz_f070`.`f_dwbh`, `c_fm_lshspz_f070`.`f_dwmc`, `c_fm_lshspz_f070`.`f_bmbh`, `c_fm_lshspz_f070`.`f_bmmc`, `c_fm_lshspz_f070`.`f_zgbh`, `c_fm_lshspz_f070`.`f_name`, `c_fm_lshspz_f070`.`f_hslb`, `c_fm_lshspz_f070`.`f_hsbh`, `c_fm_lshspz_f070`.`f_hsmc`, `c_fm_lshspz_f070`.`f_cpbh`, `c_fm_lshspz_f070`.`f_cpmc`, `c_fm_lshspz_f070`.`f_zysl`, `c_fm_lshspz_f070`.`f_cydw`, `c_fm_lshspz_f070`.`f_sl`, `c_fm_lshspz_f070`.`f_dj`, `c_fm_lshspz_f070`.`f_bzdw`, `c_fm_lshspz_f070`.`f_cbbh`, `c_fm_lshspz_f070`.`f_cbmc`, `c_fm_lshspz_f070`.`f_xjbh`, `c_fm_lshspz_f070`.`f_xjmc`, `c_fm_lshspz_f070`.`f_yslb`, `c_fm_lshspz_f070`.`f_lbmc`, `c_fm_lshspz_f070`.`f_ysbh`, `c_fm_lshspz_f070`.`f_ysmc`, `c_fm_lshspz_f070`.`f_pjh`, `c_fm_lshspz_f070`.`f_zf01`, `c_fm_lshspz_f070`.`f_zfmc01`, `c_fm_lshspz_f070`.`f_zf02`, `c_fm_lshspz_f070`.`f_zfmc02`, `c_fm_lshspz_f070`.`f_zf04`, `c_fm_lshspz_f070`.`f_zfmc04`, `c_fm_lshspz_f070`.`f_zf06`, `c_fm_lshspz_f070`.`f_zfmc06`, `c_fm_lshspz_f070`.`src_usrname`, `c_fm_lshspz_f070`.`src_tabname`, `c_fm_lshspz_f070`.`etl_date` FROM `dw20`.`c_fm_lshspz_f070` `c_fm_lshspz_f070` ) `tableWithoutPaging` 
I0825 11:45:15.406740 47899 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:45:15.406981 47899 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:45:15.407502 47899 coordinator.cc:349] starting execution on 5 backends for query_id=f8489d8976a47c18:5b9b3bd800000000
I0825 11:45:15.412360 44904 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=f8489d8976a47c18:5b9b3bd800000000
I0825 11:45:15.413224 44904 query-exec-mgr.cc:46] StartQueryFInstances() query_id=f8489d8976a47c18:5b9b3bd800000000 coord=e4bdhpp025:22000
I0825 11:45:15.414172 44904 query-state.cc:178] Buffer pool limit for f8489d8976a47c18:5b9b3bd800000000: 6871947673
I0825 11:45:15.414613 44904 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query f8489d8976a47c18:5b9b3bd800000000
I0825 11:45:15.422744 47938 query-state.cc:300] StartFInstances(): query_id=f8489d8976a47c18:5b9b3bd800000000 #instances=2
I0825 11:45:15.425645 47938 query-state.cc:313] descriptor table for query=f8489d8976a47c18:5b9b3bd800000000
tuples:
Tuple(id=3 size=0 slots=[] tuple_path=[])
Tuple(id=2 size=8 slots=[Slot(id=118 type=BIGINT col_path=[] offset=0 null=(offset=0 mask=0) slot_idx=0 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=0 slots=[] tuple_path=[])
I0825 11:45:15.432569 47899 coordinator.cc:362] started execution on 5 backends for query_id=f8489d8976a47c18:5b9b3bd800000000
I0825 11:45:15.433323 47941 query-state.cc:395] Executing instance. instance_id=f8489d8976a47c18:5b9b3bd800000004 fragment_idx=1 per_fragment_instance_idx=3 coord_state_idx=4 #in-flight=5
I0825 11:45:15.431926 47940 query-state.cc:395] Executing instance. instance_id=f8489d8976a47c18:5b9b3bd800000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=4 #in-flight=4
I0825 11:45:15.436327 47941 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance 'f8489d8976a47c18:5b9b3bd800000004': 190
I0825 11:45:15.453590 47938 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:15.480123 47899 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x18|\xa4v\x89\x9dH\xf8\x00\x00\x00\x00\xd8;\x9b[",
      02: secret (string) = "\x18|\xa4v\x89\x9dH\xf8\x00\x00\x00\x00\xd8;\x9b[",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:45:15.485170 44439 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=444ab07e00ffcf87:e81e28d900000000
I0825 11:45:15.485726 44439 query-exec-mgr.cc:46] StartQueryFInstances() query_id=444ab07e00ffcf87:e81e28d900000000 coord=e4bdhpp023:22000
I0825 11:45:15.486130 44439 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:45:15.491807 44439 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:45:15.492606 44439 query-state.cc:178] Buffer pool limit for 444ab07e00ffcf87:e81e28d900000000: 6871947673
I0825 11:45:15.493139 44439 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 444ab07e00ffcf87:e81e28d900000000
I0825 11:45:15.494599 47947 query-state.cc:300] StartFInstances(): query_id=444ab07e00ffcf87:e81e28d900000000 #instances=1
I0825 11:45:15.495461 47947 query-state.cc:313] descriptor table for query=444ab07e00ffcf87:e81e28d900000000
tuples:
Tuple(id=1 size=0 slots=[] tuple_path=[])
Tuple(id=0 size=952 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=944 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=944 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=STRING col_path=[2] offset=32 null=(offset=944 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[3] offset=48 null=(offset=944 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=STRING col_path=[4] offset=64 null=(offset=944 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=STRING col_path=[5] offset=80 null=(offset=944 mask=20) slot_idx=5 field_idx=-1), Slot(id=6 type=STRING col_path=[6] offset=96 null=(offset=944 mask=40) slot_idx=6 field_idx=-1), Slot(id=7 type=STRING col_path=[7] offset=112 null=(offset=944 mask=80) slot_idx=7 field_idx=-1), Slot(id=8 type=STRING col_path=[8] offset=128 null=(offset=945 mask=1) slot_idx=8 field_idx=-1), Slot(id=9 type=STRING col_path=[9] offset=144 null=(offset=945 mask=2) slot_idx=9 field_idx=-1), Slot(id=10 type=STRING col_path=[10] offset=160 null=(offset=945 mask=4) slot_idx=10 field_idx=-1), Slot(id=11 type=TIMESTAMP col_path=[11] offset=176 null=(offset=945 mask=8) slot_idx=11 field_idx=-1), Slot(id=12 type=STRING col_path=[12] offset=192 null=(offset=945 mask=10) slot_idx=12 field_idx=-1), Slot(id=13 type=STRING col_path=[13] offset=208 null=(offset=945 mask=20) slot_idx=13 field_idx=-1), Slot(id=14 type=STRING col_path=[14] offset=224 null=(offset=945 mask=40) slot_idx=14 field_idx=-1), Slot(id=15 type=STRING col_path=[15] offset=240 null=(offset=945 mask=80) slot_idx=15 field_idx=-1), Slot(id=16 type=STRING col_path=[16] offset=256 null=(offset=946 mask=1) slot_idx=16 field_idx=-1), Slot(id=17 type=STRING col_path=[17] offset=272 null=(offset=946 mask=2) slot_idx=17 field_idx=-1), Slot(id=18 type=DECIMAL(38,2) col_path=[18] offset=288 null=(offset=946 mask=4) slot_idx=18 field_idx=-1), Slot(id=19 type=STRING col_path=[19] offset=304 null=(offset=946 mask=8) slot_idx=19 field_idx=-1), Slot(id=20 type=STRING col_path=[20] offset=320 null=(offset=946 mask=10) slot_idx=20 field_idx=-1), Slot(id=21 type=DECIMAL(38,2) col_path=[21] offset=336 null=(offset=946 mask=20) slot_idx=21 field_idx=-1), Slot(id=22 type=DECIMAL(38,5) col_path=[22] offset=352 null=(offset=946 mask=40) slot_idx=22 field_idx=-1), Slot(id=23 type=STRING col_path=[23] offset=368 null=(offset=946 mask=80) slot_idx=23 field_idx=-1), Slot(id=24 type=STRING col_path=[24] offset=384 null=(offset=947 mask=1) slot_idx=24 field_idx=-1), Slot(id=25 type=STRING col_path=[25] offset=400 null=(offset=947 mask=2) slot_idx=25 field_idx=-1), Slot(id=26 type=STRING col_path=[26] offset=416 null=(offset=947 mask=4) slot_idx=26 field_idx=-1), Slot(id=27 type=STRING col_path=[27] offset=432 null=(offset=947 mask=8) slot_idx=27 field_idx=-1), Slot(id=28 type=STRING col_path=[28] offset=448 null=(offset=947 mask=10) slot_idx=28 field_idx=-1), Slot(id=29 type=STRING col_path=[29] offset=464 null=(offset=947 mask=20) slot_idx=29 field_idx=-1), Slot(id=30 type=STRING col_path=[30] offset=480 null=(offset=947 mask=40) slot_idx=30 field_idx=-1), Slot(id=31 type=STRING col_path=[31] offset=496 null=(offset=947 mask=80) slot_idx=31 field_idx=-1), Slot(id=32 type=STRING col_path=[32] offset=512 null=(offset=948 mask=1) slot_idx=32 field_idx=-1), Slot(id=33 type=STRING col_path=[33] offset=528 null=(offset=948 mask=2) slot_idx=33 field_idx=-1), Slot(id=34 type=DECIMAL(38,3) col_path=[34] offset=544 null=(offset=948 mask=4) slot_idx=34 field_idx=-1), Slot(id=35 type=STRING col_path=[35] offset=560 null=(offset=948 mask=8) slot_idx=35 field_idx=-1), Slot(id=36 type=DECIMAL(38,3) col_path=[36] offset=576 null=(offset=948 mask=10) slot_idx=36 field_idx=-1), Slot(id=37 type=DECIMAL(38,2) col_path=[37] offset=592 null=(offset=948 mask=20) slot_idx=37 field_idx=-1), Slot(id=38 type=STRING col_path=[38] offset=608 null=(offset=948 mask=40) slot_idx=38 field_idx=-1), Slot(id=39 type=STRING col_path=[39] offset=624 null=(offset=948 mask=80) slot_idx=39 field_idx=-1), Slot(id=40 type=STRING col_path=[40] offset=640 null=(offset=949 mask=1) slot_idx=40 field_idx=-1), Slot(id=41 type=STRING col_path=[41] offset=656 null=(offset=949 mask=2) slot_idx=41 field_idx=-1), Slot(id=42 type=STRING col_path=[42] offset=672 null=(offset=949 mask=4) slot_idx=42 field_idx=-1), Slot(id=43 type=STRING col_path=[43] offset=688 null=(offset=949 mask=8) slot_idx=43 field_idx=-1), Slot(id=44 type=STRING col_path=[44] offset=704 null=(offset=949 mask=10) slot_idx=44 field_idx=-1), Slot(id=45 type=STRING col_path=[45] offset=720 null=(offset=949 mask=20) slot_idx=45 field_idx=-1), Slot(id=46 type=STRING col_path=[46] offset=736 null=(offset=949 mask=40) slot_idx=46 field_idx=-1), Slot(id=47 type=STRING col_path=[47] offset=752 null=(offset=949 mask=80) slot_idx=47 field_idx=-1), Slot(id=48 type=STRING col_path=[48] offset=768 null=(offset=950 mask=1) slot_idx=48 field_idx=-1), Slot(id=49 type=STRING col_path=[49] offset=784 null=(offset=950 mask=2) slot_idx=49 field_idx=-1), Slot(id=50 type=STRING col_path=[50] offset=800 null=(offset=950 mask=4) slot_idx=50 field_idx=-1), Slot(id=51 type=STRING col_path=[51] offset=816 null=(offset=950 mask=8) slot_idx=51 field_idx=-1), Slot(id=52 type=STRING col_path=[52] offset=832 null=(offset=950 mask=10) slot_idx=52 field_idx=-1), Slot(id=53 type=STRING col_path=[53] offset=848 null=(offset=950 mask=20) slot_idx=53 field_idx=-1), Slot(id=54 type=STRING col_path=[54] offset=864 null=(offset=950 mask=40) slot_idx=54 field_idx=-1), Slot(id=55 type=STRING col_path=[55] offset=880 null=(offset=950 mask=80) slot_idx=55 field_idx=-1), Slot(id=56 type=STRING col_path=[56] offset=896 null=(offset=951 mask=1) slot_idx=56 field_idx=-1), Slot(id=57 type=STRING col_path=[57] offset=912 null=(offset=951 mask=2) slot_idx=57 field_idx=-1), Slot(id=58 type=TIMESTAMP col_path=[58] offset=928 null=(offset=951 mask=4) slot_idx=58 field_idx=-1)] tuple_path=[])
I0825 11:45:15.497705 47948 query-state.cc:395] Executing instance. instance_id=444ab07e00ffcf87:e81e28d900000004 fragment_idx=1 per_fragment_instance_idx=3 coord_state_idx=4 #in-flight=6
I0825 11:45:15.498201 47948 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '444ab07e00ffcf87:e81e28d900000004': 190
I0825 11:45:15.507098 47947 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=444ab07e00ffcf87:e81e28d900000000 refcnt=2
W0825 11:45:15.530900 43838 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:45:15.535250 43828 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:45:15.539417 43859 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:45:15.540676 43832 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:45:15.544477 43830 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:45:15.545720 43838 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1146319678_BP-1820042964-11.11.206.232-1548063025113
W0825 11:45:15.546556 43828 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1146320160_BP-1820042964-11.11.206.232-1548063025113
W0825 11:45:15.558387 43859 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1146318760_BP-1820042964-11.11.206.232-1548063025113
W0825 11:45:15.559334 43832 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1146321312_BP-1820042964-11.11.206.232-1548063025113
W0825 11:45:15.562382 43830 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1146320453_BP-1820042964-11.11.206.232-1548063025113
I0825 11:45:16.535676 47948 query-state.cc:403] Instance completed. instance_id=444ab07e00ffcf87:e81e28d900000004 #in-flight=5 status=OK
I0825 11:45:16.536576 47948 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=444ab07e00ffcf87:e81e28d900000000 refcnt=1
I0825 11:45:16.770568 48171 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:16.786556 48171 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:16.815409 48174 query-exec-mgr.cc:95] QueryState: query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:16.816141 48174 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
W0825 11:45:18.496973 43830 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:45:18.500033 43830 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1146324008_BP-1820042964-11.11.206.232-1548063025113
I0825 11:45:19.026238 44128 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp018@PANEL.COM" on an internal connection
W0825 11:45:19.670586 43830 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:45:19.678349 43830 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1146324822_BP-1820042964-11.11.206.232-1548063025113
I0825 11:45:19.838239 48174 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:19.847679 48174 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:19.855114 48174 query-exec-mgr.cc:95] QueryState: query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:19.859998 48174 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:20.548904 44128 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp018@PANEL.COM" on an internal connection
W0825 11:45:20.739212 43830 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:45:20.750137 43830 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1146324305_BP-1820042964-11.11.206.232-1548063025113
I0825 11:45:22.896301 48171 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:22.896925 48171 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:22.904886 48361 query-exec-mgr.cc:95] QueryState: query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:22.905417 48361 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:24.181030 44128 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp018@PANEL.COM" on an internal connection
I0825 11:45:25.679914 44128 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp018@PANEL.COM" on an internal connection
I0825 11:45:25.923539 48180 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:25.924113 48180 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:25.944929 48532 query-exec-mgr.cc:95] QueryState: query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:25.951364 48532 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
W0825 11:45:26.677296 43861 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:45:26.678478 43861 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1146319186_BP-1820042964-11.11.206.232-1548063025113
W0825 11:45:28.686913 43861 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:45:28.688715 43861 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1146318931_BP-1820042964-11.11.206.232-1548063025113
I0825 11:45:28.988366 48575 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:28.992691 48575 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:29.001744 48575 query-exec-mgr.cc:95] QueryState: query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:29.003111 48575 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:29.541100 44128 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp018@PANEL.COM" on an internal connection
I0825 11:45:30.871974 44128 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp018@PANEL.COM" on an internal connection
I0825 11:45:32.035135 48622 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:32.096275 48622 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:32.111680 48623 query-exec-mgr.cc:95] QueryState: query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:32.114022 48623 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:34.957049 44128 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp018@PANEL.COM" on an internal connection
I0825 11:45:35.159696 48624 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:35.161070 48624 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:35.186432 48684 query-exec-mgr.cc:95] QueryState: query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:35.193897 48684 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:36.179695 44128 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp018@PANEL.COM" on an internal connection
I0825 11:45:38.235265 48684 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:38.236289 48684 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:38.246073 48794 query-exec-mgr.cc:95] QueryState: query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:38.247182 48794 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:39.322906 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:45:39.326381 48806 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:45:39.329057 48806 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xa6@\x1bM\xd0\xdeD{\x95\xac\xe0\xd2\x88\xd8n\xfe",
      02: secret (string) = "|\xc6\a\xe6\xf7\xedH\xa5\xa7\xd3\xf13\x1e'\xc3\b",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:45:39.356052 48806 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xa6@\x1bM\xd0\xdeD{\x95\xac\xe0\xd2\x88\xd8n\xfe",
      02: secret (string) = "|\xc6\a\xe6\xf7\xedH\xa5\xa7\xd3\xf13\x1e'\xc3\b",
    },
  },
  02: statement (string) = "use dw04",
  04: runAsync (bool) = true,
}
I0825 11:45:39.356454 48806 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xa6@\x1bM\xd0\xdeD{\x95\xac\xe0\xd2\x88\xd8n\xfe",
      02: secret (string) = "|\xc6\a\xe6\xf7\xedH\xa5\xa7\xd3\xf13\x1e'\xc3\b",
    },
  },
  02: statement (string) = "use dw04",
  04: runAsync (bool) = true,
}
I0825 11:45:39.358690 48806 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:45:39.369093 48806 Frontend.java:935] Analyzing query: use dw04
I0825 11:45:39.370978 48806 Frontend.java:947] Analysis finished.
I0825 11:45:39.442083 48806 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xb6GO\xdd_\x89G\x03\x00\x00\x00\x00\x88\x87\xd3\x19",
      02: secret (string) = "\xb6GO\xdd_\x89G\x03\x00\x00\x00\x00\x88\x87\xd3\x19",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:45:39.448711 48806 impala-hs2-server.cc:683] CloseOperation(): query_id=347895fdd4f47b6:19d3878800000000
I0825 11:45:39.449045 48806 impala-server.cc:1015] UnregisterQuery(): query_id=347895fdd4f47b6:19d3878800000000
I0825 11:45:39.449215 48806 impala-server.cc:1102] Cancel(): query_id=347895fdd4f47b6:19d3878800000000
I0825 11:45:39.473474 48806 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xa6@\x1bM\xd0\xdeD{\x95\xac\xe0\xd2\x88\xd8n\xfe",
      02: secret (string) = "|\xc6\a\xe6\xf7\xedH\xa5\xa7\xd3\xf13\x1e'\xc3\b",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:45:39.473917 48806 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xa6@\x1bM\xd0\xdeD{\x95\xac\xe0\xd2\x88\xd8n\xfe",
      02: secret (string) = "|\xc6\a\xe6\xf7\xedH\xa5\xa7\xd3\xf13\x1e'\xc3\b",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:45:39.474879 48806 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:45:39.485793 48806 Frontend.java:935] Analyzing query: set mem_limit='8g'
I0825 11:45:39.487983 48806 Frontend.java:947] Analysis finished.
I0825 11:45:39.489614 48806 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x03\x9be.\xbf\xba@\xff\x00\x00\x00\x00\xaf\xdf\x12\xa5",
      02: secret (string) = "\x03\x9be.\xbf\xba@\xff\x00\x00\x00\x00\xaf\xdf\x12\xa5",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:45:39.495990 48806 impala-hs2-server.cc:683] CloseOperation(): query_id=ff40babf2e659b03:a512dfaf00000000
I0825 11:45:39.496831 48806 impala-server.cc:1015] UnregisterQuery(): query_id=ff40babf2e659b03:a512dfaf00000000
I0825 11:45:39.497709 48806 impala-server.cc:1102] Cancel(): query_id=ff40babf2e659b03:a512dfaf00000000
I0825 11:45:39.509745 48806 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xa6@\x1bM\xd0\xdeD{\x95\xac\xe0\xd2\x88\xd8n\xfe",
      02: secret (string) = "|\xc6\a\xe6\xf7\xedH\xa5\xa7\xd3\xf13\x1e'\xc3\b",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_FMIS_KMFZHSJECX_PART3`",
  04: runAsync (bool) = true,
}
I0825 11:45:39.510648 48806 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xa6@\x1bM\xd0\xdeD{\x95\xac\xe0\xd2\x88\xd8n\xfe",
      02: secret (string) = "|\xc6\a\xe6\xf7\xedH\xa5\xa7\xd3\xf13\x1e'\xc3\b",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_FMIS_KMFZHSJECX_PART3`",
  04: runAsync (bool) = true,
}
I0825 11:45:39.511791 48806 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:45:39.527767 48806 Frontend.java:935] Analyzing query: DESCRIBE `DW04`.`APP_FMIS_KMFZHSJECX_PART3`
I0825 11:45:39.529912 48806 Frontend.java:947] Analysis finished.
I0825 11:45:39.598136 48806 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x8f\x87\x92\x8e\xae\xb1M\x92\x00\x00\x00\x00{\xb6\xd1\xe4",
      02: secret (string) = "\x8f\x87\x92\x8e\xae\xb1M\x92\x00\x00\x00\x00{\xb6\xd1\xe4",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:45:39.605078 48806 impala-hs2-server.cc:683] CloseOperation(): query_id=924db1ae8e92878f:e4d1b67b00000000
I0825 11:45:39.605922 48806 impala-server.cc:1015] UnregisterQuery(): query_id=924db1ae8e92878f:e4d1b67b00000000
I0825 11:45:39.608423 48806 impala-server.cc:1102] Cancel(): query_id=924db1ae8e92878f:e4d1b67b00000000
I0825 11:45:39.720386 48806 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xa6@\x1bM\xd0\xdeD{\x95\xac\xe0\xd2\x88\xd8n\xfe",
      02: secret (string) = "|\xc6\a\xe6\xf7\xedH\xa5\xa7\xd3\xf13\x1e'\xc3\b",
    },
  },
  02: statement (string) = "select   `QD_Com[...](24987)",
  04: runAsync (bool) = true,
}
I0825 11:45:39.721647 48806 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xa6@\x1bM\xd0\xdeD{\x95\xac\xe0\xd2\x88\xd8n\xfe",
      02: secret (string) = "|\xc6\a\xe6\xf7\xedH\xa5\xa7\xd3\xf13\x1e'\xc3\b",
    },
  },
  02: statement (string) = "select   `QD_Com[...](24987)",
  04: runAsync (bool) = true,
}
I0825 11:45:39.722718 48806 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:45:39.739499 48806 Frontend.java:935] Analyzing query: select   `QD_Compare_Basic`.`bi_12930591918368041377` as `bi_12930591918368041377` , `QD_Compare_Basic`.`bi_14366398960558267652` as `bi_14366398960558267652` , `QD_Compare_Basic`.`bi_8548927983689634634` as `bi_8548927983689634634` , `QD_Compare_Basic`.`bi_9158135665668787492` as `bi_9158135665668787492` , `QD_Compare_Basic`.`bi_10507073037697947742` as `bi_10507073037697947742` , `QD_Compare_Basic`.`bi_1988199465087529936` as `bi_1988199465087529936`   from (select   `bi_11185235078849307330`.`bi_4441018422127724524` as `bi_12930591918368041377` , (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2019' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) as `bi_14366398960558267652` , (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2020' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) as `bi_8548927983689634634` , (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2021' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) as `bi_9158135665668787492` , (CASE WHEN (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2019' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) = 0 THEN 0 ELSE ((SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2020' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) - (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2019' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END))) / (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2019' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) END) as `bi_10507073037697947742` , (CASE WHEN (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2020' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) = 0 THEN 0 ELSE ((SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2021' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) - (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2020' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END))) / (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2020' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) END) as `bi_1988199465087529936`   from (select   `bi_12624314972315543679`.`科目名称` as `bi_4441018422127724524` , `bi_12624314972315543679`.`借方金额01月` as `bi_5570526069897655592` , `bi_12624314972315543679`.`借方金额02月` as `bi_1253309488842803658` , `bi_12624314972315543679`.`借方金额03月` as `bi_17422133426207710439` , `bi_12624314972315543679`.`借方金额04月` as `bi_5688700276992873561` , `bi_12624314972315543679`.`借方金额05月` as `bi_17660972420843595278` , `bi_12624314972315543679`.`借方金额06月` as `bi_737691340093183534` , `bi_12624314972315543679`.`借方金额07月` as `bi_5240116247629364494` , `bi_12624314972315543679`.`借方金额08月` as `bi_8303257380888152565` , `bi_12624314972315543679`.`借方金额09月` as `bi_6400683728921427193` , `bi_12624314972315543679`.`借方金额10月` as `bi_18259062048550410487` , `bi_12624314972315543679`.`借方金额11月` as `bi_16465521503643165752` , `bi_12624314972315543679`.`借方金额12月` as `bi_8174489810574183603` , `bi_12624314972315543679`.`借方金额13月` as `bi_12177689358016859248` , `bi_12624314972315543679`.`借方金额14月` as `bi_912817335526884` , `bi_12624314972315543679`.`借方金额15月` as `bi_5898444266886499620` , `bi_12624314972315543679`.`借方金额16月` as `bi_10721110669857068018` , `bi_12624314972315543679`.`借方金额17月` as `bi_15742177438818498118` , `bi_12624314972315543679`.`借方金额18月` as `bi_17240363045859972193` , `bi_12624314972315543679`.`年度` as `bi_11701640734421408329`   from (select `科目编号` as `科目编号`,`科目名称` as `科目名称`,`责任中心名称` as `责任中心名称`,`借方金额01月` as `借方金额01月`,`借方金额02月` as `借方金额02月`,`借方金额03月` as `借方金额03月`,`借方金额04月` as `借方金额04月`,`借方金额05月` as `借方金额05月`,`借方金额06月` as `借方金额06月`,`借方金额07月` as `借方金额07月`,`借方金额08月` as `借方金额08月`,`借方金额09月` as `借方金额09月`,`借方金额10月` as `借方金额10月`,`借方金额11月` as `借方金额11月`,`借方金额12月` as `借方金额12月`,`借方金额13月` as `借方金额13月`,`借方金额14月` as `借方金额14月`,`借方金额15月` as `借方金额15月`,`借方金额16月` as `借方金额16月`,`借方金额17月` as `借方金额17月`,`借方金额18月` as `借方金额18月`,`年度` as `年度` from ( select `科目编号`,`科目名称`,`责任中心名称`,`借方金额01月`,`借方金额02月`,`借方金额03月`,`借方金额04月`,`借方金额05月`,`借方金额06月`,`借方金额07月`,`借方金额08月`,`借方金额09月`,`借方金额10月`,`借方金额11月`,`借方金额12月`,`借方金额13月`,`借方金额14月`,`借方金额15月`,`借方金额16月`,`借方金额17月`,`借方金额18月`,`年度` from (SELECT A.* FROM DW04.APP_FMIS_KMFZHSJECX_PART3 A) temp_sub_query_table   where (( `年度` IN ('2022','2021','2020','2019') )And(( `单位名称` = '塔里木油田分公司' )Or( `单位名称` IN ('塔里木油田分公司') )))
    ) `temp_sql_wrapper_table` ) `bi_12624314972315543679`  
 where ( TRIM(SPLIT_PART(`bi_12624314972315543679`.`责任中心名称`,'/',4)) = '哈得油气开发部' And `bi_12624314972315543679`.`年度` IN ('2022','2021','2020','2019') And CASE WHEN TRIM(SPLIT_PART(`bi_12624314972315543679`.`科目名称`,'/',1)) = '制造费用' THEN '暂未分配' WHEN `bi_12624314972315543679`.`科目编号` = '1408' THEN '成本类' WHEN REGEXP_EXTRACT(`bi_12624314972315543679`.`科目编号`,'^[\\\s\\\S]{0,1}',0) = '1' THEN '资产类' WHEN REGEXP_EXTRACT(`bi_12624314972315543679`.`科目编号`,'^[\\\s\\\S]{0,1}',0) = '2' THEN '负债类' WHEN REGEXP_EXTRACT(`bi_12624314972315543679`.`科目编号`,'^[\\\s\\\S]{0,1}',0) = '5' THEN '成本类' WHEN REGEXP_EXTRACT(`bi_12624314972315543679`.`科目编号`,'^[\\\s\\\S]{0,1}',0) = '6' THEN '收入类' END IN ('成本类') ) 
    ) `bi_11185235078849307330`
   Group By `bi_12930591918368041377` 
 having  (CASE WHEN (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2019' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) = 0 THEN 0 ELSE ((SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2020' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) - (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2019' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END))) / (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2019' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) END) BETWEEN -98.51 AND 1000 And CASE WHEN (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2020' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) = 0 THEN 0 ELSE ((SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2021' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) - (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2020' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END))) / (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2020' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) END BETWEEN 0 AND 1000  
  ) `QD_Compare_Basic`
      limit 1200001 
I0825 11:45:39.829130 48806 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:45:39.829948 48806 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:45:39.961961 48806 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:45:39.963613 48806 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:45:40.013763 48806 Frontend.java:947] Analysis finished.
I0825 11:45:40.035982 48806 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:45:40.036834 48806 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:45:40.129637 48806 admission-controller.cc:508] Schedule for id=564c9b8d66d6e526:330c2ab00000000 in pool_name=root.default cluster_mem_needed=40.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
I0825 11:45:40.130791 48806 admission-controller.cc:513] Stats: agg_num_running=3, agg_num_queued=0, agg_mem_reserved=120.00 GB,  local_host(local_mem_admitted=80.00 GB, num_admitted_running=2, num_queued=0, backend_mem_reserved=24.00 GB)
I0825 11:45:40.131127 48806 admission-controller.cc:529] Admitted query id=564c9b8d66d6e526:330c2ab00000000
I0825 11:45:40.131575 48806 coordinator.cc:93] Exec() query_id=564c9b8d66d6e526:330c2ab00000000 stmt=select   `QD_Compare_Basic`.`bi_12930591918368041377` as `bi_12930591918368041377` , `QD_Compare_Basic`.`bi_14366398960558267652` as `bi_14366398960558267652` , `QD_Compare_Basic`.`bi_8548927983689634634` as `bi_8548927983689634634` , `QD_Compare_Basic`.`bi_9158135665668787492` as `bi_9158135665668787492` , `QD_Compare_Basic`.`bi_10507073037697947742` as `bi_10507073037697947742` , `QD_Compare_Basic`.`bi_1988199465087529936` as `bi_1988199465087529936`   from (select   `bi_11185235078849307330`.`bi_4441018422127724524` as `bi_12930591918368041377` , (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2019' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) as `bi_14366398960558267652` , (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2020' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) as `bi_8548927983689634634` , (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2021' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) as `bi_9158135665668787492` , (CASE WHEN (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2019' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) = 0 THEN 0 ELSE ((SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2020' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) - (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2019' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END))) / (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2019' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) END) as `bi_10507073037697947742` , (CASE WHEN (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2020' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) = 0 THEN 0 ELSE ((SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2021' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) - (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2020' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END))) / (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2020' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) END) as `bi_1988199465087529936`   from (select   `bi_12624314972315543679`.`科目名称` as `bi_4441018422127724524` , `bi_12624314972315543679`.`借方金额01月` as `bi_5570526069897655592` , `bi_12624314972315543679`.`借方金额02月` as `bi_1253309488842803658` , `bi_12624314972315543679`.`借方金额03月` as `bi_17422133426207710439` , `bi_12624314972315543679`.`借方金额04月` as `bi_5688700276992873561` , `bi_12624314972315543679`.`借方金额05月` as `bi_17660972420843595278` , `bi_12624314972315543679`.`借方金额06月` as `bi_737691340093183534` , `bi_12624314972315543679`.`借方金额07月` as `bi_5240116247629364494` , `bi_12624314972315543679`.`借方金额08月` as `bi_8303257380888152565` , `bi_12624314972315543679`.`借方金额09月` as `bi_6400683728921427193` , `bi_12624314972315543679`.`借方金额10月` as `bi_18259062048550410487` , `bi_12624314972315543679`.`借方金额11月` as `bi_16465521503643165752` , `bi_12624314972315543679`.`借方金额12月` as `bi_8174489810574183603` , `bi_12624314972315543679`.`借方金额13月` as `bi_12177689358016859248` , `bi_12624314972315543679`.`借方金额14月` as `bi_912817335526884` , `bi_12624314972315543679`.`借方金额15月` as `bi_5898444266886499620` , `bi_12624314972315543679`.`借方金额16月` as `bi_10721110669857068018` , `bi_12624314972315543679`.`借方金额17月` as `bi_15742177438818498118` , `bi_12624314972315543679`.`借方金额18月` as `bi_17240363045859972193` , `bi_12624314972315543679`.`年度` as `bi_11701640734421408329`   from (select `科目编号` as `科目编号`,`科目名称` as `科目名称`,`责任中心名称` as `责任中心名称`,`借方金额01月` as `借方金额01月`,`借方金额02月` as `借方金额02月`,`借方金额03月` as `借方金额03月`,`借方金额04月` as `借方金额04月`,`借方金额05月` as `借方金额05月`,`借方金额06月` as `借方金额06月`,`借方金额07月` as `借方金额07月`,`借方金额08月` as `借方金额08月`,`借方金额09月` as `借方金额09月`,`借方金额10月` as `借方金额10月`,`借方金额11月` as `借方金额11月`,`借方金额12月` as `借方金额12月`,`借方金额13月` as `借方金额13月`,`借方金额14月` as `借方金额14月`,`借方金额15月` as `借方金额15月`,`借方金额16月` as `借方金额16月`,`借方金额17月` as `借方金额17月`,`借方金额18月` as `借方金额18月`,`年度` as `年度` from ( select `科目编号`,`科目名称`,`责任中心名称`,`借方金额01月`,`借方金额02月`,`借方金额03月`,`借方金额04月`,`借方金额05月`,`借方金额06月`,`借方金额07月`,`借方金额08月`,`借方金额09月`,`借方金额10月`,`借方金额11月`,`借方金额12月`,`借方金额13月`,`借方金额14月`,`借方金额15月`,`借方金额16月`,`借方金额17月`,`借方金额18月`,`年度` from (SELECT A.* FROM DW04.APP_FMIS_KMFZHSJECX_PART3 A) temp_sub_query_table   where (( `年度` IN ('2022','2021','2020','2019') )And(( `单位名称` = '塔里木油田分公司' )Or( `单位名称` IN ('塔里木油田分公司') )))
    ) `temp_sql_wrapper_table` ) `bi_12624314972315543679`  
 where ( TRIM(SPLIT_PART(`bi_12624314972315543679`.`责任中心名称`,'/',4)) = '哈得油气开发部' And `bi_12624314972315543679`.`年度` IN ('2022','2021','2020','2019') And CASE WHEN TRIM(SPLIT_PART(`bi_12624314972315543679`.`科目名称`,'/',1)) = '制造费用' THEN '暂未分配' WHEN `bi_12624314972315543679`.`科目编号` = '1408' THEN '成本类' WHEN REGEXP_EXTRACT(`bi_12624314972315543679`.`科目编号`,'^[\\\s\\\S]{0,1}',0) = '1' THEN '资产类' WHEN REGEXP_EXTRACT(`bi_12624314972315543679`.`科目编号`,'^[\\\s\\\S]{0,1}',0) = '2' THEN '负债类' WHEN REGEXP_EXTRACT(`bi_12624314972315543679`.`科目编号`,'^[\\\s\\\S]{0,1}',0) = '5' THEN '成本类' WHEN REGEXP_EXTRACT(`bi_12624314972315543679`.`科目编号`,'^[\\\s\\\S]{0,1}',0) = '6' THEN '收入类' END IN ('成本类') ) 
    ) `bi_11185235078849307330`
   Group By `bi_12930591918368041377` 
 having  (CASE WHEN (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2019' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) = 0 THEN 0 ELSE ((SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2020' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) - (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2019' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END))) / (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2019' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) END) BETWEEN -98.51 AND 1000 And CASE WHEN (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2020' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) = 0 THEN 0 ELSE ((SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2021' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) - (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2020' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END))) / (SUM(CASE WHEN `bi_11185235078849307330`.`bi_11701640734421408329` = '2020' THEN (`bi_11185235078849307330`.`bi_5570526069897655592` + `bi_11185235078849307330`.`bi_1253309488842803658` + `bi_11185235078849307330`.`bi_17422133426207710439` + `bi_11185235078849307330`.`bi_5688700276992873561` + `bi_11185235078849307330`.`bi_17660972420843595278` + `bi_11185235078849307330`.`bi_737691340093183534` + `bi_11185235078849307330`.`bi_5240116247629364494` + `bi_11185235078849307330`.`bi_8303257380888152565` + `bi_11185235078849307330`.`bi_6400683728921427193` + `bi_11185235078849307330`.`bi_18259062048550410487` + `bi_11185235078849307330`.`bi_16465521503643165752` + `bi_11185235078849307330`.`bi_8174489810574183603` + `bi_11185235078849307330`.`bi_12177689358016859248` + `bi_11185235078849307330`.`bi_912817335526884` + `bi_11185235078849307330`.`bi_5898444266886499620` + `bi_11185235078849307330`.`bi_10721110669857068018` + `bi_11185235078849307330`.`bi_15742177438818498118` + `bi_11185235078849307330`.`bi_17240363045859972193`) ELSE 0 END)) END BETWEEN 0 AND 1000  
  ) `QD_Compare_Basic`
      limit 1200001 
I0825 11:45:40.132946 48806 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:45:40.133709 48806 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:45:40.134274 48806 coordinator.cc:349] starting execution on 5 backends for query_id=564c9b8d66d6e526:330c2ab00000000
I0825 11:45:40.139820 45240 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=564c9b8d66d6e526:330c2ab00000000
I0825 11:45:40.140460 45240 query-exec-mgr.cc:46] StartQueryFInstances() query_id=564c9b8d66d6e526:330c2ab00000000 coord=e4bdhpp025:22000
I0825 11:45:40.140751 45240 query-state.cc:178] Buffer pool limit for 564c9b8d66d6e526:330c2ab00000000: 6871947673
I0825 11:45:40.141135 45240 initial-reservations.cc:60] Successfully claimed initial reservations (19.88 MB) for query 564c9b8d66d6e526:330c2ab00000000
I0825 11:45:40.142657 48827 query-state.cc:300] StartFInstances(): query_id=564c9b8d66d6e526:330c2ab00000000 #instances=3
I0825 11:45:40.144096 48827 query-state.cc:313] descriptor table for query=564c9b8d66d6e526:330c2ab00000000
tuples:
Tuple(id=7 size=0 slots=[] tuple_path=[])
Tuple(id=5 size=65 slots=[Slot(id=278 type=STRING col_path=[] offset=0 null=(offset=64 mask=1) slot_idx=0 field_idx=-1), Slot(id=279 type=DECIMAL(38,2) col_path=[] offset=16 null=(offset=64 mask=2) slot_idx=1 field_idx=-1), Slot(id=280 type=DECIMAL(38,2) col_path=[] offset=32 null=(offset=64 mask=4) slot_idx=2 field_idx=-1), Slot(id=281 type=DECIMAL(38,2) col_path=[] offset=48 null=(offset=64 mask=8) slot_idx=3 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=355 slots=[Slot(id=4 type=STRING col_path=[6] offset=0 null=(offset=352 mask=1) slot_idx=0 field_idx=-1), Slot(id=5 type=STRING col_path=[7] offset=16 null=(offset=352 mask=2) slot_idx=1 field_idx=-1), Slot(id=7 type=STRING col_path=[9] offset=32 null=(offset=352 mask=4) slot_idx=2 field_idx=-1), Slot(id=34 type=DECIMAL(20,2) col_path=[36] offset=48 null=(offset=352 mask=8) slot_idx=3 field_idx=-1), Slot(id=35 type=DECIMAL(20,2) col_path=[37] offset=64 null=(offset=352 mask=10) slot_idx=4 field_idx=-1), Slot(id=36 type=DECIMAL(20,2) col_path=[38] offset=80 null=(offset=352 mask=20) slot_idx=5 field_idx=-1), Slot(id=37 type=DECIMAL(20,2) col_path=[39] offset=96 null=(offset=352 mask=40) slot_idx=6 field_idx=-1), Slot(id=38 type=DECIMAL(20,2) col_path=[40] offset=112 null=(offset=352 mask=80) slot_idx=7 field_idx=-1), Slot(id=39 type=DECIMAL(20,2) col_path=[41] offset=128 null=(offset=353 mask=1) slot_idx=8 field_idx=-1), Slot(id=40 type=DECIMAL(20,2) col_path=[42] offset=144 null=(offset=353 mask=2) slot_idx=9 field_idx=-1), Slot(id=41 type=DECIMAL(20,2) col_path=[43] offset=160 null=(offset=353 mask=4) slot_idx=10 field_idx=-1), Slot(id=42 type=DECIMAL(20,2) col_path=[44] offset=176 null=(offset=353 mask=8) slot_idx=11 field_idx=-1), Slot(id=43 type=DECIMAL(20,2) col_path=[45] offset=192 null=(offset=353 mask=10) slot_idx=12 field_idx=-1), Slot(id=44 type=DECIMAL(20,2) col_path=[46] offset=208 null=(offset=353 mask=20) slot_idx=13 field_idx=-1), Slot(id=45 type=DECIMAL(20,2) col_path=[47] offset=224 null=(offset=353 mask=40) slot_idx=14 field_idx=-1), Slot(id=46 type=DECIMAL(20,2) col_path=[48] offset=240 null=(offset=353 mask=80) slot_idx=15 field_idx=-1), Slot(id=47 type=DECIMAL(20,2) col_path=[49] offset=256 null=(offset=354 mask=1) slot_idx=16 field_idx=-1), Slot(id=48 type=DECIMAL(20,2) col_path=[50] offset=272 null=(offset=354 mask=2) slot_idx=17 field_idx=-1), Slot(id=49 type=DECIMAL(20,2) col_path=[51] offset=288 null=(offset=354 mask=4) slot_idx=18 field_idx=-1), Slot(id=50 type=DECIMAL(20,2) col_path=[52] offset=304 null=(offset=354 mask=8) slot_idx=19 field_idx=-1), Slot(id=51 type=DECIMAL(20,2) col_path=[53] offset=320 null=(offset=354 mask=10) slot_idx=20 field_idx=-1), Slot(id=106 type=STRING col_path=[1] offset=336 null=(offset=354 mask=20) slot_idx=21 field_idx=-1)] tuple_path=[])
I0825 11:45:40.148604 48830 query-state.cc:395] Executing instance. instance_id=564c9b8d66d6e526:330c2ab00000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=4 #in-flight=6
I0825 11:45:40.149211 48806 coordinator.cc:362] started execution on 5 backends for query_id=564c9b8d66d6e526:330c2ab00000000
I0825 11:45:40.149319 48831 query-state.cc:395] Executing instance. instance_id=564c9b8d66d6e526:330c2ab00000007 fragment_idx=1 per_fragment_instance_idx=1 coord_state_idx=4 #in-flight=7
I0825 11:45:40.150060 48833 query-state.cc:395] Executing instance. instance_id=564c9b8d66d6e526:330c2ab00000002 fragment_idx=2 per_fragment_instance_idx=1 coord_state_idx=4 #in-flight=8
I0825 11:45:40.153738 48833 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '564c9b8d66d6e526:330c2ab00000002': 190
I0825 11:45:40.158267 48827 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=564c9b8d66d6e526:330c2ab00000000 refcnt=5
I0825 11:45:40.160058 48806 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "&\xe5\xd6f\x8d\x9bLV\x00\x00\x00\x00\xab\xc20\x03",
      02: secret (string) = "&\xe5\xd6f\x8d\x9bLV\x00\x00\x00\x00\xab\xc20\x03",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:45:41.275949 48684 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:41.279706 48684 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:41.288381 48795 query-exec-mgr.cc:95] QueryState: query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:41.289294 48795 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:41.299283 48845 query-exec-mgr.cc:95] QueryState: query_id=564c9b8d66d6e526:330c2ab00000000 refcnt=5
I0825 11:45:41.300312 48845 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=564c9b8d66d6e526:330c2ab00000000 refcnt=5
I0825 11:45:42.473928 48831 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=564c9b8d66d6e526:330c2ab00000007, node=2
I0825 11:45:42.474874 48831 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=564c9b8d66d6e526:330c2ab00000007 node_id=2
I0825 11:45:42.484037 48806 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=564c9b8d66d6e526:330c2ab00000000
I0825 11:45:42.492221 48806 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[6] {
      [0] = TColumnDesc {
        01: columnName (string) = "bi_12930591918368041377",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "bi_14366398960558267652",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "bi_8548927983689634634",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "bi_9158135665668787492",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "bi_10507073037697947742",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "bi_1988199465087529936",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 5,
      },
    },
  },
}
I0825 11:45:42.499121 48831 query-state.cc:403] Instance completed. instance_id=564c9b8d66d6e526:330c2ab00000007 #in-flight=7 status=OK
I0825 11:45:42.503345 48831 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=564c9b8d66d6e526:330c2ab00000000 refcnt=4
I0825 11:45:42.655419 45243 coordinator.cc:689] Backend completed:  host=e4bdhpp015:22000 remaining=4 query_id=564c9b8d66d6e526:330c2ab00000000
I0825 11:45:42.656033 45243 coordinator-backend-state.cc:226] query_id=564c9b8d66d6e526:330c2ab00000000: first in-progress backend: e4bdhpp014:22000
I0825 11:45:42.888782 48833 query-state.cc:403] Instance completed. instance_id=564c9b8d66d6e526:330c2ab00000002 #in-flight=6 status=OK
I0825 11:45:42.890089 48833 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=564c9b8d66d6e526:330c2ab00000000 refcnt=3
I0825 11:45:42.910581 45435 coordinator.cc:689] Backend completed:  host=e4bdhpp018:22000 remaining=3 query_id=564c9b8d66d6e526:330c2ab00000000
I0825 11:45:42.911098 45435 coordinator-backend-state.cc:226] query_id=564c9b8d66d6e526:330c2ab00000000: first in-progress backend: e4bdhpp014:22000
I0825 11:45:42.995895 44439 coordinator.cc:689] Backend completed:  host=e4bdhpp023:22000 remaining=2 query_id=564c9b8d66d6e526:330c2ab00000000
I0825 11:45:42.996615 44439 coordinator-backend-state.cc:226] query_id=564c9b8d66d6e526:330c2ab00000000: first in-progress backend: e4bdhpp014:22000
I0825 11:45:43.041754 48806 coordinator.cc:522] Coordinator waiting for backends to finish, 2 remaining. query_id=564c9b8d66d6e526:330c2ab00000000
I0825 11:45:43.042739 45241 coordinator.cc:689] Backend completed:  host=e4bdhpp014:22000 remaining=1 query_id=564c9b8d66d6e526:330c2ab00000000
I0825 11:45:43.043452 48806 coordinator.cc:527] All backends finished successfully. query_id=564c9b8d66d6e526:330c2ab00000000
I0825 11:45:43.043944 48830 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=564c9b8d66d6e526:330c2ab00000000, node=4
I0825 11:45:43.044378 48830 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=564c9b8d66d6e526:330c2ab00000000 node_id=4
I0825 11:45:43.044132 48806 coordinator.cc:783] Release admission control resources for query_id=564c9b8d66d6e526:330c2ab00000000
I0825 11:45:43.054324 48806 impala-hs2-server.cc:683] CloseOperation(): query_id=564c9b8d66d6e526:330c2ab00000000
I0825 11:45:43.054816 48806 impala-server.cc:1015] UnregisterQuery(): query_id=564c9b8d66d6e526:330c2ab00000000
I0825 11:45:43.055452 48806 impala-server.cc:1102] Cancel(): query_id=564c9b8d66d6e526:330c2ab00000000
I0825 11:45:43.056056 48806 coordinator.cc:629] Cancel() query_id=564c9b8d66d6e526:330c2ab00000000
I0825 11:45:43.056640 48806 coordinator.cc:639] CancelBackends() query_id=564c9b8d66d6e526:330c2ab00000000, tried to cancel 0 backends
I0825 11:45:43.069258 48830 query-state.cc:403] Instance completed. instance_id=564c9b8d66d6e526:330c2ab00000000 #in-flight=5 status=OK
I0825 11:45:43.069773 48830 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=564c9b8d66d6e526:330c2ab00000000 refcnt=2
I0825 11:45:43.086546 48806 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=564c9b8d66d6e526:330c2ab00000000 refcnt=1
I0825 11:45:43.171401 48806 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xa6@\x1bM\xd0\xdeD{\x95\xac\xe0\xd2\x88\xd8n\xfe",
      02: secret (string) = "|\xc6\a\xe6\xf7\xedH\xa5\xa7\xd3\xf13\x1e'\xc3\b",
    },
  },
}
I0825 11:45:43.172969 48806 thrift-util.cc:123] TSocket::read() recv() <Host: ::ffff:11.11.237.129 Port: 38080>Connection reset by peer
I0825 11:45:43.173550 48806 thrift-util.cc:123] TAcceptQueueServer client died: ECONNRESET
I0825 11:45:43.174304 48806 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:38080 closed, closing 1 associated session(s)
I0825 11:45:44.337734 48846 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:44.338644 48846 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:44.366309 48977 query-exec-mgr.cc:95] QueryState: query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:44.369936 48977 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:47.404197 48977 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:47.405578 48977 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:47.413698 49067 query-exec-mgr.cc:95] QueryState: query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:47.414577 49067 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:50.450089 48622 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:50.450914 48622 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:50.468875 49195 query-exec-mgr.cc:95] QueryState: query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:50.469854 49195 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:53.513038 49196 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:53.513967 49196 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:53.524493 49272 query-exec-mgr.cc:95] QueryState: query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:53.525244 49272 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:54.042107 45243 coordinator.cc:689] Backend completed:  host=e4bdhpp015:22000 remaining=4 query_id=f8489d8976a47c18:5b9b3bd800000000
I0825 11:45:54.043234 45243 coordinator-backend-state.cc:226] query_id=f8489d8976a47c18:5b9b3bd800000000: first in-progress backend: e4bdhpp014:22000
W0825 11:45:55.386827 43862 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:45:55.394099 43862 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1146322920_BP-1820042964-11.11.206.232-1548063025113
I0825 11:45:56.556213 49196 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:56.557235 49196 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:56.567548 49273 query-exec-mgr.cc:95] QueryState: query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:56.567948 49273 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
W0825 11:45:57.665184 43861 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:45:57.665973 43861 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1146318760_BP-1820042964-11.11.206.232-1548063025113
I0825 11:45:59.605057 49273 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:59.605530 49273 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:45:59.615113 49385 query-exec-mgr.cc:95] QueryState: query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:45:59.615784 49385 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:46:01.792704 44132 thrift-util.cc:123] TAcceptQueueServer: Caught TException: No more data to read.
I0825 11:46:02.652539 49385 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:46:02.653496 49385 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:46:02.662515 49463 query-exec-mgr.cc:95] QueryState: query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:46:02.663563 49463 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
W0825 11:46:03.680629 43863 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:46:03.681174 43863 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1146318939_BP-1820042964-11.11.206.232-1548063025113
I0825 11:46:03.775066 44439 coordinator.cc:689] Backend completed:  host=e4bdhpp023:22000 remaining=3 query_id=f8489d8976a47c18:5b9b3bd800000000
I0825 11:46:03.776029 44439 coordinator-backend-state.cc:226] query_id=f8489d8976a47c18:5b9b3bd800000000: first in-progress backend: e4bdhpp014:22000
I0825 11:46:05.701195 49463 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:46:05.701871 49463 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:46:05.710060 49463 query-exec-mgr.cc:95] QueryState: query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:46:05.710492 49463 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:46:08.754096 49536 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:46:08.754504 49536 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:46:08.761504 49575 query-exec-mgr.cc:95] QueryState: query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:46:08.763645 49575 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:46:10.247159 45241 coordinator.cc:689] Backend completed:  host=e4bdhpp014:22000 remaining=2 query_id=f8489d8976a47c18:5b9b3bd800000000
I0825 11:46:10.247756 45241 coordinator-backend-state.cc:226] query_id=f8489d8976a47c18:5b9b3bd800000000: first in-progress backend: e4bdhpp018:22000
I0825 11:46:11.805876 49575 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:46:11.806929 49575 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:46:11.817008 49634 query-exec-mgr.cc:95] QueryState: query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:46:11.817374 49634 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=4
I0825 11:46:11.826889 47941 query-state.cc:403] Instance completed. instance_id=f8489d8976a47c18:5b9b3bd800000004 #in-flight=4 status=OK
I0825 11:46:11.827224 47941 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=3
I0825 11:46:14.852643 49633 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:46:14.853421 49633 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:46:14.860185 49635 query-exec-mgr.cc:95] QueryState: query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=3
I0825 11:46:14.860548 49635 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=3
I0825 11:46:15.725180 45243 coordinator.cc:689] Backend completed:  host=e4bdhpp015:22000 remaining=4 query_id=2b4244d880a0537b:216c86000000000
I0825 11:46:15.725804 45243 coordinator-backend-state.cc:226] query_id=2b4244d880a0537b:216c86000000000: first in-progress backend: e4bdhpp014:22000
I0825 11:46:17.893780 49633 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:46:17.894927 49633 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:46:17.901715 49688 query-exec-mgr.cc:95] QueryState: query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=3
I0825 11:46:17.902102 49688 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=3
I0825 11:46:18.701473 45241 coordinator.cc:689] Backend completed:  host=e4bdhpp014:22000 remaining=3 query_id=2b4244d880a0537b:216c86000000000
I0825 11:46:18.701946 45241 coordinator-backend-state.cc:226] query_id=2b4244d880a0537b:216c86000000000: first in-progress backend: e4bdhpp018:22000
I0825 11:46:19.373749 47940 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=f8489d8976a47c18:5b9b3bd800000000, node=2
I0825 11:46:19.375000 47940 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=f8489d8976a47c18:5b9b3bd800000000 node_id=2
I0825 11:46:19.376143 47386 coordinator.cc:689] Backend completed:  host=e4bdhpp018:22000 remaining=1 query_id=f8489d8976a47c18:5b9b3bd800000000
I0825 11:46:19.377079 47386 coordinator-backend-state.cc:226] query_id=f8489d8976a47c18:5b9b3bd800000000: first in-progress backend: e4bdhpp025:22000
I0825 11:46:19.384268 47899 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=f8489d8976a47c18:5b9b3bd800000000
I0825 11:46:19.384522 47899 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[1] {
      [0] = TColumnDesc {
        01: columnName (string) = "expr_1",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
    },
  },
}
I0825 11:46:19.386924 47899 coordinator.cc:522] Coordinator waiting for backends to finish, 1 remaining. query_id=f8489d8976a47c18:5b9b3bd800000000
I0825 11:46:19.388429 47899 coordinator.cc:527] All backends finished successfully. query_id=f8489d8976a47c18:5b9b3bd800000000
I0825 11:46:19.388918 47899 coordinator.cc:783] Release admission control resources for query_id=f8489d8976a47c18:5b9b3bd800000000
I0825 11:46:19.389232 47940 query-state.cc:403] Instance completed. instance_id=f8489d8976a47c18:5b9b3bd800000000 #in-flight=3 status=OK
I0825 11:46:19.390473 47940 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=2
I0825 11:46:19.390933 47899 impala-hs2-server.cc:683] CloseOperation(): query_id=f8489d8976a47c18:5b9b3bd800000000
I0825 11:46:19.391198 47899 impala-server.cc:1015] UnregisterQuery(): query_id=f8489d8976a47c18:5b9b3bd800000000
I0825 11:46:19.391342 47899 impala-server.cc:1102] Cancel(): query_id=f8489d8976a47c18:5b9b3bd800000000
I0825 11:46:19.391417 47899 coordinator.cc:629] Cancel() query_id=f8489d8976a47c18:5b9b3bd800000000
I0825 11:46:19.391582 47899 coordinator.cc:639] CancelBackends() query_id=f8489d8976a47c18:5b9b3bd800000000, tried to cancel 0 backends
I0825 11:46:19.404152 47899 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f8489d8976a47c18:5b9b3bd800000000 refcnt=1
I0825 11:46:19.419018 47899 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = ".O\xf1\xf8r\xe0D\x91\x91[\x951\xa4\xea\xff\xf9",
      02: secret (string) = "\xed\t\xc4\xc1t\xb8L\x1c\xbb!\xc0$k2J\x87",
    },
  },
}
I0825 11:46:19.419796 47899 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:60598 closed, closing 1 associated session(s)
I0825 11:46:19.736761 44439 coordinator.cc:689] Backend completed:  host=e4bdhpp023:22000 remaining=2 query_id=2b4244d880a0537b:216c86000000000
I0825 11:46:19.737423 44439 coordinator-backend-state.cc:226] query_id=2b4244d880a0537b:216c86000000000: first in-progress backend: e4bdhpp018:22000
I0825 11:46:20.255605 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:46:20.257014 49758 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:46:20.258024 49758 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1ei\xdd\x97JkL\xd0\xaf\x9c\x89\x8f\xf1\xf7\xa5d",
      02: secret (string) = ",\x9c=\xab\xc0\xc1G\xd6\x83p\xe2\x88/\xaa}h",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:46:20.282981 49758 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1ei\xdd\x97JkL\xd0\xaf\x9c\x89\x8f\xf1\xf7\xa5d",
      02: secret (string) = ",\x9c=\xab\xc0\xc1G\xd6\x83p\xe2\x88/\xaa}h",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:46:20.283430 49758 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1ei\xdd\x97JkL\xd0\xaf\x9c\x89\x8f\xf1\xf7\xa5d",
      02: secret (string) = ",\x9c=\xab\xc0\xc1G\xd6\x83p\xe2\x88/\xaa}h",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:46:20.284915 49758 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:20.291150 49758 Frontend.java:935] Analyzing query: use `dw04_sjfx`;
I0825 11:46:20.301899 49758 Frontend.java:947] Analysis finished.
I0825 11:46:20.357008 49758 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x9f\xa3|\xf5\x04ZF\xf0\x00\x00\x00\x00\xb5\xb8\x11_",
      02: secret (string) = "\x9f\xa3|\xf5\x04ZF\xf0\x00\x00\x00\x00\xb5\xb8\x11_",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:46:20.363657 49758 impala-hs2-server.cc:683] CloseOperation(): query_id=f0465a04f57ca39f:5f11b8b500000000
I0825 11:46:20.364032 49758 impala-server.cc:1015] UnregisterQuery(): query_id=f0465a04f57ca39f:5f11b8b500000000
I0825 11:46:20.364372 49758 impala-server.cc:1102] Cancel(): query_id=f0465a04f57ca39f:5f11b8b500000000
I0825 11:46:20.388841 49758 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1ei\xdd\x97JkL\xd0\xaf\x9c\x89\x8f\xf1\xf7\xa5d",
      02: secret (string) = ",\x9c=\xab\xc0\xc1G\xd6\x83p\xe2\x88/\xaa}h",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:46:20.389313 49758 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1ei\xdd\x97JkL\xd0\xaf\x9c\x89\x8f\xf1\xf7\xa5d",
      02: secret (string) = ",\x9c=\xab\xc0\xc1G\xd6\x83p\xe2\x88/\xaa}h",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:46:20.390416 49758 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:20.405220 49758 Frontend.java:935] Analyzing query: set REQUEST_POOL = 'agilebi';
I0825 11:46:20.406004 49758 Frontend.java:947] Analysis finished.
I0825 11:46:20.407822 49758 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xee\x9e\xbf\xea\xb3DB\xdc\x00\x00\x00\x00\x06\xa9\xb4\xfb",
      02: secret (string) = "\xee\x9e\xbf\xea\xb3DB\xdc\x00\x00\x00\x00\x06\xa9\xb4\xfb",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:20.414022 49758 impala-hs2-server.cc:683] CloseOperation(): query_id=dc4244b3eabf9eee:fbb4a90600000000
I0825 11:46:20.414359 49758 impala-server.cc:1015] UnregisterQuery(): query_id=dc4244b3eabf9eee:fbb4a90600000000
I0825 11:46:20.414849 49758 impala-server.cc:1102] Cancel(): query_id=dc4244b3eabf9eee:fbb4a90600000000
I0825 11:46:20.433970 44439 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=e14f1f9b0b3e9698:9f643bb300000000
I0825 11:46:20.434514 44439 query-exec-mgr.cc:46] StartQueryFInstances() query_id=e14f1f9b0b3e9698:9f643bb300000000 coord=e4bdhpp023:22000
I0825 11:46:20.434798 44439 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:20.435240 44439 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:20.435499 44439 query-state.cc:178] Buffer pool limit for e14f1f9b0b3e9698:9f643bb300000000: 6871947673
I0825 11:46:20.435777 44439 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query e14f1f9b0b3e9698:9f643bb300000000
I0825 11:46:20.436398 49761 query-state.cc:300] StartFInstances(): query_id=e14f1f9b0b3e9698:9f643bb300000000 #instances=1
I0825 11:46:20.436616 49761 query-state.cc:313] descriptor table for query=e14f1f9b0b3e9698:9f643bb300000000
tuples:
Tuple(id=0 size=97 slots=[Slot(id=2 type=DECIMAL(38,0) col_path=[2] offset=0 null=(offset=96 mask=1) slot_idx=0 field_idx=-1), Slot(id=3 type=STRING col_path=[3] offset=16 null=(offset=96 mask=2) slot_idx=1 field_idx=-1), Slot(id=4 type=DECIMAL(38,0) col_path=[4] offset=32 null=(offset=96 mask=4) slot_idx=2 field_idx=-1), Slot(id=5 type=STRING col_path=[5] offset=48 null=(offset=96 mask=8) slot_idx=3 field_idx=-1), Slot(id=6 type=STRING col_path=[6] offset=64 null=(offset=96 mask=10) slot_idx=4 field_idx=-1), Slot(id=7 type=STRING col_path=[7] offset=80 null=(offset=96 mask=20) slot_idx=5 field_idx=-1)] tuple_path=[])
I0825 11:46:20.436933 49762 query-state.cc:395] Executing instance. instance_id=e14f1f9b0b3e9698:9f643bb300000001 fragment_idx=1 per_fragment_instance_idx=0 coord_state_idx=1 #in-flight=4
I0825 11:46:20.437146 49762 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance 'e14f1f9b0b3e9698:9f643bb300000001': 190
I0825 11:46:20.437836 49758 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1ei\xdd\x97JkL\xd0\xaf\x9c\x89\x8f\xf1\xf7\xa5d",
      02: secret (string) = ",\x9c=\xab\xc0\xc1G\xd6\x83p\xe2\x88/\xaa}h",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:46:20.438251 49761 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e14f1f9b0b3e9698:9f643bb300000000 refcnt=2
I0825 11:46:20.438308 49758 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1ei\xdd\x97JkL\xd0\xaf\x9c\x89\x8f\xf1\xf7\xa5d",
      02: secret (string) = ",\x9c=\xab\xc0\xc1G\xd6\x83p\xe2\x88/\xaa}h",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:46:20.439635 49758 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:20.454250 49758 Frontend.java:935] Analyzing query: set MEM_LIMIT = 1024000000;
I0825 11:46:20.455008 49758 Frontend.java:947] Analysis finished.
I0825 11:46:20.456169 49758 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x99\x19f\xf36\x1cK~\x00\x00\x00\x00\x9a\xa6\x82\x89",
      02: secret (string) = "\x99\x19f\xf36\x1cK~\x00\x00\x00\x00\x9a\xa6\x82\x89",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
W0825 11:46:20.461359 43836 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
I0825 11:46:20.462457 49758 impala-hs2-server.cc:683] CloseOperation(): query_id=7e4b1c36f3661999:8982a69a00000000
W0825 11:46:20.463418 43836 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1324210723_BP-1820042964-11.11.206.232-1548063025113
I0825 11:46:20.463505 49758 impala-server.cc:1015] UnregisterQuery(): query_id=7e4b1c36f3661999:8982a69a00000000
W0825 11:46:20.464429 43857 ShortCircuitCache.java:773] ShortCircuitCache(0x45360bf1): failed to get 1324210723_BP-1820042964-11.11.206.232-1548063025113
I0825 11:46:20.464344 49758 impala-server.cc:1102] Cancel(): query_id=7e4b1c36f3661999:8982a69a00000000
I0825 11:46:20.473984 49758 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1ei\xdd\x97JkL\xd0\xaf\x9c\x89\x8f\xf1\xf7\xa5d",
      02: secret (string) = ",\x9c=\xab\xc0\xc1G\xd6\x83p\xe2\x88/\xaa}h",
    },
  },
  02: statement (string) = "DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_NN`",
  04: runAsync (bool) = true,
}
I0825 11:46:20.474701 49758 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1ei\xdd\x97JkL\xd0\xaf\x9c\x89\x8f\xf1\xf7\xa5d",
      02: secret (string) = ",\x9c=\xab\xc0\xc1G\xd6\x83p\xe2\x88/\xaa}h",
    },
  },
  02: statement (string) = "DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_NN`",
  04: runAsync (bool) = true,
}
I0825 11:46:20.475818 49758 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:20.492203 49758 Frontend.java:935] Analyzing query: DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_NN`
I0825 11:46:20.493415 49758 Frontend.java:947] Analysis finished.
I0825 11:46:20.544224 49758 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xa7\xfd\xb9\xb0}UM[\x00\x00\x00\x00\xe40\xb9\xbf",
      02: secret (string) = "\xa7\xfd\xb9\xb0}UM[\x00\x00\x00\x00\xe40\xb9\xbf",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:20.548686 49758 impala-hs2-server.cc:683] CloseOperation(): query_id=5b4d557db0b9fda7:bfb930e400000000
I0825 11:46:20.549225 49758 impala-server.cc:1015] UnregisterQuery(): query_id=5b4d557db0b9fda7:bfb930e400000000
I0825 11:46:20.549664 49758 impala-server.cc:1102] Cancel(): query_id=5b4d557db0b9fda7:bfb930e400000000
I0825 11:46:20.686429 49758 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1ei\xdd\x97JkL\xd0\xaf\x9c\x89\x8f\xf1\xf7\xa5d",
      02: secret (string) = ",\x9c=\xab\xc0\xc1G\xd6\x83p\xe2\x88/\xaa}h",
    },
  },
  02: statement (string) = "select   `bi_228[...](15726)",
  04: runAsync (bool) = true,
}
I0825 11:46:20.687291 49758 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1ei\xdd\x97JkL\xd0\xaf\x9c\x89\x8f\xf1\xf7\xa5d",
      02: secret (string) = ",\x9c=\xab\xc0\xc1G\xd6\x83p\xe2\x88/\xaa}h",
    },
  },
  02: statement (string) = "select   `bi_228[...](15726)",
  04: runAsync (bool) = true,
}
I0825 11:46:20.688633 49758 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:20.707726 49758 Frontend.java:935] Analyzing query: select   `bi_2282682891841018241`.`帐号` as `bi_15159864404575209771` , `bi_2282682891841018241`.`卡号` as `bi_5176736373764729517` , `bi_2282682891841018241`.`卡类型描述` as `bi_18002650512820288522` , `bi_2282682891841018241`.`是否为副卡` as `bi_10070664717213612371` , `bi_2282682891841018241`.`交易主要站点` as `bi_17363467753723988445` , `bi_2282682891841018241`.`消费过加油站站点数量_1692137484` as `bi_17559908322177175193` , `bi_2282682891841018241`.`交易类型描述` as `bi_30169237570504987` , `bi_2282682891841018241`.`商品类型` as `bi_630186766851260751` , `bi_2282682891841018241`.`商品类型描述` as `bi_15231137875792296164` , `bi_2282682891841018241`.`发卡单位` as `bi_15621164357820908518` , `bi_2282682891841018241`.`发卡单位与销售单位是否一致` as `bi_12117277212538675021` , `bi_2282682891841018241`.`首次交易日期` as `bi_6646908465420298805` , `bi_2282682891841018241`.`最近交易日期` as `bi_13530833546549329347` , `bi_2282682891841018241`.`平均油量升数` as `bi_11273946998078465677` , `bi_2282682891841018241`.`平均消费金额` as `bi_8288133923748336711` , `bi_2282682891841018241`.`平均折扣金额` as `bi_4970043801986327351` , `bi_2282682891841018241`.`平均余额` as `bi_8381900821794444625` , `bi_2282682891841018241`.`日均消费笔数` as `bi_10723048596585302054` , `bi_2282682891841018241`.`日均消费金额` as `bi_41819982784080953` , `bi_2282682891841018241`.`单日消费次数过多次数` as `bi_12112238727142840682` , `bi_2282682891841018241`.`不记名卡夜间消费总次数` as `bi_3938683413919446579` , `bi_2282682891841018241`.`不记名卡夜间消费总金额` as `bi_12562378023438062621` , `bi_2282682891841018241`.`日均夜间消费笔数` as `bi_6200430593887269742` , `bi_2282682891841018241`.`日均夜间消费金额` as `bi_1689351619663764928` , `bi_2282682891841018241`.`单日夜间消费次数过多次数` as `bi_12909975068497935338` , `bi_2282682891841018241`.`睡眠次数` as `bi_11007498412015863178` , `bi_2282682891841018241`.`是否仍在睡眠` as `bi_12482824553037098532` , `bi_2282682891841018241`.`不记名卡累计消费金额` as `bi_4601843349518591292` , `bi_2282682891841018241`.`不记名卡消费金额方差` as `bi_2924531414258932610` , `bi_2282682891841018241`.`不记名卡累计消费次数` as `bi_5870083467319809789` , `bi_2282682891841018241`.`不记名卡消费金额为小数次数` as `bi_3842164172086352148` , `bi_2282682891841018241`.`不记名卡消费过油品类型数量` as `bi_806870660964728186` , `bi_2282682891841018241`.`消费过汽油品类型数量636841632` as `bi_556036179544267082` , `bi_2282682891841018241`.`不记名卡汽油消费次数占比` as `bi_1068488302117352384` , `bi_2282682891841018241`.`汽油单笔高额消费次数_1368620500` as `bi_8356278071803173785` , `bi_2282682891841018241`.`不记名卡柴油消费次数占比` as `bi_5766421841800396638` , `bi_2282682891841018241`.`不记名卡天然气消费次数占比` as `bi_14290961476284126012` , `bi_2282682891841018241`.`ic卡大额非油消费次数` as `bi_992601592685606614` , `bi_2282682891841018241`.`非油累计消费金额` as `bi_8276717807170841059` , `bi_2282682891841018241`.`非油与成品油消费金额比例` as `bi_14967514132684380162` , `bi_2282682891841018241`.`不记名卡累计充值金额` as `bi_11701916747493263994` , `bi_2282682891841018241`.`单日充值次数过多次数` as `bi_16449755606537913494` , `bi_2282682891841018241`.`即消费且余额低的次数831743621` as `bi_12225443660237330283` , `bi_2282682891841018241`.`同一班次消费的次数` as `bi_5256996930125776142` , `bi_2282682891841018241`.`密码重置次数` as `bi_8414722834803604324` , `bi_2282682891841018241`.`笔折扣额的消费的次数_2085032453` as `bi_10212944947192418963` , `bi_2282682891841018241`.`余额充足时充钱的次数1957627260` as `bi_2466479945894447936` , `bi_2282682891841018241`.`是否曾频繁转账` as `bi_14279744686847475029` , `bi_2282682891841018241`.`是否异常加油卡` as `bi_1040490846059638232` , `bi_2282682891841018241`.`单位名称` as `bi_10101021918568318220` , `bi_2282682891841018241`.`所属` as `bi_13138972180237352292` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_2282682891841018241`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_10651599939693506386` , TRIM(`bi_2282682891841018241`.`交易主要站点`) as `bi_13164579150965645243`   from (select   `bi_11409236811878669265`.`帐号` as `帐号` , `bi_11409236811878669265`.`卡号` as `卡号` , `bi_11409236811878669265`.`卡类型描述` as `卡类型描述` , `bi_11409236811878669265`.`是否为副卡` as `是否为副卡` , `bi_11409236811878669265`.`交易主要站点` as `交易主要站点` , `bi_11409236811878669265`.`不记名卡消费过加油站站点数量` as `消费过加油站站点数量_1692137484` , `bi_11409236811878669265`.`交易类型描述` as `交易类型描述` , `bi_11409236811878669265`.`商品类型` as `商品类型` , `bi_11409236811878669265`.`商品类型描述` as `商品类型描述` , `bi_11409236811878669265`.`发卡单位` as `发卡单位` , `bi_11409236811878669265`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `bi_11409236811878669265`.`首次交易日期` as `首次交易日期` , `bi_11409236811878669265`.`最近交易日期` as `最近交易日期` , `bi_11409236811878669265`.`平均油量升数` as `平均油量升数` , `bi_11409236811878669265`.`平均消费金额` as `平均消费金额` , `bi_11409236811878669265`.`平均折扣金额` as `平均折扣金额` , `bi_11409236811878669265`.`平均余额` as `平均余额` , `bi_11409236811878669265`.`日均消费笔数` as `日均消费笔数` , `bi_11409236811878669265`.`日均消费金额` as `日均消费金额` , `bi_11409236811878669265`.`单日消费次数过多次数` as `单日消费次数过多次数` , `bi_11409236811878669265`.`不记名卡夜间消费总次数` as `不记名卡夜间消费总次数` , `bi_11409236811878669265`.`不记名卡夜间消费总金额` as `不记名卡夜间消费总金额` , `bi_11409236811878669265`.`日均夜间消费笔数` as `日均夜间消费笔数` , `bi_11409236811878669265`.`日均夜间消费金额` as `日均夜间消费金额` , `bi_11409236811878669265`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `bi_11409236811878669265`.`睡眠次数` as `睡眠次数` , `bi_11409236811878669265`.`是否仍在睡眠` as `是否仍在睡眠` , `bi_11409236811878669265`.`不记名卡累计消费金额` as `不记名卡累计消费金额` , `bi_11409236811878669265`.`不记名卡消费金额方差` as `不记名卡消费金额方差` , `bi_11409236811878669265`.`不记名卡累计消费次数` as `不记名卡累计消费次数` , `bi_11409236811878669265`.`不记名卡消费金额为小数次数` as `不记名卡消费金额为小数次数` , `bi_11409236811878669265`.`不记名卡消费过油品类型数量` as `不记名卡消费过油品类型数量` , `bi_11409236811878669265`.`不记名卡消费过汽油品类型数量` as `消费过汽油品类型数量636841632` , `bi_11409236811878669265`.`不记名卡汽油消费次数占比` as `不记名卡汽油消费次数占比` , `bi_11409236811878669265`.`不记名卡汽油单笔高额消费次数` as `汽油单笔高额消费次数_1368620500` , `bi_11409236811878669265`.`不记名卡柴油消费次数占比` as `不记名卡柴油消费次数占比` , `bi_11409236811878669265`.`不记名卡天然气消费次数占比` as `不记名卡天然气消费次数占比` , `bi_11409236811878669265`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `bi_11409236811878669265`.`非油累计消费金额` as `非油累计消费金额` , `bi_11409236811878669265`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `bi_11409236811878669265`.`不记名卡累计充值金额` as `不记名卡累计充值金额` , `bi_11409236811878669265`.`单日充值次数过多次数` as `单日充值次数过多次数` , `bi_11409236811878669265`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `bi_11409236811878669265`.`同一班次消费的次数` as `同一班次消费的次数` , `bi_11409236811878669265`.`密码重置次数` as `密码重置次数` , `bi_11409236811878669265`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `bi_11409236811878669265`.`不记名卡余额充足时充钱的次数` as `余额充足时充钱的次数1957627260` , `bi_11409236811878669265`.`是否曾频繁转账` as `是否曾频繁转账` , `bi_11409236811878669265`.`是否异常加油卡` as `是否异常加油卡` , `bi_11409236811878669265`.`单位名称` as `单位名称` , `bi_11409236811878669265`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`不记名卡消费过加油站站点数量` as `不记名卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`不记名卡夜间消费总次数` as `不记名卡夜间消费总次数`,`不记名卡夜间消费总金额` as `不记名卡夜间消费总金额`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`不记名卡累计消费金额` as `不记名卡累计消费金额`,`不记名卡消费金额方差` as `不记名卡消费金额方差`,`不记名卡累计消费次数` as `不记名卡累计消费次数`,`不记名卡消费金额为小数次数` as `不记名卡消费金额为小数次数`,`不记名卡消费过油品类型数量` as `不记名卡消费过油品类型数量`,`不记名卡消费过汽油品类型数量` as `不记名卡消费过汽油品类型数量`,`不记名卡汽油消费次数占比` as `不记名卡汽油消费次数占比`,`不记名卡汽油单笔高额消费次数` as `不记名卡汽油单笔高额消费次数`,`不记名卡柴油消费次数占比` as `不记名卡柴油消费次数占比`,`不记名卡天然气消费次数占比` as `不记名卡天然气消费次数占比`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`不记名卡累计充值金额` as `不记名卡累计充值金额`,`单日充值次数过多次数` as `单日充值次数过多次数`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`不记名卡余额充足时充钱的次数` as `不记名卡余额充足时充钱的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`不记名卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`不记名卡夜间消费总次数`,`不记名卡夜间消费总金额`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`不记名卡累计消费金额`,`不记名卡消费金额方差`,`不记名卡累计消费次数`,`不记名卡消费金额为小数次数`,`不记名卡消费过油品类型数量`,`不记名卡消费过汽油品类型数量`,`不记名卡汽油消费次数占比`,`不记名卡汽油单笔高额消费次数`,`不记名卡柴油消费次数占比`,`不记名卡天然气消费次数占比`,`ic卡大额非油消费次数`,`非油累计消费金额`,`非油与成品油消费金额比例`,`不记名卡累计充值金额`,`单日充值次数过多次数`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`不记名卡余额充足时充钱的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,     
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `不记名卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`, 
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`, 
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`,
       `单日消费次数过多次数`, 
       `不记名卡夜间消费总次数`,
       `不记名卡夜间消费总金额`,
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`, 
       `睡眠次数`,
       `是否仍在睡眠`,
       `不记名卡累计消费金额`,
       `加油卡消费金额方差` `不记名卡消费金额方差`,
       `不记名卡累计消费次数`,
       `加油卡消费金额为小数次数` `不记名卡消费金额为小数次数`,
       `不记名卡消费过油品类型数量`,
       `不记名卡消费过汽油品类型数量`,
       `不记名卡汽油消费次数占比`,
       `不记名卡汽油单笔高额消费次数`,
       `不记名卡柴油消费次数占比`,
       `不记名卡天然气消费次数占比`,
       `IC卡大额非油消费次数`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `不记名卡累计充值金额`,
       `单日充值次数过多次数`, 
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `不记名卡余额充足时充钱的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM DW04_SJFX.APP_AUAP_YK_NN) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `bi_11409236811878669265`  
     ) `bi_2282682891841018241`
      limit 1200001 
I0825 11:46:20.722491 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:46:20.723841 49803 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:46:20.752784 49803 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xeeJ+\x04\xe1\xfcL7\xb0c\xc0\xc4\b\xb9\x92\x14",
      02: secret (string) = "-\x8b\xe1\xe1 _Hz\x88hp\x00vO\xee\xd5",
    },
  },
  02: statement (string) = "use dw18_la",
  04: runAsync (bool) = true,
}
I0825 11:46:20.753232 49803 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xeeJ+\x04\xe1\xfcL7\xb0c\xc0\xc4\b\xb9\x92\x14",
      02: secret (string) = "-\x8b\xe1\xe1 _Hz\x88hp\x00vO\xee\xd5",
    },
  },
  02: statement (string) = "use dw18_la",
  04: runAsync (bool) = true,
}
I0825 11:46:20.756670 49803 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:20.763073 49762 query-state.cc:403] Instance completed. instance_id=e14f1f9b0b3e9698:9f643bb300000001 #in-flight=3 status=OK
I0825 11:46:20.763622 49762 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e14f1f9b0b3e9698:9f643bb300000000 refcnt=1
I0825 11:46:20.764237 49803 Frontend.java:935] Analyzing query: use dw18_la
I0825 11:46:20.765019 49803 Frontend.java:947] Analysis finished.
I0825 11:46:20.811709 49803 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xd3\x8do]\x1c\x92F\\\x00\x00\x00\x00\xf8\xd8m\xd0",
      02: secret (string) = "\xd3\x8do]\x1c\x92F\\\x00\x00\x00\x00\xf8\xd8m\xd0",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:46:20.817814 49803 impala-hs2-server.cc:683] CloseOperation(): query_id=5c46921c5d6f8dd3:d06dd8f800000000
I0825 11:46:20.818011 49803 impala-server.cc:1015] UnregisterQuery(): query_id=5c46921c5d6f8dd3:d06dd8f800000000
I0825 11:46:20.818107 49803 impala-server.cc:1102] Cancel(): query_id=5c46921c5d6f8dd3:d06dd8f800000000
I0825 11:46:20.845386 49803 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xeeJ+\x04\xe1\xfcL7\xb0c\xc0\xc4\b\xb9\x92\x14",
      02: secret (string) = "-\x8b\xe1\xe1 _Hz\x88hp\x00vO\xee\xd5",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:46:20.845662 49803 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xeeJ+\x04\xe1\xfcL7\xb0c\xc0\xc4\b\xb9\x92\x14",
      02: secret (string) = "-\x8b\xe1\xe1 _Hz\x88hp\x00vO\xee\xd5",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:46:20.846122 49803 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:20.851071 49803 Frontend.java:935] Analyzing query: set mem_limit='8g'
I0825 11:46:20.851385 49803 Frontend.java:947] Analysis finished.
I0825 11:46:20.852007 49803 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "nD\xe64\xe5\xdcM\xa9\x00\x00\x00\x00\xa0\x19E\xfb",
      02: secret (string) = "nD\xe64\xe5\xdcM\xa9\x00\x00\x00\x00\xa0\x19E\xfb",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:20.856297 49803 impala-hs2-server.cc:683] CloseOperation(): query_id=a94ddce534e6446e:fb4519a000000000
I0825 11:46:20.857110 49803 impala-server.cc:1015] UnregisterQuery(): query_id=a94ddce534e6446e:fb4519a000000000
I0825 11:46:20.857463 49803 impala-server.cc:1102] Cancel(): query_id=a94ddce534e6446e:fb4519a000000000
I0825 11:46:20.864686 49803 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xeeJ+\x04\xe1\xfcL7\xb0c\xc0\xc4\b\xb9\x92\x14",
      02: secret (string) = "-\x8b\xe1\xe1 _Hz\x88hp\x00vO\xee\xd5",
    },
  },
  02: statement (string) = "DESCRIBE `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120`",
  04: runAsync (bool) = true,
}
I0825 11:46:20.865214 49803 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xeeJ+\x04\xe1\xfcL7\xb0c\xc0\xc4\b\xb9\x92\x14",
      02: secret (string) = "-\x8b\xe1\xe1 _Hz\x88hp\x00vO\xee\xd5",
    },
  },
  02: statement (string) = "DESCRIBE `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120`",
  04: runAsync (bool) = true,
}
I0825 11:46:20.866612 49803 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:20.883113 49803 Frontend.java:935] Analyzing query: DESCRIBE `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120`
I0825 11:46:20.884783 49803 Frontend.java:947] Analysis finished.
I0825 11:46:20.929906 49803 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "bg\b\r\xf68@\x11\x00\x00\x00\x00e\xff\xb7\xe4",
      02: secret (string) = "bg\b\r\xf68@\x11\x00\x00\x00\x00e\xff\xb7\xe4",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:20.934183 49803 impala-hs2-server.cc:683] CloseOperation(): query_id=114038f60d086762:e4b7ff6500000000
I0825 11:46:20.934424 49803 impala-server.cc:1015] UnregisterQuery(): query_id=114038f60d086762:e4b7ff6500000000
I0825 11:46:20.934576 49803 impala-server.cc:1102] Cancel(): query_id=114038f60d086762:e4b7ff6500000000
I0825 11:46:20.936035 49633 query-exec-mgr.cc:95] QueryState: query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:46:20.937216 49633 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=4
I0825 11:46:20.940943 49803 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xeeJ+\x04\xe1\xfcL7\xb0c\xc0\xc4\b\xb9\x92\x14",
      02: secret (string) = "-\x8b\xe1\xe1 _Hz\x88hp\x00vO\xee\xd5",
    },
  },
  02: statement (string) = "SELECT COUNT(1) [...](3427)",
  04: runAsync (bool) = true,
}
I0825 11:46:20.941185 49803 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xeeJ+\x04\xe1\xfcL7\xb0c\xc0\xc4\b\xb9\x92\x14",
      02: secret (string) = "-\x8b\xe1\xe1 _Hz\x88hp\x00vO\xee\xd5",
    },
  },
  02: statement (string) = "SELECT COUNT(1) [...](3427)",
  04: runAsync (bool) = true,
}
I0825 11:46:20.941922 49803 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:20.949987 49803 Frontend.java:935] Analyzing query: SELECT COUNT(1) AS `EXPR_1`  FROM (SELECT `bi_16518359572041906452`.`bi_15518877374181664639` AS `bi_3553687481121517161` , `bi_16518359572041906452`.`bi_10491841080111616035` AS `bi_1801344474855471949` , `bi_16518359572041906452`.`bi_16048134125873699212` AS `bi_11114444472631880056` , `bi_16518359572041906452`.`bi_11047500209402619491` AS `bi_4584329074808174062` , `bi_16518359572041906452`.`bi_8739345836465617530` AS `bi_813660579643793135` , `bi_16518359572041906452`.`bi_6439070652440084537` AS `bi_2671125010966300805`  FROM (SELECT `b_la_v_foreign_counterparty_c120`.`oulabel` AS `bi_15518877374181664639` , `b_la_v_foreign_counterparty_c120`.`oulabel_t` AS `bi_10491841080111616035` , `b_la_v_foreign_counterparty_c120`.`contractid` AS `bi_16048134125873699212` , `b_la_v_foreign_counterparty_c120`.`relativorrelationid` AS `bi_11047500209402619491` , `b_la_v_foreign_counterparty_c120`.`counterpartyname` AS `bi_8739345836465617530` , `b_la_v_foreign_counterparty_c120`.`counterpartyname_key` AS `bi_6439070652440084537`  FROM (SELECT `temp_sql_wrapper_table`.`oulabel` AS `oulabel` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`contractid` AS `contractid` , `temp_sql_wrapper_table`.`relativorrelationid` AS `relativorrelationid` , `temp_sql_wrapper_table`.`counterpartyname` AS `counterpartyname` , `temp_sql_wrapper_table`.`counterpartyname_key` AS `counterpartyname_key`  FROM (SELECT `temp_sub_query_table`.`oulabel`, `temp_sub_query_table`.`oulabel_t`, `temp_sub_query_table`.`contractid`, `temp_sub_query_table`.`relativorrelationid`, `temp_sub_query_table`.`counterpartyname`, `temp_sub_query_table`.`counterpartyname_key` FROM (SELECT `b_la_v_foreign_contractrelativorrelation_c120`.`rowkey`, `b_la_v_foreign_contractrelativorrelation_c120`.`id`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`contractid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativorrelationid`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname_key`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_name`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_relativeid`, `b_la_v_foreign_contractrelativorrelation_c120`.`regionsign`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgname`, `b_la_v_foreign_contractrelativorrelation_c120`.`mdmcode`, `b_la_v_foreign_contractrelativorrelation_c120`.`creator`, `b_la_v_foreign_contractrelativorrelation_c120`.`created`, `b_la_v_foreign_contractrelativorrelation_c120`.`editor`, `b_la_v_foreign_contractrelativorrelation_c120`.`edited`, `b_la_v_foreign_contractrelativorrelation_c120`.`isdeleted`, `b_la_v_foreign_contractrelativorrelation_c120`.`etl_date` FROM `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120` `b_la_v_foreign_contractrelativorrelation_c120` ) `temp_sub_query_table` WHERE (`temp_sub_query_table`.`oulabel_t` LIKE '%辽河油田%') ) `temp_sql_wrapper_table`) `b_la_v_foreign_counterparty_c120`) `bi_16518359572041906452`) `tableWithoutPaging` 
I0825 11:46:20.984740 49803 Frontend.java:947] Analysis finished.
I0825 11:46:20.986639 49803 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:20.986791 49803 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:20.989986 49803 admission-controller.cc:508] Schedule for id=fb4171f1e4a659e3:bf8fa12200000000 in pool_name=root.default cluster_mem_needed=8.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
I0825 11:46:20.990101 49803 admission-controller.cc:513] Stats: agg_num_running=2, agg_num_queued=0, agg_mem_reserved=40.00 GB,  local_host(local_mem_admitted=40.00 GB, num_admitted_running=1, num_queued=0, backend_mem_reserved=16.00 GB)
I0825 11:46:20.990211 49803 admission-controller.cc:529] Admitted query id=fb4171f1e4a659e3:bf8fa12200000000
I0825 11:46:20.990284 49803 coordinator.cc:93] Exec() query_id=fb4171f1e4a659e3:bf8fa12200000000 stmt=SELECT COUNT(1) AS `EXPR_1`  FROM (SELECT `bi_16518359572041906452`.`bi_15518877374181664639` AS `bi_3553687481121517161` , `bi_16518359572041906452`.`bi_10491841080111616035` AS `bi_1801344474855471949` , `bi_16518359572041906452`.`bi_16048134125873699212` AS `bi_11114444472631880056` , `bi_16518359572041906452`.`bi_11047500209402619491` AS `bi_4584329074808174062` , `bi_16518359572041906452`.`bi_8739345836465617530` AS `bi_813660579643793135` , `bi_16518359572041906452`.`bi_6439070652440084537` AS `bi_2671125010966300805`  FROM (SELECT `b_la_v_foreign_counterparty_c120`.`oulabel` AS `bi_15518877374181664639` , `b_la_v_foreign_counterparty_c120`.`oulabel_t` AS `bi_10491841080111616035` , `b_la_v_foreign_counterparty_c120`.`contractid` AS `bi_16048134125873699212` , `b_la_v_foreign_counterparty_c120`.`relativorrelationid` AS `bi_11047500209402619491` , `b_la_v_foreign_counterparty_c120`.`counterpartyname` AS `bi_8739345836465617530` , `b_la_v_foreign_counterparty_c120`.`counterpartyname_key` AS `bi_6439070652440084537`  FROM (SELECT `temp_sql_wrapper_table`.`oulabel` AS `oulabel` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`contractid` AS `contractid` , `temp_sql_wrapper_table`.`relativorrelationid` AS `relativorrelationid` , `temp_sql_wrapper_table`.`counterpartyname` AS `counterpartyname` , `temp_sql_wrapper_table`.`counterpartyname_key` AS `counterpartyname_key`  FROM (SELECT `temp_sub_query_table`.`oulabel`, `temp_sub_query_table`.`oulabel_t`, `temp_sub_query_table`.`contractid`, `temp_sub_query_table`.`relativorrelationid`, `temp_sub_query_table`.`counterpartyname`, `temp_sub_query_table`.`counterpartyname_key` FROM (SELECT `b_la_v_foreign_contractrelativorrelation_c120`.`rowkey`, `b_la_v_foreign_contractrelativorrelation_c120`.`id`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`contractid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativorrelationid`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname_key`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_name`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_relativeid`, `b_la_v_foreign_contractrelativorrelation_c120`.`regionsign`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgname`, `b_la_v_foreign_contractrelativorrelation_c120`.`mdmcode`, `b_la_v_foreign_contractrelativorrelation_c120`.`creator`, `b_la_v_foreign_contractrelativorrelation_c120`.`created`, `b_la_v_foreign_contractrelativorrelation_c120`.`editor`, `b_la_v_foreign_contractrelativorrelation_c120`.`edited`, `b_la_v_foreign_contractrelativorrelation_c120`.`isdeleted`, `b_la_v_foreign_contractrelativorrelation_c120`.`etl_date` FROM `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120` `b_la_v_foreign_contractrelativorrelation_c120` ) `temp_sub_query_table` WHERE (`temp_sub_query_table`.`oulabel_t` LIKE '%辽河油田%') ) `temp_sql_wrapper_table`) `b_la_v_foreign_counterparty_c120`) `bi_16518359572041906452`) `tableWithoutPaging` 
I0825 11:46:20.990429 49803 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:20.990482 49803 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:20.990607 49803 coordinator.cc:349] starting execution on 1 backends for query_id=fb4171f1e4a659e3:bf8fa12200000000
I0825 11:46:20.991853 44904 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=fb4171f1e4a659e3:bf8fa12200000000
I0825 11:46:20.992693 44904 query-exec-mgr.cc:46] StartQueryFInstances() query_id=fb4171f1e4a659e3:bf8fa12200000000 coord=e4bdhpp025:22000
I0825 11:46:20.993419 44904 query-state.cc:178] Buffer pool limit for fb4171f1e4a659e3:bf8fa12200000000: 6871947673
I0825 11:46:20.993793 44904 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query fb4171f1e4a659e3:bf8fa12200000000
I0825 11:46:20.994410 49809 query-state.cc:300] StartFInstances(): query_id=fb4171f1e4a659e3:bf8fa12200000000 #instances=2
I0825 11:46:20.994567 49809 query-state.cc:313] descriptor table for query=fb4171f1e4a659e3:bf8fa12200000000
tuples:
Tuple(id=6 size=8 slots=[Slot(id=68 type=BIGINT col_path=[] offset=0 null=(offset=0 mask=0) slot_idx=0 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=17 slots=[Slot(id=3 type=STRING col_path=[3] offset=0 null=(offset=16 mask=1) slot_idx=0 field_idx=-1)] tuple_path=[])
I0825 11:46:20.995040 49810 query-state.cc:395] Executing instance. instance_id=fb4171f1e4a659e3:bf8fa12200000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=0 #in-flight=4
I0825 11:46:20.995019 49803 coordinator.cc:362] started execution on 1 backends for query_id=fb4171f1e4a659e3:bf8fa12200000000
I0825 11:46:20.995186 49811 query-state.cc:395] Executing instance. instance_id=fb4171f1e4a659e3:bf8fa12200000001 fragment_idx=1 per_fragment_instance_idx=0 coord_state_idx=0 #in-flight=5
I0825 11:46:20.995442 49811 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance 'fb4171f1e4a659e3:bf8fa12200000001': 190
I0825 11:46:20.996716 49809 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb4171f1e4a659e3:bf8fa12200000000 refcnt=4
I0825 11:46:20.997006 49803 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xe3Y\xa6\xe4\xf1qA\xfb\x00\x00\x00\x00\"\xa1\x8f\xbf",
      02: secret (string) = "\xe3Y\xa6\xe4\xf1qA\xfb\x00\x00\x00\x00\"\xa1\x8f\xbf",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:21.063028 49758 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:46:21.063510 49758 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:46:21.277130 49810 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=fb4171f1e4a659e3:bf8fa12200000000, node=2
I0825 11:46:21.277396 49810 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=fb4171f1e4a659e3:bf8fa12200000000 node_id=2
I0825 11:46:21.278149 49811 query-state.cc:403] Instance completed. instance_id=fb4171f1e4a659e3:bf8fa12200000001 #in-flight=4 status=OK
I0825 11:46:21.278262 49811 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb4171f1e4a659e3:bf8fa12200000000 refcnt=3
I0825 11:46:21.280810 49803 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=fb4171f1e4a659e3:bf8fa12200000000
I0825 11:46:21.280963 49803 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[1] {
      [0] = TColumnDesc {
        01: columnName (string) = "expr_1",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
    },
  },
}
I0825 11:46:21.283299 49803 coordinator.cc:522] Coordinator waiting for backends to finish, 1 remaining. query_id=fb4171f1e4a659e3:bf8fa12200000000
I0825 11:46:21.283480 49803 coordinator.cc:527] All backends finished successfully. query_id=fb4171f1e4a659e3:bf8fa12200000000
I0825 11:46:21.283569 49803 coordinator.cc:783] Release admission control resources for query_id=fb4171f1e4a659e3:bf8fa12200000000
I0825 11:46:21.283634 49810 query-state.cc:403] Instance completed. instance_id=fb4171f1e4a659e3:bf8fa12200000000 #in-flight=3 status=OK
I0825 11:46:21.283730 49810 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb4171f1e4a659e3:bf8fa12200000000 refcnt=2
I0825 11:46:21.284663 49803 impala-hs2-server.cc:683] CloseOperation(): query_id=fb4171f1e4a659e3:bf8fa12200000000
I0825 11:46:21.284736 49803 impala-server.cc:1015] UnregisterQuery(): query_id=fb4171f1e4a659e3:bf8fa12200000000
I0825 11:46:21.284788 49803 impala-server.cc:1102] Cancel(): query_id=fb4171f1e4a659e3:bf8fa12200000000
I0825 11:46:21.284852 49803 coordinator.cc:629] Cancel() query_id=fb4171f1e4a659e3:bf8fa12200000000
I0825 11:46:21.284940 49803 coordinator.cc:639] CancelBackends() query_id=fb4171f1e4a659e3:bf8fa12200000000, tried to cancel 0 backends
I0825 11:46:21.287408 49803 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb4171f1e4a659e3:bf8fa12200000000 refcnt=1
I0825 11:46:21.293326 49803 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xeeJ+\x04\xe1\xfcL7\xb0c\xc0\xc4\b\xb9\x92\x14",
      02: secret (string) = "-\x8b\xe1\xe1 _Hz\x88hp\x00vO\xee\xd5",
    },
  },
}
I0825 11:46:21.294117 49803 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:47934 closed, closing 1 associated session(s)
I0825 11:46:21.411613 49758 Frontend.java:947] Analysis finished.
I0825 11:46:21.414675 49758 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:46:21.415565 49758 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:46:21.428401 49758 admission-controller.cc:508] Schedule for id=b446a03549407cc6:52eef85000000000 in pool_name=root.agilebi cluster_mem_needed=1.91 GB PoolConfig: max_requests=500 max_queued=200 max_mem=800.00 GB
I0825 11:46:21.435592 49758 admission-controller.cc:513] Stats: agg_num_running=0, agg_num_queued=0, agg_mem_reserved=0,  local_host(local_mem_admitted=0, num_admitted_running=0, num_queued=0, backend_mem_reserved=0)
I0825 11:46:21.436177 49758 admission-controller.cc:529] Admitted query id=b446a03549407cc6:52eef85000000000
I0825 11:46:21.436612 49758 coordinator.cc:93] Exec() query_id=b446a03549407cc6:52eef85000000000 stmt=select   `bi_2282682891841018241`.`帐号` as `bi_15159864404575209771` , `bi_2282682891841018241`.`卡号` as `bi_5176736373764729517` , `bi_2282682891841018241`.`卡类型描述` as `bi_18002650512820288522` , `bi_2282682891841018241`.`是否为副卡` as `bi_10070664717213612371` , `bi_2282682891841018241`.`交易主要站点` as `bi_17363467753723988445` , `bi_2282682891841018241`.`消费过加油站站点数量_1692137484` as `bi_17559908322177175193` , `bi_2282682891841018241`.`交易类型描述` as `bi_30169237570504987` , `bi_2282682891841018241`.`商品类型` as `bi_630186766851260751` , `bi_2282682891841018241`.`商品类型描述` as `bi_15231137875792296164` , `bi_2282682891841018241`.`发卡单位` as `bi_15621164357820908518` , `bi_2282682891841018241`.`发卡单位与销售单位是否一致` as `bi_12117277212538675021` , `bi_2282682891841018241`.`首次交易日期` as `bi_6646908465420298805` , `bi_2282682891841018241`.`最近交易日期` as `bi_13530833546549329347` , `bi_2282682891841018241`.`平均油量升数` as `bi_11273946998078465677` , `bi_2282682891841018241`.`平均消费金额` as `bi_8288133923748336711` , `bi_2282682891841018241`.`平均折扣金额` as `bi_4970043801986327351` , `bi_2282682891841018241`.`平均余额` as `bi_8381900821794444625` , `bi_2282682891841018241`.`日均消费笔数` as `bi_10723048596585302054` , `bi_2282682891841018241`.`日均消费金额` as `bi_41819982784080953` , `bi_2282682891841018241`.`单日消费次数过多次数` as `bi_12112238727142840682` , `bi_2282682891841018241`.`不记名卡夜间消费总次数` as `bi_3938683413919446579` , `bi_2282682891841018241`.`不记名卡夜间消费总金额` as `bi_12562378023438062621` , `bi_2282682891841018241`.`日均夜间消费笔数` as `bi_6200430593887269742` , `bi_2282682891841018241`.`日均夜间消费金额` as `bi_1689351619663764928` , `bi_2282682891841018241`.`单日夜间消费次数过多次数` as `bi_12909975068497935338` , `bi_2282682891841018241`.`睡眠次数` as `bi_11007498412015863178` , `bi_2282682891841018241`.`是否仍在睡眠` as `bi_12482824553037098532` , `bi_2282682891841018241`.`不记名卡累计消费金额` as `bi_4601843349518591292` , `bi_2282682891841018241`.`不记名卡消费金额方差` as `bi_2924531414258932610` , `bi_2282682891841018241`.`不记名卡累计消费次数` as `bi_5870083467319809789` , `bi_2282682891841018241`.`不记名卡消费金额为小数次数` as `bi_3842164172086352148` , `bi_2282682891841018241`.`不记名卡消费过油品类型数量` as `bi_806870660964728186` , `bi_2282682891841018241`.`消费过汽油品类型数量636841632` as `bi_556036179544267082` , `bi_2282682891841018241`.`不记名卡汽油消费次数占比` as `bi_1068488302117352384` , `bi_2282682891841018241`.`汽油单笔高额消费次数_1368620500` as `bi_8356278071803173785` , `bi_2282682891841018241`.`不记名卡柴油消费次数占比` as `bi_5766421841800396638` , `bi_2282682891841018241`.`不记名卡天然气消费次数占比` as `bi_14290961476284126012` , `bi_2282682891841018241`.`ic卡大额非油消费次数` as `bi_992601592685606614` , `bi_2282682891841018241`.`非油累计消费金额` as `bi_8276717807170841059` , `bi_2282682891841018241`.`非油与成品油消费金额比例` as `bi_14967514132684380162` , `bi_2282682891841018241`.`不记名卡累计充值金额` as `bi_11701916747493263994` , `bi_2282682891841018241`.`单日充值次数过多次数` as `bi_16449755606537913494` , `bi_2282682891841018241`.`即消费且余额低的次数831743621` as `bi_12225443660237330283` , `bi_2282682891841018241`.`同一班次消费的次数` as `bi_5256996930125776142` , `bi_2282682891841018241`.`密码重置次数` as `bi_8414722834803604324` , `bi_2282682891841018241`.`笔折扣额的消费的次数_2085032453` as `bi_10212944947192418963` , `bi_2282682891841018241`.`余额充足时充钱的次数1957627260` as `bi_2466479945894447936` , `bi_2282682891841018241`.`是否曾频繁转账` as `bi_14279744686847475029` , `bi_2282682891841018241`.`是否异常加油卡` as `bi_1040490846059638232` , `bi_2282682891841018241`.`单位名称` as `bi_10101021918568318220` , `bi_2282682891841018241`.`所属` as `bi_13138972180237352292` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_2282682891841018241`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_10651599939693506386` , TRIM(`bi_2282682891841018241`.`交易主要站点`) as `bi_13164579150965645243`   from (select   `bi_11409236811878669265`.`帐号` as `帐号` , `bi_11409236811878669265`.`卡号` as `卡号` , `bi_11409236811878669265`.`卡类型描述` as `卡类型描述` , `bi_11409236811878669265`.`是否为副卡` as `是否为副卡` , `bi_11409236811878669265`.`交易主要站点` as `交易主要站点` , `bi_11409236811878669265`.`不记名卡消费过加油站站点数量` as `消费过加油站站点数量_1692137484` , `bi_11409236811878669265`.`交易类型描述` as `交易类型描述` , `bi_11409236811878669265`.`商品类型` as `商品类型` , `bi_11409236811878669265`.`商品类型描述` as `商品类型描述` , `bi_11409236811878669265`.`发卡单位` as `发卡单位` , `bi_11409236811878669265`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `bi_11409236811878669265`.`首次交易日期` as `首次交易日期` , `bi_11409236811878669265`.`最近交易日期` as `最近交易日期` , `bi_11409236811878669265`.`平均油量升数` as `平均油量升数` , `bi_11409236811878669265`.`平均消费金额` as `平均消费金额` , `bi_11409236811878669265`.`平均折扣金额` as `平均折扣金额` , `bi_11409236811878669265`.`平均余额` as `平均余额` , `bi_11409236811878669265`.`日均消费笔数` as `日均消费笔数` , `bi_11409236811878669265`.`日均消费金额` as `日均消费金额` , `bi_11409236811878669265`.`单日消费次数过多次数` as `单日消费次数过多次数` , `bi_11409236811878669265`.`不记名卡夜间消费总次数` as `不记名卡夜间消费总次数` , `bi_11409236811878669265`.`不记名卡夜间消费总金额` as `不记名卡夜间消费总金额` , `bi_11409236811878669265`.`日均夜间消费笔数` as `日均夜间消费笔数` , `bi_11409236811878669265`.`日均夜间消费金额` as `日均夜间消费金额` , `bi_11409236811878669265`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `bi_11409236811878669265`.`睡眠次数` as `睡眠次数` , `bi_11409236811878669265`.`是否仍在睡眠` as `是否仍在睡眠` , `bi_11409236811878669265`.`不记名卡累计消费金额` as `不记名卡累计消费金额` , `bi_11409236811878669265`.`不记名卡消费金额方差` as `不记名卡消费金额方差` , `bi_11409236811878669265`.`不记名卡累计消费次数` as `不记名卡累计消费次数` , `bi_11409236811878669265`.`不记名卡消费金额为小数次数` as `不记名卡消费金额为小数次数` , `bi_11409236811878669265`.`不记名卡消费过油品类型数量` as `不记名卡消费过油品类型数量` , `bi_11409236811878669265`.`不记名卡消费过汽油品类型数量` as `消费过汽油品类型数量636841632` , `bi_11409236811878669265`.`不记名卡汽油消费次数占比` as `不记名卡汽油消费次数占比` , `bi_11409236811878669265`.`不记名卡汽油单笔高额消费次数` as `汽油单笔高额消费次数_1368620500` , `bi_11409236811878669265`.`不记名卡柴油消费次数占比` as `不记名卡柴油消费次数占比` , `bi_11409236811878669265`.`不记名卡天然气消费次数占比` as `不记名卡天然气消费次数占比` , `bi_11409236811878669265`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `bi_11409236811878669265`.`非油累计消费金额` as `非油累计消费金额` , `bi_11409236811878669265`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `bi_11409236811878669265`.`不记名卡累计充值金额` as `不记名卡累计充值金额` , `bi_11409236811878669265`.`单日充值次数过多次数` as `单日充值次数过多次数` , `bi_11409236811878669265`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `bi_11409236811878669265`.`同一班次消费的次数` as `同一班次消费的次数` , `bi_11409236811878669265`.`密码重置次数` as `密码重置次数` , `bi_11409236811878669265`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `bi_11409236811878669265`.`不记名卡余额充足时充钱的次数` as `余额充足时充钱的次数1957627260` , `bi_11409236811878669265`.`是否曾频繁转账` as `是否曾频繁转账` , `bi_11409236811878669265`.`是否异常加油卡` as `是否异常加油卡` , `bi_11409236811878669265`.`单位名称` as `单位名称` , `bi_11409236811878669265`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`不记名卡消费过加油站站点数量` as `不记名卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`不记名卡夜间消费总次数` as `不记名卡夜间消费总次数`,`不记名卡夜间消费总金额` as `不记名卡夜间消费总金额`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`不记名卡累计消费金额` as `不记名卡累计消费金额`,`不记名卡消费金额方差` as `不记名卡消费金额方差`,`不记名卡累计消费次数` as `不记名卡累计消费次数`,`不记名卡消费金额为小数次数` as `不记名卡消费金额为小数次数`,`不记名卡消费过油品类型数量` as `不记名卡消费过油品类型数量`,`不记名卡消费过汽油品类型数量` as `不记名卡消费过汽油品类型数量`,`不记名卡汽油消费次数占比` as `不记名卡汽油消费次数占比`,`不记名卡汽油单笔高额消费次数` as `不记名卡汽油单笔高额消费次数`,`不记名卡柴油消费次数占比` as `不记名卡柴油消费次数占比`,`不记名卡天然气消费次数占比` as `不记名卡天然气消费次数占比`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`不记名卡累计充值金额` as `不记名卡累计充值金额`,`单日充值次数过多次数` as `单日充值次数过多次数`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`不记名卡余额充足时充钱的次数` as `不记名卡余额充足时充钱的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`不记名卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`不记名卡夜间消费总次数`,`不记名卡夜间消费总金额`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`不记名卡累计消费金额`,`不记名卡消费金额方差`,`不记名卡累计消费次数`,`不记名卡消费金额为小数次数`,`不记名卡消费过油品类型数量`,`不记名卡消费过汽油品类型数量`,`不记名卡汽油消费次数占比`,`不记名卡汽油单笔高额消费次数`,`不记名卡柴油消费次数占比`,`不记名卡天然气消费次数占比`,`ic卡大额非油消费次数`,`非油累计消费金额`,`非油与成品油消费金额比例`,`不记名卡累计充值金额`,`单日充值次数过多次数`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`不记名卡余额充足时充钱的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,     
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `不记名卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`, 
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`, 
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`,
       `单日消费次数过多次数`, 
       `不记名卡夜间消费总次数`,
       `不记名卡夜间消费总金额`,
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`, 
       `睡眠次数`,
       `是否仍在睡眠`,
       `不记名卡累计消费金额`,
       `加油卡消费金额方差` `不记名卡消费金额方差`,
       `不记名卡累计消费次数`,
       `加油卡消费金额为小数次数` `不记名卡消费金额为小数次数`,
       `不记名卡消费过油品类型数量`,
       `不记名卡消费过汽油品类型数量`,
       `不记名卡汽油消费次数占比`,
       `不记名卡汽油单笔高额消费次数`,
       `不记名卡柴油消费次数占比`,
       `不记名卡天然气消费次数占比`,
       `IC卡大额非油消费次数`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `不记名卡累计充值金额`,
       `单日充值次数过多次数`, 
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `不记名卡余额充足时充钱的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM DW04_SJFX.APP_AUAP_YK_NN) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `bi_11409236811878669265`  
     ) `bi_2282682891841018241`
      limit 1200001 
I0825 11:46:21.438758 49758 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:46:21.439286 49758 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:46:21.439862 49758 coordinator.cc:349] starting execution on 2 backends for query_id=b446a03549407cc6:52eef85000000000
I0825 11:46:21.441484 45240 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=b446a03549407cc6:52eef85000000000
I0825 11:46:21.441668 45240 query-exec-mgr.cc:46] StartQueryFInstances() query_id=b446a03549407cc6:52eef85000000000 coord=e4bdhpp025:22000
I0825 11:46:21.441730 45240 query-state.cc:178] Buffer pool limit for b446a03549407cc6:52eef85000000000: 819200000
I0825 11:46:21.441823 45240 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query b446a03549407cc6:52eef85000000000
I0825 11:46:21.442099 49851 query-state.cc:300] StartFInstances(): query_id=b446a03549407cc6:52eef85000000000 #instances=1
I0825 11:46:21.442361 49851 query-state.cc:313] descriptor table for query=b446a03549407cc6:52eef85000000000
tuples:
Tuple(id=0 size=583 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=576 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=576 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=STRING col_path=[10] offset=32 null=(offset=576 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[48] offset=48 null=(offset=576 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=STRING col_path=[39] offset=64 null=(offset=576 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=BIGINT col_path=[29] offset=352 null=(offset=578 mask=40) slot_idx=22 field_idx=-1), Slot(id=6 type=STRING col_path=[11] offset=80 null=(offset=576 mask=20) slot_idx=5 field_idx=-1), Slot(id=7 type=STRING col_path=[12] offset=96 null=(offset=576 mask=40) slot_idx=6 field_idx=-1), Slot(id=8 type=STRING col_path=[13] offset=112 null=(offset=576 mask=80) slot_idx=7 field_idx=-1), Slot(id=9 type=STRING col_path=[38] offset=128 null=(offset=577 mask=1) slot_idx=8 field_idx=-1), Slot(id=10 type=STRING col_path=[43] offset=144 null=(offset=577 mask=2) slot_idx=9 field_idx=-1), Slot(id=11 type=TIMESTAMP col_path=[15] offset=160 null=(offset=577 mask=4) slot_idx=10 field_idx=-1), Slot(id=12 type=TIMESTAMP col_path=[16] offset=176 null=(offset=577 mask=8) slot_idx=11 field_idx=-1), Slot(id=13 type=DECIMAL(16,2) col_path=[2] offset=360 null=(offset=578 mask=80) slot_idx=23 field_idx=-1), Slot(id=14 type=DECIMAL(17,2) col_path=[3] offset=368 null=(offset=579 mask=1) slot_idx=24 field_idx=-1), Slot(id=15 type=DECIMAL(17,2) col_path=[4] offset=376 null=(offset=579 mask=2) slot_idx=25 field_idx=-1), Slot(id=16 type=DECIMAL(17,2) col_path=[5] offset=384 null=(offset=579 mask=4) slot_idx=26 field_idx=-1), Slot(id=17 type=DOUBLE col_path=[6] offset=392 null=(offset=579 mask=8) slot_idx=27 field_idx=-1), Slot(id=18 type=DECIMAL(27,2) col_path=[7] offset=192 null=(offset=577 mask=10) slot_idx=12 field_idx=-1), Slot(id=19 type=BIGINT col_path=[25] offset=400 null=(offset=579 mask=10) slot_idx=28 field_idx=-1), Slot(id=20 type=BIGINT col_path=[27] offset=408 null=(offset=579 mask=20) slot_idx=29 field_idx=-1), Slot(id=21 type=DECIMAL(26,2) col_path=[28] offset=208 null=(offset=577 mask=20) slot_idx=13 field_idx=-1), Slot(id=22 type=DOUBLE col_path=[8] offset=416 null=(offset=579 mask=40) slot_idx=30 field_idx=-1), Slot(id=23 type=DECIMAL(27,2) col_path=[9] offset=224 null=(offset=577 mask=40) slot_idx=14 field_idx=-1), Slot(id=24 type=BIGINT col_path=[26] offset=424 null=(offset=579 mask=80) slot_idx=31 field_idx=-1), Slot(id=25 type=BIGINT col_path=[17] offset=432 null=(offset=580 mask=1) slot_idx=32 field_idx=-1), Slot(id=26 type=INT col_path=[18] offset=568 null=(offset=582 mask=2) slot_idx=49 field_idx=-1), Slot(id=27 type=DECIMAL(26,2) col_path=[41] offset=240 null=(offset=577 mask=80) slot_idx=15 field_idx=-1), Slot(id=28 type=DOUBLE col_path=[49] offset=440 null=(offset=580 mask=2) slot_idx=33 field_idx=-1), Slot(id=29 type=BIGINT col_path=[42] offset=448 null=(offset=580 mask=4) slot_idx=34 field_idx=-1), Slot(id=30 type=BIGINT col_path=[44] offset=456 null=(offset=580 mask=8) slot_idx=35 field_idx=-1), Slot(id=31 type=BIGINT col_path=[21] offset=464 null=(offset=580 mask=10) slot_idx=36 field_idx=-1), Slot(id=32 type=BIGINT col_path=[22] offset=472 null=(offset=580 mask=20) slot_idx=37 field_idx=-1), Slot(id=33 type=DOUBLE col_path=[45] offset=480 null=(offset=580 mask=40) slot_idx=38 field_idx=-1), Slot(id=34 type=BIGINT col_path=[20] offset=488 null=(offset=580 mask=80) slot_idx=39 field_idx=-1), Slot(id=35 type=DOUBLE col_path=[46] offset=496 null=(offset=581 mask=1) slot_idx=40 field_idx=-1), Slot(id=36 type=DOUBLE col_path=[47] offset=504 null=(offset=581 mask=2) slot_idx=41 field_idx=-1), Slot(id=37 type=BIGINT col_path=[19] offset=512 null=(offset=581 mask=4) slot_idx=42 field_idx=-1), Slot(id=38 type=DECIMAL(26,2) col_path=[30] offset=256 null=(offset=578 mask=1) slot_idx=16 field_idx=-1), Slot(id=39 type=DECIMAL(31,4) col_path=[31] offset=272 null=(offset=578 mask=2) slot_idx=17 field_idx=-1), Slot(id=40 type=DECIMAL(26,2) col_path=[23] offset=288 null=(offset=578 mask=4) slot_idx=18 field_idx=-1), Slot(id=41 type=BIGINT col_path=[24] offset=520 null=(offset=581 mask=8) slot_idx=43 field_idx=-1), Slot(id=42 type=BIGINT col_path=[32] offset=528 null=(offset=581 mask=10) slot_idx=44 field_idx=-1), Slot(id=43 type=BIGINT col_path=[33] offset=536 null=(offset=581 mask=20) slot_idx=45 field_idx=-1), Slot(id=44 type=BIGINT col_path=[40] offset=544 null=(offset=581 mask=40) slot_idx=46 field_idx=-1), Slot(id=45 type=BIGINT col_path=[34] offset=552 null=(offset=581 mask=80) slot_idx=47 field_idx=-1), Slot(id=46 type=BIGINT col_path=[35] offset=560 null=(offset=582 mask=1) slot_idx=48 field_idx=-1), Slot(id=47 type=INT col_path=[36] offset=572 null=(offset=582 mask=4) slot_idx=50 field_idx=-1), Slot(id=48 type=STRING col_path=[50] offset=304 null=(offset=578 mask=8) slot_idx=19 field_idx=-1), Slot(id=49 type=STRING col_path=[14] offset=320 null=(offset=578 mask=10) slot_idx=20 field_idx=-1), Slot(id=50 type=STRING col_path=[37] offset=336 null=(offset=578 mask=20) slot_idx=21 field_idx=-1)] tuple_path=[])
I0825 11:46:21.442517 49758 coordinator.cc:362] started execution on 2 backends for query_id=b446a03549407cc6:52eef85000000000
I0825 11:46:21.442595 49852 query-state.cc:395] Executing instance. instance_id=b446a03549407cc6:52eef85000000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=1 #in-flight=4
I0825 11:46:21.443346 49851 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=b446a03549407cc6:52eef85000000000 refcnt=3
I0825 11:46:21.445003 49758 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xc6|@I5\xa0F\xb4\x00\x00\x00\x00P\xf8\xeeR",
      02: secret (string) = "\xc6|@I5\xa0F\xb4\x00\x00\x00\x00P\xf8\xeeR",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:21.902367 49758 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=b446a03549407cc6:52eef85000000000
I0825 11:46:21.905648 49758 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[53] {
      [0] = TColumnDesc {
        01: columnName (string) = "bi_15159864404575209771",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "bi_5176736373764729517",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "bi_18002650512820288522",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "bi_10070664717213612371",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "bi_17363467753723988445",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "bi_17559908322177175193",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "bi_30169237570504987",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 6,
      },
      [7] = TColumnDesc {
        01: columnName (string) = "bi_630186766851260751",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 7,
      },
      [8] = TColumnDesc {
        01: columnName (string) = "bi_15231137875792296164",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 8,
      },
      [9] = TColumnDesc {
        01: columnName (string) = "bi_15621164357820908518",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 9,
      },
      [10] = TColumnDesc {
        01: columnName (string) = "bi_12117277212538675021",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 10,
      },
      [11] = TColumnDesc {
        01: columnName (string) = "bi_6646908465420298805",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 11,
      },
      [12] = TColumnDesc {
        01: columnName (string) = "bi_13530833546549329347",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 12,
      },
      [13] = TColumnDesc {
        01: columnName (string) = "bi_11273946998078465677",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 16,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 13,
      },
      [14] = TColumnDesc {
        01: columnName (string) = "bi_8288133923748336711",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 14,
      },
      [15] = TColumnDesc {
        01: columnName (string) = "bi_4970043801986327351",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 15,
      },
      [16] = TColumnDesc {
        01: columnName (string) = "bi_8381900821794444625",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 16,
      },
      [17] = TColumnDesc {
        01: columnName (string) = "bi_10723048596585302054",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 17,
      },
      [18] = TColumnDesc {
        01: columnName (string) = "bi_41819982784080953",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 27,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 18,
      },
      [19] = TColumnDesc {
        01: columnName (string) = "bi_12112238727142840682",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 19,
      },
      [20] = TColumnDesc {
        01: columnName (string) = "bi_3938683413919446579",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 20,
      },
      [21] = TColumnDesc {
        01: columnName (string) = "bi_12562378023438062621",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 21,
      },
      [22] = TColumnDesc {
        01: columnName (string) = "bi_6200430593887269742",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 22,
      },
      [23] = TColumnDesc {
        01: columnName (string) = "bi_1689351619663764928",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 27,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 23,
      },
      [24] = TColumnDesc {
        01: columnName (string) = "bi_12909975068497935338",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 24,
      },
      [25] = TColumnDesc {
        01: columnName (string) = "bi_11007498412015863178",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 25,
      },
      [26] = TColumnDesc {
        01: columnName (string) = "bi_12482824553037098532",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 26,
      },
      [27] = TColumnDesc {
        01: columnName (string) = "bi_4601843349518591292",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 27,
      },
      [28] = TColumnDesc {
        01: columnName (string) = "bi_2924531414258932610",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 28,
      },
      [29] = TColumnDesc {
        01: columnName (string) = "bi_5870083467319809789",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 29,
      },
      [30] = TColumnDesc {
        01: columnName (string) = "bi_3842164172086352148",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 30,
      },
      [31] = TColumnDesc {
        01: columnName (string) = "bi_806870660964728186",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 31,
      },
      [32] = TColumnDesc {
        01: columnName (string) = "bi_556036179544267082",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 32,
      },
      [33] = TColumnDesc {
        01: columnName (string) = "bi_1068488302117352384",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 33,
      },
      [34] = TColumnDesc {
        01: columnName (string) = "bi_8356278071803173785",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 34,
      },
      [35] = TColumnDesc {
        01: columnName (string) = "bi_5766421841800396638",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 35,
      },
      [36] = TColumnDesc {
        01: columnName (string) = "bi_14290961476284126012",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 36,
      },
      [37] = TColumnDesc {
        01: columnName (string) = "bi_992601592685606614",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 37,
      },
      [38] = TColumnDesc {
        01: columnName (string) = "bi_8276717807170841059",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 38,
      },
      [39] = TColumnDesc {
        01: columnName (string) = "bi_14967514132684380162",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 31,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 4,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 39,
      },
      [40] = TColumnDesc {
        01: columnName (string) = "bi_11701916747493263994",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 40,
      },
      [41] = TColumnDesc {
        01: columnName (string) = "bi_16449755606537913494",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 41,
      },
      [42] = TColumnDesc {
        01: columnName (string) = "bi_12225443660237330283",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 42,
      },
      [43] = TColumnDesc {
        01: columnName (string) = "bi_5256996930125776142",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 43,
      },
      [44] = TColumnDesc {
        01: columnName (string) = "bi_8414722834803604324",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 44,
      },
      [45] = TColumnDesc {
        01: columnName (string) = "bi_10212944947192418963",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 45,
      },
      [46] = TColumnDesc {
        01: columnName (string) = "bi_2466479945894447936",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 46,
      },
      [47] = TColumnDesc {
        01: columnName (string) = "bi_14279744686847475029",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 47,
      },
      [48] = TColumnDesc {
        01: columnName (string) = "bi_1040490846059638232",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 48,
      },
      [49] = TColumnDesc {
        01: columnName (string) = "bi_10101021918568318220",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 49,
      },
      [50] = TColumnDesc {
        01: columnName (string) = "bi_13138972180237352292",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 50,
      },
      [51] = TColumnDesc {
        01: columnName (string) = "bi_10651599939693506386",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 51,
      },
      [52] = TColumnDesc {
        01: columnName (string) = "bi_13164579150965645243",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 52,
      },
    },
  },
}
I0825 11:46:22.250684 48242 coordinator.cc:689] Backend completed:  host=e4bdhpp018:22000 remaining=1 query_id=2b4244d880a0537b:216c86000000000
I0825 11:46:22.251256 48242 coordinator-backend-state.cc:226] query_id=2b4244d880a0537b:216c86000000000: first in-progress backend: e4bdhpp025:22000
I0825 11:46:22.577654 46259 query-state.cc:403] Instance completed. instance_id=2b4244d880a0537b:216c86000000002 #in-flight=3 status=OK
I0825 11:46:22.577811 46219 coordinator.cc:522] Coordinator waiting for backends to finish, 1 remaining. query_id=2b4244d880a0537b:216c86000000000
I0825 11:46:22.577947 46259 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=3
I0825 11:46:22.578600 46219 coordinator.cc:527] All backends finished successfully. query_id=2b4244d880a0537b:216c86000000000
I0825 11:46:22.578678 46219 coordinator.cc:783] Release admission control resources for query_id=2b4244d880a0537b:216c86000000000
I0825 11:46:22.578784 46258 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=2b4244d880a0537b:216c86000000000, node=1
I0825 11:46:22.578882 46258 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=2b4244d880a0537b:216c86000000000 node_id=1
I0825 11:46:22.578961 46258 query-state.cc:403] Instance completed. instance_id=2b4244d880a0537b:216c86000000000 #in-flight=2 status=OK
I0825 11:46:22.579023 46258 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=2
I0825 11:46:22.583186 46219 impala-hs2-server.cc:683] CloseOperation(): query_id=2b4244d880a0537b:216c86000000000
I0825 11:46:22.583300 46219 impala-server.cc:1015] UnregisterQuery(): query_id=2b4244d880a0537b:216c86000000000
I0825 11:46:22.583338 46219 impala-server.cc:1102] Cancel(): query_id=2b4244d880a0537b:216c86000000000
I0825 11:46:22.583375 46219 coordinator.cc:629] Cancel() query_id=2b4244d880a0537b:216c86000000000
I0825 11:46:22.583407 46219 coordinator.cc:639] CancelBackends() query_id=2b4244d880a0537b:216c86000000000, tried to cancel 0 backends
I0825 11:46:22.588302 46219 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=2b4244d880a0537b:216c86000000000 refcnt=1
I0825 11:46:22.595760 46219 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x85!3+ZXI\x13\xacJ?\xd5\x14\xe8\xf2T",
      02: secret (string) = "\xbc\xd2\xd4\xafu\x87@\f\x99d\xe8\xe36\nz\xe5",
    },
  },
}
I0825 11:46:22.596311 46219 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:57270 closed, closing 2 associated session(s)
I0825 11:46:23.970173 49688 query-exec-mgr.cc:95] QueryState: query_id=b446a03549407cc6:52eef85000000000 refcnt=3
I0825 11:46:23.970484 49688 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=b446a03549407cc6:52eef85000000000 refcnt=3
I0825 11:46:24.268573 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:46:24.269110 49894 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:46:24.269806 49894 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "r\xb1\x84\x12t\x19A\xe1\xa5\xd0t\xfd\x8d1\xef\x17",
      02: secret (string) = "\x1b\x02\x8f\xed\xfe\xc5L\xa8\xa3\tQ\x021\x1cK\n",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:46:24.285413 49894 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "r\xb1\x84\x12t\x19A\xe1\xa5\xd0t\xfd\x8d1\xef\x17",
      02: secret (string) = "\x1b\x02\x8f\xed\xfe\xc5L\xa8\xa3\tQ\x021\x1cK\n",
    },
  },
}
I0825 11:46:24.286023 49894 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:48934 closed, closing 1 associated session(s)
I0825 11:46:24.306452 46321 query-state.cc:403] Instance completed. instance_id=5d455d25f184998f:3a98a1ed00000002 #in-flight=1 status=OK
I0825 11:46:24.306502 46321 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5d455d25f184998f:3a98a1ed00000000 refcnt=1
I0825 11:46:25.051194 44439 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=714ba4da209a8519:5f10c97500000000
I0825 11:46:25.051455 44439 query-exec-mgr.cc:46] StartQueryFInstances() query_id=714ba4da209a8519:5f10c97500000000 coord=e4bdhpp023:22000
I0825 11:46:25.051573 44439 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:25.051599 44439 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:25.051628 44439 query-state.cc:178] Buffer pool limit for 714ba4da209a8519:5f10c97500000000: 6871947673
I0825 11:46:25.051687 44439 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 714ba4da209a8519:5f10c97500000000
I0825 11:46:25.051846 49902 query-state.cc:300] StartFInstances(): query_id=714ba4da209a8519:5f10c97500000000 #instances=1
I0825 11:46:25.052084 49902 query-state.cc:313] descriptor table for query=714ba4da209a8519:5f10c97500000000
tuples:
Tuple(id=3 size=234 slots=[Slot(id=65 type=STRING col_path=[20] offset=0 null=(offset=232 mask=1) slot_idx=0 field_idx=-1), Slot(id=66 type=STRING col_path=[20] offset=16 null=(offset=232 mask=2) slot_idx=1 field_idx=-1), Slot(id=67 type=DECIMAL(16,2) col_path=[16] offset=224 null=(offset=233 mask=40) slot_idx=14 field_idx=-1), Slot(id=68 type=STRING col_path=[22] offset=32 null=(offset=232 mask=4) slot_idx=2 field_idx=-1), Slot(id=69 type=STRING col_path=[22] offset=48 null=(offset=232 mask=8) slot_idx=3 field_idx=-1), Slot(id=70 type=STRING col_path=[23] offset=64 null=(offset=232 mask=10) slot_idx=4 field_idx=-1), Slot(id=71 type=STRING col_path=[23] offset=80 null=(offset=232 mask=20) slot_idx=5 field_idx=-1), Slot(id=72 type=STRING col_path=[2] offset=96 null=(offset=232 mask=40) slot_idx=6 field_idx=-1), Slot(id=73 type=STRING col_path=[2] offset=112 null=(offset=232 mask=80) slot_idx=7 field_idx=-1), Slot(id=74 type=STRING col_path=[12] offset=128 null=(offset=233 mask=1) slot_idx=8 field_idx=-1), Slot(id=75 type=STRING col_path=[12] offset=144 null=(offset=233 mask=2) slot_idx=9 field_idx=-1), Slot(id=76 type=STRING col_path=[10] offset=160 null=(offset=233 mask=4) slot_idx=10 field_idx=-1), Slot(id=77 type=STRING col_path=[10] offset=176 null=(offset=233 mask=8) slot_idx=11 field_idx=-1), Slot(id=78 type=STRING col_path=[25] offset=192 null=(offset=233 mask=10) slot_idx=12 field_idx=-1), Slot(id=79 type=STRING col_path=[25] offset=208 null=(offset=233 mask=20) slot_idx=13 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=202 slots=[Slot(id=2 type=STRING col_path=[2] offset=0 null=(offset=200 mask=1) slot_idx=0 field_idx=-1), Slot(id=4 type=TIMESTAMP col_path=[4] offset=16 null=(offset=200 mask=2) slot_idx=1 field_idx=-1), Slot(id=6 type=STRING col_path=[6] offset=32 null=(offset=200 mask=4) slot_idx=2 field_idx=-1), Slot(id=7 type=STRING col_path=[7] offset=48 null=(offset=200 mask=8) slot_idx=3 field_idx=-1), Slot(id=8 type=STRING col_path=[8] offset=64 null=(offset=200 mask=10) slot_idx=4 field_idx=-1), Slot(id=10 type=STRING col_path=[10] offset=80 null=(offset=200 mask=20) slot_idx=5 field_idx=-1), Slot(id=12 type=STRING col_path=[12] offset=96 null=(offset=200 mask=40) slot_idx=6 field_idx=-1), Slot(id=14 type=DECIMAL(16,3) col_path=[14] offset=176 null=(offset=201 mask=8) slot_idx=11 field_idx=-1), Slot(id=15 type=DECIMAL(16,2) col_path=[15] offset=184 null=(offset=201 mask=10) slot_idx=12 field_idx=-1), Slot(id=16 type=DECIMAL(16,2) col_path=[16] offset=192 null=(offset=201 mask=20) slot_idx=13 field_idx=-1), Slot(id=20 type=STRING col_path=[20] offset=112 null=(offset=200 mask=80) slot_idx=7 field_idx=-1), Slot(id=22 type=STRING col_path=[22] offset=128 null=(offset=201 mask=1) slot_idx=8 field_idx=-1), Slot(id=23 type=STRING col_path=[23] offset=144 null=(offset=201 mask=2) slot_idx=9 field_idx=-1), Slot(id=25 type=STRING col_path=[25] offset=160 null=(offset=201 mask=4) slot_idx=10 field_idx=-1)] tuple_path=[])
I0825 11:46:25.052178 49904 query-state.cc:395] Executing instance. instance_id=714ba4da209a8519:5f10c97500000002 fragment_idx=1 per_fragment_instance_idx=1 coord_state_idx=4 #in-flight=2
I0825 11:46:25.052330 49904 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '714ba4da209a8519:5f10c97500000002': 190
I0825 11:46:25.053048 49902 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=714ba4da209a8519:5f10c97500000000 refcnt=2
W0825 11:46:25.270154 43828 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:46:25.270632 43833 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:46:25.271198 43831 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:46:25.271517 43827 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:46:25.271728 43830 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:46:25.277671 43832 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:46:25.278024 43834 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:46:25.278227 43828 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064312_BP-1820042964-11.11.206.232-1548063025113
W0825 11:46:25.278412 43833 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064223_BP-1820042964-11.11.206.232-1548063025113
W0825 11:46:25.278592 43831 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064698_BP-1820042964-11.11.206.232-1548063025113
W0825 11:46:25.278736 43827 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064589_BP-1820042964-11.11.206.232-1548063025113
W0825 11:46:25.278899 43830 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064597_BP-1820042964-11.11.206.232-1548063025113
W0825 11:46:25.279070 43832 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064614_BP-1820042964-11.11.206.232-1548063025113
W0825 11:46:25.279187 43834 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064427_BP-1820042964-11.11.206.232-1548063025113
I0825 11:46:25.390173 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:46:25.390978 50047 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:46:25.392225 50047 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x16\xdd\x15i\xdb4B\xea\xb5n\x11\x83\xd9\xdf,\x97",
      02: secret (string) = "a4\xaa\x9b!\x8dJ\xf1\x9b\xdbk9\x1cw\x7f\x9c",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:46:25.392861 50047 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x16\xdd\x15i\xdb4B\xea\xb5n\x11\x83\xd9\xdf,\x97",
      02: secret (string) = "a4\xaa\x9b!\x8dJ\xf1\x9b\xdbk9\x1cw\x7f\x9c",
    },
  },
}
I0825 11:46:25.393556 50047 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:46:25.394373 50047 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "k2\xe7\x80\xf6\xafDf\xa6.\xd6/\xf6\r\xa0\x9b",
      02: secret (string) = "\x9b\x14bi;\xdbJI\xbdD\xda\xdc4\x00Pc",
    },
  },
  02: statement (string) = "USE dw01",
  04: runAsync (bool) = true,
}
I0825 11:46:25.394541 50047 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "k2\xe7\x80\xf6\xafDf\xa6.\xd6/\xf6\r\xa0\x9b",
      02: secret (string) = "\x9b\x14bi;\xdbJI\xbdD\xda\xdc4\x00Pc",
    },
  },
  02: statement (string) = "USE dw01",
  04: runAsync (bool) = true,
}
I0825 11:46:25.395639 50047 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:25.402702 50047 Frontend.java:935] Analyzing query: USE dw01
I0825 11:46:25.406415 50047 Frontend.java:947] Analysis finished.
I0825 11:46:25.448451 50047 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xf8\x80\x1b7{\x05O<\x00\x00\x00\x00\xb5\x83g\xcc",
      02: secret (string) = "\xf8\x80\x1b7{\x05O<\x00\x00\x00\x00\xb5\x83g\xcc",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:46:25.449645 50047 impala-hs2-server.cc:683] CloseOperation(): query_id=3c4f057b371b80f8:cc6783b500000000
I0825 11:46:25.449738 50047 impala-server.cc:1015] UnregisterQuery(): query_id=3c4f057b371b80f8:cc6783b500000000
I0825 11:46:25.449782 50047 impala-server.cc:1102] Cancel(): query_id=3c4f057b371b80f8:cc6783b500000000
I0825 11:46:25.450634 50047 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "k2\xe7\x80\xf6\xafDf\xa6.\xd6/\xf6\r\xa0\x9b",
      02: secret (string) = "\x9b\x14bi;\xdbJI\xbdD\xda\xdc4\x00Pc",
    },
  },
  02: statement (string) = "SET KrbUserName=apprc",
  04: runAsync (bool) = true,
}
I0825 11:46:25.450721 50047 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "k2\xe7\x80\xf6\xafDf\xa6.\xd6/\xf6\r\xa0\x9b",
      02: secret (string) = "\x9b\x14bi;\xdbJI\xbdD\xda\xdc4\x00Pc",
    },
  },
  02: statement (string) = "SET KrbUserName=apprc",
  04: runAsync (bool) = true,
}
I0825 11:46:25.451191 50047 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:25.454109 50047 Frontend.java:935] Analyzing query: SET KrbUserName=apprc
I0825 11:46:25.454409 50047 Frontend.java:947] Analysis finished.
I0825 11:46:25.604583 50047 status.cc:125] Invalid query option: KrbUserName
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:25.606457 50047 impala-server.cc:1015] UnregisterQuery(): query_id=954b51a9f0275870:ef6947e800000000
I0825 11:46:25.606530 50047 impala-server.cc:1102] Cancel(): query_id=954b51a9f0275870:ef6947e800000000
I0825 11:46:25.607729 50047 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "k2\xe7\x80\xf6\xafDf\xa6.\xd6/\xf6\r\xa0\x9b",
      02: secret (string) = "\x9b\x14bi;\xdbJI\xbdD\xda\xdc4\x00Pc",
    },
  },
  02: statement (string) = "SET alias=`bi_6749357856600458205`",
  04: runAsync (bool) = true,
}
I0825 11:46:25.607857 50047 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "k2\xe7\x80\xf6\xafDf\xa6.\xd6/\xf6\r\xa0\x9b",
      02: secret (string) = "\x9b\x14bi;\xdbJI\xbdD\xda\xdc4\x00Pc",
    },
  },
  02: statement (string) = "SET alias=`bi_6749357856600458205`",
  04: runAsync (bool) = true,
}
I0825 11:46:25.608256 50047 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:25.626447 50047 Frontend.java:935] Analyzing query: SET alias=`bi_6749357856600458205`
I0825 11:46:25.626868 50047 Frontend.java:947] Analysis finished.
I0825 11:46:25.880584 50047 status.cc:125] Invalid query option: alias
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:25.880810 50047 impala-server.cc:1015] UnregisterQuery(): query_id=f4f11f1246c1eff:db11cc9700000000
I0825 11:46:25.880890 50047 impala-server.cc:1102] Cancel(): query_id=f4f11f1246c1eff:db11cc9700000000
I0825 11:46:25.882139 50047 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "k2\xe7\x80\xf6\xafDf\xa6.\xd6/\xf6\r\xa0\x9b",
      02: secret (string) = "\x9b\x14bi;\xdbJI\xbdD\xda\xdc4\x00Pc",
    },
  },
  02: statement (string) = "SET mem_limit=8g",
  04: runAsync (bool) = true,
}
I0825 11:46:25.882220 50047 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "k2\xe7\x80\xf6\xafDf\xa6.\xd6/\xf6\r\xa0\x9b",
      02: secret (string) = "\x9b\x14bi;\xdbJI\xbdD\xda\xdc4\x00Pc",
    },
  },
  02: statement (string) = "SET mem_limit=8g",
  04: runAsync (bool) = true,
}
I0825 11:46:25.882692 50047 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:25.886183 50047 Frontend.java:935] Analyzing query: SET mem_limit=8g
I0825 11:46:25.886478 50047 Frontend.java:947] Analysis finished.
I0825 11:46:25.886938 50047 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "xP\x04\x8esMA|\x00\x00\x00\x00\xf0\x93\xb0\"",
      02: secret (string) = "xP\x04\x8esMA|\x00\x00\x00\x00\xf0\x93\xb0\"",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:25.887785 50047 impala-hs2-server.cc:683] CloseOperation(): query_id=7c414d738e045078:22b093f000000000
I0825 11:46:25.887845 50047 impala-server.cc:1015] UnregisterQuery(): query_id=7c414d738e045078:22b093f000000000
I0825 11:46:25.887887 50047 impala-server.cc:1102] Cancel(): query_id=7c414d738e045078:22b093f000000000
I0825 11:46:25.888533 50047 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "k2\xe7\x80\xf6\xafDf\xa6.\xd6/\xf6\r\xa0\x9b",
      02: secret (string) = "\x9b\x14bi;\xdbJI\xbdD\xda\xdc4\x00Pc",
    },
  },
  02: statement (string) = "SET queryType=JDBC",
  04: runAsync (bool) = true,
}
I0825 11:46:25.888706 50047 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "k2\xe7\x80\xf6\xafDf\xa6.\xd6/\xf6\r\xa0\x9b",
      02: secret (string) = "\x9b\x14bi;\xdbJI\xbdD\xda\xdc4\x00Pc",
    },
  },
  02: statement (string) = "SET queryType=JDBC",
  04: runAsync (bool) = true,
}
I0825 11:46:25.889093 50047 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:25.892824 50047 Frontend.java:935] Analyzing query: SET queryType=JDBC
I0825 11:46:25.893110 50047 Frontend.java:947] Analysis finished.
I0825 11:46:26.341244 50047 status.cc:125] Invalid query option: queryType
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:26.341550 50047 impala-server.cc:1015] UnregisterQuery(): query_id=6c41c504cd6b274f:e73d094a00000000
I0825 11:46:26.341651 50047 impala-server.cc:1102] Cancel(): query_id=6c41c504cd6b274f:e73d094a00000000
I0825 11:46:26.343168 50047 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "k2\xe7\x80\xf6\xafDf\xa6.\xd6/\xf6\r\xa0\x9b",
      02: secret (string) = "\x9b\x14bi;\xdbJI\xbdD\xda\xdc4\x00Pc",
    },
  },
  02: statement (string) = "SET timeoutSeconds=1800",
  04: runAsync (bool) = true,
}
I0825 11:46:26.343361 50047 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "k2\xe7\x80\xf6\xafDf\xa6.\xd6/\xf6\r\xa0\x9b",
      02: secret (string) = "\x9b\x14bi;\xdbJI\xbdD\xda\xdc4\x00Pc",
    },
  },
  02: statement (string) = "SET timeoutSeconds=1800",
  04: runAsync (bool) = true,
}
I0825 11:46:26.344000 50047 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:26.349375 50047 Frontend.java:935] Analyzing query: SET timeoutSeconds=1800
I0825 11:46:26.349905 50047 Frontend.java:947] Analysis finished.
I0825 11:46:26.810616 50047 status.cc:125] Invalid query option: timeoutSeconds
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:26.813064 50047 impala-server.cc:1015] UnregisterQuery(): query_id=d84cf0b4f8155f21:81b4bd6000000000
I0825 11:46:26.813194 50047 impala-server.cc:1102] Cancel(): query_id=d84cf0b4f8155f21:81b4bd6000000000
I0825 11:46:26.814481 50047 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "k2\xe7\x80\xf6\xafDf\xa6.\xd6/\xf6\r\xa0\x9b",
      02: secret (string) = "\x9b\x14bi;\xdbJI\xbdD\xda\xdc4\x00Pc",
    },
  },
  02: statement (string) = "SET useSSL=false",
  04: runAsync (bool) = true,
}
I0825 11:46:26.814544 50047 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "k2\xe7\x80\xf6\xafDf\xa6.\xd6/\xf6\r\xa0\x9b",
      02: secret (string) = "\x9b\x14bi;\xdbJI\xbdD\xda\xdc4\x00Pc",
    },
  },
  02: statement (string) = "SET useSSL=false",
  04: runAsync (bool) = true,
}
I0825 11:46:26.814927 50047 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:26.818320 50047 Frontend.java:935] Analyzing query: SET useSSL=false
I0825 11:46:26.818559 50047 Frontend.java:947] Analysis finished.
I0825 11:46:27.001459 49705 query-exec-mgr.cc:95] QueryState: query_id=b446a03549407cc6:52eef85000000000 refcnt=3
I0825 11:46:27.001698 49705 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=b446a03549407cc6:52eef85000000000 refcnt=3
I0825 11:46:27.130820 50047 status.cc:125] Invalid query option: useSSL
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:27.131136 50047 impala-server.cc:1015] UnregisterQuery(): query_id=da4cba616095c149:feec3bd800000000
I0825 11:46:27.131249 50047 impala-server.cc:1102] Cancel(): query_id=da4cba616095c149:feec3bd800000000
I0825 11:46:27.132776 50047 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "k2\xe7\x80\xf6\xafDf\xa6.\xd6/\xf6\r\xa0\x9b",
      02: secret (string) = "\x9b\x14bi;\xdbJI\xbdD\xda\xdc4\x00Pc",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:46:27.132895 50047 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "k2\xe7\x80\xf6\xafDf\xa6.\xd6/\xf6\r\xa0\x9b",
      02: secret (string) = "\x9b\x14bi;\xdbJI\xbdD\xda\xdc4\x00Pc",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:46:27.133322 50047 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:27.136772 50047 Frontend.java:935] Analyzing query: DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`
I0825 11:46:27.137624 50047 Frontend.java:947] Analysis finished.
I0825 11:46:27.173964 50047 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "Z{8\x92\xd5JD*\x00\x00\x00\x00\xad\xf9]\xd0",
      02: secret (string) = "Z{8\x92\xd5JD*\x00\x00\x00\x00\xad\xf9]\xd0",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:27.175921 50047 impala-hs2-server.cc:683] CloseOperation(): query_id=2a444ad592387b5a:d05df9ad00000000
I0825 11:46:27.175972 50047 impala-server.cc:1015] UnregisterQuery(): query_id=2a444ad592387b5a:d05df9ad00000000
I0825 11:46:27.176043 50047 impala-server.cc:1102] Cancel(): query_id=2a444ad592387b5a:d05df9ad00000000
I0825 11:46:27.178309 50047 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "k2\xe7\x80\xf6\xafDf\xa6.\xd6/\xf6\r\xa0\x9b",
      02: secret (string) = "\x9b\x14bi;\xdbJI\xbdD\xda\xdc4\x00Pc",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:46:27.178393 50047 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "k2\xe7\x80\xf6\xafDf\xa6.\xd6/\xf6\r\xa0\x9b",
      02: secret (string) = "\x9b\x14bi;\xdbJI\xbdD\xda\xdc4\x00Pc",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:46:27.178786 50047 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:27.182487 50047 Frontend.java:935] Analyzing query: DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`
I0825 11:46:27.183542 50047 Frontend.java:947] Analysis finished.
I0825 11:46:27.229885 50047 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xaa\xde\x1b\x83|\xa9H\xf4\x00\x00\x00\x00\x9e\xa2B\xa7",
      02: secret (string) = "\xaa\xde\x1b\x83|\xa9H\xf4\x00\x00\x00\x00\x9e\xa2B\xa7",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:27.231681 50047 impala-hs2-server.cc:683] CloseOperation(): query_id=f448a97c831bdeaa:a742a29e00000000
I0825 11:46:27.231719 50047 impala-server.cc:1015] UnregisterQuery(): query_id=f448a97c831bdeaa:a742a29e00000000
I0825 11:46:27.231752 50047 impala-server.cc:1102] Cancel(): query_id=f448a97c831bdeaa:a742a29e00000000
I0825 11:46:27.233865 50047 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "k2\xe7\x80\xf6\xafDf\xa6.\xd6/\xf6\r\xa0\x9b",
      02: secret (string) = "\x9b\x14bi;\xdbJI\xbdD\xda\xdc4\x00Pc",
    },
  },
  02: statement (string) = "SELECT `temp`.`\xe9[...](2487)",
  04: runAsync (bool) = true,
}
I0825 11:46:27.233974 50047 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "k2\xe7\x80\xf6\xafDf\xa6.\xd6/\xf6\r\xa0\x9b",
      02: secret (string) = "\x9b\x14bi;\xdbJI\xbdD\xda\xdc4\x00Pc",
    },
  },
  02: statement (string) = "SELECT `temp`.`\xe9[...](2487)",
  04: runAsync (bool) = true,
}
I0825 11:46:27.234339 50047 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:27.237751 50047 Frontend.java:935] Analyzing query: SELECT `temp`.`采购订单类型`, `temp`.`采购订单日期`, `temp`.`商品类目描述`, `temp`.`订单金额_不含税`, `temp`.`是否完成交货`, `temp`.`该行是否被删除`, `temp`.`该行是否退货` FROM (SELECT `temp_sub_query_table`.`采购订单类型`, `temp_sub_query_table`.`采购订单日期`, `temp_sub_query_table`.`商品类目描述`, `temp_sub_query_table`.`订单金额_不含税`, `temp_sub_query_table`.`是否完成交货`, `temp_sub_query_table`.`该行是否被删除`, `temp_sub_query_table`.`该行是否退货` FROM (SELECT `APP_GSMS_HOS_CGDD`.`采购订单编号`, `APP_GSMS_HOS_CGDD`.`采购订单行项目`, `APP_GSMS_HOS_CGDD`.`采购订单类型`, `APP_GSMS_HOS_CGDD`.`采购订单类型描述`, `APP_GSMS_HOS_CGDD`.`采购订单日期`, `APP_GSMS_HOS_CGDD`.`供应商编码`, `APP_GSMS_HOS_CGDD`.`供应商名称`, `APP_GSMS_HOS_CGDD`.`收货站点`, `APP_GSMS_HOS_CGDD`.`站点名称`, `APP_GSMS_HOS_CGDD`.`商品编码`, `APP_GSMS_HOS_CGDD`.`商品描述`, `APP_GSMS_HOS_CGDD`.`商品类目`, `APP_GSMS_HOS_CGDD`.`商品类目描述`, `APP_GSMS_HOS_CGDD`.`订单单位`, `APP_GSMS_HOS_CGDD`.`订单数量`, `APP_GSMS_HOS_CGDD`.`净价`, `APP_GSMS_HOS_CGDD`.`订单金额_不含税`, `APP_GSMS_HOS_CGDD`.`订单金额_含税`, `APP_GSMS_HOS_CGDD`.`税率`, `APP_GSMS_HOS_CGDD`.`税额`, `APP_GSMS_HOS_CGDD`.`是否完成交货`, `APP_GSMS_HOS_CGDD`.`是否开具发票`, `APP_GSMS_HOS_CGDD`.`该行是否被删除`, `APP_GSMS_HOS_CGDD`.`该行是否退货`, `APP_GSMS_HOS_CGDD`.`所属`, `APP_GSMS_HOS_CGDD`.`单位名称` FROM `DW04`.`APP_GSMS_HOS_CGDD`) AS temp_sub_query_table WHERE (( `temp_sub_query_table`.`单位名称` IN ('乌鲁木齐石化分公司', '独山子石化分公司', '中国石油集团西部钻探工程有限公司', '中国石油运输有限公司', '西部管道分公司', '新疆油田分公司', '吐哈油田分公司', '塔里木油田分公司', '中石油新疆销售有限公司', '中石油克拉玛依石化有限责任公司', '中国石油集团工程有限公司北京项目管理分公司') ) AND ((`temp_sub_query_table`.`订单金额_不含税` < 10000000) AND (( `temp_sub_query_table`.`采购订单类型` IN ('Z003', 'Z005') ) AND (( `temp_sub_query_table`.`该行是否被删除` IN (' ') ) AND (( `temp_sub_query_table`.`该行是否退货` IN ('否') ) AND ((`temp_sub_query_table`.`商品类目描述` = '白酒') AND ( `temp_sub_query_table`.`是否完成交货` IN ('是') )))))))) AS temp
I0825 11:46:27.252432 50047 Frontend.java:947] Analysis finished.
I0825 11:46:27.255036 50047 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:27.255218 50047 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:27.255599 50047 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:27.255654 50047 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:27.255928 50047 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:27.255991 50047 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:27.256261 50047 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:27.256320 50047 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:27.256614 50047 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:27.256722 50047 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:27.257077 50047 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:27.257145 50047 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:27.257545 50047 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:27.257656 50047 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:27.266763 50047 admission-controller.cc:508] Schedule for id=f24d8195a19648d2:a704969300000000 in pool_name=root.default cluster_mem_needed=40.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
I0825 11:46:27.266865 50047 admission-controller.cc:513] Stats: agg_num_running=1, agg_num_queued=0, agg_mem_reserved=40.00 GB,  local_host(local_mem_admitted=0, num_admitted_running=0, num_queued=0, backend_mem_reserved=8.00 GB)
I0825 11:46:27.266956 50047 admission-controller.cc:529] Admitted query id=f24d8195a19648d2:a704969300000000
I0825 11:46:27.267042 50047 coordinator.cc:93] Exec() query_id=f24d8195a19648d2:a704969300000000 stmt=SELECT `temp`.`采购订单类型`, `temp`.`采购订单日期`, `temp`.`商品类目描述`, `temp`.`订单金额_不含税`, `temp`.`是否完成交货`, `temp`.`该行是否被删除`, `temp`.`该行是否退货` FROM (SELECT `temp_sub_query_table`.`采购订单类型`, `temp_sub_query_table`.`采购订单日期`, `temp_sub_query_table`.`商品类目描述`, `temp_sub_query_table`.`订单金额_不含税`, `temp_sub_query_table`.`是否完成交货`, `temp_sub_query_table`.`该行是否被删除`, `temp_sub_query_table`.`该行是否退货` FROM (SELECT `APP_GSMS_HOS_CGDD`.`采购订单编号`, `APP_GSMS_HOS_CGDD`.`采购订单行项目`, `APP_GSMS_HOS_CGDD`.`采购订单类型`, `APP_GSMS_HOS_CGDD`.`采购订单类型描述`, `APP_GSMS_HOS_CGDD`.`采购订单日期`, `APP_GSMS_HOS_CGDD`.`供应商编码`, `APP_GSMS_HOS_CGDD`.`供应商名称`, `APP_GSMS_HOS_CGDD`.`收货站点`, `APP_GSMS_HOS_CGDD`.`站点名称`, `APP_GSMS_HOS_CGDD`.`商品编码`, `APP_GSMS_HOS_CGDD`.`商品描述`, `APP_GSMS_HOS_CGDD`.`商品类目`, `APP_GSMS_HOS_CGDD`.`商品类目描述`, `APP_GSMS_HOS_CGDD`.`订单单位`, `APP_GSMS_HOS_CGDD`.`订单数量`, `APP_GSMS_HOS_CGDD`.`净价`, `APP_GSMS_HOS_CGDD`.`订单金额_不含税`, `APP_GSMS_HOS_CGDD`.`订单金额_含税`, `APP_GSMS_HOS_CGDD`.`税率`, `APP_GSMS_HOS_CGDD`.`税额`, `APP_GSMS_HOS_CGDD`.`是否完成交货`, `APP_GSMS_HOS_CGDD`.`是否开具发票`, `APP_GSMS_HOS_CGDD`.`该行是否被删除`, `APP_GSMS_HOS_CGDD`.`该行是否退货`, `APP_GSMS_HOS_CGDD`.`所属`, `APP_GSMS_HOS_CGDD`.`单位名称` FROM `DW04`.`APP_GSMS_HOS_CGDD`) AS temp_sub_query_table WHERE (( `temp_sub_query_table`.`单位名称` IN ('乌鲁木齐石化分公司', '独山子石化分公司', '中国石油集团西部钻探工程有限公司', '中国石油运输有限公司', '西部管道分公司', '新疆油田分公司', '吐哈油田分公司', '塔里木油田分公司', '中石油新疆销售有限公司', '中石油克拉玛依石化有限责任公司', '中国石油集团工程有限公司北京项目管理分公司') ) AND ((`temp_sub_query_table`.`订单金额_不含税` < 10000000) AND (( `temp_sub_query_table`.`采购订单类型` IN ('Z003', 'Z005') ) AND (( `temp_sub_query_table`.`该行是否被删除` IN (' ') ) AND (( `temp_sub_query_table`.`该行是否退货` IN ('否') ) AND ((`temp_sub_query_table`.`商品类目描述` = '白酒') AND ( `temp_sub_query_table`.`是否完成交货` IN ('是') )))))))) AS temp
I0825 11:46:27.267120 50047 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:27.267170 50047 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:27.267315 50047 coordinator.cc:349] starting execution on 5 backends for query_id=f24d8195a19648d2:a704969300000000
I0825 11:46:27.269341 45240 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=f24d8195a19648d2:a704969300000000
I0825 11:46:27.269500 45240 query-exec-mgr.cc:46] StartQueryFInstances() query_id=f24d8195a19648d2:a704969300000000 coord=e4bdhpp025:22000
I0825 11:46:27.269605 45240 query-state.cc:178] Buffer pool limit for f24d8195a19648d2:a704969300000000: 6871947673
I0825 11:46:27.269739 45240 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query f24d8195a19648d2:a704969300000000
I0825 11:46:27.270028 50064 query-state.cc:300] StartFInstances(): query_id=f24d8195a19648d2:a704969300000000 #instances=2
I0825 11:46:27.270323 50064 query-state.cc:313] descriptor table for query=f24d8195a19648d2:a704969300000000
tuples:
Tuple(id=3 size=202 slots=[Slot(id=59 type=STRING col_path=[20] offset=0 null=(offset=200 mask=1) slot_idx=0 field_idx=-1), Slot(id=60 type=STRING col_path=[20] offset=16 null=(offset=200 mask=2) slot_idx=1 field_idx=-1), Slot(id=61 type=DECIMAL(16,2) col_path=[16] offset=192 null=(offset=201 mask=10) slot_idx=12 field_idx=-1), Slot(id=62 type=STRING col_path=[22] offset=32 null=(offset=200 mask=4) slot_idx=2 field_idx=-1), Slot(id=63 type=STRING col_path=[22] offset=48 null=(offset=200 mask=8) slot_idx=3 field_idx=-1), Slot(id=64 type=STRING col_path=[23] offset=64 null=(offset=200 mask=10) slot_idx=4 field_idx=-1), Slot(id=65 type=STRING col_path=[23] offset=80 null=(offset=200 mask=20) slot_idx=5 field_idx=-1), Slot(id=66 type=STRING col_path=[2] offset=96 null=(offset=200 mask=40) slot_idx=6 field_idx=-1), Slot(id=67 type=STRING col_path=[2] offset=112 null=(offset=200 mask=80) slot_idx=7 field_idx=-1), Slot(id=68 type=STRING col_path=[12] offset=128 null=(offset=201 mask=1) slot_idx=8 field_idx=-1), Slot(id=69 type=STRING col_path=[12] offset=144 null=(offset=201 mask=2) slot_idx=9 field_idx=-1), Slot(id=70 type=STRING col_path=[25] offset=160 null=(offset=201 mask=4) slot_idx=10 field_idx=-1), Slot(id=71 type=STRING col_path=[25] offset=176 null=(offset=201 mask=8) slot_idx=11 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=121 slots=[Slot(id=2 type=STRING col_path=[2] offset=0 null=(offset=120 mask=1) slot_idx=0 field_idx=-1), Slot(id=4 type=TIMESTAMP col_path=[4] offset=16 null=(offset=120 mask=2) slot_idx=1 field_idx=-1), Slot(id=12 type=STRING col_path=[12] offset=32 null=(offset=120 mask=4) slot_idx=2 field_idx=-1), Slot(id=16 type=DECIMAL(16,2) col_path=[16] offset=112 null=(offset=120 mask=80) slot_idx=7 field_idx=-1), Slot(id=20 type=STRING col_path=[20] offset=48 null=(offset=120 mask=8) slot_idx=3 field_idx=-1), Slot(id=22 type=STRING col_path=[22] offset=64 null=(offset=120 mask=10) slot_idx=4 field_idx=-1), Slot(id=23 type=STRING col_path=[23] offset=80 null=(offset=120 mask=20) slot_idx=5 field_idx=-1), Slot(id=25 type=STRING col_path=[25] offset=96 null=(offset=120 mask=40) slot_idx=6 field_idx=-1)] tuple_path=[])
I0825 11:46:27.270705 50065 query-state.cc:395] Executing instance. instance_id=f24d8195a19648d2:a704969300000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=4 #in-flight=3
I0825 11:46:27.270895 50066 query-state.cc:395] Executing instance. instance_id=f24d8195a19648d2:a704969300000002 fragment_idx=1 per_fragment_instance_idx=1 coord_state_idx=4 #in-flight=4
I0825 11:46:27.271060 50066 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance 'f24d8195a19648d2:a704969300000002': 190
I0825 11:46:27.272120 50064 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:46:27.272778 50047 coordinator.cc:362] started execution on 5 backends for query_id=f24d8195a19648d2:a704969300000000
I0825 11:46:27.274050 50047 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xd2H\x96\xa1\x95\x81M\xf2\x00\x00\x00\x00\x93\x96\x04\xa7",
      02: secret (string) = "\xd2H\x96\xa1\x95\x81M\xf2\x00\x00\x00\x00\x93\x96\x04\xa7",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
W0825 11:46:27.457393 43830 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:46:27.458814 43830 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064597_BP-1820042964-11.11.206.232-1548063025113
W0825 11:46:27.459848 43832 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:46:27.460834 43827 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:46:27.462849 43831 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:46:27.464323 43834 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:46:27.465245 43828 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:46:27.466487 43833 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:46:27.467218 43832 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064614_BP-1820042964-11.11.206.232-1548063025113
W0825 11:46:27.468981 43827 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064589_BP-1820042964-11.11.206.232-1548063025113
W0825 11:46:27.469494 43831 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064698_BP-1820042964-11.11.206.232-1548063025113
W0825 11:46:27.470939 43834 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064427_BP-1820042964-11.11.206.232-1548063025113
W0825 11:46:27.471880 43828 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064312_BP-1820042964-11.11.206.232-1548063025113
W0825 11:46:27.472949 43833 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064223_BP-1820042964-11.11.206.232-1548063025113
I0825 11:46:28.528913 45243 coordinator.cc:689] Backend completed:  host=e4bdhpp015:22000 remaining=1 query_id=b446a03549407cc6:52eef85000000000
I0825 11:46:28.529681 45243 coordinator-backend-state.cc:226] query_id=b446a03549407cc6:52eef85000000000: first in-progress backend: e4bdhpp025:22000
I0825 11:46:28.550598 49758 coordinator.cc:522] Coordinator waiting for backends to finish, 1 remaining. query_id=b446a03549407cc6:52eef85000000000
I0825 11:46:28.552500 49758 coordinator.cc:527] All backends finished successfully. query_id=b446a03549407cc6:52eef85000000000
I0825 11:46:28.552907 49758 coordinator.cc:783] Release admission control resources for query_id=b446a03549407cc6:52eef85000000000
I0825 11:46:28.553637 49852 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=b446a03549407cc6:52eef85000000000, node=1
I0825 11:46:28.554514 49852 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=b446a03549407cc6:52eef85000000000 node_id=1
I0825 11:46:28.555811 49852 query-state.cc:403] Instance completed. instance_id=b446a03549407cc6:52eef85000000000 #in-flight=3 status=OK
I0825 11:46:28.556741 49852 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=b446a03549407cc6:52eef85000000000 refcnt=2
I0825 11:46:28.609074 49758 impala-hs2-server.cc:683] CloseOperation(): query_id=b446a03549407cc6:52eef85000000000
I0825 11:46:28.609539 49758 impala-server.cc:1015] UnregisterQuery(): query_id=b446a03549407cc6:52eef85000000000
I0825 11:46:28.609781 49758 impala-server.cc:1102] Cancel(): query_id=b446a03549407cc6:52eef85000000000
I0825 11:46:28.610057 49758 coordinator.cc:629] Cancel() query_id=b446a03549407cc6:52eef85000000000
I0825 11:46:28.610327 49758 coordinator.cc:639] CancelBackends() query_id=b446a03549407cc6:52eef85000000000, tried to cancel 0 backends
I0825 11:46:28.617319 49758 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=b446a03549407cc6:52eef85000000000 refcnt=1
I0825 11:46:28.767705 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:46:28.773030 50181 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:46:28.775302 50181 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xb1T\xc7R\xc8HL\xee\xa6P)\x97\x7f\xea\xdf\x1c",
      02: secret (string) = "C\x01\xa2\xf4.\xe5H5\xb2\x85\xd7\xa6<\xedH\x88",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:46:28.776991 50181 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xb1T\xc7R\xc8HL\xee\xa6P)\x97\x7f\xea\xdf\x1c",
      02: secret (string) = "C\x01\xa2\xf4.\xe5H5\xb2\x85\xd7\xa6<\xedH\x88",
    },
  },
}
I0825 11:46:28.779341 50181 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:46:28.782243 50181 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xce\xfcrez\x8aJ\xa2\x9a\xc8f\xaa\x1e\xc9x\\",
      02: secret (string) = "\xc7\xc4P\x96\x0f\xa6H\xce\xa7GC\x10\x03w\x83\xb2",
    },
  },
  02: statement (string) = "USE dw01",
  04: runAsync (bool) = true,
}
I0825 11:46:28.784289 50181 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xce\xfcrez\x8aJ\xa2\x9a\xc8f\xaa\x1e\xc9x\\",
      02: secret (string) = "\xc7\xc4P\x96\x0f\xa6H\xce\xa7GC\x10\x03w\x83\xb2",
    },
  },
  02: statement (string) = "USE dw01",
  04: runAsync (bool) = true,
}
I0825 11:46:28.788108 50181 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:28.806615 50181 Frontend.java:935] Analyzing query: USE dw01
I0825 11:46:28.808219 50181 Frontend.java:947] Analysis finished.
I0825 11:46:28.863921 50181 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xf9\xdf\x05\a\x81+D\xee\x00\x00\x00\x00\xc7i\xa6\xaf",
      02: secret (string) = "\xf9\xdf\x05\a\x81+D\xee\x00\x00\x00\x00\xc7i\xa6\xaf",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:46:28.866694 50181 impala-hs2-server.cc:683] CloseOperation(): query_id=ee442b810705dff9:afa669c700000000
I0825 11:46:28.867308 50181 impala-server.cc:1015] UnregisterQuery(): query_id=ee442b810705dff9:afa669c700000000
I0825 11:46:28.869772 50181 impala-server.cc:1102] Cancel(): query_id=ee442b810705dff9:afa669c700000000
I0825 11:46:28.872815 50181 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xce\xfcrez\x8aJ\xa2\x9a\xc8f\xaa\x1e\xc9x\\",
      02: secret (string) = "\xc7\xc4P\x96\x0f\xa6H\xce\xa7GC\x10\x03w\x83\xb2",
    },
  },
  02: statement (string) = "SET KrbUserName=apprc",
  04: runAsync (bool) = true,
}
I0825 11:46:28.873342 50181 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xce\xfcrez\x8aJ\xa2\x9a\xc8f\xaa\x1e\xc9x\\",
      02: secret (string) = "\xc7\xc4P\x96\x0f\xa6H\xce\xa7GC\x10\x03w\x83\xb2",
    },
  },
  02: statement (string) = "SET KrbUserName=apprc",
  04: runAsync (bool) = true,
}
I0825 11:46:28.875615 50181 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:28.897194 50181 Frontend.java:935] Analyzing query: SET KrbUserName=apprc
I0825 11:46:28.898375 50181 Frontend.java:947] Analysis finished.
I0825 11:46:29.042776 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:46:29.046286 50184 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:46:29.048648 50184 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe0\xc60x\xe5\xf9J\xc4\xa5\x87n\x800\x8c\"i",
      02: secret (string) = "Ao\x84s\x8f9I\xb1\xb0\xc8\xa3)kD\x16\x0e",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:46:29.050382 50184 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe0\xc60x\xe5\xf9J\xc4\xa5\x87n\x800\x8c\"i",
      02: secret (string) = "Ao\x84s\x8f9I\xb1\xb0\xc8\xa3)kD\x16\x0e",
    },
  },
}
I0825 11:46:29.051057 50184 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:46:29.052953 50184 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1a\xbb\xe0\xe3\xd2\x8aD\xc3\xa8\xa7\xef\xc1\xb3g\xb07",
      02: secret (string) = "ZM:\xf0\xf6\xedB\x1e\x9c\xe6&\xc3.\x19\x02\xf1",
    },
  },
  02: statement (string) = "USE dw01",
  04: runAsync (bool) = true,
}
I0825 11:46:29.053333 50184 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1a\xbb\xe0\xe3\xd2\x8aD\xc3\xa8\xa7\xef\xc1\xb3g\xb07",
      02: secret (string) = "ZM:\xf0\xf6\xedB\x1e\x9c\xe6&\xc3.\x19\x02\xf1",
    },
  },
  02: statement (string) = "USE dw01",
  04: runAsync (bool) = true,
}
I0825 11:46:29.054997 50184 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:29.067054 50184 Frontend.java:935] Analyzing query: USE dw01
I0825 11:46:29.068914 50184 Frontend.java:947] Analysis finished.
I0825 11:46:29.122674 50184 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xf4\v\xe2\xc4\xb2\xf8J'\x00\x00\x00\x00\xb3\xb8\xe9\x90",
      02: secret (string) = "\xf4\v\xe2\xc4\xb2\xf8J'\x00\x00\x00\x00\xb3\xb8\xe9\x90",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:46:29.124934 50184 impala-hs2-server.cc:683] CloseOperation(): query_id=274af8b2c4e20bf4:90e9b8b300000000
I0825 11:46:29.125413 50184 impala-server.cc:1015] UnregisterQuery(): query_id=274af8b2c4e20bf4:90e9b8b300000000
I0825 11:46:29.126118 50184 impala-server.cc:1102] Cancel(): query_id=274af8b2c4e20bf4:90e9b8b300000000
I0825 11:46:29.128576 50184 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1a\xbb\xe0\xe3\xd2\x8aD\xc3\xa8\xa7\xef\xc1\xb3g\xb07",
      02: secret (string) = "ZM:\xf0\xf6\xedB\x1e\x9c\xe6&\xc3.\x19\x02\xf1",
    },
  },
  02: statement (string) = "SET KrbUserName=apprc",
  04: runAsync (bool) = true,
}
I0825 11:46:29.129844 50184 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1a\xbb\xe0\xe3\xd2\x8aD\xc3\xa8\xa7\xef\xc1\xb3g\xb07",
      02: secret (string) = "ZM:\xf0\xf6\xedB\x1e\x9c\xe6&\xc3.\x19\x02\xf1",
    },
  },
  02: statement (string) = "SET KrbUserName=apprc",
  04: runAsync (bool) = true,
}
I0825 11:46:29.131229 50184 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:29.143463 50184 Frontend.java:935] Analyzing query: SET KrbUserName=apprc
I0825 11:46:29.144093 50184 Frontend.java:947] Analysis finished.
I0825 11:46:29.350037 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:46:29.355818 50186 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:46:29.357251 50186 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "}\xd3\xd9\xf9  J\xbb\xb7\xbfK+\t\xf7:\xa1",
      02: secret (string) = "a\xf7\xbfW? E\xe9\xb6\xcf\xd4\xf4^\x8f\x84\xce",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:46:29.381842 50186 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "}\xd3\xd9\xf9  J\xbb\xb7\xbfK+\t\xf7:\xa1",
      02: secret (string) = "a\xf7\xbfW? E\xe9\xb6\xcf\xd4\xf4^\x8f\x84\xce",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:46:29.382395 50186 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "}\xd3\xd9\xf9  J\xbb\xb7\xbfK+\t\xf7:\xa1",
      02: secret (string) = "a\xf7\xbfW? E\xe9\xb6\xcf\xd4\xf4^\x8f\x84\xce",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:46:29.385471 50186 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:29.402745 50186 Frontend.java:935] Analyzing query: use `dw04_sjfx`;
I0825 11:46:29.403957 50186 Frontend.java:947] Analysis finished.
I0825 11:46:29.461020 50186 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x95M*\x14\xd7E@Q\x00\x00\x00\x00\x8b\v\xcc\xd1",
      02: secret (string) = "\x95M*\x14\xd7E@Q\x00\x00\x00\x00\x8b\v\xcc\xd1",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:46:29.466775 50186 impala-hs2-server.cc:683] CloseOperation(): query_id=514045d7142a4d95:d1cc0b8b00000000
I0825 11:46:29.467716 50186 impala-server.cc:1015] UnregisterQuery(): query_id=514045d7142a4d95:d1cc0b8b00000000
I0825 11:46:29.468209 50186 impala-server.cc:1102] Cancel(): query_id=514045d7142a4d95:d1cc0b8b00000000
I0825 11:46:29.497218 50186 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "}\xd3\xd9\xf9  J\xbb\xb7\xbfK+\t\xf7:\xa1",
      02: secret (string) = "a\xf7\xbfW? E\xe9\xb6\xcf\xd4\xf4^\x8f\x84\xce",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:46:29.497560 50186 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "}\xd3\xd9\xf9  J\xbb\xb7\xbfK+\t\xf7:\xa1",
      02: secret (string) = "a\xf7\xbfW? E\xe9\xb6\xcf\xd4\xf4^\x8f\x84\xce",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:46:29.498740 50186 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:29.510416 50186 Frontend.java:935] Analyzing query: set REQUEST_POOL = 'agilebi';
I0825 11:46:29.510913 50186 Frontend.java:947] Analysis finished.
I0825 11:46:29.512102 50186 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "8\xa4\xdbo\x8a\x10IO\x00\x00\x00\x00\x12~\x9c\xd9",
      02: secret (string) = "8\xa4\xdbo\x8a\x10IO\x00\x00\x00\x00\x12~\x9c\xd9",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:29.517046 50186 impala-hs2-server.cc:683] CloseOperation(): query_id=4f49108a6fdba438:d99c7e1200000000
I0825 11:46:29.517429 50186 impala-server.cc:1015] UnregisterQuery(): query_id=4f49108a6fdba438:d99c7e1200000000
I0825 11:46:29.517786 50186 impala-server.cc:1102] Cancel(): query_id=4f49108a6fdba438:d99c7e1200000000
I0825 11:46:29.539651 50186 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "}\xd3\xd9\xf9  J\xbb\xb7\xbfK+\t\xf7:\xa1",
      02: secret (string) = "a\xf7\xbfW? E\xe9\xb6\xcf\xd4\xf4^\x8f\x84\xce",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:46:29.540009 50186 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "}\xd3\xd9\xf9  J\xbb\xb7\xbfK+\t\xf7:\xa1",
      02: secret (string) = "a\xf7\xbfW? E\xe9\xb6\xcf\xd4\xf4^\x8f\x84\xce",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:46:29.540774 50186 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:29.551210 50186 Frontend.java:935] Analyzing query: set MEM_LIMIT = 1024000000;
I0825 11:46:29.551772 50186 Frontend.java:947] Analysis finished.
I0825 11:46:29.553050 50186 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "u\x11\x11R\xb3[M\r\x00\x00\x00\x00\x7f\v&\xf5",
      02: secret (string) = "u\x11\x11R\xb3[M\r\x00\x00\x00\x00\x7f\v&\xf5",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:29.557044 50186 impala-hs2-server.cc:683] CloseOperation(): query_id=d4d5bb352111175:f5260b7f00000000
I0825 11:46:29.557843 50186 impala-server.cc:1015] UnregisterQuery(): query_id=d4d5bb352111175:f5260b7f00000000
I0825 11:46:29.557997 50186 impala-server.cc:1102] Cancel(): query_id=d4d5bb352111175:f5260b7f00000000
I0825 11:46:29.562830 50186 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "}\xd3\xd9\xf9  J\xbb\xb7\xbfK+\t\xf7:\xa1",
      02: secret (string) = "a\xf7\xbfW? E\xe9\xb6\xcf\xd4\xf4^\x8f\x84\xce",
    },
  },
  02: statement (string) = "DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_NN`",
  04: runAsync (bool) = true,
}
I0825 11:46:29.563066 50186 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "}\xd3\xd9\xf9  J\xbb\xb7\xbfK+\t\xf7:\xa1",
      02: secret (string) = "a\xf7\xbfW? E\xe9\xb6\xcf\xd4\xf4^\x8f\x84\xce",
    },
  },
  02: statement (string) = "DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_NN`",
  04: runAsync (bool) = true,
}
I0825 11:46:29.563921 50186 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:29.575376 50186 Frontend.java:935] Analyzing query: DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_NN`
I0825 11:46:29.576845 50186 Frontend.java:947] Analysis finished.
I0825 11:46:29.627985 50186 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xad\xd0H,\xe5GJ\xf0\x00\x00\x00\x00\x8b\x1fH\xf4",
      02: secret (string) = "\xad\xd0H,\xe5GJ\xf0\x00\x00\x00\x00\x8b\x1fH\xf4",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:29.632520 50186 impala-hs2-server.cc:683] CloseOperation(): query_id=f04a47e52c48d0ad:f4481f8b00000000
I0825 11:46:29.635357 50186 impala-server.cc:1015] UnregisterQuery(): query_id=f04a47e52c48d0ad:f4481f8b00000000
I0825 11:46:29.635754 50186 impala-server.cc:1102] Cancel(): query_id=f04a47e52c48d0ad:f4481f8b00000000
I0825 11:46:29.660575 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:46:29.664947 50199 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:46:29.667836 50199 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xdc\xffnJ#hG\x9b\xbbI\xb2kc\xbb\x97\xa4",
      02: secret (string) = "\x89M\xa9\x12\xce\x19Kk\xb5\x91t\"\xb6y_'",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:46:29.669096 50199 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xdc\xffnJ#hG\x9b\xbbI\xb2kc\xbb\x97\xa4",
      02: secret (string) = "\x89M\xa9\x12\xce\x19Kk\xb5\x91t\"\xb6y_'",
    },
  },
}
I0825 11:46:29.672127 50199 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:46:29.673745 50199 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xea\xa9\xf8n\xaa[K\x9b\x941z\xd0\xa3\xba\x90W",
      02: secret (string) = "]\x9e\x93\xf3\xa3qHa\x9f\xe6\x9e\xef\xce\xd5\x93A",
    },
  },
  02: statement (string) = "USE dw01",
  04: runAsync (bool) = true,
}
I0825 11:46:29.675383 50199 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xea\xa9\xf8n\xaa[K\x9b\x941z\xd0\xa3\xba\x90W",
      02: secret (string) = "]\x9e\x93\xf3\xa3qHa\x9f\xe6\x9e\xef\xce\xd5\x93A",
    },
  },
  02: statement (string) = "USE dw01",
  04: runAsync (bool) = true,
}
I0825 11:46:29.679240 50199 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:29.699841 50199 Frontend.java:935] Analyzing query: USE dw01
I0825 11:46:29.701507 50199 Frontend.java:947] Analysis finished.
I0825 11:46:29.759411 50199 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "X\xc1K\xeb\xc4\xdcBv\x00\x00\x00\x00\x90\xe7\xf9\xbf",
      02: secret (string) = "X\xc1K\xeb\xc4\xdcBv\x00\x00\x00\x00\x90\xe7\xf9\xbf",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:46:29.762450 50199 impala-hs2-server.cc:683] CloseOperation(): query_id=7642dcc4eb4bc158:bff9e79000000000
I0825 11:46:29.763720 50199 impala-server.cc:1015] UnregisterQuery(): query_id=7642dcc4eb4bc158:bff9e79000000000
I0825 11:46:29.764899 50199 impala-server.cc:1102] Cancel(): query_id=7642dcc4eb4bc158:bff9e79000000000
I0825 11:46:29.767047 50199 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xea\xa9\xf8n\xaa[K\x9b\x941z\xd0\xa3\xba\x90W",
      02: secret (string) = "]\x9e\x93\xf3\xa3qHa\x9f\xe6\x9e\xef\xce\xd5\x93A",
    },
  },
  02: statement (string) = "SET KrbUserName=apprc",
  04: runAsync (bool) = true,
}
I0825 11:46:29.767637 50199 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xea\xa9\xf8n\xaa[K\x9b\x941z\xd0\xa3\xba\x90W",
      02: secret (string) = "]\x9e\x93\xf3\xa3qHa\x9f\xe6\x9e\xef\xce\xd5\x93A",
    },
  },
  02: statement (string) = "SET KrbUserName=apprc",
  04: runAsync (bool) = true,
}
I0825 11:46:29.770227 50186 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "}\xd3\xd9\xf9  J\xbb\xb7\xbfK+\t\xf7:\xa1",
      02: secret (string) = "a\xf7\xbfW? E\xe9\xb6\xcf\xd4\xf4^\x8f\x84\xce",
    },
  },
  02: statement (string) = "select   `bi_228[...](15726)",
  04: runAsync (bool) = true,
}
I0825 11:46:29.770854 50186 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "}\xd3\xd9\xf9  J\xbb\xb7\xbfK+\t\xf7:\xa1",
      02: secret (string) = "a\xf7\xbfW? E\xe9\xb6\xcf\xd4\xf4^\x8f\x84\xce",
    },
  },
  02: statement (string) = "select   `bi_228[...](15726)",
  04: runAsync (bool) = true,
}
I0825 11:46:29.771186 50199 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:29.771793 50186 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:29.784919 50186 Frontend.java:935] Analyzing query: select   `bi_2282682891841018241`.`帐号` as `bi_15159864404575209771` , `bi_2282682891841018241`.`卡号` as `bi_5176736373764729517` , `bi_2282682891841018241`.`卡类型描述` as `bi_18002650512820288522` , `bi_2282682891841018241`.`是否为副卡` as `bi_10070664717213612371` , `bi_2282682891841018241`.`交易主要站点` as `bi_17363467753723988445` , `bi_2282682891841018241`.`消费过加油站站点数量_1692137484` as `bi_17559908322177175193` , `bi_2282682891841018241`.`交易类型描述` as `bi_30169237570504987` , `bi_2282682891841018241`.`商品类型` as `bi_630186766851260751` , `bi_2282682891841018241`.`商品类型描述` as `bi_15231137875792296164` , `bi_2282682891841018241`.`发卡单位` as `bi_15621164357820908518` , `bi_2282682891841018241`.`发卡单位与销售单位是否一致` as `bi_12117277212538675021` , `bi_2282682891841018241`.`首次交易日期` as `bi_6646908465420298805` , `bi_2282682891841018241`.`最近交易日期` as `bi_13530833546549329347` , `bi_2282682891841018241`.`平均油量升数` as `bi_11273946998078465677` , `bi_2282682891841018241`.`平均消费金额` as `bi_8288133923748336711` , `bi_2282682891841018241`.`平均折扣金额` as `bi_4970043801986327351` , `bi_2282682891841018241`.`平均余额` as `bi_8381900821794444625` , `bi_2282682891841018241`.`日均消费笔数` as `bi_10723048596585302054` , `bi_2282682891841018241`.`日均消费金额` as `bi_41819982784080953` , `bi_2282682891841018241`.`单日消费次数过多次数` as `bi_12112238727142840682` , `bi_2282682891841018241`.`不记名卡夜间消费总次数` as `bi_3938683413919446579` , `bi_2282682891841018241`.`不记名卡夜间消费总金额` as `bi_12562378023438062621` , `bi_2282682891841018241`.`日均夜间消费笔数` as `bi_6200430593887269742` , `bi_2282682891841018241`.`日均夜间消费金额` as `bi_1689351619663764928` , `bi_2282682891841018241`.`单日夜间消费次数过多次数` as `bi_12909975068497935338` , `bi_2282682891841018241`.`睡眠次数` as `bi_11007498412015863178` , `bi_2282682891841018241`.`是否仍在睡眠` as `bi_12482824553037098532` , `bi_2282682891841018241`.`不记名卡累计消费金额` as `bi_4601843349518591292` , `bi_2282682891841018241`.`不记名卡消费金额方差` as `bi_2924531414258932610` , `bi_2282682891841018241`.`不记名卡累计消费次数` as `bi_5870083467319809789` , `bi_2282682891841018241`.`不记名卡消费金额为小数次数` as `bi_3842164172086352148` , `bi_2282682891841018241`.`不记名卡消费过油品类型数量` as `bi_806870660964728186` , `bi_2282682891841018241`.`消费过汽油品类型数量636841632` as `bi_556036179544267082` , `bi_2282682891841018241`.`不记名卡汽油消费次数占比` as `bi_1068488302117352384` , `bi_2282682891841018241`.`汽油单笔高额消费次数_1368620500` as `bi_8356278071803173785` , `bi_2282682891841018241`.`不记名卡柴油消费次数占比` as `bi_5766421841800396638` , `bi_2282682891841018241`.`不记名卡天然气消费次数占比` as `bi_14290961476284126012` , `bi_2282682891841018241`.`ic卡大额非油消费次数` as `bi_992601592685606614` , `bi_2282682891841018241`.`非油累计消费金额` as `bi_8276717807170841059` , `bi_2282682891841018241`.`非油与成品油消费金额比例` as `bi_14967514132684380162` , `bi_2282682891841018241`.`不记名卡累计充值金额` as `bi_11701916747493263994` , `bi_2282682891841018241`.`单日充值次数过多次数` as `bi_16449755606537913494` , `bi_2282682891841018241`.`即消费且余额低的次数831743621` as `bi_12225443660237330283` , `bi_2282682891841018241`.`同一班次消费的次数` as `bi_5256996930125776142` , `bi_2282682891841018241`.`密码重置次数` as `bi_8414722834803604324` , `bi_2282682891841018241`.`笔折扣额的消费的次数_2085032453` as `bi_10212944947192418963` , `bi_2282682891841018241`.`余额充足时充钱的次数1957627260` as `bi_2466479945894447936` , `bi_2282682891841018241`.`是否曾频繁转账` as `bi_14279744686847475029` , `bi_2282682891841018241`.`是否异常加油卡` as `bi_1040490846059638232` , `bi_2282682891841018241`.`单位名称` as `bi_10101021918568318220` , `bi_2282682891841018241`.`所属` as `bi_13138972180237352292` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_2282682891841018241`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_10651599939693506386` , TRIM(`bi_2282682891841018241`.`交易主要站点`) as `bi_13164579150965645243`   from (select   `bi_11409236811878669265`.`帐号` as `帐号` , `bi_11409236811878669265`.`卡号` as `卡号` , `bi_11409236811878669265`.`卡类型描述` as `卡类型描述` , `bi_11409236811878669265`.`是否为副卡` as `是否为副卡` , `bi_11409236811878669265`.`交易主要站点` as `交易主要站点` , `bi_11409236811878669265`.`不记名卡消费过加油站站点数量` as `消费过加油站站点数量_1692137484` , `bi_11409236811878669265`.`交易类型描述` as `交易类型描述` , `bi_11409236811878669265`.`商品类型` as `商品类型` , `bi_11409236811878669265`.`商品类型描述` as `商品类型描述` , `bi_11409236811878669265`.`发卡单位` as `发卡单位` , `bi_11409236811878669265`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `bi_11409236811878669265`.`首次交易日期` as `首次交易日期` , `bi_11409236811878669265`.`最近交易日期` as `最近交易日期` , `bi_11409236811878669265`.`平均油量升数` as `平均油量升数` , `bi_11409236811878669265`.`平均消费金额` as `平均消费金额` , `bi_11409236811878669265`.`平均折扣金额` as `平均折扣金额` , `bi_11409236811878669265`.`平均余额` as `平均余额` , `bi_11409236811878669265`.`日均消费笔数` as `日均消费笔数` , `bi_11409236811878669265`.`日均消费金额` as `日均消费金额` , `bi_11409236811878669265`.`单日消费次数过多次数` as `单日消费次数过多次数` , `bi_11409236811878669265`.`不记名卡夜间消费总次数` as `不记名卡夜间消费总次数` , `bi_11409236811878669265`.`不记名卡夜间消费总金额` as `不记名卡夜间消费总金额` , `bi_11409236811878669265`.`日均夜间消费笔数` as `日均夜间消费笔数` , `bi_11409236811878669265`.`日均夜间消费金额` as `日均夜间消费金额` , `bi_11409236811878669265`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `bi_11409236811878669265`.`睡眠次数` as `睡眠次数` , `bi_11409236811878669265`.`是否仍在睡眠` as `是否仍在睡眠` , `bi_11409236811878669265`.`不记名卡累计消费金额` as `不记名卡累计消费金额` , `bi_11409236811878669265`.`不记名卡消费金额方差` as `不记名卡消费金额方差` , `bi_11409236811878669265`.`不记名卡累计消费次数` as `不记名卡累计消费次数` , `bi_11409236811878669265`.`不记名卡消费金额为小数次数` as `不记名卡消费金额为小数次数` , `bi_11409236811878669265`.`不记名卡消费过油品类型数量` as `不记名卡消费过油品类型数量` , `bi_11409236811878669265`.`不记名卡消费过汽油品类型数量` as `消费过汽油品类型数量636841632` , `bi_11409236811878669265`.`不记名卡汽油消费次数占比` as `不记名卡汽油消费次数占比` , `bi_11409236811878669265`.`不记名卡汽油单笔高额消费次数` as `汽油单笔高额消费次数_1368620500` , `bi_11409236811878669265`.`不记名卡柴油消费次数占比` as `不记名卡柴油消费次数占比` , `bi_11409236811878669265`.`不记名卡天然气消费次数占比` as `不记名卡天然气消费次数占比` , `bi_11409236811878669265`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `bi_11409236811878669265`.`非油累计消费金额` as `非油累计消费金额` , `bi_11409236811878669265`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `bi_11409236811878669265`.`不记名卡累计充值金额` as `不记名卡累计充值金额` , `bi_11409236811878669265`.`单日充值次数过多次数` as `单日充值次数过多次数` , `bi_11409236811878669265`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `bi_11409236811878669265`.`同一班次消费的次数` as `同一班次消费的次数` , `bi_11409236811878669265`.`密码重置次数` as `密码重置次数` , `bi_11409236811878669265`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `bi_11409236811878669265`.`不记名卡余额充足时充钱的次数` as `余额充足时充钱的次数1957627260` , `bi_11409236811878669265`.`是否曾频繁转账` as `是否曾频繁转账` , `bi_11409236811878669265`.`是否异常加油卡` as `是否异常加油卡` , `bi_11409236811878669265`.`单位名称` as `单位名称` , `bi_11409236811878669265`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`不记名卡消费过加油站站点数量` as `不记名卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`不记名卡夜间消费总次数` as `不记名卡夜间消费总次数`,`不记名卡夜间消费总金额` as `不记名卡夜间消费总金额`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`不记名卡累计消费金额` as `不记名卡累计消费金额`,`不记名卡消费金额方差` as `不记名卡消费金额方差`,`不记名卡累计消费次数` as `不记名卡累计消费次数`,`不记名卡消费金额为小数次数` as `不记名卡消费金额为小数次数`,`不记名卡消费过油品类型数量` as `不记名卡消费过油品类型数量`,`不记名卡消费过汽油品类型数量` as `不记名卡消费过汽油品类型数量`,`不记名卡汽油消费次数占比` as `不记名卡汽油消费次数占比`,`不记名卡汽油单笔高额消费次数` as `不记名卡汽油单笔高额消费次数`,`不记名卡柴油消费次数占比` as `不记名卡柴油消费次数占比`,`不记名卡天然气消费次数占比` as `不记名卡天然气消费次数占比`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`不记名卡累计充值金额` as `不记名卡累计充值金额`,`单日充值次数过多次数` as `单日充值次数过多次数`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`不记名卡余额充足时充钱的次数` as `不记名卡余额充足时充钱的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`不记名卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`不记名卡夜间消费总次数`,`不记名卡夜间消费总金额`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`不记名卡累计消费金额`,`不记名卡消费金额方差`,`不记名卡累计消费次数`,`不记名卡消费金额为小数次数`,`不记名卡消费过油品类型数量`,`不记名卡消费过汽油品类型数量`,`不记名卡汽油消费次数占比`,`不记名卡汽油单笔高额消费次数`,`不记名卡柴油消费次数占比`,`不记名卡天然气消费次数占比`,`ic卡大额非油消费次数`,`非油累计消费金额`,`非油与成品油消费金额比例`,`不记名卡累计充值金额`,`单日充值次数过多次数`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`不记名卡余额充足时充钱的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,     
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `不记名卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`, 
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`, 
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`,
       `单日消费次数过多次数`, 
       `不记名卡夜间消费总次数`,
       `不记名卡夜间消费总金额`,
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`, 
       `睡眠次数`,
       `是否仍在睡眠`,
       `不记名卡累计消费金额`,
       `加油卡消费金额方差` `不记名卡消费金额方差`,
       `不记名卡累计消费次数`,
       `加油卡消费金额为小数次数` `不记名卡消费金额为小数次数`,
       `不记名卡消费过油品类型数量`,
       `不记名卡消费过汽油品类型数量`,
       `不记名卡汽油消费次数占比`,
       `不记名卡汽油单笔高额消费次数`,
       `不记名卡柴油消费次数占比`,
       `不记名卡天然气消费次数占比`,
       `IC卡大额非油消费次数`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `不记名卡累计充值金额`,
       `单日充值次数过多次数`, 
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `不记名卡余额充足时充钱的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM DW04_SJFX.APP_AUAP_YK_NN) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `bi_11409236811878669265`  
     ) `bi_2282682891841018241`
      limit 1200001 
I0825 11:46:29.796046 50199 Frontend.java:935] Analyzing query: SET KrbUserName=apprc
I0825 11:46:29.797267 50199 Frontend.java:947] Analysis finished.
I0825 11:46:29.992803 50186 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:46:29.993366 50186 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:46:30.043864 50059 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:46:30.044796 50059 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:46:30.327502 50186 Frontend.java:947] Analysis finished.
I0825 11:46:30.331874 50186 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:46:30.332327 50186 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:46:30.343755 50186 admission-controller.cc:508] Schedule for id=8b46146ce95452bd:2b53dab00000000 in pool_name=root.agilebi cluster_mem_needed=1.91 GB PoolConfig: max_requests=500 max_queued=200 max_mem=800.00 GB
I0825 11:46:30.348896 50186 admission-controller.cc:513] Stats: agg_num_running=0, agg_num_queued=0, agg_mem_reserved=0,  local_host(local_mem_admitted=0, num_admitted_running=0, num_queued=0, backend_mem_reserved=0)
I0825 11:46:30.350250 50186 admission-controller.cc:529] Admitted query id=8b46146ce95452bd:2b53dab00000000
I0825 11:46:30.350764 50186 coordinator.cc:93] Exec() query_id=8b46146ce95452bd:2b53dab00000000 stmt=select   `bi_2282682891841018241`.`帐号` as `bi_15159864404575209771` , `bi_2282682891841018241`.`卡号` as `bi_5176736373764729517` , `bi_2282682891841018241`.`卡类型描述` as `bi_18002650512820288522` , `bi_2282682891841018241`.`是否为副卡` as `bi_10070664717213612371` , `bi_2282682891841018241`.`交易主要站点` as `bi_17363467753723988445` , `bi_2282682891841018241`.`消费过加油站站点数量_1692137484` as `bi_17559908322177175193` , `bi_2282682891841018241`.`交易类型描述` as `bi_30169237570504987` , `bi_2282682891841018241`.`商品类型` as `bi_630186766851260751` , `bi_2282682891841018241`.`商品类型描述` as `bi_15231137875792296164` , `bi_2282682891841018241`.`发卡单位` as `bi_15621164357820908518` , `bi_2282682891841018241`.`发卡单位与销售单位是否一致` as `bi_12117277212538675021` , `bi_2282682891841018241`.`首次交易日期` as `bi_6646908465420298805` , `bi_2282682891841018241`.`最近交易日期` as `bi_13530833546549329347` , `bi_2282682891841018241`.`平均油量升数` as `bi_11273946998078465677` , `bi_2282682891841018241`.`平均消费金额` as `bi_8288133923748336711` , `bi_2282682891841018241`.`平均折扣金额` as `bi_4970043801986327351` , `bi_2282682891841018241`.`平均余额` as `bi_8381900821794444625` , `bi_2282682891841018241`.`日均消费笔数` as `bi_10723048596585302054` , `bi_2282682891841018241`.`日均消费金额` as `bi_41819982784080953` , `bi_2282682891841018241`.`单日消费次数过多次数` as `bi_12112238727142840682` , `bi_2282682891841018241`.`不记名卡夜间消费总次数` as `bi_3938683413919446579` , `bi_2282682891841018241`.`不记名卡夜间消费总金额` as `bi_12562378023438062621` , `bi_2282682891841018241`.`日均夜间消费笔数` as `bi_6200430593887269742` , `bi_2282682891841018241`.`日均夜间消费金额` as `bi_1689351619663764928` , `bi_2282682891841018241`.`单日夜间消费次数过多次数` as `bi_12909975068497935338` , `bi_2282682891841018241`.`睡眠次数` as `bi_11007498412015863178` , `bi_2282682891841018241`.`是否仍在睡眠` as `bi_12482824553037098532` , `bi_2282682891841018241`.`不记名卡累计消费金额` as `bi_4601843349518591292` , `bi_2282682891841018241`.`不记名卡消费金额方差` as `bi_2924531414258932610` , `bi_2282682891841018241`.`不记名卡累计消费次数` as `bi_5870083467319809789` , `bi_2282682891841018241`.`不记名卡消费金额为小数次数` as `bi_3842164172086352148` , `bi_2282682891841018241`.`不记名卡消费过油品类型数量` as `bi_806870660964728186` , `bi_2282682891841018241`.`消费过汽油品类型数量636841632` as `bi_556036179544267082` , `bi_2282682891841018241`.`不记名卡汽油消费次数占比` as `bi_1068488302117352384` , `bi_2282682891841018241`.`汽油单笔高额消费次数_1368620500` as `bi_8356278071803173785` , `bi_2282682891841018241`.`不记名卡柴油消费次数占比` as `bi_5766421841800396638` , `bi_2282682891841018241`.`不记名卡天然气消费次数占比` as `bi_14290961476284126012` , `bi_2282682891841018241`.`ic卡大额非油消费次数` as `bi_992601592685606614` , `bi_2282682891841018241`.`非油累计消费金额` as `bi_8276717807170841059` , `bi_2282682891841018241`.`非油与成品油消费金额比例` as `bi_14967514132684380162` , `bi_2282682891841018241`.`不记名卡累计充值金额` as `bi_11701916747493263994` , `bi_2282682891841018241`.`单日充值次数过多次数` as `bi_16449755606537913494` , `bi_2282682891841018241`.`即消费且余额低的次数831743621` as `bi_12225443660237330283` , `bi_2282682891841018241`.`同一班次消费的次数` as `bi_5256996930125776142` , `bi_2282682891841018241`.`密码重置次数` as `bi_8414722834803604324` , `bi_2282682891841018241`.`笔折扣额的消费的次数_2085032453` as `bi_10212944947192418963` , `bi_2282682891841018241`.`余额充足时充钱的次数1957627260` as `bi_2466479945894447936` , `bi_2282682891841018241`.`是否曾频繁转账` as `bi_14279744686847475029` , `bi_2282682891841018241`.`是否异常加油卡` as `bi_1040490846059638232` , `bi_2282682891841018241`.`单位名称` as `bi_10101021918568318220` , `bi_2282682891841018241`.`所属` as `bi_13138972180237352292` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_2282682891841018241`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_10651599939693506386` , TRIM(`bi_2282682891841018241`.`交易主要站点`) as `bi_13164579150965645243`   from (select   `bi_11409236811878669265`.`帐号` as `帐号` , `bi_11409236811878669265`.`卡号` as `卡号` , `bi_11409236811878669265`.`卡类型描述` as `卡类型描述` , `bi_11409236811878669265`.`是否为副卡` as `是否为副卡` , `bi_11409236811878669265`.`交易主要站点` as `交易主要站点` , `bi_11409236811878669265`.`不记名卡消费过加油站站点数量` as `消费过加油站站点数量_1692137484` , `bi_11409236811878669265`.`交易类型描述` as `交易类型描述` , `bi_11409236811878669265`.`商品类型` as `商品类型` , `bi_11409236811878669265`.`商品类型描述` as `商品类型描述` , `bi_11409236811878669265`.`发卡单位` as `发卡单位` , `bi_11409236811878669265`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `bi_11409236811878669265`.`首次交易日期` as `首次交易日期` , `bi_11409236811878669265`.`最近交易日期` as `最近交易日期` , `bi_11409236811878669265`.`平均油量升数` as `平均油量升数` , `bi_11409236811878669265`.`平均消费金额` as `平均消费金额` , `bi_11409236811878669265`.`平均折扣金额` as `平均折扣金额` , `bi_11409236811878669265`.`平均余额` as `平均余额` , `bi_11409236811878669265`.`日均消费笔数` as `日均消费笔数` , `bi_11409236811878669265`.`日均消费金额` as `日均消费金额` , `bi_11409236811878669265`.`单日消费次数过多次数` as `单日消费次数过多次数` , `bi_11409236811878669265`.`不记名卡夜间消费总次数` as `不记名卡夜间消费总次数` , `bi_11409236811878669265`.`不记名卡夜间消费总金额` as `不记名卡夜间消费总金额` , `bi_11409236811878669265`.`日均夜间消费笔数` as `日均夜间消费笔数` , `bi_11409236811878669265`.`日均夜间消费金额` as `日均夜间消费金额` , `bi_11409236811878669265`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `bi_11409236811878669265`.`睡眠次数` as `睡眠次数` , `bi_11409236811878669265`.`是否仍在睡眠` as `是否仍在睡眠` , `bi_11409236811878669265`.`不记名卡累计消费金额` as `不记名卡累计消费金额` , `bi_11409236811878669265`.`不记名卡消费金额方差` as `不记名卡消费金额方差` , `bi_11409236811878669265`.`不记名卡累计消费次数` as `不记名卡累计消费次数` , `bi_11409236811878669265`.`不记名卡消费金额为小数次数` as `不记名卡消费金额为小数次数` , `bi_11409236811878669265`.`不记名卡消费过油品类型数量` as `不记名卡消费过油品类型数量` , `bi_11409236811878669265`.`不记名卡消费过汽油品类型数量` as `消费过汽油品类型数量636841632` , `bi_11409236811878669265`.`不记名卡汽油消费次数占比` as `不记名卡汽油消费次数占比` , `bi_11409236811878669265`.`不记名卡汽油单笔高额消费次数` as `汽油单笔高额消费次数_1368620500` , `bi_11409236811878669265`.`不记名卡柴油消费次数占比` as `不记名卡柴油消费次数占比` , `bi_11409236811878669265`.`不记名卡天然气消费次数占比` as `不记名卡天然气消费次数占比` , `bi_11409236811878669265`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `bi_11409236811878669265`.`非油累计消费金额` as `非油累计消费金额` , `bi_11409236811878669265`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `bi_11409236811878669265`.`不记名卡累计充值金额` as `不记名卡累计充值金额` , `bi_11409236811878669265`.`单日充值次数过多次数` as `单日充值次数过多次数` , `bi_11409236811878669265`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `bi_11409236811878669265`.`同一班次消费的次数` as `同一班次消费的次数` , `bi_11409236811878669265`.`密码重置次数` as `密码重置次数` , `bi_11409236811878669265`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `bi_11409236811878669265`.`不记名卡余额充足时充钱的次数` as `余额充足时充钱的次数1957627260` , `bi_11409236811878669265`.`是否曾频繁转账` as `是否曾频繁转账` , `bi_11409236811878669265`.`是否异常加油卡` as `是否异常加油卡` , `bi_11409236811878669265`.`单位名称` as `单位名称` , `bi_11409236811878669265`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`不记名卡消费过加油站站点数量` as `不记名卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`不记名卡夜间消费总次数` as `不记名卡夜间消费总次数`,`不记名卡夜间消费总金额` as `不记名卡夜间消费总金额`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`不记名卡累计消费金额` as `不记名卡累计消费金额`,`不记名卡消费金额方差` as `不记名卡消费金额方差`,`不记名卡累计消费次数` as `不记名卡累计消费次数`,`不记名卡消费金额为小数次数` as `不记名卡消费金额为小数次数`,`不记名卡消费过油品类型数量` as `不记名卡消费过油品类型数量`,`不记名卡消费过汽油品类型数量` as `不记名卡消费过汽油品类型数量`,`不记名卡汽油消费次数占比` as `不记名卡汽油消费次数占比`,`不记名卡汽油单笔高额消费次数` as `不记名卡汽油单笔高额消费次数`,`不记名卡柴油消费次数占比` as `不记名卡柴油消费次数占比`,`不记名卡天然气消费次数占比` as `不记名卡天然气消费次数占比`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`不记名卡累计充值金额` as `不记名卡累计充值金额`,`单日充值次数过多次数` as `单日充值次数过多次数`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`不记名卡余额充足时充钱的次数` as `不记名卡余额充足时充钱的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`不记名卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`不记名卡夜间消费总次数`,`不记名卡夜间消费总金额`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`不记名卡累计消费金额`,`不记名卡消费金额方差`,`不记名卡累计消费次数`,`不记名卡消费金额为小数次数`,`不记名卡消费过油品类型数量`,`不记名卡消费过汽油品类型数量`,`不记名卡汽油消费次数占比`,`不记名卡汽油单笔高额消费次数`,`不记名卡柴油消费次数占比`,`不记名卡天然气消费次数占比`,`ic卡大额非油消费次数`,`非油累计消费金额`,`非油与成品油消费金额比例`,`不记名卡累计充值金额`,`单日充值次数过多次数`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`不记名卡余额充足时充钱的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,     
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `不记名卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`, 
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`, 
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`,
       `单日消费次数过多次数`, 
       `不记名卡夜间消费总次数`,
       `不记名卡夜间消费总金额`,
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`, 
       `睡眠次数`,
       `是否仍在睡眠`,
       `不记名卡累计消费金额`,
       `加油卡消费金额方差` `不记名卡消费金额方差`,
       `不记名卡累计消费次数`,
       `加油卡消费金额为小数次数` `不记名卡消费金额为小数次数`,
       `不记名卡消费过油品类型数量`,
       `不记名卡消费过汽油品类型数量`,
       `不记名卡汽油消费次数占比`,
       `不记名卡汽油单笔高额消费次数`,
       `不记名卡柴油消费次数占比`,
       `不记名卡天然气消费次数占比`,
       `IC卡大额非油消费次数`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `不记名卡累计充值金额`,
       `单日充值次数过多次数`, 
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `不记名卡余额充足时充钱的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM DW04_SJFX.APP_AUAP_YK_NN) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `bi_11409236811878669265`  
     ) `bi_2282682891841018241`
      limit 1200001 
I0825 11:46:30.351658 50186 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:46:30.351956 50186 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:46:30.352986 50186 coordinator.cc:349] starting execution on 2 backends for query_id=8b46146ce95452bd:2b53dab00000000
I0825 11:46:30.355734 45240 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=8b46146ce95452bd:2b53dab00000000
I0825 11:46:30.356225 45240 query-exec-mgr.cc:46] StartQueryFInstances() query_id=8b46146ce95452bd:2b53dab00000000 coord=e4bdhpp025:22000
I0825 11:46:30.356750 45240 query-state.cc:178] Buffer pool limit for 8b46146ce95452bd:2b53dab00000000: 819200000
I0825 11:46:30.357093 45240 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 8b46146ce95452bd:2b53dab00000000
I0825 11:46:30.369877 50212 query-state.cc:300] StartFInstances(): query_id=8b46146ce95452bd:2b53dab00000000 #instances=1
I0825 11:46:30.370580 50212 query-state.cc:313] descriptor table for query=8b46146ce95452bd:2b53dab00000000
tuples:
Tuple(id=0 size=583 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=576 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=576 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=STRING col_path=[10] offset=32 null=(offset=576 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[48] offset=48 null=(offset=576 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=STRING col_path=[39] offset=64 null=(offset=576 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=BIGINT col_path=[29] offset=352 null=(offset=578 mask=40) slot_idx=22 field_idx=-1), Slot(id=6 type=STRING col_path=[11] offset=80 null=(offset=576 mask=20) slot_idx=5 field_idx=-1), Slot(id=7 type=STRING col_path=[12] offset=96 null=(offset=576 mask=40) slot_idx=6 field_idx=-1), Slot(id=8 type=STRING col_path=[13] offset=112 null=(offset=576 mask=80) slot_idx=7 field_idx=-1), Slot(id=9 type=STRING col_path=[38] offset=128 null=(offset=577 mask=1) slot_idx=8 field_idx=-1), Slot(id=10 type=STRING col_path=[43] offset=144 null=(offset=577 mask=2) slot_idx=9 field_idx=-1), Slot(id=11 type=TIMESTAMP col_path=[15] offset=160 null=(offset=577 mask=4) slot_idx=10 field_idx=-1), Slot(id=12 type=TIMESTAMP col_path=[16] offset=176 null=(offset=577 mask=8) slot_idx=11 field_idx=-1), Slot(id=13 type=DECIMAL(16,2) col_path=[2] offset=360 null=(offset=578 mask=80) slot_idx=23 field_idx=-1), Slot(id=14 type=DECIMAL(17,2) col_path=[3] offset=368 null=(offset=579 mask=1) slot_idx=24 field_idx=-1), Slot(id=15 type=DECIMAL(17,2) col_path=[4] offset=376 null=(offset=579 mask=2) slot_idx=25 field_idx=-1), Slot(id=16 type=DECIMAL(17,2) col_path=[5] offset=384 null=(offset=579 mask=4) slot_idx=26 field_idx=-1), Slot(id=17 type=DOUBLE col_path=[6] offset=392 null=(offset=579 mask=8) slot_idx=27 field_idx=-1), Slot(id=18 type=DECIMAL(27,2) col_path=[7] offset=192 null=(offset=577 mask=10) slot_idx=12 field_idx=-1), Slot(id=19 type=BIGINT col_path=[25] offset=400 null=(offset=579 mask=10) slot_idx=28 field_idx=-1), Slot(id=20 type=BIGINT col_path=[27] offset=408 null=(offset=579 mask=20) slot_idx=29 field_idx=-1), Slot(id=21 type=DECIMAL(26,2) col_path=[28] offset=208 null=(offset=577 mask=20) slot_idx=13 field_idx=-1), Slot(id=22 type=DOUBLE col_path=[8] offset=416 null=(offset=579 mask=40) slot_idx=30 field_idx=-1), Slot(id=23 type=DECIMAL(27,2) col_path=[9] offset=224 null=(offset=577 mask=40) slot_idx=14 field_idx=-1), Slot(id=24 type=BIGINT col_path=[26] offset=424 null=(offset=579 mask=80) slot_idx=31 field_idx=-1), Slot(id=25 type=BIGINT col_path=[17] offset=432 null=(offset=580 mask=1) slot_idx=32 field_idx=-1), Slot(id=26 type=INT col_path=[18] offset=568 null=(offset=582 mask=2) slot_idx=49 field_idx=-1), Slot(id=27 type=DECIMAL(26,2) col_path=[41] offset=240 null=(offset=577 mask=80) slot_idx=15 field_idx=-1), Slot(id=28 type=DOUBLE col_path=[49] offset=440 null=(offset=580 mask=2) slot_idx=33 field_idx=-1), Slot(id=29 type=BIGINT col_path=[42] offset=448 null=(offset=580 mask=4) slot_idx=34 field_idx=-1), Slot(id=30 type=BIGINT col_path=[44] offset=456 null=(offset=580 mask=8) slot_idx=35 field_idx=-1), Slot(id=31 type=BIGINT col_path=[21] offset=464 null=(offset=580 mask=10) slot_idx=36 field_idx=-1), Slot(id=32 type=BIGINT col_path=[22] offset=472 null=(offset=580 mask=20) slot_idx=37 field_idx=-1), Slot(id=33 type=DOUBLE col_path=[45] offset=480 null=(offset=580 mask=40) slot_idx=38 field_idx=-1), Slot(id=34 type=BIGINT col_path=[20] offset=488 null=(offset=580 mask=80) slot_idx=39 field_idx=-1), Slot(id=35 type=DOUBLE col_path=[46] offset=496 null=(offset=581 mask=1) slot_idx=40 field_idx=-1), Slot(id=36 type=DOUBLE col_path=[47] offset=504 null=(offset=581 mask=2) slot_idx=41 field_idx=-1), Slot(id=37 type=BIGINT col_path=[19] offset=512 null=(offset=581 mask=4) slot_idx=42 field_idx=-1), Slot(id=38 type=DECIMAL(26,2) col_path=[30] offset=256 null=(offset=578 mask=1) slot_idx=16 field_idx=-1), Slot(id=39 type=DECIMAL(31,4) col_path=[31] offset=272 null=(offset=578 mask=2) slot_idx=17 field_idx=-1), Slot(id=40 type=DECIMAL(26,2) col_path=[23] offset=288 null=(offset=578 mask=4) slot_idx=18 field_idx=-1), Slot(id=41 type=BIGINT col_path=[24] offset=520 null=(offset=581 mask=8) slot_idx=43 field_idx=-1), Slot(id=42 type=BIGINT col_path=[32] offset=528 null=(offset=581 mask=10) slot_idx=44 field_idx=-1), Slot(id=43 type=BIGINT col_path=[33] offset=536 null=(offset=581 mask=20) slot_idx=45 field_idx=-1), Slot(id=44 type=BIGINT col_path=[40] offset=544 null=(offset=581 mask=40) slot_idx=46 field_idx=-1), Slot(id=45 type=BIGINT col_path=[34] offset=552 null=(offset=581 mask=80) slot_idx=47 field_idx=-1), Slot(id=46 type=BIGINT col_path=[35] offset=560 null=(offset=582 mask=1) slot_idx=48 field_idx=-1), Slot(id=47 type=INT col_path=[36] offset=572 null=(offset=582 mask=4) slot_idx=50 field_idx=-1), Slot(id=48 type=STRING col_path=[50] offset=304 null=(offset=578 mask=8) slot_idx=19 field_idx=-1), Slot(id=49 type=STRING col_path=[14] offset=320 null=(offset=578 mask=10) slot_idx=20 field_idx=-1), Slot(id=50 type=STRING col_path=[37] offset=336 null=(offset=578 mask=20) slot_idx=21 field_idx=-1)] tuple_path=[])
I0825 11:46:30.370591 50186 coordinator.cc:362] started execution on 2 backends for query_id=8b46146ce95452bd:2b53dab00000000
I0825 11:46:30.372978 50213 query-state.cc:395] Executing instance. instance_id=8b46146ce95452bd:2b53dab00000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=1 #in-flight=4
I0825 11:46:30.377995 50212 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=8b46146ce95452bd:2b53dab00000000 refcnt=3
I0825 11:46:30.386839 50186 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xbdRT\xe9l\x14F\x8b\x00\x00\x00\x00\xab=\xb5\x02",
      02: secret (string) = "\xbdRT\xe9l\x14F\x8b\x00\x00\x00\x00\xab=\xb5\x02",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:31.052736 50184 status.cc:125] Invalid query option: KrbUserName
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:31.053373 50184 impala-server.cc:1015] UnregisterQuery(): query_id=bc41dd74f30ff0fc:788ae0be00000000
I0825 11:46:31.053848 50184 impala-server.cc:1102] Cancel(): query_id=bc41dd74f30ff0fc:788ae0be00000000
I0825 11:46:31.056854 50184 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1a\xbb\xe0\xe3\xd2\x8aD\xc3\xa8\xa7\xef\xc1\xb3g\xb07",
      02: secret (string) = "ZM:\xf0\xf6\xedB\x1e\x9c\xe6&\xc3.\x19\x02\xf1",
    },
  },
  02: statement (string) = "SET alias=`bi_6749357856600458205`",
  04: runAsync (bool) = true,
}
I0825 11:46:31.057123 50184 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1a\xbb\xe0\xe3\xd2\x8aD\xc3\xa8\xa7\xef\xc1\xb3g\xb07",
      02: secret (string) = "ZM:\xf0\xf6\xedB\x1e\x9c\xe6&\xc3.\x19\x02\xf1",
    },
  },
  02: statement (string) = "SET alias=`bi_6749357856600458205`",
  04: runAsync (bool) = true,
}
I0825 11:46:31.058116 50184 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:31.068480 50184 Frontend.java:935] Analyzing query: SET alias=`bi_6749357856600458205`
I0825 11:46:31.069296 50184 Frontend.java:947] Analysis finished.
I0825 11:46:31.331192 50186 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=8b46146ce95452bd:2b53dab00000000
I0825 11:46:31.332644 50186 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[53] {
      [0] = TColumnDesc {
        01: columnName (string) = "bi_15159864404575209771",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "bi_5176736373764729517",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "bi_18002650512820288522",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "bi_10070664717213612371",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "bi_17363467753723988445",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "bi_17559908322177175193",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "bi_30169237570504987",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 6,
      },
      [7] = TColumnDesc {
        01: columnName (string) = "bi_630186766851260751",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 7,
      },
      [8] = TColumnDesc {
        01: columnName (string) = "bi_15231137875792296164",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 8,
      },
      [9] = TColumnDesc {
        01: columnName (string) = "bi_15621164357820908518",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 9,
      },
      [10] = TColumnDesc {
        01: columnName (string) = "bi_12117277212538675021",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 10,
      },
      [11] = TColumnDesc {
        01: columnName (string) = "bi_6646908465420298805",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 11,
      },
      [12] = TColumnDesc {
        01: columnName (string) = "bi_13530833546549329347",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 12,
      },
      [13] = TColumnDesc {
        01: columnName (string) = "bi_11273946998078465677",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 16,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 13,
      },
      [14] = TColumnDesc {
        01: columnName (string) = "bi_8288133923748336711",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 14,
      },
      [15] = TColumnDesc {
        01: columnName (string) = "bi_4970043801986327351",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 15,
      },
      [16] = TColumnDesc {
        01: columnName (string) = "bi_8381900821794444625",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 16,
      },
      [17] = TColumnDesc {
        01: columnName (string) = "bi_10723048596585302054",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 17,
      },
      [18] = TColumnDesc {
        01: columnName (string) = "bi_41819982784080953",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 27,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 18,
      },
      [19] = TColumnDesc {
        01: columnName (string) = "bi_12112238727142840682",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 19,
      },
      [20] = TColumnDesc {
        01: columnName (string) = "bi_3938683413919446579",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 20,
      },
      [21] = TColumnDesc {
        01: columnName (string) = "bi_12562378023438062621",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 21,
      },
      [22] = TColumnDesc {
        01: columnName (string) = "bi_6200430593887269742",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 22,
      },
      [23] = TColumnDesc {
        01: columnName (string) = "bi_1689351619663764928",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 27,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 23,
      },
      [24] = TColumnDesc {
        01: columnName (string) = "bi_12909975068497935338",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 24,
      },
      [25] = TColumnDesc {
        01: columnName (string) = "bi_11007498412015863178",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 25,
      },
      [26] = TColumnDesc {
        01: columnName (string) = "bi_12482824553037098532",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 26,
      },
      [27] = TColumnDesc {
        01: columnName (string) = "bi_4601843349518591292",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 27,
      },
      [28] = TColumnDesc {
        01: columnName (string) = "bi_2924531414258932610",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 28,
      },
      [29] = TColumnDesc {
        01: columnName (string) = "bi_5870083467319809789",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 29,
      },
      [30] = TColumnDesc {
        01: columnName (string) = "bi_3842164172086352148",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 30,
      },
      [31] = TColumnDesc {
        01: columnName (string) = "bi_806870660964728186",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 31,
      },
      [32] = TColumnDesc {
        01: columnName (string) = "bi_556036179544267082",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 32,
      },
      [33] = TColumnDesc {
        01: columnName (string) = "bi_1068488302117352384",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 33,
      },
      [34] = TColumnDesc {
        01: columnName (string) = "bi_8356278071803173785",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 34,
      },
      [35] = TColumnDesc {
        01: columnName (string) = "bi_5766421841800396638",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 35,
      },
      [36] = TColumnDesc {
        01: columnName (string) = "bi_14290961476284126012",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 36,
      },
      [37] = TColumnDesc {
        01: columnName (string) = "bi_992601592685606614",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 37,
      },
      [38] = TColumnDesc {
        01: columnName (string) = "bi_8276717807170841059",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 38,
      },
      [39] = TColumnDesc {
        01: columnName (string) = "bi_14967514132684380162",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 31,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 4,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 39,
      },
      [40] = TColumnDesc {
        01: columnName (string) = "bi_11701916747493263994",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 40,
      },
      [41] = TColumnDesc {
        01: columnName (string) = "bi_16449755606537913494",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 41,
      },
      [42] = TColumnDesc {
        01: columnName (string) = "bi_12225443660237330283",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 42,
      },
      [43] = TColumnDesc {
        01: columnName (string) = "bi_5256996930125776142",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 43,
      },
      [44] = TColumnDesc {
        01: columnName (string) = "bi_8414722834803604324",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 44,
      },
      [45] = TColumnDesc {
        01: columnName (string) = "bi_10212944947192418963",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 45,
      },
      [46] = TColumnDesc {
        01: columnName (string) = "bi_2466479945894447936",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 46,
      },
      [47] = TColumnDesc {
        01: columnName (string) = "bi_14279744686847475029",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 47,
      },
      [48] = TColumnDesc {
        01: columnName (string) = "bi_1040490846059638232",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 48,
      },
      [49] = TColumnDesc {
        01: columnName (string) = "bi_10101021918568318220",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 49,
      },
      [50] = TColumnDesc {
        01: columnName (string) = "bi_13138972180237352292",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 50,
      },
      [51] = TColumnDesc {
        01: columnName (string) = "bi_10651599939693506386",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 51,
      },
      [52] = TColumnDesc {
        01: columnName (string) = "bi_13164579150965645243",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 52,
      },
    },
  },
}
I0825 11:46:32.689232 50184 status.cc:125] Invalid query option: alias
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:32.690868 50184 impala-server.cc:1015] UnregisterQuery(): query_id=324e13cade7a3db7:7cbb127900000000
I0825 11:46:32.691287 50184 impala-server.cc:1102] Cancel(): query_id=324e13cade7a3db7:7cbb127900000000
I0825 11:46:32.693686 50184 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1a\xbb\xe0\xe3\xd2\x8aD\xc3\xa8\xa7\xef\xc1\xb3g\xb07",
      02: secret (string) = "ZM:\xf0\xf6\xedB\x1e\x9c\xe6&\xc3.\x19\x02\xf1",
    },
  },
  02: statement (string) = "SET mem_limit=8g",
  04: runAsync (bool) = true,
}
I0825 11:46:32.695046 50184 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1a\xbb\xe0\xe3\xd2\x8aD\xc3\xa8\xa7\xef\xc1\xb3g\xb07",
      02: secret (string) = "ZM:\xf0\xf6\xedB\x1e\x9c\xe6&\xc3.\x19\x02\xf1",
    },
  },
  02: statement (string) = "SET mem_limit=8g",
  04: runAsync (bool) = true,
}
I0825 11:46:32.695994 50184 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:32.705828 50184 Frontend.java:935] Analyzing query: SET mem_limit=8g
I0825 11:46:32.707314 50184 Frontend.java:947] Analysis finished.
I0825 11:46:32.720836 50184 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xd0\x85\xf4\x04\xc2\bK\xd6\x00\x00\x00\x00\xa2\xb8-\x06",
      02: secret (string) = "\xd0\x85\xf4\x04\xc2\bK\xd6\x00\x00\x00\x00\xa2\xb8-\x06",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:32.722985 50184 impala-hs2-server.cc:683] CloseOperation(): query_id=d64b08c204f485d0:62db8a200000000
I0825 11:46:32.723282 50184 impala-server.cc:1015] UnregisterQuery(): query_id=d64b08c204f485d0:62db8a200000000
I0825 11:46:32.723627 50184 impala-server.cc:1102] Cancel(): query_id=d64b08c204f485d0:62db8a200000000
I0825 11:46:32.725286 50184 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1a\xbb\xe0\xe3\xd2\x8aD\xc3\xa8\xa7\xef\xc1\xb3g\xb07",
      02: secret (string) = "ZM:\xf0\xf6\xedB\x1e\x9c\xe6&\xc3.\x19\x02\xf1",
    },
  },
  02: statement (string) = "SET queryType=JDBC",
  04: runAsync (bool) = true,
}
I0825 11:46:32.726217 50184 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1a\xbb\xe0\xe3\xd2\x8aD\xc3\xa8\xa7\xef\xc1\xb3g\xb07",
      02: secret (string) = "ZM:\xf0\xf6\xedB\x1e\x9c\xe6&\xc3.\x19\x02\xf1",
    },
  },
  02: statement (string) = "SET queryType=JDBC",
  04: runAsync (bool) = true,
}
I0825 11:46:32.727771 50184 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:32.740891 50184 Frontend.java:935] Analyzing query: SET queryType=JDBC
I0825 11:46:32.741701 50184 Frontend.java:947] Analysis finished.
I0825 11:46:32.857322 50199 status.cc:125] Invalid query option: KrbUserName
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:32.858304 50199 impala-server.cc:1015] UnregisterQuery(): query_id=4843bd8b5aca4329:d4e37d6500000000
I0825 11:46:32.858973 50199 impala-server.cc:1102] Cancel(): query_id=4843bd8b5aca4329:d4e37d6500000000
I0825 11:46:32.861596 50199 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xea\xa9\xf8n\xaa[K\x9b\x941z\xd0\xa3\xba\x90W",
      02: secret (string) = "]\x9e\x93\xf3\xa3qHa\x9f\xe6\x9e\xef\xce\xd5\x93A",
    },
  },
  02: statement (string) = "SET alias=`bi_6749357856600458205`",
  04: runAsync (bool) = true,
}
I0825 11:46:32.862200 50199 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xea\xa9\xf8n\xaa[K\x9b\x941z\xd0\xa3\xba\x90W",
      02: secret (string) = "]\x9e\x93\xf3\xa3qHa\x9f\xe6\x9e\xef\xce\xd5\x93A",
    },
  },
  02: statement (string) = "SET alias=`bi_6749357856600458205`",
  04: runAsync (bool) = true,
}
I0825 11:46:32.863243 50199 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:32.884379 50199 Frontend.java:935] Analyzing query: SET alias=`bi_6749357856600458205`
I0825 11:46:32.885318 50199 Frontend.java:947] Analysis finished.
I0825 11:46:33.139147 50233 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:46:33.140300 50233 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:46:33.165235 50240 query-exec-mgr.cc:95] QueryState: query_id=8b46146ce95452bd:2b53dab00000000 refcnt=3
I0825 11:46:33.168056 50240 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=8b46146ce95452bd:2b53dab00000000 refcnt=3
I0825 11:46:33.330535 50181 status.cc:125] Invalid query option: KrbUserName
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:33.332445 50181 impala-server.cc:1015] UnregisterQuery(): query_id=6746865f633da627:867c085b00000000
I0825 11:46:33.333894 50181 impala-server.cc:1102] Cancel(): query_id=6746865f633da627:867c085b00000000
I0825 11:46:33.337736 50181 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xce\xfcrez\x8aJ\xa2\x9a\xc8f\xaa\x1e\xc9x\\",
      02: secret (string) = "\xc7\xc4P\x96\x0f\xa6H\xce\xa7GC\x10\x03w\x83\xb2",
    },
  },
  02: statement (string) = "SET alias=`bi_6749357856600458205`",
  04: runAsync (bool) = true,
}
I0825 11:46:33.339896 50181 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xce\xfcrez\x8aJ\xa2\x9a\xc8f\xaa\x1e\xc9x\\",
      02: secret (string) = "\xc7\xc4P\x96\x0f\xa6H\xce\xa7GC\x10\x03w\x83\xb2",
    },
  },
  02: statement (string) = "SET alias=`bi_6749357856600458205`",
  04: runAsync (bool) = true,
}
I0825 11:46:33.343180 50181 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:33.362774 50181 Frontend.java:935] Analyzing query: SET alias=`bi_6749357856600458205`
I0825 11:46:33.363533 50181 Frontend.java:947] Analysis finished.
I0825 11:46:35.035557 50184 status.cc:125] Invalid query option: queryType
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:35.036461 50184 impala-server.cc:1015] UnregisterQuery(): query_id=bc47f1a5a74fb919:69dc1d8e00000000
I0825 11:46:35.036743 50184 impala-server.cc:1102] Cancel(): query_id=bc47f1a5a74fb919:69dc1d8e00000000
I0825 11:46:35.039729 50184 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1a\xbb\xe0\xe3\xd2\x8aD\xc3\xa8\xa7\xef\xc1\xb3g\xb07",
      02: secret (string) = "ZM:\xf0\xf6\xedB\x1e\x9c\xe6&\xc3.\x19\x02\xf1",
    },
  },
  02: statement (string) = "SET timeoutSeconds=1800",
  04: runAsync (bool) = true,
}
I0825 11:46:35.040864 50184 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1a\xbb\xe0\xe3\xd2\x8aD\xc3\xa8\xa7\xef\xc1\xb3g\xb07",
      02: secret (string) = "ZM:\xf0\xf6\xedB\x1e\x9c\xe6&\xc3.\x19\x02\xf1",
    },
  },
  02: statement (string) = "SET timeoutSeconds=1800",
  04: runAsync (bool) = true,
}
I0825 11:46:35.042023 50184 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:35.053547 50184 Frontend.java:935] Analyzing query: SET timeoutSeconds=1800
I0825 11:46:35.055581 50184 Frontend.java:947] Analysis finished.
I0825 11:46:36.053284 50199 status.cc:125] Invalid query option: alias
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:36.054319 50199 impala-server.cc:1015] UnregisterQuery(): query_id=945bc85a31dd57d:3b78627d00000000
I0825 11:46:36.054773 50199 impala-server.cc:1102] Cancel(): query_id=945bc85a31dd57d:3b78627d00000000
I0825 11:46:36.057993 50199 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xea\xa9\xf8n\xaa[K\x9b\x941z\xd0\xa3\xba\x90W",
      02: secret (string) = "]\x9e\x93\xf3\xa3qHa\x9f\xe6\x9e\xef\xce\xd5\x93A",
    },
  },
  02: statement (string) = "SET mem_limit=8g",
  04: runAsync (bool) = true,
}
I0825 11:46:36.059861 50199 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xea\xa9\xf8n\xaa[K\x9b\x941z\xd0\xa3\xba\x90W",
      02: secret (string) = "]\x9e\x93\xf3\xa3qHa\x9f\xe6\x9e\xef\xce\xd5\x93A",
    },
  },
  02: statement (string) = "SET mem_limit=8g",
  04: runAsync (bool) = true,
}
I0825 11:46:36.061208 50199 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:36.078518 50199 Frontend.java:935] Analyzing query: SET mem_limit=8g
I0825 11:46:36.079406 50199 Frontend.java:947] Analysis finished.
I0825 11:46:36.082655 50199 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "I_\xd4`@#M\x8e\x00\x00\x00\x00\xc3\xfa\x05E",
      02: secret (string) = "I_\xd4`@#M\x8e\x00\x00\x00\x00\xc3\xfa\x05E",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:36.084715 50199 impala-hs2-server.cc:683] CloseOperation(): query_id=8e4d234060d45f49:4505fac300000000
I0825 11:46:36.085386 50199 impala-server.cc:1015] UnregisterQuery(): query_id=8e4d234060d45f49:4505fac300000000
I0825 11:46:36.085862 50199 impala-server.cc:1102] Cancel(): query_id=8e4d234060d45f49:4505fac300000000
I0825 11:46:36.088169 50199 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xea\xa9\xf8n\xaa[K\x9b\x941z\xd0\xa3\xba\x90W",
      02: secret (string) = "]\x9e\x93\xf3\xa3qHa\x9f\xe6\x9e\xef\xce\xd5\x93A",
    },
  },
  02: statement (string) = "SET queryType=JDBC",
  04: runAsync (bool) = true,
}
I0825 11:46:36.088649 50199 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xea\xa9\xf8n\xaa[K\x9b\x941z\xd0\xa3\xba\x90W",
      02: secret (string) = "]\x9e\x93\xf3\xa3qHa\x9f\xe6\x9e\xef\xce\xd5\x93A",
    },
  },
  02: statement (string) = "SET queryType=JDBC",
  04: runAsync (bool) = true,
}
I0825 11:46:36.089511 50199 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:36.107792 50199 Frontend.java:935] Analyzing query: SET queryType=JDBC
I0825 11:46:36.108991 50199 Frontend.java:947] Analysis finished.
I0825 11:46:36.232445 50236 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:46:36.233680 50236 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:46:36.248400 50259 query-exec-mgr.cc:95] QueryState: query_id=8b46146ce95452bd:2b53dab00000000 refcnt=3
I0825 11:46:36.250792 50259 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=8b46146ce95452bd:2b53dab00000000 refcnt=3
I0825 11:46:36.700963 50181 status.cc:125] Invalid query option: alias
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:36.701463 50181 impala-server.cc:1015] UnregisterQuery(): query_id=784684f6d76ce5b9:29ad10a00000000
I0825 11:46:36.711517 50181 impala-server.cc:1102] Cancel(): query_id=784684f6d76ce5b9:29ad10a00000000
I0825 11:46:36.717579 50181 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xce\xfcrez\x8aJ\xa2\x9a\xc8f\xaa\x1e\xc9x\\",
      02: secret (string) = "\xc7\xc4P\x96\x0f\xa6H\xce\xa7GC\x10\x03w\x83\xb2",
    },
  },
  02: statement (string) = "SET mem_limit=8g",
  04: runAsync (bool) = true,
}
I0825 11:46:36.718050 50181 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xce\xfcrez\x8aJ\xa2\x9a\xc8f\xaa\x1e\xc9x\\",
      02: secret (string) = "\xc7\xc4P\x96\x0f\xa6H\xce\xa7GC\x10\x03w\x83\xb2",
    },
  },
  02: statement (string) = "SET mem_limit=8g",
  04: runAsync (bool) = true,
}
I0825 11:46:36.719477 50181 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:36.742472 50181 Frontend.java:935] Analyzing query: SET mem_limit=8g
I0825 11:46:36.753019 50184 status.cc:125] Invalid query option: timeoutSeconds
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:36.760037 50181 Frontend.java:947] Analysis finished.
I0825 11:46:36.760061 50184 impala-server.cc:1015] UnregisterQuery(): query_id=3d406d008162b3e3:2fdd2bc900000000
I0825 11:46:36.760402 50184 impala-server.cc:1102] Cancel(): query_id=3d406d008162b3e3:2fdd2bc900000000
I0825 11:46:36.766228 50181 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xd0\x10\xd5\n\xa4XCb\x00\x00\x00\x00\xfd2\xd5\x8a",
      02: secret (string) = "\xd0\x10\xd5\n\xa4XCb\x00\x00\x00\x00\xfd2\xd5\x8a",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:36.766482 50184 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1a\xbb\xe0\xe3\xd2\x8aD\xc3\xa8\xa7\xef\xc1\xb3g\xb07",
      02: secret (string) = "ZM:\xf0\xf6\xedB\x1e\x9c\xe6&\xc3.\x19\x02\xf1",
    },
  },
  02: statement (string) = "SET useSSL=false",
  04: runAsync (bool) = true,
}
I0825 11:46:36.766651 50184 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1a\xbb\xe0\xe3\xd2\x8aD\xc3\xa8\xa7\xef\xc1\xb3g\xb07",
      02: secret (string) = "ZM:\xf0\xf6\xedB\x1e\x9c\xe6&\xc3.\x19\x02\xf1",
    },
  },
  02: statement (string) = "SET useSSL=false",
  04: runAsync (bool) = true,
}
I0825 11:46:36.767230 50184 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:36.769407 50181 impala-hs2-server.cc:683] CloseOperation(): query_id=624358a40ad510d0:8ad532fd00000000
I0825 11:46:36.769938 50181 impala-server.cc:1015] UnregisterQuery(): query_id=624358a40ad510d0:8ad532fd00000000
I0825 11:46:36.771255 50181 impala-server.cc:1102] Cancel(): query_id=624358a40ad510d0:8ad532fd00000000
I0825 11:46:36.773564 50181 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xce\xfcrez\x8aJ\xa2\x9a\xc8f\xaa\x1e\xc9x\\",
      02: secret (string) = "\xc7\xc4P\x96\x0f\xa6H\xce\xa7GC\x10\x03w\x83\xb2",
    },
  },
  02: statement (string) = "SET queryType=JDBC",
  04: runAsync (bool) = true,
}
I0825 11:46:36.777058 50181 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xce\xfcrez\x8aJ\xa2\x9a\xc8f\xaa\x1e\xc9x\\",
      02: secret (string) = "\xc7\xc4P\x96\x0f\xa6H\xce\xa7GC\x10\x03w\x83\xb2",
    },
  },
  02: statement (string) = "SET queryType=JDBC",
  04: runAsync (bool) = true,
}
I0825 11:46:36.777297 50184 Frontend.java:935] Analyzing query: SET useSSL=false
I0825 11:46:36.778221 50184 Frontend.java:947] Analysis finished.
I0825 11:46:36.778216 50181 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:36.790884 50181 Frontend.java:935] Analyzing query: SET queryType=JDBC
I0825 11:46:36.791702 50181 Frontend.java:947] Analysis finished.
I0825 11:46:38.601538 50184 status.cc:125] Invalid query option: useSSL
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:38.603436 50184 impala-server.cc:1015] UnregisterQuery(): query_id=a94060c307fc7ade:52a9f52800000000
I0825 11:46:38.604106 50184 impala-server.cc:1102] Cancel(): query_id=a94060c307fc7ade:52a9f52800000000
I0825 11:46:38.608716 50184 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1a\xbb\xe0\xe3\xd2\x8aD\xc3\xa8\xa7\xef\xc1\xb3g\xb07",
      02: secret (string) = "ZM:\xf0\xf6\xedB\x1e\x9c\xe6&\xc3.\x19\x02\xf1",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:46:38.610790 50184 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1a\xbb\xe0\xe3\xd2\x8aD\xc3\xa8\xa7\xef\xc1\xb3g\xb07",
      02: secret (string) = "ZM:\xf0\xf6\xedB\x1e\x9c\xe6&\xc3.\x19\x02\xf1",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:46:38.612007 50184 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:38.629783 50184 Frontend.java:935] Analyzing query: DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`
I0825 11:46:38.631314 50184 Frontend.java:947] Analysis finished.
I0825 11:46:38.683916 50184 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x1e\x13\xb5;\xcc\x13HP\x00\x00\x00\x00\x873_\x89",
      02: secret (string) = "\x1e\x13\xb5;\xcc\x13HP\x00\x00\x00\x00\x873_\x89",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:38.687644 50184 impala-hs2-server.cc:683] CloseOperation(): query_id=504813cc3bb5131e:895f338700000000
I0825 11:46:38.688361 50184 impala-server.cc:1015] UnregisterQuery(): query_id=504813cc3bb5131e:895f338700000000
I0825 11:46:38.688910 50184 impala-server.cc:1102] Cancel(): query_id=504813cc3bb5131e:895f338700000000
I0825 11:46:38.692939 50184 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1a\xbb\xe0\xe3\xd2\x8aD\xc3\xa8\xa7\xef\xc1\xb3g\xb07",
      02: secret (string) = "ZM:\xf0\xf6\xedB\x1e\x9c\xe6&\xc3.\x19\x02\xf1",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:46:38.693236 50184 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1a\xbb\xe0\xe3\xd2\x8aD\xc3\xa8\xa7\xef\xc1\xb3g\xb07",
      02: secret (string) = "ZM:\xf0\xf6\xedB\x1e\x9c\xe6&\xc3.\x19\x02\xf1",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:46:38.694046 50184 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:38.704898 50184 Frontend.java:935] Analyzing query: DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`
I0825 11:46:38.706622 50184 Frontend.java:947] Analysis finished.
I0825 11:46:38.760133 50184 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = ")\x9a\xb1\b\x99\xfbJo\x00\x00\x00\x00\xaa\x88\xac\xc2",
      02: secret (string) = ")\x9a\xb1\b\x99\xfbJo\x00\x00\x00\x00\xaa\x88\xac\xc2",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:38.764456 50184 impala-hs2-server.cc:683] CloseOperation(): query_id=6f4afb9908b19a29:c2ac88aa00000000
I0825 11:46:38.765095 50184 impala-server.cc:1015] UnregisterQuery(): query_id=6f4afb9908b19a29:c2ac88aa00000000
I0825 11:46:38.765339 50184 impala-server.cc:1102] Cancel(): query_id=6f4afb9908b19a29:c2ac88aa00000000
I0825 11:46:38.769647 50184 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1a\xbb\xe0\xe3\xd2\x8aD\xc3\xa8\xa7\xef\xc1\xb3g\xb07",
      02: secret (string) = "ZM:\xf0\xf6\xedB\x1e\x9c\xe6&\xc3.\x19\x02\xf1",
    },
  },
  02: statement (string) = "SELECT `temp`.`\xe9[...](2438)",
  04: runAsync (bool) = true,
}
I0825 11:46:38.770996 50184 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1a\xbb\xe0\xe3\xd2\x8aD\xc3\xa8\xa7\xef\xc1\xb3g\xb07",
      02: secret (string) = "ZM:\xf0\xf6\xedB\x1e\x9c\xe6&\xc3.\x19\x02\xf1",
    },
  },
  02: statement (string) = "SELECT `temp`.`\xe9[...](2438)",
  04: runAsync (bool) = true,
}
I0825 11:46:38.771793 50184 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:38.785914 50184 Frontend.java:935] Analyzing query: SELECT `temp`.`采购订单类型`, `temp`.`采购订单日期`, `temp`.`商品类目描述`, `temp`.`订单金额_不含税`, `temp`.`是否完成交货`, `temp`.`该行是否被删除`, `temp`.`该行是否退货` FROM (SELECT `temp_sub_query_table`.`采购订单类型`, `temp_sub_query_table`.`采购订单日期`, `temp_sub_query_table`.`商品类目描述`, `temp_sub_query_table`.`订单金额_不含税`, `temp_sub_query_table`.`是否完成交货`, `temp_sub_query_table`.`该行是否被删除`, `temp_sub_query_table`.`该行是否退货` FROM (SELECT `APP_GSMS_HOS_CGDD`.`采购订单编号`, `APP_GSMS_HOS_CGDD`.`采购订单行项目`, `APP_GSMS_HOS_CGDD`.`采购订单类型`, `APP_GSMS_HOS_CGDD`.`采购订单类型描述`, `APP_GSMS_HOS_CGDD`.`采购订单日期`, `APP_GSMS_HOS_CGDD`.`供应商编码`, `APP_GSMS_HOS_CGDD`.`供应商名称`, `APP_GSMS_HOS_CGDD`.`收货站点`, `APP_GSMS_HOS_CGDD`.`站点名称`, `APP_GSMS_HOS_CGDD`.`商品编码`, `APP_GSMS_HOS_CGDD`.`商品描述`, `APP_GSMS_HOS_CGDD`.`商品类目`, `APP_GSMS_HOS_CGDD`.`商品类目描述`, `APP_GSMS_HOS_CGDD`.`订单单位`, `APP_GSMS_HOS_CGDD`.`订单数量`, `APP_GSMS_HOS_CGDD`.`净价`, `APP_GSMS_HOS_CGDD`.`订单金额_不含税`, `APP_GSMS_HOS_CGDD`.`订单金额_含税`, `APP_GSMS_HOS_CGDD`.`税率`, `APP_GSMS_HOS_CGDD`.`税额`, `APP_GSMS_HOS_CGDD`.`是否完成交货`, `APP_GSMS_HOS_CGDD`.`是否开具发票`, `APP_GSMS_HOS_CGDD`.`该行是否被删除`, `APP_GSMS_HOS_CGDD`.`该行是否退货`, `APP_GSMS_HOS_CGDD`.`所属`, `APP_GSMS_HOS_CGDD`.`单位名称` FROM `DW04`.`APP_GSMS_HOS_CGDD`) AS temp_sub_query_table WHERE (( `temp_sub_query_table`.`单位名称` IN ('乌鲁木齐石化分公司', '独山子石化分公司', '中国石油集团西部钻探工程有限公司', '中国石油运输有限公司', '西部管道分公司', '新疆油田分公司', '吐哈油田分公司', '塔里木油田分公司', '中石油新疆销售有限公司', '中石油克拉玛依石化有限责任公司', '中国石油集团工程有限公司北京项目管理分公司') ) AND ((`temp_sub_query_table`.`订单金额_不含税` < 10000000) AND (( `temp_sub_query_table`.`采购订单类型` IN ('Z003', 'Z005') ) AND (( `temp_sub_query_table`.`该行是否被删除` IN (' ') ) AND (( `temp_sub_query_table`.`是否完成交货` IN ('是') ) AND ( `temp_sub_query_table`.`该行是否退货` IN ('否') ))))))) AS temp WHERE (1 = 0)
I0825 11:46:38.857758 50184 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:38.858166 50184 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:38.859011 50184 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:38.859588 50184 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:38.890026 50184 Frontend.java:947] Analysis finished.
I0825 11:46:38.893352 50184 admission-controller.cc:508] Schedule for id=6a40ce0ada615e0e:873a2dae00000000 in pool_name=root.default cluster_mem_needed=8.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
I0825 11:46:38.893896 50184 admission-controller.cc:513] Stats: agg_num_running=2, agg_num_queued=0, agg_mem_reserved=80.00 GB,  local_host(local_mem_admitted=40.00 GB, num_admitted_running=1, num_queued=0, backend_mem_reserved=16.00 GB)
I0825 11:46:38.894076 50184 admission-controller.cc:529] Admitted query id=6a40ce0ada615e0e:873a2dae00000000
I0825 11:46:38.894542 50184 coordinator.cc:93] Exec() query_id=6a40ce0ada615e0e:873a2dae00000000 stmt=SELECT `temp`.`采购订单类型`, `temp`.`采购订单日期`, `temp`.`商品类目描述`, `temp`.`订单金额_不含税`, `temp`.`是否完成交货`, `temp`.`该行是否被删除`, `temp`.`该行是否退货` FROM (SELECT `temp_sub_query_table`.`采购订单类型`, `temp_sub_query_table`.`采购订单日期`, `temp_sub_query_table`.`商品类目描述`, `temp_sub_query_table`.`订单金额_不含税`, `temp_sub_query_table`.`是否完成交货`, `temp_sub_query_table`.`该行是否被删除`, `temp_sub_query_table`.`该行是否退货` FROM (SELECT `APP_GSMS_HOS_CGDD`.`采购订单编号`, `APP_GSMS_HOS_CGDD`.`采购订单行项目`, `APP_GSMS_HOS_CGDD`.`采购订单类型`, `APP_GSMS_HOS_CGDD`.`采购订单类型描述`, `APP_GSMS_HOS_CGDD`.`采购订单日期`, `APP_GSMS_HOS_CGDD`.`供应商编码`, `APP_GSMS_HOS_CGDD`.`供应商名称`, `APP_GSMS_HOS_CGDD`.`收货站点`, `APP_GSMS_HOS_CGDD`.`站点名称`, `APP_GSMS_HOS_CGDD`.`商品编码`, `APP_GSMS_HOS_CGDD`.`商品描述`, `APP_GSMS_HOS_CGDD`.`商品类目`, `APP_GSMS_HOS_CGDD`.`商品类目描述`, `APP_GSMS_HOS_CGDD`.`订单单位`, `APP_GSMS_HOS_CGDD`.`订单数量`, `APP_GSMS_HOS_CGDD`.`净价`, `APP_GSMS_HOS_CGDD`.`订单金额_不含税`, `APP_GSMS_HOS_CGDD`.`订单金额_含税`, `APP_GSMS_HOS_CGDD`.`税率`, `APP_GSMS_HOS_CGDD`.`税额`, `APP_GSMS_HOS_CGDD`.`是否完成交货`, `APP_GSMS_HOS_CGDD`.`是否开具发票`, `APP_GSMS_HOS_CGDD`.`该行是否被删除`, `APP_GSMS_HOS_CGDD`.`该行是否退货`, `APP_GSMS_HOS_CGDD`.`所属`, `APP_GSMS_HOS_CGDD`.`单位名称` FROM `DW04`.`APP_GSMS_HOS_CGDD`) AS temp_sub_query_table WHERE (( `temp_sub_query_table`.`单位名称` IN ('乌鲁木齐石化分公司', '独山子石化分公司', '中国石油集团西部钻探工程有限公司', '中国石油运输有限公司', '西部管道分公司', '新疆油田分公司', '吐哈油田分公司', '塔里木油田分公司', '中石油新疆销售有限公司', '中石油克拉玛依石化有限责任公司', '中国石油集团工程有限公司北京项目管理分公司') ) AND ((`temp_sub_query_table`.`订单金额_不含税` < 10000000) AND (( `temp_sub_query_table`.`采购订单类型` IN ('Z003', 'Z005') ) AND (( `temp_sub_query_table`.`该行是否被删除` IN (' ') ) AND (( `temp_sub_query_table`.`是否完成交货` IN ('是') ) AND ( `temp_sub_query_table`.`该行是否退货` IN ('否') ))))))) AS temp WHERE (1 = 0)
I0825 11:46:38.894755 50184 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:38.894893 50184 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:38.895184 50184 coordinator.cc:349] starting execution on 1 backends for query_id=6a40ce0ada615e0e:873a2dae00000000
I0825 11:46:38.896251 44904 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=6a40ce0ada615e0e:873a2dae00000000
I0825 11:46:38.897166 44904 query-exec-mgr.cc:46] StartQueryFInstances() query_id=6a40ce0ada615e0e:873a2dae00000000 coord=e4bdhpp025:22000
I0825 11:46:38.897572 44904 query-state.cc:178] Buffer pool limit for 6a40ce0ada615e0e:873a2dae00000000: 6871947673
I0825 11:46:38.898351 44904 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 6a40ce0ada615e0e:873a2dae00000000
I0825 11:46:38.910920 50276 query-state.cc:300] StartFInstances(): query_id=6a40ce0ada615e0e:873a2dae00000000 #instances=1
I0825 11:46:38.911507 50276 query-state.cc:313] descriptor table for query=6a40ce0ada615e0e:873a2dae00000000
tuples:
Tuple(id=0 size=105 slots=[Slot(id=2 type=STRING col_path=[2] offset=0 null=(offset=104 mask=1) slot_idx=0 field_idx=-1), Slot(id=4 type=TIMESTAMP col_path=[4] offset=16 null=(offset=104 mask=2) slot_idx=1 field_idx=-1), Slot(id=12 type=STRING col_path=[12] offset=32 null=(offset=104 mask=4) slot_idx=2 field_idx=-1), Slot(id=16 type=DECIMAL(16,2) col_path=[16] offset=96 null=(offset=104 mask=40) slot_idx=6 field_idx=-1), Slot(id=20 type=STRING col_path=[20] offset=48 null=(offset=104 mask=8) slot_idx=3 field_idx=-1), Slot(id=22 type=STRING col_path=[22] offset=64 null=(offset=104 mask=10) slot_idx=4 field_idx=-1), Slot(id=23 type=STRING col_path=[23] offset=80 null=(offset=104 mask=20) slot_idx=5 field_idx=-1)] tuple_path=[])
I0825 11:46:38.911756 50184 coordinator.cc:362] started execution on 1 backends for query_id=6a40ce0ada615e0e:873a2dae00000000
I0825 11:46:38.913890 50277 query-state.cc:395] Executing instance. instance_id=6a40ce0ada615e0e:873a2dae00000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=0 #in-flight=5
I0825 11:46:38.918526 50276 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=6a40ce0ada615e0e:873a2dae00000000 refcnt=3
I0825 11:46:38.921186 50184 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x0e^a\xda\n\xce@j\x00\x00\x00\x00\xae-:\x87",
      02: secret (string) = "\x0e^a\xda\n\xce@j\x00\x00\x00\x00\xae-:\x87",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:38.923141 50184 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=6a40ce0ada615e0e:873a2dae00000000
I0825 11:46:38.923853 50184 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[7] {
      [0] = TColumnDesc {
        01: columnName (string) = "\xe9\x87\x87\xe8\xb4\xad\xe8\xae\xa2\xe5\x8d\x95\xe7\xb1\xbb\xe5\x9e\x8b",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "\xe9\x87\x87\xe8\xb4\xad\xe8\xae\xa2\xe5\x8d\x95\xe6\x97\xa5\xe6\x9c\x9f",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "\xe5\x95\x86\xe5\x93\x81\xe7\xb1\xbb\xe7\x9b\xae\xe6\x8f\x8f\xe8\xbf\xb0",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "\xe8\xae\xa2\xe5\x8d\x95\xe9\x87\x91\xe9\xa2\x9d_\xe4\xb8\x8d\xe5\x90\xab\xe7\xa8\x8e",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 16,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "\xe6\x98\xaf\xe5\x90\xa6\xe5\xae\x8c\xe6\x88\x90\xe4\xba\xa4\xe8\xb4\xa7",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "\xe8\xaf\xa5\xe8\xa1\x8c\xe6\x98\xaf\xe5\x90\xa6\xe8\xa2\xab\xe5\x88\xa0\xe9\x99\xa4",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "\xe8\xaf\xa5\xe8\xa1\x8c\xe6\x98\xaf\xe5\x90\xa6\xe9\x80\x80\xe8\xb4\xa7",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 6,
      },
    },
  },
}
I0825 11:46:38.925310 50184 impala-hs2-server.cc:683] CloseOperation(): query_id=6a40ce0ada615e0e:873a2dae00000000
I0825 11:46:38.926007 50184 impala-server.cc:1015] UnregisterQuery(): query_id=6a40ce0ada615e0e:873a2dae00000000
I0825 11:46:38.926748 50184 impala-server.cc:1102] Cancel(): query_id=6a40ce0ada615e0e:873a2dae00000000
I0825 11:46:38.927242 50184 coordinator.cc:629] Cancel() query_id=6a40ce0ada615e0e:873a2dae00000000
I0825 11:46:38.927873 50184 coordinator.cc:639] CancelBackends() query_id=6a40ce0ada615e0e:873a2dae00000000, tried to cancel 0 backends
I0825 11:46:38.929047 50184 coordinator.cc:783] Release admission control resources for query_id=6a40ce0ada615e0e:873a2dae00000000
I0825 11:46:38.929265 50277 query-state.cc:403] Instance completed. instance_id=6a40ce0ada615e0e:873a2dae00000000 #in-flight=4 status=OK
I0825 11:46:38.929791 50277 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=6a40ce0ada615e0e:873a2dae00000000 refcnt=2
I0825 11:46:38.932266 50184 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=6a40ce0ada615e0e:873a2dae00000000 refcnt=1
I0825 11:46:38.935523 50184 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x1a\xbb\xe0\xe3\xd2\x8aD\xc3\xa8\xa7\xef\xc1\xb3g\xb07",
      02: secret (string) = "ZM:\xf0\xf6\xedB\x1e\x9c\xe6&\xc3.\x19\x02\xf1",
    },
  },
}
I0825 11:46:38.936709 50184 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:49974 closed, closing 2 associated session(s)
I0825 11:46:39.283938 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:46:39.288857 50282 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:46:39.290428 50282 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xc0\x1d;P\xa4?L}\xa7r1{J\x91\x9ap",
      02: secret (string) = "G\x04\xa0(\xf9NL1\xbb1\xfe\xe3\xf0&\x80\x8c",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:46:39.292662 50282 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xc0\x1d;P\xa4?L}\xa7r1{J\x91\x9ap",
      02: secret (string) = "G\x04\xa0(\xf9NL1\xbb1\xfe\xe3\xf0&\x80\x8c",
    },
  },
}
I0825 11:46:39.294337 50282 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:46:39.296285 50282 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "/\xdf\xac\xbcKoB\x0f\xa7\b\xe2\xde8p[\xc9",
      02: secret (string) = "B\xc8\xa4\"\xb5\xd3Go\xb3\xeb\xf272\x00\x00{",
    },
  },
  02: statement (string) = "USE dw01",
  04: runAsync (bool) = true,
}
I0825 11:46:39.299017 50282 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "/\xdf\xac\xbcKoB\x0f\xa7\b\xe2\xde8p[\xc9",
      02: secret (string) = "B\xc8\xa4\"\xb5\xd3Go\xb3\xeb\xf272\x00\x00{",
    },
  },
  02: statement (string) = "USE dw01",
  04: runAsync (bool) = true,
}
I0825 11:46:39.301419 50282 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:39.320159 50282 Frontend.java:935] Analyzing query: USE dw01
I0825 11:46:39.321709 50282 Frontend.java:947] Analysis finished.
I0825 11:46:39.335877 50261 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:46:39.336470 50261 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:46:39.353926 50284 query-exec-mgr.cc:95] QueryState: query_id=8b46146ce95452bd:2b53dab00000000 refcnt=3
I0825 11:46:39.354691 50284 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=8b46146ce95452bd:2b53dab00000000 refcnt=3
I0825 11:46:39.389212 50282 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x937\x12\xa6F\xd3M\xa2\x00\x00\x00\x00\xd8\xa5\v\xff",
      02: secret (string) = "\x937\x12\xa6F\xd3M\xa2\x00\x00\x00\x00\xd8\xa5\v\xff",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:46:39.392024 50282 impala-hs2-server.cc:683] CloseOperation(): query_id=a24dd346a6123793:ff0ba5d800000000
I0825 11:46:39.392273 50282 impala-server.cc:1015] UnregisterQuery(): query_id=a24dd346a6123793:ff0ba5d800000000
I0825 11:46:39.392519 50282 impala-server.cc:1102] Cancel(): query_id=a24dd346a6123793:ff0ba5d800000000
I0825 11:46:39.394613 50282 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "/\xdf\xac\xbcKoB\x0f\xa7\b\xe2\xde8p[\xc9",
      02: secret (string) = "B\xc8\xa4\"\xb5\xd3Go\xb3\xeb\xf272\x00\x00{",
    },
  },
  02: statement (string) = "SET KrbUserName=apprc",
  04: runAsync (bool) = true,
}
I0825 11:46:39.395040 50282 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "/\xdf\xac\xbcKoB\x0f\xa7\b\xe2\xde8p[\xc9",
      02: secret (string) = "B\xc8\xa4\"\xb5\xd3Go\xb3\xeb\xf272\x00\x00{",
    },
  },
  02: statement (string) = "SET KrbUserName=apprc",
  04: runAsync (bool) = true,
}
I0825 11:46:39.396456 50282 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:39.409534 50282 Frontend.java:935] Analyzing query: SET KrbUserName=apprc
I0825 11:46:39.410142 50282 Frontend.java:947] Analysis finished.
I0825 11:46:39.547161 50199 status.cc:125] Invalid query option: queryType
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:39.547935 50199 impala-server.cc:1015] UnregisterQuery(): query_id=4d47513ab5321987:ec43bf4c00000000
I0825 11:46:39.548214 50199 impala-server.cc:1102] Cancel(): query_id=4d47513ab5321987:ec43bf4c00000000
I0825 11:46:39.551786 50199 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xea\xa9\xf8n\xaa[K\x9b\x941z\xd0\xa3\xba\x90W",
      02: secret (string) = "]\x9e\x93\xf3\xa3qHa\x9f\xe6\x9e\xef\xce\xd5\x93A",
    },
  },
  02: statement (string) = "SET timeoutSeconds=1800",
  04: runAsync (bool) = true,
}
I0825 11:46:39.552121 50199 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xea\xa9\xf8n\xaa[K\x9b\x941z\xd0\xa3\xba\x90W",
      02: secret (string) = "]\x9e\x93\xf3\xa3qHa\x9f\xe6\x9e\xef\xce\xd5\x93A",
    },
  },
  02: statement (string) = "SET timeoutSeconds=1800",
  04: runAsync (bool) = true,
}
I0825 11:46:39.553066 50199 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:39.574765 50199 Frontend.java:935] Analyzing query: SET timeoutSeconds=1800
I0825 11:46:39.575598 50199 Frontend.java:947] Analysis finished.
I0825 11:46:40.188791 50181 status.cc:125] Invalid query option: queryType
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:40.192384 50181 impala-server.cc:1015] UnregisterQuery(): query_id=ae44ef907718022c:bcf08f0600000000
I0825 11:46:40.192821 50181 impala-server.cc:1102] Cancel(): query_id=ae44ef907718022c:bcf08f0600000000
I0825 11:46:40.197484 50181 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xce\xfcrez\x8aJ\xa2\x9a\xc8f\xaa\x1e\xc9x\\",
      02: secret (string) = "\xc7\xc4P\x96\x0f\xa6H\xce\xa7GC\x10\x03w\x83\xb2",
    },
  },
  02: statement (string) = "SET timeoutSeconds=1800",
  04: runAsync (bool) = true,
}
I0825 11:46:40.198045 50181 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xce\xfcrez\x8aJ\xa2\x9a\xc8f\xaa\x1e\xc9x\\",
      02: secret (string) = "\xc7\xc4P\x96\x0f\xa6H\xce\xa7GC\x10\x03w\x83\xb2",
    },
  },
  02: statement (string) = "SET timeoutSeconds=1800",
  04: runAsync (bool) = true,
}
I0825 11:46:40.199241 50181 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:40.223582 50181 Frontend.java:935] Analyzing query: SET timeoutSeconds=1800
I0825 11:46:40.233127 50181 Frontend.java:947] Analysis finished.
I0825 11:46:40.708361 45243 coordinator.cc:689] Backend completed:  host=e4bdhpp015:22000 remaining=1 query_id=8b46146ce95452bd:2b53dab00000000
I0825 11:46:40.708910 45243 coordinator-backend-state.cc:226] query_id=8b46146ce95452bd:2b53dab00000000: first in-progress backend: e4bdhpp025:22000
I0825 11:46:40.732239 50186 coordinator.cc:522] Coordinator waiting for backends to finish, 1 remaining. query_id=8b46146ce95452bd:2b53dab00000000
I0825 11:46:40.744043 50186 coordinator.cc:527] All backends finished successfully. query_id=8b46146ce95452bd:2b53dab00000000
I0825 11:46:40.744450 50213 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=8b46146ce95452bd:2b53dab00000000, node=1
I0825 11:46:40.745007 50186 coordinator.cc:783] Release admission control resources for query_id=8b46146ce95452bd:2b53dab00000000
I0825 11:46:40.745147 50213 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=8b46146ce95452bd:2b53dab00000000 node_id=1
I0825 11:46:40.746240 50213 query-state.cc:403] Instance completed. instance_id=8b46146ce95452bd:2b53dab00000000 #in-flight=3 status=OK
I0825 11:46:40.746554 50213 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=8b46146ce95452bd:2b53dab00000000 refcnt=2
I0825 11:46:40.809794 50186 impala-hs2-server.cc:683] CloseOperation(): query_id=8b46146ce95452bd:2b53dab00000000
I0825 11:46:40.810099 50186 impala-server.cc:1015] UnregisterQuery(): query_id=8b46146ce95452bd:2b53dab00000000
I0825 11:46:40.810503 50186 impala-server.cc:1102] Cancel(): query_id=8b46146ce95452bd:2b53dab00000000
I0825 11:46:40.810885 50186 coordinator.cc:629] Cancel() query_id=8b46146ce95452bd:2b53dab00000000
I0825 11:46:40.811609 50186 coordinator.cc:639] CancelBackends() query_id=8b46146ce95452bd:2b53dab00000000, tried to cancel 0 backends
I0825 11:46:40.817579 50186 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=8b46146ce95452bd:2b53dab00000000 refcnt=1
I0825 11:46:40.984858 50282 status.cc:125] Invalid query option: KrbUserName
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:40.985471 50282 impala-server.cc:1015] UnregisterQuery(): query_id=4747ef3ef0f91c5a:aec848cc00000000
I0825 11:46:40.985667 50282 impala-server.cc:1102] Cancel(): query_id=4747ef3ef0f91c5a:aec848cc00000000
I0825 11:46:40.988152 50282 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "/\xdf\xac\xbcKoB\x0f\xa7\b\xe2\xde8p[\xc9",
      02: secret (string) = "B\xc8\xa4\"\xb5\xd3Go\xb3\xeb\xf272\x00\x00{",
    },
  },
  02: statement (string) = "SET alias=`bi_6749357856600458205`",
  04: runAsync (bool) = true,
}
I0825 11:46:40.988601 50282 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "/\xdf\xac\xbcKoB\x0f\xa7\b\xe2\xde8p[\xc9",
      02: secret (string) = "B\xc8\xa4\"\xb5\xd3Go\xb3\xeb\xf272\x00\x00{",
    },
  },
  02: statement (string) = "SET alias=`bi_6749357856600458205`",
  04: runAsync (bool) = true,
}
I0825 11:46:40.989478 50282 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:41.000972 50282 Frontend.java:935] Analyzing query: SET alias=`bi_6749357856600458205`
I0825 11:46:41.006053 50282 Frontend.java:947] Analysis finished.
I0825 11:46:41.667260 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:46:41.680851 50299 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:46:41.682509 50299 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x9df\xa8\xef\x10B\xba\x80\xcf\xce\xa2\xa5\xd4\xb0N",
      02: secret (string) = "L\xd2H\xa33BJ\x19\x96\x9097\xef\xdac\xdc",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:46:41.707809 50299 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x9df\xa8\xef\x10B\xba\x80\xcf\xce\xa2\xa5\xd4\xb0N",
      02: secret (string) = "L\xd2H\xa33BJ\x19\x96\x9097\xef\xdac\xdc",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:46:41.708369 50299 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x9df\xa8\xef\x10B\xba\x80\xcf\xce\xa2\xa5\xd4\xb0N",
      02: secret (string) = "L\xd2H\xa33BJ\x19\x96\x9097\xef\xdac\xdc",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:46:41.710005 50299 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:41.721302 50299 Frontend.java:935] Analyzing query: use `dw04_sjfx`;
I0825 11:46:41.722083 50299 Frontend.java:947] Analysis finished.
I0825 11:46:41.774646 50299 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xdc\v\x97\xd0\xc0\\B\x9b\x00\x00\x00\x00h\x06T\xee",
      02: secret (string) = "\xdc\v\x97\xd0\xc0\\B\x9b\x00\x00\x00\x00h\x06T\xee",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:46:41.800650 50299 impala-hs2-server.cc:683] CloseOperation(): query_id=9b425cc0d0970bdc:ee54066800000000
I0825 11:46:41.801086 50299 impala-server.cc:1015] UnregisterQuery(): query_id=9b425cc0d0970bdc:ee54066800000000
I0825 11:46:41.801281 50299 impala-server.cc:1102] Cancel(): query_id=9b425cc0d0970bdc:ee54066800000000
I0825 11:46:41.881273 50299 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x9df\xa8\xef\x10B\xba\x80\xcf\xce\xa2\xa5\xd4\xb0N",
      02: secret (string) = "L\xd2H\xa33BJ\x19\x96\x9097\xef\xdac\xdc",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:46:41.881628 50299 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x9df\xa8\xef\x10B\xba\x80\xcf\xce\xa2\xa5\xd4\xb0N",
      02: secret (string) = "L\xd2H\xa33BJ\x19\x96\x9097\xef\xdac\xdc",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:46:41.882941 50299 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:41.896327 50299 Frontend.java:935] Analyzing query: set REQUEST_POOL = 'agilebi';
I0825 11:46:41.896909 50299 Frontend.java:947] Analysis finished.
I0825 11:46:41.898260 50299 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "5\xd9L6\xfb\xe7O\xf5\x00\x00\x00\x00\x1a\xfe\xc6N",
      02: secret (string) = "5\xd9L6\xfb\xe7O\xf5\x00\x00\x00\x00\x1a\xfe\xc6N",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:41.904325 50299 impala-hs2-server.cc:683] CloseOperation(): query_id=f54fe7fb364cd935:4ec6fe1a00000000
I0825 11:46:41.904807 50299 impala-server.cc:1015] UnregisterQuery(): query_id=f54fe7fb364cd935:4ec6fe1a00000000
I0825 11:46:41.905086 50299 impala-server.cc:1102] Cancel(): query_id=f54fe7fb364cd935:4ec6fe1a00000000
I0825 11:46:41.926298 50299 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x9df\xa8\xef\x10B\xba\x80\xcf\xce\xa2\xa5\xd4\xb0N",
      02: secret (string) = "L\xd2H\xa33BJ\x19\x96\x9097\xef\xdac\xdc",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:46:41.927234 50299 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x9df\xa8\xef\x10B\xba\x80\xcf\xce\xa2\xa5\xd4\xb0N",
      02: secret (string) = "L\xd2H\xa33BJ\x19\x96\x9097\xef\xdac\xdc",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:46:41.928244 50299 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:41.939553 50299 Frontend.java:935] Analyzing query: set MEM_LIMIT = 1024000000;
I0825 11:46:41.940825 50299 Frontend.java:947] Analysis finished.
I0825 11:46:41.961964 50299 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x1f(>#\x04\xeeKb\x00\x00\x00\x00n\xa2(\xba",
      02: secret (string) = "\x1f(>#\x04\xeeKb\x00\x00\x00\x00n\xa2(\xba",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:41.968837 50299 impala-hs2-server.cc:683] CloseOperation(): query_id=624bee04233e281f:ba28a26e00000000
I0825 11:46:41.969424 50299 impala-server.cc:1015] UnregisterQuery(): query_id=624bee04233e281f:ba28a26e00000000
I0825 11:46:41.969974 50299 impala-server.cc:1102] Cancel(): query_id=624bee04233e281f:ba28a26e00000000
I0825 11:46:41.975229 50299 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x9df\xa8\xef\x10B\xba\x80\xcf\xce\xa2\xa5\xd4\xb0N",
      02: secret (string) = "L\xd2H\xa33BJ\x19\x96\x9097\xef\xdac\xdc",
    },
  },
  02: statement (string) = "DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_NN`",
  04: runAsync (bool) = true,
}
I0825 11:46:41.976024 50299 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x9df\xa8\xef\x10B\xba\x80\xcf\xce\xa2\xa5\xd4\xb0N",
      02: secret (string) = "L\xd2H\xa33BJ\x19\x96\x9097\xef\xdac\xdc",
    },
  },
  02: statement (string) = "DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_NN`",
  04: runAsync (bool) = true,
}
I0825 11:46:41.977432 50299 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:41.994300 50299 Frontend.java:935] Analyzing query: DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_NN`
I0825 11:46:41.995113 50299 Frontend.java:947] Analysis finished.
I0825 11:46:42.047044 50299 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "[\xf6\x061H\xcdG\x89\x00\x00\x00\x00z\x05b\x1d",
      02: secret (string) = "[\xf6\x061H\xcdG\x89\x00\x00\x00\x00z\x05b\x1d",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:42.051108 50299 impala-hs2-server.cc:683] CloseOperation(): query_id=8947cd483106f65b:1d62057a00000000
I0825 11:46:42.052325 50299 impala-server.cc:1015] UnregisterQuery(): query_id=8947cd483106f65b:1d62057a00000000
I0825 11:46:42.052659 50299 impala-server.cc:1102] Cancel(): query_id=8947cd483106f65b:1d62057a00000000
I0825 11:46:42.179525 50299 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x9df\xa8\xef\x10B\xba\x80\xcf\xce\xa2\xa5\xd4\xb0N",
      02: secret (string) = "L\xd2H\xa33BJ\x19\x96\x9097\xef\xdac\xdc",
    },
  },
  02: statement (string) = "select   `bi_228[...](15726)",
  04: runAsync (bool) = true,
}
I0825 11:46:42.180209 50299 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x9df\xa8\xef\x10B\xba\x80\xcf\xce\xa2\xa5\xd4\xb0N",
      02: secret (string) = "L\xd2H\xa33BJ\x19\x96\x9097\xef\xdac\xdc",
    },
  },
  02: statement (string) = "select   `bi_228[...](15726)",
  04: runAsync (bool) = true,
}
I0825 11:46:42.181949 50299 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:42.202493 50299 Frontend.java:935] Analyzing query: select   `bi_2282682891841018241`.`帐号` as `bi_15159864404575209771` , `bi_2282682891841018241`.`卡号` as `bi_5176736373764729517` , `bi_2282682891841018241`.`卡类型描述` as `bi_18002650512820288522` , `bi_2282682891841018241`.`是否为副卡` as `bi_10070664717213612371` , `bi_2282682891841018241`.`交易主要站点` as `bi_17363467753723988445` , `bi_2282682891841018241`.`消费过加油站站点数量_1692137484` as `bi_17559908322177175193` , `bi_2282682891841018241`.`交易类型描述` as `bi_30169237570504987` , `bi_2282682891841018241`.`商品类型` as `bi_630186766851260751` , `bi_2282682891841018241`.`商品类型描述` as `bi_15231137875792296164` , `bi_2282682891841018241`.`发卡单位` as `bi_15621164357820908518` , `bi_2282682891841018241`.`发卡单位与销售单位是否一致` as `bi_12117277212538675021` , `bi_2282682891841018241`.`首次交易日期` as `bi_6646908465420298805` , `bi_2282682891841018241`.`最近交易日期` as `bi_13530833546549329347` , `bi_2282682891841018241`.`平均油量升数` as `bi_11273946998078465677` , `bi_2282682891841018241`.`平均消费金额` as `bi_8288133923748336711` , `bi_2282682891841018241`.`平均折扣金额` as `bi_4970043801986327351` , `bi_2282682891841018241`.`平均余额` as `bi_8381900821794444625` , `bi_2282682891841018241`.`日均消费笔数` as `bi_10723048596585302054` , `bi_2282682891841018241`.`日均消费金额` as `bi_41819982784080953` , `bi_2282682891841018241`.`单日消费次数过多次数` as `bi_12112238727142840682` , `bi_2282682891841018241`.`不记名卡夜间消费总次数` as `bi_3938683413919446579` , `bi_2282682891841018241`.`不记名卡夜间消费总金额` as `bi_12562378023438062621` , `bi_2282682891841018241`.`日均夜间消费笔数` as `bi_6200430593887269742` , `bi_2282682891841018241`.`日均夜间消费金额` as `bi_1689351619663764928` , `bi_2282682891841018241`.`单日夜间消费次数过多次数` as `bi_12909975068497935338` , `bi_2282682891841018241`.`睡眠次数` as `bi_11007498412015863178` , `bi_2282682891841018241`.`是否仍在睡眠` as `bi_12482824553037098532` , `bi_2282682891841018241`.`不记名卡累计消费金额` as `bi_4601843349518591292` , `bi_2282682891841018241`.`不记名卡消费金额方差` as `bi_2924531414258932610` , `bi_2282682891841018241`.`不记名卡累计消费次数` as `bi_5870083467319809789` , `bi_2282682891841018241`.`不记名卡消费金额为小数次数` as `bi_3842164172086352148` , `bi_2282682891841018241`.`不记名卡消费过油品类型数量` as `bi_806870660964728186` , `bi_2282682891841018241`.`消费过汽油品类型数量636841632` as `bi_556036179544267082` , `bi_2282682891841018241`.`不记名卡汽油消费次数占比` as `bi_1068488302117352384` , `bi_2282682891841018241`.`汽油单笔高额消费次数_1368620500` as `bi_8356278071803173785` , `bi_2282682891841018241`.`不记名卡柴油消费次数占比` as `bi_5766421841800396638` , `bi_2282682891841018241`.`不记名卡天然气消费次数占比` as `bi_14290961476284126012` , `bi_2282682891841018241`.`ic卡大额非油消费次数` as `bi_992601592685606614` , `bi_2282682891841018241`.`非油累计消费金额` as `bi_8276717807170841059` , `bi_2282682891841018241`.`非油与成品油消费金额比例` as `bi_14967514132684380162` , `bi_2282682891841018241`.`不记名卡累计充值金额` as `bi_11701916747493263994` , `bi_2282682891841018241`.`单日充值次数过多次数` as `bi_16449755606537913494` , `bi_2282682891841018241`.`即消费且余额低的次数831743621` as `bi_12225443660237330283` , `bi_2282682891841018241`.`同一班次消费的次数` as `bi_5256996930125776142` , `bi_2282682891841018241`.`密码重置次数` as `bi_8414722834803604324` , `bi_2282682891841018241`.`笔折扣额的消费的次数_2085032453` as `bi_10212944947192418963` , `bi_2282682891841018241`.`余额充足时充钱的次数1957627260` as `bi_2466479945894447936` , `bi_2282682891841018241`.`是否曾频繁转账` as `bi_14279744686847475029` , `bi_2282682891841018241`.`是否异常加油卡` as `bi_1040490846059638232` , `bi_2282682891841018241`.`单位名称` as `bi_10101021918568318220` , `bi_2282682891841018241`.`所属` as `bi_13138972180237352292` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_2282682891841018241`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_10651599939693506386` , TRIM(`bi_2282682891841018241`.`交易主要站点`) as `bi_13164579150965645243`   from (select   `bi_11409236811878669265`.`帐号` as `帐号` , `bi_11409236811878669265`.`卡号` as `卡号` , `bi_11409236811878669265`.`卡类型描述` as `卡类型描述` , `bi_11409236811878669265`.`是否为副卡` as `是否为副卡` , `bi_11409236811878669265`.`交易主要站点` as `交易主要站点` , `bi_11409236811878669265`.`不记名卡消费过加油站站点数量` as `消费过加油站站点数量_1692137484` , `bi_11409236811878669265`.`交易类型描述` as `交易类型描述` , `bi_11409236811878669265`.`商品类型` as `商品类型` , `bi_11409236811878669265`.`商品类型描述` as `商品类型描述` , `bi_11409236811878669265`.`发卡单位` as `发卡单位` , `bi_11409236811878669265`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `bi_11409236811878669265`.`首次交易日期` as `首次交易日期` , `bi_11409236811878669265`.`最近交易日期` as `最近交易日期` , `bi_11409236811878669265`.`平均油量升数` as `平均油量升数` , `bi_11409236811878669265`.`平均消费金额` as `平均消费金额` , `bi_11409236811878669265`.`平均折扣金额` as `平均折扣金额` , `bi_11409236811878669265`.`平均余额` as `平均余额` , `bi_11409236811878669265`.`日均消费笔数` as `日均消费笔数` , `bi_11409236811878669265`.`日均消费金额` as `日均消费金额` , `bi_11409236811878669265`.`单日消费次数过多次数` as `单日消费次数过多次数` , `bi_11409236811878669265`.`不记名卡夜间消费总次数` as `不记名卡夜间消费总次数` , `bi_11409236811878669265`.`不记名卡夜间消费总金额` as `不记名卡夜间消费总金额` , `bi_11409236811878669265`.`日均夜间消费笔数` as `日均夜间消费笔数` , `bi_11409236811878669265`.`日均夜间消费金额` as `日均夜间消费金额` , `bi_11409236811878669265`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `bi_11409236811878669265`.`睡眠次数` as `睡眠次数` , `bi_11409236811878669265`.`是否仍在睡眠` as `是否仍在睡眠` , `bi_11409236811878669265`.`不记名卡累计消费金额` as `不记名卡累计消费金额` , `bi_11409236811878669265`.`不记名卡消费金额方差` as `不记名卡消费金额方差` , `bi_11409236811878669265`.`不记名卡累计消费次数` as `不记名卡累计消费次数` , `bi_11409236811878669265`.`不记名卡消费金额为小数次数` as `不记名卡消费金额为小数次数` , `bi_11409236811878669265`.`不记名卡消费过油品类型数量` as `不记名卡消费过油品类型数量` , `bi_11409236811878669265`.`不记名卡消费过汽油品类型数量` as `消费过汽油品类型数量636841632` , `bi_11409236811878669265`.`不记名卡汽油消费次数占比` as `不记名卡汽油消费次数占比` , `bi_11409236811878669265`.`不记名卡汽油单笔高额消费次数` as `汽油单笔高额消费次数_1368620500` , `bi_11409236811878669265`.`不记名卡柴油消费次数占比` as `不记名卡柴油消费次数占比` , `bi_11409236811878669265`.`不记名卡天然气消费次数占比` as `不记名卡天然气消费次数占比` , `bi_11409236811878669265`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `bi_11409236811878669265`.`非油累计消费金额` as `非油累计消费金额` , `bi_11409236811878669265`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `bi_11409236811878669265`.`不记名卡累计充值金额` as `不记名卡累计充值金额` , `bi_11409236811878669265`.`单日充值次数过多次数` as `单日充值次数过多次数` , `bi_11409236811878669265`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `bi_11409236811878669265`.`同一班次消费的次数` as `同一班次消费的次数` , `bi_11409236811878669265`.`密码重置次数` as `密码重置次数` , `bi_11409236811878669265`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `bi_11409236811878669265`.`不记名卡余额充足时充钱的次数` as `余额充足时充钱的次数1957627260` , `bi_11409236811878669265`.`是否曾频繁转账` as `是否曾频繁转账` , `bi_11409236811878669265`.`是否异常加油卡` as `是否异常加油卡` , `bi_11409236811878669265`.`单位名称` as `单位名称` , `bi_11409236811878669265`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`不记名卡消费过加油站站点数量` as `不记名卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`不记名卡夜间消费总次数` as `不记名卡夜间消费总次数`,`不记名卡夜间消费总金额` as `不记名卡夜间消费总金额`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`不记名卡累计消费金额` as `不记名卡累计消费金额`,`不记名卡消费金额方差` as `不记名卡消费金额方差`,`不记名卡累计消费次数` as `不记名卡累计消费次数`,`不记名卡消费金额为小数次数` as `不记名卡消费金额为小数次数`,`不记名卡消费过油品类型数量` as `不记名卡消费过油品类型数量`,`不记名卡消费过汽油品类型数量` as `不记名卡消费过汽油品类型数量`,`不记名卡汽油消费次数占比` as `不记名卡汽油消费次数占比`,`不记名卡汽油单笔高额消费次数` as `不记名卡汽油单笔高额消费次数`,`不记名卡柴油消费次数占比` as `不记名卡柴油消费次数占比`,`不记名卡天然气消费次数占比` as `不记名卡天然气消费次数占比`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`不记名卡累计充值金额` as `不记名卡累计充值金额`,`单日充值次数过多次数` as `单日充值次数过多次数`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`不记名卡余额充足时充钱的次数` as `不记名卡余额充足时充钱的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`不记名卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`不记名卡夜间消费总次数`,`不记名卡夜间消费总金额`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`不记名卡累计消费金额`,`不记名卡消费金额方差`,`不记名卡累计消费次数`,`不记名卡消费金额为小数次数`,`不记名卡消费过油品类型数量`,`不记名卡消费过汽油品类型数量`,`不记名卡汽油消费次数占比`,`不记名卡汽油单笔高额消费次数`,`不记名卡柴油消费次数占比`,`不记名卡天然气消费次数占比`,`ic卡大额非油消费次数`,`非油累计消费金额`,`非油与成品油消费金额比例`,`不记名卡累计充值金额`,`单日充值次数过多次数`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`不记名卡余额充足时充钱的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,     
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `不记名卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`, 
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`, 
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`,
       `单日消费次数过多次数`, 
       `不记名卡夜间消费总次数`,
       `不记名卡夜间消费总金额`,
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`, 
       `睡眠次数`,
       `是否仍在睡眠`,
       `不记名卡累计消费金额`,
       `加油卡消费金额方差` `不记名卡消费金额方差`,
       `不记名卡累计消费次数`,
       `加油卡消费金额为小数次数` `不记名卡消费金额为小数次数`,
       `不记名卡消费过油品类型数量`,
       `不记名卡消费过汽油品类型数量`,
       `不记名卡汽油消费次数占比`,
       `不记名卡汽油单笔高额消费次数`,
       `不记名卡柴油消费次数占比`,
       `不记名卡天然气消费次数占比`,
       `IC卡大额非油消费次数`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `不记名卡累计充值金额`,
       `单日充值次数过多次数`, 
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `不记名卡余额充足时充钱的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM DW04_SJFX.APP_AUAP_YK_NN) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `bi_11409236811878669265`  
     ) `bi_2282682891841018241`
      limit 1200001 
I0825 11:46:42.235817 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:46:42.238315 50306 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:46:42.240543 50306 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xc3\xa6\x1aT3\xfdFZ\xb6\xa3\xa8L\xde\x04(\xf8",
      02: secret (string) = "\x17\x1aF\xe0\xf1\x9dG\xed\xbd\xc5\xb4xr\xa0o\xf4",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:46:42.267602 50306 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xc3\xa6\x1aT3\xfdFZ\xb6\xa3\xa8L\xde\x04(\xf8",
      02: secret (string) = "\x17\x1aF\xe0\xf1\x9dG\xed\xbd\xc5\xb4xr\xa0o\xf4",
    },
  },
  02: statement (string) = "use dw01",
  04: runAsync (bool) = true,
}
I0825 11:46:42.268237 50306 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xc3\xa6\x1aT3\xfdFZ\xb6\xa3\xa8L\xde\x04(\xf8",
      02: secret (string) = "\x17\x1aF\xe0\xf1\x9dG\xed\xbd\xc5\xb4xr\xa0o\xf4",
    },
  },
  02: statement (string) = "use dw01",
  04: runAsync (bool) = true,
}
I0825 11:46:42.270946 50306 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:42.288363 50306 Frontend.java:935] Analyzing query: use dw01
I0825 11:46:42.291487 50306 Frontend.java:947] Analysis finished.
I0825 11:46:42.347962 50306 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xa5\x99-&\xfc\xebE?\x00\x00\x00\x00<\a\xff)",
      02: secret (string) = "\xa5\x99-&\xfc\xebE?\x00\x00\x00\x00<\a\xff)",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:46:42.353217 50306 impala-hs2-server.cc:683] CloseOperation(): query_id=3f45ebfc262d99a5:29ff073c00000000
I0825 11:46:42.353648 50306 impala-server.cc:1015] UnregisterQuery(): query_id=3f45ebfc262d99a5:29ff073c00000000
I0825 11:46:42.354163 50306 impala-server.cc:1102] Cancel(): query_id=3f45ebfc262d99a5:29ff073c00000000
I0825 11:46:42.380839 50306 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xc3\xa6\x1aT3\xfdFZ\xb6\xa3\xa8L\xde\x04(\xf8",
      02: secret (string) = "\x17\x1aF\xe0\xf1\x9dG\xed\xbd\xc5\xb4xr\xa0o\xf4",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:46:42.381278 50306 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xc3\xa6\x1aT3\xfdFZ\xb6\xa3\xa8L\xde\x04(\xf8",
      02: secret (string) = "\x17\x1aF\xe0\xf1\x9dG\xed\xbd\xc5\xb4xr\xa0o\xf4",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:46:42.382649 50306 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:42.399340 50306 Frontend.java:935] Analyzing query: set mem_limit='8g'
I0825 11:46:42.400506 50306 Frontend.java:947] Analysis finished.
I0825 11:46:42.402441 50306 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x18\xe4\x0e\xe4zYCB\x00\x00\x00\x00\xb69A\xc8",
      02: secret (string) = "\x18\xe4\x0e\xe4zYCB\x00\x00\x00\x00\xb69A\xc8",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:42.406735 50306 impala-hs2-server.cc:683] CloseOperation(): query_id=4243597ae40ee418:c84139b600000000
I0825 11:46:42.407378 50306 impala-server.cc:1015] UnregisterQuery(): query_id=4243597ae40ee418:c84139b600000000
I0825 11:46:42.408067 50287 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:46:42.408000 50306 impala-server.cc:1102] Cancel(): query_id=4243597ae40ee418:c84139b600000000
I0825 11:46:42.408780 50287 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:46:42.415040 50306 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xc3\xa6\x1aT3\xfdFZ\xb6\xa3\xa8L\xde\x04(\xf8",
      02: secret (string) = "\x17\x1aF\xe0\xf1\x9dG\xed\xbd\xc5\xb4xr\xa0o\xf4",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_ZFMX_YPFY`",
  04: runAsync (bool) = true,
}
I0825 11:46:42.416085 50306 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xc3\xa6\x1aT3\xfdFZ\xb6\xa3\xa8L\xde\x04(\xf8",
      02: secret (string) = "\x17\x1aF\xe0\xf1\x9dG\xed\xbd\xc5\xb4xr\xa0o\xf4",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_ZFMX_YPFY`",
  04: runAsync (bool) = true,
}
I0825 11:46:42.416999 50306 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:42.436487 50306 Frontend.java:935] Analyzing query: DESCRIBE `DW04`.`APP_GSMS_HOS_ZFMX_YPFY`
I0825 11:46:42.438930 50306 Frontend.java:947] Analysis finished.
I0825 11:46:42.502669 50306 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xd2\xf5\x8f'\x91\xc1D\xc5\x00\x00\x00\x00\x1e_\xf7\xce",
      02: secret (string) = "\xd2\xf5\x8f'\x91\xc1D\xc5\x00\x00\x00\x00\x1e_\xf7\xce",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:42.510546 50306 impala-hs2-server.cc:683] CloseOperation(): query_id=c544c191278ff5d2:cef75f1e00000000
I0825 11:46:42.511242 50306 impala-server.cc:1015] UnregisterQuery(): query_id=c544c191278ff5d2:cef75f1e00000000
I0825 11:46:42.512751 50306 impala-server.cc:1102] Cancel(): query_id=c544c191278ff5d2:cef75f1e00000000
I0825 11:46:42.522792 50306 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xc3\xa6\x1aT3\xfdFZ\xb6\xa3\xa8L\xde\x04(\xf8",
      02: secret (string) = "\x17\x1aF\xe0\xf1\x9dG\xed\xbd\xc5\xb4xr\xa0o\xf4",
    },
  },
  02: statement (string) = "SELECT COUNT(1) [...](7048)",
  04: runAsync (bool) = true,
}
I0825 11:46:42.523470 50306 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xc3\xa6\x1aT3\xfdFZ\xb6\xa3\xa8L\xde\x04(\xf8",
      02: secret (string) = "\x17\x1aF\xe0\xf1\x9dG\xed\xbd\xc5\xb4xr\xa0o\xf4",
    },
  },
  02: statement (string) = "SELECT COUNT(1) [...](7048)",
  04: runAsync (bool) = true,
}
I0825 11:46:42.524556 50306 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:42.542220 50306 Frontend.java:935] Analyzing query: SELECT COUNT(1) AS `EXPR_1`  FROM (SELECT `bi_159687973147248924`.`年度` AS `bi_7769357585739336089` , `bi_159687973147248924`.`日历日` AS `bi_5497223619932177494` , `bi_159687973147248924`.`日历年月` AS `bi_4486611936012149066` , `bi_159687973147248924`.`日历年周` AS `bi_16225917516951867296` , `bi_159687973147248924`.`平日` AS `bi_2404419009945821514` , `bi_159687973147248924`.`加油站编码` AS `bi_17515746548900466372` , `bi_159687973147248924`.`站点描述` AS `bi_8047607136561982936` , `bi_159687973147248924`.`商品` AS `bi_14496993123052939998` , `bi_159687973147248924`.`商品描述` AS `bi_6255071890286126003` , `bi_159687973147248924`.`品类` AS `bi_10355582352426400432` , `bi_159687973147248924`.`品类描述` AS `bi_16695289319095654262` , `bi_159687973147248924`.`明细类` AS `bi_3089045356542863695` , `bi_159687973147248924`.`明细类描述` AS `bi_6911062226112695507` , `bi_159687973147248924`.`小类` AS `bi_12159800931593010271` , `bi_159687973147248924`.`小类描述` AS `bi_6112480558334109094` , `bi_159687973147248924`.`非油品` AS `bi_14869533338013832996` , `bi_159687973147248924`.`非油品描述` AS `bi_3560479744354904149` , `bi_159687973147248924`.`支付_冲销` AS `bi_15490236967519694929` , `bi_159687973147248924`.`链接编号` AS `bi_6772328230663997448` , `bi_159687973147248924`.`链接编号年` AS `bi_9597231146298187283` , `bi_159687973147248924`.`支付类型` AS `bi_16203604124108023651` , `bi_159687973147248924`.`支付类型描述` AS `bi_9264459834897389105` , `bi_159687973147248924`.`金额` AS `bi_6611666627463141013` , `bi_159687973147248924`.`货币` AS `bi_3965345091942581674` , `bi_159687973147248924`.`数量` AS `bi_4962244697223826549` , `bi_159687973147248924`.`价格单位` AS `bi_12325396060833840156` , `bi_159687973147248924`.`价格单位单价` AS `bi_15469504567322581334` , `bi_159687973147248924`.`所属` AS `bi_17890467905261317136` , `bi_159687973147248924`.`单位名称` AS `bi_8037617483366456786`  FROM (SELECT `temp_sql_wrapper_table`.`年度` AS `年度` , `temp_sql_wrapper_table`.`日历日` AS `日历日` , `temp_sql_wrapper_table`.`日历年月` AS `日历年月` , `temp_sql_wrapper_table`.`日历年周` AS `日历年周` , `temp_sql_wrapper_table`.`平日` AS `平日` , `temp_sql_wrapper_table`.`加油站编码` AS `加油站编码` , `temp_sql_wrapper_table`.`站点描述` AS `站点描述` , `temp_sql_wrapper_table`.`商品` AS `商品` , `temp_sql_wrapper_table`.`商品描述` AS `商品描述` , `temp_sql_wrapper_table`.`品类` AS `品类` , `temp_sql_wrapper_table`.`品类描述` AS `品类描述` , `temp_sql_wrapper_table`.`明细类` AS `明细类` , `temp_sql_wrapper_table`.`明细类描述` AS `明细类描述` , `temp_sql_wrapper_table`.`小类` AS `小类` , `temp_sql_wrapper_table`.`小类描述` AS `小类描述` , `temp_sql_wrapper_table`.`非油品` AS `非油品` , `temp_sql_wrapper_table`.`非油品描述` AS `非油品描述` , `temp_sql_wrapper_table`.`支付_冲销` AS `支付_冲销` , `temp_sql_wrapper_table`.`链接编号` AS `链接编号` , `temp_sql_wrapper_table`.`链接编号年` AS `链接编号年` , `temp_sql_wrapper_table`.`支付类型` AS `支付类型` , `temp_sql_wrapper_table`.`支付类型描述` AS `支付类型描述` , `temp_sql_wrapper_table`.`金额` AS `金额` , `temp_sql_wrapper_table`.`货币` AS `货币` , `temp_sql_wrapper_table`.`数量` AS `数量` , `temp_sql_wrapper_table`.`价格单位` AS `价格单位` , `temp_sql_wrapper_table`.`价格单位单价` AS `价格单位单价` , `temp_sql_wrapper_table`.`所属` AS `所属` , `temp_sql_wrapper_table`.`单位名称` AS `单位名称`  FROM (SELECT `temp_sub_query_table`.`年度`, `temp_sub_query_table`.`日历日`, `temp_sub_query_table`.`日历年月`, `temp_sub_query_table`.`日历年周`, `temp_sub_query_table`.`平日`, `temp_sub_query_table`.`加油站编码`, `temp_sub_query_table`.`站点描述`, `temp_sub_query_table`.`商品`, `temp_sub_query_table`.`商品描述`, `temp_sub_query_table`.`品类`, `temp_sub_query_table`.`品类描述`, `temp_sub_query_table`.`明细类`, `temp_sub_query_table`.`明细类描述`, `temp_sub_query_table`.`小类`, `temp_sub_query_table`.`小类描述`, `temp_sub_query_table`.`非油品`, `temp_sub_query_table`.`非油品描述`, `temp_sub_query_table`.`支付_冲销`, `temp_sub_query_table`.`链接编号`, `temp_sub_query_table`.`链接编号年`, `temp_sub_query_table`.`支付类型`, `temp_sub_query_table`.`支付类型描述`, `temp_sub_query_table`.`金额`, `temp_sub_query_table`.`货币`, `temp_sub_query_table`.`数量`, `temp_sub_query_table`.`价格单位`, `temp_sub_query_table`.`价格单位单价`, `temp_sub_query_table`.`所属`, `temp_sub_query_table`.`单位名称` FROM (SELECT `APP_GSMS_HOS_ZFMX_YPFY`.`年度`, `APP_GSMS_HOS_ZFMX_YPFY`.`日历日`, `APP_GSMS_HOS_ZFMX_YPFY`.`日历年月`, `APP_GSMS_HOS_ZFMX_YPFY`.`日历年周`, `APP_GSMS_HOS_ZFMX_YPFY`.`平日`, `APP_GSMS_HOS_ZFMX_YPFY`.`加油站编码`, `APP_GSMS_HOS_ZFMX_YPFY`.`站点描述`, `APP_GSMS_HOS_ZFMX_YPFY`.`商品`, `APP_GSMS_HOS_ZFMX_YPFY`.`商品描述`, `APP_GSMS_HOS_ZFMX_YPFY`.`品类`, `APP_GSMS_HOS_ZFMX_YPFY`.`品类描述`, `APP_GSMS_HOS_ZFMX_YPFY`.`明细类`, `APP_GSMS_HOS_ZFMX_YPFY`.`明细类描述`, `APP_GSMS_HOS_ZFMX_YPFY`.`小类`, `APP_GSMS_HOS_ZFMX_YPFY`.`小类描述`, `APP_GSMS_HOS_ZFMX_YPFY`.`非油品`, `APP_GSMS_HOS_ZFMX_YPFY`.`非油品描述`, `APP_GSMS_HOS_ZFMX_YPFY`.`支付_冲销`, `APP_GSMS_HOS_ZFMX_YPFY`.`链接编号`, `APP_GSMS_HOS_ZFMX_YPFY`.`链接编号年`, `APP_GSMS_HOS_ZFMX_YPFY`.`支付类型`, `APP_GSMS_HOS_ZFMX_YPFY`.`支付类型描述`, `APP_GSMS_HOS_ZFMX_YPFY`.`金额`, `APP_GSMS_HOS_ZFMX_YPFY`.`货币`, `APP_GSMS_HOS_ZFMX_YPFY`.`数量`, `APP_GSMS_HOS_ZFMX_YPFY`.`价格单位`, `APP_GSMS_HOS_ZFMX_YPFY`.`价格单位单价`, `APP_GSMS_HOS_ZFMX_YPFY`.`所属`, `APP_GSMS_HOS_ZFMX_YPFY`.`单位名称` FROM `DW04`.`APP_GSMS_HOS_ZFMX_YPFY` `APP_GSMS_HOS_ZFMX_YPFY` ) `temp_sub_query_table` WHERE (((`temp_sub_query_table`.`年度` IN ('2019', '2020', '2021' )) AND (`temp_sub_query_table`.`单位名称` IN ('中石油新疆销售有限公司' ))) AND ((`temp_sub_query_table`.`非油品描述` IN ('便利店商品' )) AND ((`temp_sub_query_table`.`非油品描述` IN ('便利店商品' )) AND ((`temp_sub_query_table`.`年度` IN ('2019', '2020', '2021' )) AND (`temp_sub_query_table`.`单位名称` IN ('中石油新疆销售有限公司' )))))) ) `temp_sql_wrapper_table`) `bi_159687973147248924` WHERE (((`bi_159687973147248924`.`年度` IN ('2019', '2020', '2021' )) AND (`bi_159687973147248924`.`单位名称` IN ('中石油新疆销售有限公司' ))) AND ((`bi_159687973147248924`.`非油品描述` IN ('便利店商品' )) AND ((`bi_159687973147248924`.`非油品描述` IN ('便利店商品' )) AND ((`bi_159687973147248924`.`年度` IN ('2019', '2020', '2021' )) AND (`bi_159687973147248924`.`单位名称` IN ('中石油新疆销售有限公司' )))))) ) `tableWithoutPaging` 
I0825 11:46:42.738104 44439 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=53415ea8a369be06:dabe472a00000000
I0825 11:46:42.738790 44439 query-exec-mgr.cc:46] StartQueryFInstances() query_id=53415ea8a369be06:dabe472a00000000 coord=e4bdhpp023:22000
I0825 11:46:42.739502 44439 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:42.740595 44439 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:42.741288 44439 query-state.cc:178] Buffer pool limit for 53415ea8a369be06:dabe472a00000000: 6871947673
I0825 11:46:42.741986 44439 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 53415ea8a369be06:dabe472a00000000
I0825 11:46:42.759755 50321 query-state.cc:300] StartFInstances(): query_id=53415ea8a369be06:dabe472a00000000 #instances=1
I0825 11:46:42.760426 50321 query-state.cc:313] descriptor table for query=53415ea8a369be06:dabe472a00000000
tuples:
Tuple(id=4 size=97 slots=[Slot(id=116 type=STRING col_path=[28] offset=0 null=(offset=96 mask=1) slot_idx=0 field_idx=-1), Slot(id=117 type=STRING col_path=[28] offset=16 null=(offset=96 mask=2) slot_idx=1 field_idx=-1), Slot(id=118 type=STRING col_path=[16] offset=32 null=(offset=96 mask=4) slot_idx=2 field_idx=-1), Slot(id=119 type=STRING col_path=[16] offset=48 null=(offset=96 mask=8) slot_idx=3 field_idx=-1), Slot(id=120 type=STRING col_path=[0] offset=64 null=(offset=96 mask=10) slot_idx=4 field_idx=-1), Slot(id=121 type=STRING col_path=[0] offset=80 null=(offset=96 mask=20) slot_idx=5 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=436 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=432 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=TIMESTAMP col_path=[1] offset=16 null=(offset=432 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=STRING col_path=[2] offset=32 null=(offset=432 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[3] offset=48 null=(offset=432 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=STRING col_path=[4] offset=64 null=(offset=432 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=STRING col_path=[5] offset=80 null=(offset=432 mask=20) slot_idx=5 field_idx=-1), Slot(id=6 type=STRING col_path=[6] offset=96 null=(offset=432 mask=40) slot_idx=6 field_idx=-1), Slot(id=7 type=STRING col_path=[7] offset=112 null=(offset=432 mask=80) slot_idx=7 field_idx=-1), Slot(id=8 type=STRING col_path=[8] offset=128 null=(offset=433 mask=1) slot_idx=8 field_idx=-1), Slot(id=9 type=STRING col_path=[9] offset=144 null=(offset=433 mask=2) slot_idx=9 field_idx=-1), Slot(id=10 type=STRING col_path=[10] offset=160 null=(offset=433 mask=4) slot_idx=10 field_idx=-1), Slot(id=11 type=STRING col_path=[11] offset=176 null=(offset=433 mask=8) slot_idx=11 field_idx=-1), Slot(id=12 type=STRING col_path=[12] offset=192 null=(offset=433 mask=10) slot_idx=12 field_idx=-1), Slot(id=13 type=STRING col_path=[13] offset=208 null=(offset=433 mask=20) slot_idx=13 field_idx=-1), Slot(id=14 type=STRING col_path=[14] offset=224 null=(offset=433 mask=40) slot_idx=14 field_idx=-1), Slot(id=15 type=STRING col_path=[15] offset=240 null=(offset=433 mask=80) slot_idx=15 field_idx=-1), Slot(id=16 type=STRING col_path=[16] offset=256 null=(offset=434 mask=1) slot_idx=16 field_idx=-1), Slot(id=17 type=STRING col_path=[17] offset=272 null=(offset=434 mask=2) slot_idx=17 field_idx=-1), Slot(id=18 type=STRING col_path=[18] offset=288 null=(offset=434 mask=4) slot_idx=18 field_idx=-1), Slot(id=19 type=STRING col_path=[19] offset=304 null=(offset=434 mask=8) slot_idx=19 field_idx=-1), Slot(id=20 type=STRING col_path=[20] offset=320 null=(offset=434 mask=10) slot_idx=20 field_idx=-1), Slot(id=21 type=STRING col_path=[21] offset=336 null=(offset=434 mask=20) slot_idx=21 field_idx=-1), Slot(id=22 type=DECIMAL(16,2) col_path=[22] offset=400 null=(offset=435 mask=2) slot_idx=25 field_idx=-1), Slot(id=23 type=STRING col_path=[23] offset=352 null=(offset=434 mask=40) slot_idx=22 field_idx=-1), Slot(id=24 type=DECIMAL(16,3) col_path=[24] offset=408 null=(offset=435 mask=4) slot_idx=26 field_idx=-1), Slot(id=25 type=DECIMAL(16,3) col_path=[25] offset=416 null=(offset=435 mask=8) slot_idx=27 field_idx=-1), Slot(id=26 type=DECIMAL(16,2) col_path=[26] offset=424 null=(offset=435 mask=10) slot_idx=28 field_idx=-1), Slot(id=27 type=STRING col_path=[27] offset=368 null=(offset=434 mask=80) slot_idx=23 field_idx=-1), Slot(id=28 type=STRING col_path=[28] offset=384 null=(offset=435 mask=1) slot_idx=24 field_idx=-1)] tuple_path=[])
I0825 11:46:42.764495 50322 query-state.cc:395] Executing instance. instance_id=53415ea8a369be06:dabe472a00000001 fragment_idx=1 per_fragment_instance_idx=0 coord_state_idx=4 #in-flight=4
I0825 11:46:42.767086 50322 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '53415ea8a369be06:dabe472a00000001': 190
I0825 11:46:42.773336 50321 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=53415ea8a369be06:dabe472a00000000 refcnt=2
I0825 11:46:42.969537 50299 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:46:42.971058 50282 status.cc:125] Invalid query option: alias
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:42.983855 50282 impala-server.cc:1015] UnregisterQuery(): query_id=74431f1ecc8a04f4:39be87c300000000
I0825 11:46:42.983763 50299 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:46:42.984119 50282 impala-server.cc:1102] Cancel(): query_id=74431f1ecc8a04f4:39be87c300000000
I0825 11:46:42.986033 50282 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "/\xdf\xac\xbcKoB\x0f\xa7\b\xe2\xde8p[\xc9",
      02: secret (string) = "B\xc8\xa4\"\xb5\xd3Go\xb3\xeb\xf272\x00\x00{",
    },
  },
  02: statement (string) = "SET mem_limit=8g",
  04: runAsync (bool) = true,
}
I0825 11:46:42.986373 50282 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "/\xdf\xac\xbcKoB\x0f\xa7\b\xe2\xde8p[\xc9",
      02: secret (string) = "B\xc8\xa4\"\xb5\xd3Go\xb3\xeb\xf272\x00\x00{",
    },
  },
  02: statement (string) = "SET mem_limit=8g",
  04: runAsync (bool) = true,
}
I0825 11:46:42.987174 50282 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:43.001055 50199 status.cc:125] Invalid query option: timeoutSeconds
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:43.002449 50199 impala-server.cc:1015] UnregisterQuery(): query_id=147e06af85609c2:cf0aace300000000
I0825 11:46:43.002943 50199 impala-server.cc:1102] Cancel(): query_id=147e06af85609c2:cf0aace300000000
I0825 11:46:43.004514 50282 Frontend.java:935] Analyzing query: SET mem_limit=8g
I0825 11:46:43.005205 50282 Frontend.java:947] Analysis finished.
I0825 11:46:43.005983 50199 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xea\xa9\xf8n\xaa[K\x9b\x941z\xd0\xa3\xba\x90W",
      02: secret (string) = "]\x9e\x93\xf3\xa3qHa\x9f\xe6\x9e\xef\xce\xd5\x93A",
    },
  },
  02: statement (string) = "SET useSSL=false",
  04: runAsync (bool) = true,
}
I0825 11:46:43.006363 50199 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xea\xa9\xf8n\xaa[K\x9b\x941z\xd0\xa3\xba\x90W",
      02: secret (string) = "]\x9e\x93\xf3\xa3qHa\x9f\xe6\x9e\xef\xce\xd5\x93A",
    },
  },
  02: statement (string) = "SET useSSL=false",
  04: runAsync (bool) = true,
}
I0825 11:46:43.007982 50199 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:43.010897 50282 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xf0u\xfc\xe1/bL\xdc\x00\x00\x00\x00r\xe81\xc7",
      02: secret (string) = "\xf0u\xfc\xe1/bL\xdc\x00\x00\x00\x00r\xe81\xc7",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:43.016240 50282 impala-hs2-server.cc:683] CloseOperation(): query_id=dc4c622fe1fc75f0:c731e87200000000
I0825 11:46:43.016768 50282 impala-server.cc:1015] UnregisterQuery(): query_id=dc4c622fe1fc75f0:c731e87200000000
I0825 11:46:43.017334 50282 impala-server.cc:1102] Cancel(): query_id=dc4c622fe1fc75f0:c731e87200000000
I0825 11:46:43.022183 50282 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "/\xdf\xac\xbcKoB\x0f\xa7\b\xe2\xde8p[\xc9",
      02: secret (string) = "B\xc8\xa4\"\xb5\xd3Go\xb3\xeb\xf272\x00\x00{",
    },
  },
  02: statement (string) = "SET queryType=JDBC",
  04: runAsync (bool) = true,
}
I0825 11:46:43.023312 50282 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "/\xdf\xac\xbcKoB\x0f\xa7\b\xe2\xde8p[\xc9",
      02: secret (string) = "B\xc8\xa4\"\xb5\xd3Go\xb3\xeb\xf272\x00\x00{",
    },
  },
  02: statement (string) = "SET queryType=JDBC",
  04: runAsync (bool) = true,
}
I0825 11:46:43.024405 50282 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:43.026439 50199 Frontend.java:935] Analyzing query: SET useSSL=false
I0825 11:46:43.028569 50199 Frontend.java:947] Analysis finished.
I0825 11:46:43.050164 50282 Frontend.java:935] Analyzing query: SET queryType=JDBC
I0825 11:46:43.059649 50282 Frontend.java:947] Analysis finished.
W0825 11:46:43.077391 43827 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:46:43.083052 43827 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297108228_BP-1820042964-11.11.206.232-1548063025113
I0825 11:46:43.237169 50306 Frontend.java:947] Analysis finished.
I0825 11:46:43.244611 50306 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:43.244865 50306 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:43.245877 50306 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:43.246131 50306 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:43.246827 50306 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:43.248006 50306 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:43.293385 50306 admission-controller.cc:508] Schedule for id=fb422d3e84a054e6:cb70527e00000000 in pool_name=root.default cluster_mem_needed=40.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
I0825 11:46:43.297144 50306 admission-controller.cc:513] Stats: agg_num_running=3, agg_num_queued=0, agg_mem_reserved=120.00 GB,  local_host(local_mem_admitted=40.00 GB, num_admitted_running=1, num_queued=0, backend_mem_reserved=24.00 GB)
I0825 11:46:43.297809 50306 admission-controller.cc:529] Admitted query id=fb422d3e84a054e6:cb70527e00000000
I0825 11:46:43.298067 50306 coordinator.cc:93] Exec() query_id=fb422d3e84a054e6:cb70527e00000000 stmt=SELECT COUNT(1) AS `EXPR_1`  FROM (SELECT `bi_159687973147248924`.`年度` AS `bi_7769357585739336089` , `bi_159687973147248924`.`日历日` AS `bi_5497223619932177494` , `bi_159687973147248924`.`日历年月` AS `bi_4486611936012149066` , `bi_159687973147248924`.`日历年周` AS `bi_16225917516951867296` , `bi_159687973147248924`.`平日` AS `bi_2404419009945821514` , `bi_159687973147248924`.`加油站编码` AS `bi_17515746548900466372` , `bi_159687973147248924`.`站点描述` AS `bi_8047607136561982936` , `bi_159687973147248924`.`商品` AS `bi_14496993123052939998` , `bi_159687973147248924`.`商品描述` AS `bi_6255071890286126003` , `bi_159687973147248924`.`品类` AS `bi_10355582352426400432` , `bi_159687973147248924`.`品类描述` AS `bi_16695289319095654262` , `bi_159687973147248924`.`明细类` AS `bi_3089045356542863695` , `bi_159687973147248924`.`明细类描述` AS `bi_6911062226112695507` , `bi_159687973147248924`.`小类` AS `bi_12159800931593010271` , `bi_159687973147248924`.`小类描述` AS `bi_6112480558334109094` , `bi_159687973147248924`.`非油品` AS `bi_14869533338013832996` , `bi_159687973147248924`.`非油品描述` AS `bi_3560479744354904149` , `bi_159687973147248924`.`支付_冲销` AS `bi_15490236967519694929` , `bi_159687973147248924`.`链接编号` AS `bi_6772328230663997448` , `bi_159687973147248924`.`链接编号年` AS `bi_9597231146298187283` , `bi_159687973147248924`.`支付类型` AS `bi_16203604124108023651` , `bi_159687973147248924`.`支付类型描述` AS `bi_9264459834897389105` , `bi_159687973147248924`.`金额` AS `bi_6611666627463141013` , `bi_159687973147248924`.`货币` AS `bi_3965345091942581674` , `bi_159687973147248924`.`数量` AS `bi_4962244697223826549` , `bi_159687973147248924`.`价格单位` AS `bi_12325396060833840156` , `bi_159687973147248924`.`价格单位单价` AS `bi_15469504567322581334` , `bi_159687973147248924`.`所属` AS `bi_17890467905261317136` , `bi_159687973147248924`.`单位名称` AS `bi_8037617483366456786`  FROM (SELECT `temp_sql_wrapper_table`.`年度` AS `年度` , `temp_sql_wrapper_table`.`日历日` AS `日历日` , `temp_sql_wrapper_table`.`日历年月` AS `日历年月` , `temp_sql_wrapper_table`.`日历年周` AS `日历年周` , `temp_sql_wrapper_table`.`平日` AS `平日` , `temp_sql_wrapper_table`.`加油站编码` AS `加油站编码` , `temp_sql_wrapper_table`.`站点描述` AS `站点描述` , `temp_sql_wrapper_table`.`商品` AS `商品` , `temp_sql_wrapper_table`.`商品描述` AS `商品描述` , `temp_sql_wrapper_table`.`品类` AS `品类` , `temp_sql_wrapper_table`.`品类描述` AS `品类描述` , `temp_sql_wrapper_table`.`明细类` AS `明细类` , `temp_sql_wrapper_table`.`明细类描述` AS `明细类描述` , `temp_sql_wrapper_table`.`小类` AS `小类` , `temp_sql_wrapper_table`.`小类描述` AS `小类描述` , `temp_sql_wrapper_table`.`非油品` AS `非油品` , `temp_sql_wrapper_table`.`非油品描述` AS `非油品描述` , `temp_sql_wrapper_table`.`支付_冲销` AS `支付_冲销` , `temp_sql_wrapper_table`.`链接编号` AS `链接编号` , `temp_sql_wrapper_table`.`链接编号年` AS `链接编号年` , `temp_sql_wrapper_table`.`支付类型` AS `支付类型` , `temp_sql_wrapper_table`.`支付类型描述` AS `支付类型描述` , `temp_sql_wrapper_table`.`金额` AS `金额` , `temp_sql_wrapper_table`.`货币` AS `货币` , `temp_sql_wrapper_table`.`数量` AS `数量` , `temp_sql_wrapper_table`.`价格单位` AS `价格单位` , `temp_sql_wrapper_table`.`价格单位单价` AS `价格单位单价` , `temp_sql_wrapper_table`.`所属` AS `所属` , `temp_sql_wrapper_table`.`单位名称` AS `单位名称`  FROM (SELECT `temp_sub_query_table`.`年度`, `temp_sub_query_table`.`日历日`, `temp_sub_query_table`.`日历年月`, `temp_sub_query_table`.`日历年周`, `temp_sub_query_table`.`平日`, `temp_sub_query_table`.`加油站编码`, `temp_sub_query_table`.`站点描述`, `temp_sub_query_table`.`商品`, `temp_sub_query_table`.`商品描述`, `temp_sub_query_table`.`品类`, `temp_sub_query_table`.`品类描述`, `temp_sub_query_table`.`明细类`, `temp_sub_query_table`.`明细类描述`, `temp_sub_query_table`.`小类`, `temp_sub_query_table`.`小类描述`, `temp_sub_query_table`.`非油品`, `temp_sub_query_table`.`非油品描述`, `temp_sub_query_table`.`支付_冲销`, `temp_sub_query_table`.`链接编号`, `temp_sub_query_table`.`链接编号年`, `temp_sub_query_table`.`支付类型`, `temp_sub_query_table`.`支付类型描述`, `temp_sub_query_table`.`金额`, `temp_sub_query_table`.`货币`, `temp_sub_query_table`.`数量`, `temp_sub_query_table`.`价格单位`, `temp_sub_query_table`.`价格单位单价`, `temp_sub_query_table`.`所属`, `temp_sub_query_table`.`单位名称` FROM (SELECT `APP_GSMS_HOS_ZFMX_YPFY`.`年度`, `APP_GSMS_HOS_ZFMX_YPFY`.`日历日`, `APP_GSMS_HOS_ZFMX_YPFY`.`日历年月`, `APP_GSMS_HOS_ZFMX_YPFY`.`日历年周`, `APP_GSMS_HOS_ZFMX_YPFY`.`平日`, `APP_GSMS_HOS_ZFMX_YPFY`.`加油站编码`, `APP_GSMS_HOS_ZFMX_YPFY`.`站点描述`, `APP_GSMS_HOS_ZFMX_YPFY`.`商品`, `APP_GSMS_HOS_ZFMX_YPFY`.`商品描述`, `APP_GSMS_HOS_ZFMX_YPFY`.`品类`, `APP_GSMS_HOS_ZFMX_YPFY`.`品类描述`, `APP_GSMS_HOS_ZFMX_YPFY`.`明细类`, `APP_GSMS_HOS_ZFMX_YPFY`.`明细类描述`, `APP_GSMS_HOS_ZFMX_YPFY`.`小类`, `APP_GSMS_HOS_ZFMX_YPFY`.`小类描述`, `APP_GSMS_HOS_ZFMX_YPFY`.`非油品`, `APP_GSMS_HOS_ZFMX_YPFY`.`非油品描述`, `APP_GSMS_HOS_ZFMX_YPFY`.`支付_冲销`, `APP_GSMS_HOS_ZFMX_YPFY`.`链接编号`, `APP_GSMS_HOS_ZFMX_YPFY`.`链接编号年`, `APP_GSMS_HOS_ZFMX_YPFY`.`支付类型`, `APP_GSMS_HOS_ZFMX_YPFY`.`支付类型描述`, `APP_GSMS_HOS_ZFMX_YPFY`.`金额`, `APP_GSMS_HOS_ZFMX_YPFY`.`货币`, `APP_GSMS_HOS_ZFMX_YPFY`.`数量`, `APP_GSMS_HOS_ZFMX_YPFY`.`价格单位`, `APP_GSMS_HOS_ZFMX_YPFY`.`价格单位单价`, `APP_GSMS_HOS_ZFMX_YPFY`.`所属`, `APP_GSMS_HOS_ZFMX_YPFY`.`单位名称` FROM `DW04`.`APP_GSMS_HOS_ZFMX_YPFY` `APP_GSMS_HOS_ZFMX_YPFY` ) `temp_sub_query_table` WHERE (((`temp_sub_query_table`.`年度` IN ('2019', '2020', '2021' )) AND (`temp_sub_query_table`.`单位名称` IN ('中石油新疆销售有限公司' ))) AND ((`temp_sub_query_table`.`非油品描述` IN ('便利店商品' )) AND ((`temp_sub_query_table`.`非油品描述` IN ('便利店商品' )) AND ((`temp_sub_query_table`.`年度` IN ('2019', '2020', '2021' )) AND (`temp_sub_query_table`.`单位名称` IN ('中石油新疆销售有限公司' )))))) ) `temp_sql_wrapper_table`) `bi_159687973147248924` WHERE (((`bi_159687973147248924`.`年度` IN ('2019', '2020', '2021' )) AND (`bi_159687973147248924`.`单位名称` IN ('中石油新疆销售有限公司' ))) AND ((`bi_159687973147248924`.`非油品描述` IN ('便利店商品' )) AND ((`bi_159687973147248924`.`非油品描述` IN ('便利店商品' )) AND ((`bi_159687973147248924`.`年度` IN ('2019', '2020', '2021' )) AND (`bi_159687973147248924`.`单位名称` IN ('中石油新疆销售有限公司' )))))) ) `tableWithoutPaging` 
I0825 11:46:43.298352 50306 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:43.298477 50306 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:43.299024 50306 coordinator.cc:349] starting execution on 5 backends for query_id=fb422d3e84a054e6:cb70527e00000000
I0825 11:46:43.302394 44904 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=fb422d3e84a054e6:cb70527e00000000
I0825 11:46:43.303421 44904 query-exec-mgr.cc:46] StartQueryFInstances() query_id=fb422d3e84a054e6:cb70527e00000000 coord=e4bdhpp025:22000
I0825 11:46:43.305119 44904 query-state.cc:178] Buffer pool limit for fb422d3e84a054e6:cb70527e00000000: 6871947673
I0825 11:46:43.305616 44904 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query fb422d3e84a054e6:cb70527e00000000
I0825 11:46:43.307037 50340 query-state.cc:300] StartFInstances(): query_id=fb422d3e84a054e6:cb70527e00000000 #instances=2
I0825 11:46:43.307387 50340 query-state.cc:313] descriptor table for query=fb422d3e84a054e6:cb70527e00000000
tuples:
Tuple(id=6 size=97 slots=[Slot(id=146 type=STRING col_path=[28] offset=0 null=(offset=96 mask=1) slot_idx=0 field_idx=-1), Slot(id=147 type=STRING col_path=[28] offset=16 null=(offset=96 mask=2) slot_idx=1 field_idx=-1), Slot(id=148 type=STRING col_path=[16] offset=32 null=(offset=96 mask=4) slot_idx=2 field_idx=-1), Slot(id=149 type=STRING col_path=[16] offset=48 null=(offset=96 mask=8) slot_idx=3 field_idx=-1), Slot(id=150 type=STRING col_path=[0] offset=64 null=(offset=96 mask=10) slot_idx=4 field_idx=-1), Slot(id=151 type=STRING col_path=[0] offset=80 null=(offset=96 mask=20) slot_idx=5 field_idx=-1)] tuple_path=[])
Tuple(id=5 size=8 slots=[Slot(id=145 type=BIGINT col_path=[] offset=0 null=(offset=0 mask=0) slot_idx=0 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=49 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=48 mask=1) slot_idx=0 field_idx=-1), Slot(id=16 type=STRING col_path=[16] offset=16 null=(offset=48 mask=2) slot_idx=1 field_idx=-1), Slot(id=28 type=STRING col_path=[28] offset=32 null=(offset=48 mask=4) slot_idx=2 field_idx=-1)] tuple_path=[])
I0825 11:46:43.310617 50341 query-state.cc:395] Executing instance. instance_id=fb422d3e84a054e6:cb70527e00000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=4 #in-flight=5
I0825 11:46:43.310727 50342 query-state.cc:395] Executing instance. instance_id=fb422d3e84a054e6:cb70527e00000001 fragment_idx=1 per_fragment_instance_idx=0 coord_state_idx=4 #in-flight=6
I0825 11:46:43.314776 50306 coordinator.cc:362] started execution on 5 backends for query_id=fb422d3e84a054e6:cb70527e00000000
I0825 11:46:43.316282 50342 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance 'fb422d3e84a054e6:cb70527e00000001': 190
I0825 11:46:43.324622 50340 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:46:43.327076 50306 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xe6T\xa0\x84>-B\xfb\x00\x00\x00\x00~Rp\xcb",
      02: secret (string) = "\xe6T\xa0\x84>-B\xfb\x00\x00\x00\x00~Rp\xcb",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:43.417284 50299 Frontend.java:947] Analysis finished.
I0825 11:46:43.421305 50299 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:46:43.428532 50299 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:46:43.438956 50299 admission-controller.cc:508] Schedule for id=c14076ebcf238a0e:9f4f276800000000 in pool_name=root.agilebi cluster_mem_needed=1.91 GB PoolConfig: max_requests=500 max_queued=200 max_mem=800.00 GB
I0825 11:46:43.440346 50299 admission-controller.cc:513] Stats: agg_num_running=1, agg_num_queued=0, agg_mem_reserved=1.91 GB,  local_host(local_mem_admitted=0, num_admitted_running=0, num_queued=0, backend_mem_reserved=0)
I0825 11:46:43.440868 50299 admission-controller.cc:529] Admitted query id=c14076ebcf238a0e:9f4f276800000000
I0825 11:46:43.441442 50299 coordinator.cc:93] Exec() query_id=c14076ebcf238a0e:9f4f276800000000 stmt=select   `bi_2282682891841018241`.`帐号` as `bi_15159864404575209771` , `bi_2282682891841018241`.`卡号` as `bi_5176736373764729517` , `bi_2282682891841018241`.`卡类型描述` as `bi_18002650512820288522` , `bi_2282682891841018241`.`是否为副卡` as `bi_10070664717213612371` , `bi_2282682891841018241`.`交易主要站点` as `bi_17363467753723988445` , `bi_2282682891841018241`.`消费过加油站站点数量_1692137484` as `bi_17559908322177175193` , `bi_2282682891841018241`.`交易类型描述` as `bi_30169237570504987` , `bi_2282682891841018241`.`商品类型` as `bi_630186766851260751` , `bi_2282682891841018241`.`商品类型描述` as `bi_15231137875792296164` , `bi_2282682891841018241`.`发卡单位` as `bi_15621164357820908518` , `bi_2282682891841018241`.`发卡单位与销售单位是否一致` as `bi_12117277212538675021` , `bi_2282682891841018241`.`首次交易日期` as `bi_6646908465420298805` , `bi_2282682891841018241`.`最近交易日期` as `bi_13530833546549329347` , `bi_2282682891841018241`.`平均油量升数` as `bi_11273946998078465677` , `bi_2282682891841018241`.`平均消费金额` as `bi_8288133923748336711` , `bi_2282682891841018241`.`平均折扣金额` as `bi_4970043801986327351` , `bi_2282682891841018241`.`平均余额` as `bi_8381900821794444625` , `bi_2282682891841018241`.`日均消费笔数` as `bi_10723048596585302054` , `bi_2282682891841018241`.`日均消费金额` as `bi_41819982784080953` , `bi_2282682891841018241`.`单日消费次数过多次数` as `bi_12112238727142840682` , `bi_2282682891841018241`.`不记名卡夜间消费总次数` as `bi_3938683413919446579` , `bi_2282682891841018241`.`不记名卡夜间消费总金额` as `bi_12562378023438062621` , `bi_2282682891841018241`.`日均夜间消费笔数` as `bi_6200430593887269742` , `bi_2282682891841018241`.`日均夜间消费金额` as `bi_1689351619663764928` , `bi_2282682891841018241`.`单日夜间消费次数过多次数` as `bi_12909975068497935338` , `bi_2282682891841018241`.`睡眠次数` as `bi_11007498412015863178` , `bi_2282682891841018241`.`是否仍在睡眠` as `bi_12482824553037098532` , `bi_2282682891841018241`.`不记名卡累计消费金额` as `bi_4601843349518591292` , `bi_2282682891841018241`.`不记名卡消费金额方差` as `bi_2924531414258932610` , `bi_2282682891841018241`.`不记名卡累计消费次数` as `bi_5870083467319809789` , `bi_2282682891841018241`.`不记名卡消费金额为小数次数` as `bi_3842164172086352148` , `bi_2282682891841018241`.`不记名卡消费过油品类型数量` as `bi_806870660964728186` , `bi_2282682891841018241`.`消费过汽油品类型数量636841632` as `bi_556036179544267082` , `bi_2282682891841018241`.`不记名卡汽油消费次数占比` as `bi_1068488302117352384` , `bi_2282682891841018241`.`汽油单笔高额消费次数_1368620500` as `bi_8356278071803173785` , `bi_2282682891841018241`.`不记名卡柴油消费次数占比` as `bi_5766421841800396638` , `bi_2282682891841018241`.`不记名卡天然气消费次数占比` as `bi_14290961476284126012` , `bi_2282682891841018241`.`ic卡大额非油消费次数` as `bi_992601592685606614` , `bi_2282682891841018241`.`非油累计消费金额` as `bi_8276717807170841059` , `bi_2282682891841018241`.`非油与成品油消费金额比例` as `bi_14967514132684380162` , `bi_2282682891841018241`.`不记名卡累计充值金额` as `bi_11701916747493263994` , `bi_2282682891841018241`.`单日充值次数过多次数` as `bi_16449755606537913494` , `bi_2282682891841018241`.`即消费且余额低的次数831743621` as `bi_12225443660237330283` , `bi_2282682891841018241`.`同一班次消费的次数` as `bi_5256996930125776142` , `bi_2282682891841018241`.`密码重置次数` as `bi_8414722834803604324` , `bi_2282682891841018241`.`笔折扣额的消费的次数_2085032453` as `bi_10212944947192418963` , `bi_2282682891841018241`.`余额充足时充钱的次数1957627260` as `bi_2466479945894447936` , `bi_2282682891841018241`.`是否曾频繁转账` as `bi_14279744686847475029` , `bi_2282682891841018241`.`是否异常加油卡` as `bi_1040490846059638232` , `bi_2282682891841018241`.`单位名称` as `bi_10101021918568318220` , `bi_2282682891841018241`.`所属` as `bi_13138972180237352292` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_2282682891841018241`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_10651599939693506386` , TRIM(`bi_2282682891841018241`.`交易主要站点`) as `bi_13164579150965645243`   from (select   `bi_11409236811878669265`.`帐号` as `帐号` , `bi_11409236811878669265`.`卡号` as `卡号` , `bi_11409236811878669265`.`卡类型描述` as `卡类型描述` , `bi_11409236811878669265`.`是否为副卡` as `是否为副卡` , `bi_11409236811878669265`.`交易主要站点` as `交易主要站点` , `bi_11409236811878669265`.`不记名卡消费过加油站站点数量` as `消费过加油站站点数量_1692137484` , `bi_11409236811878669265`.`交易类型描述` as `交易类型描述` , `bi_11409236811878669265`.`商品类型` as `商品类型` , `bi_11409236811878669265`.`商品类型描述` as `商品类型描述` , `bi_11409236811878669265`.`发卡单位` as `发卡单位` , `bi_11409236811878669265`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `bi_11409236811878669265`.`首次交易日期` as `首次交易日期` , `bi_11409236811878669265`.`最近交易日期` as `最近交易日期` , `bi_11409236811878669265`.`平均油量升数` as `平均油量升数` , `bi_11409236811878669265`.`平均消费金额` as `平均消费金额` , `bi_11409236811878669265`.`平均折扣金额` as `平均折扣金额` , `bi_11409236811878669265`.`平均余额` as `平均余额` , `bi_11409236811878669265`.`日均消费笔数` as `日均消费笔数` , `bi_11409236811878669265`.`日均消费金额` as `日均消费金额` , `bi_11409236811878669265`.`单日消费次数过多次数` as `单日消费次数过多次数` , `bi_11409236811878669265`.`不记名卡夜间消费总次数` as `不记名卡夜间消费总次数` , `bi_11409236811878669265`.`不记名卡夜间消费总金额` as `不记名卡夜间消费总金额` , `bi_11409236811878669265`.`日均夜间消费笔数` as `日均夜间消费笔数` , `bi_11409236811878669265`.`日均夜间消费金额` as `日均夜间消费金额` , `bi_11409236811878669265`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `bi_11409236811878669265`.`睡眠次数` as `睡眠次数` , `bi_11409236811878669265`.`是否仍在睡眠` as `是否仍在睡眠` , `bi_11409236811878669265`.`不记名卡累计消费金额` as `不记名卡累计消费金额` , `bi_11409236811878669265`.`不记名卡消费金额方差` as `不记名卡消费金额方差` , `bi_11409236811878669265`.`不记名卡累计消费次数` as `不记名卡累计消费次数` , `bi_11409236811878669265`.`不记名卡消费金额为小数次数` as `不记名卡消费金额为小数次数` , `bi_11409236811878669265`.`不记名卡消费过油品类型数量` as `不记名卡消费过油品类型数量` , `bi_11409236811878669265`.`不记名卡消费过汽油品类型数量` as `消费过汽油品类型数量636841632` , `bi_11409236811878669265`.`不记名卡汽油消费次数占比` as `不记名卡汽油消费次数占比` , `bi_11409236811878669265`.`不记名卡汽油单笔高额消费次数` as `汽油单笔高额消费次数_1368620500` , `bi_11409236811878669265`.`不记名卡柴油消费次数占比` as `不记名卡柴油消费次数占比` , `bi_11409236811878669265`.`不记名卡天然气消费次数占比` as `不记名卡天然气消费次数占比` , `bi_11409236811878669265`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `bi_11409236811878669265`.`非油累计消费金额` as `非油累计消费金额` , `bi_11409236811878669265`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `bi_11409236811878669265`.`不记名卡累计充值金额` as `不记名卡累计充值金额` , `bi_11409236811878669265`.`单日充值次数过多次数` as `单日充值次数过多次数` , `bi_11409236811878669265`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `bi_11409236811878669265`.`同一班次消费的次数` as `同一班次消费的次数` , `bi_11409236811878669265`.`密码重置次数` as `密码重置次数` , `bi_11409236811878669265`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `bi_11409236811878669265`.`不记名卡余额充足时充钱的次数` as `余额充足时充钱的次数1957627260` , `bi_11409236811878669265`.`是否曾频繁转账` as `是否曾频繁转账` , `bi_11409236811878669265`.`是否异常加油卡` as `是否异常加油卡` , `bi_11409236811878669265`.`单位名称` as `单位名称` , `bi_11409236811878669265`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`不记名卡消费过加油站站点数量` as `不记名卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`不记名卡夜间消费总次数` as `不记名卡夜间消费总次数`,`不记名卡夜间消费总金额` as `不记名卡夜间消费总金额`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`不记名卡累计消费金额` as `不记名卡累计消费金额`,`不记名卡消费金额方差` as `不记名卡消费金额方差`,`不记名卡累计消费次数` as `不记名卡累计消费次数`,`不记名卡消费金额为小数次数` as `不记名卡消费金额为小数次数`,`不记名卡消费过油品类型数量` as `不记名卡消费过油品类型数量`,`不记名卡消费过汽油品类型数量` as `不记名卡消费过汽油品类型数量`,`不记名卡汽油消费次数占比` as `不记名卡汽油消费次数占比`,`不记名卡汽油单笔高额消费次数` as `不记名卡汽油单笔高额消费次数`,`不记名卡柴油消费次数占比` as `不记名卡柴油消费次数占比`,`不记名卡天然气消费次数占比` as `不记名卡天然气消费次数占比`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`不记名卡累计充值金额` as `不记名卡累计充值金额`,`单日充值次数过多次数` as `单日充值次数过多次数`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`不记名卡余额充足时充钱的次数` as `不记名卡余额充足时充钱的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`不记名卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`不记名卡夜间消费总次数`,`不记名卡夜间消费总金额`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`不记名卡累计消费金额`,`不记名卡消费金额方差`,`不记名卡累计消费次数`,`不记名卡消费金额为小数次数`,`不记名卡消费过油品类型数量`,`不记名卡消费过汽油品类型数量`,`不记名卡汽油消费次数占比`,`不记名卡汽油单笔高额消费次数`,`不记名卡柴油消费次数占比`,`不记名卡天然气消费次数占比`,`ic卡大额非油消费次数`,`非油累计消费金额`,`非油与成品油消费金额比例`,`不记名卡累计充值金额`,`单日充值次数过多次数`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`不记名卡余额充足时充钱的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,     
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `不记名卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`, 
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`, 
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`,
       `单日消费次数过多次数`, 
       `不记名卡夜间消费总次数`,
       `不记名卡夜间消费总金额`,
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`, 
       `睡眠次数`,
       `是否仍在睡眠`,
       `不记名卡累计消费金额`,
       `加油卡消费金额方差` `不记名卡消费金额方差`,
       `不记名卡累计消费次数`,
       `加油卡消费金额为小数次数` `不记名卡消费金额为小数次数`,
       `不记名卡消费过油品类型数量`,
       `不记名卡消费过汽油品类型数量`,
       `不记名卡汽油消费次数占比`,
       `不记名卡汽油单笔高额消费次数`,
       `不记名卡柴油消费次数占比`,
       `不记名卡天然气消费次数占比`,
       `IC卡大额非油消费次数`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `不记名卡累计充值金额`,
       `单日充值次数过多次数`, 
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `不记名卡余额充足时充钱的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM DW04_SJFX.APP_AUAP_YK_NN) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `bi_11409236811878669265`  
     ) `bi_2282682891841018241`
      limit 1200001 
I0825 11:46:43.442948 50299 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:46:43.444170 50299 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:46:43.444530 50299 coordinator.cc:349] starting execution on 2 backends for query_id=c14076ebcf238a0e:9f4f276800000000
I0825 11:46:43.446348 45240 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=c14076ebcf238a0e:9f4f276800000000
I0825 11:46:43.447939 45240 query-exec-mgr.cc:46] StartQueryFInstances() query_id=c14076ebcf238a0e:9f4f276800000000 coord=e4bdhpp025:22000
I0825 11:46:43.448415 45240 query-state.cc:178] Buffer pool limit for c14076ebcf238a0e:9f4f276800000000: 819200000
I0825 11:46:43.449050 45240 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query c14076ebcf238a0e:9f4f276800000000
I0825 11:46:43.453697 50346 query-state.cc:300] StartFInstances(): query_id=c14076ebcf238a0e:9f4f276800000000 #instances=1
I0825 11:46:43.454306 50299 coordinator.cc:362] started execution on 2 backends for query_id=c14076ebcf238a0e:9f4f276800000000
I0825 11:46:43.454802 50346 query-state.cc:313] descriptor table for query=c14076ebcf238a0e:9f4f276800000000
tuples:
Tuple(id=0 size=583 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=576 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=576 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=STRING col_path=[10] offset=32 null=(offset=576 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[48] offset=48 null=(offset=576 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=STRING col_path=[39] offset=64 null=(offset=576 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=BIGINT col_path=[29] offset=352 null=(offset=578 mask=40) slot_idx=22 field_idx=-1), Slot(id=6 type=STRING col_path=[11] offset=80 null=(offset=576 mask=20) slot_idx=5 field_idx=-1), Slot(id=7 type=STRING col_path=[12] offset=96 null=(offset=576 mask=40) slot_idx=6 field_idx=-1), Slot(id=8 type=STRING col_path=[13] offset=112 null=(offset=576 mask=80) slot_idx=7 field_idx=-1), Slot(id=9 type=STRING col_path=[38] offset=128 null=(offset=577 mask=1) slot_idx=8 field_idx=-1), Slot(id=10 type=STRING col_path=[43] offset=144 null=(offset=577 mask=2) slot_idx=9 field_idx=-1), Slot(id=11 type=TIMESTAMP col_path=[15] offset=160 null=(offset=577 mask=4) slot_idx=10 field_idx=-1), Slot(id=12 type=TIMESTAMP col_path=[16] offset=176 null=(offset=577 mask=8) slot_idx=11 field_idx=-1), Slot(id=13 type=DECIMAL(16,2) col_path=[2] offset=360 null=(offset=578 mask=80) slot_idx=23 field_idx=-1), Slot(id=14 type=DECIMAL(17,2) col_path=[3] offset=368 null=(offset=579 mask=1) slot_idx=24 field_idx=-1), Slot(id=15 type=DECIMAL(17,2) col_path=[4] offset=376 null=(offset=579 mask=2) slot_idx=25 field_idx=-1), Slot(id=16 type=DECIMAL(17,2) col_path=[5] offset=384 null=(offset=579 mask=4) slot_idx=26 field_idx=-1), Slot(id=17 type=DOUBLE col_path=[6] offset=392 null=(offset=579 mask=8) slot_idx=27 field_idx=-1), Slot(id=18 type=DECIMAL(27,2) col_path=[7] offset=192 null=(offset=577 mask=10) slot_idx=12 field_idx=-1), Slot(id=19 type=BIGINT col_path=[25] offset=400 null=(offset=579 mask=10) slot_idx=28 field_idx=-1), Slot(id=20 type=BIGINT col_path=[27] offset=408 null=(offset=579 mask=20) slot_idx=29 field_idx=-1), Slot(id=21 type=DECIMAL(26,2) col_path=[28] offset=208 null=(offset=577 mask=20) slot_idx=13 field_idx=-1), Slot(id=22 type=DOUBLE col_path=[8] offset=416 null=(offset=579 mask=40) slot_idx=30 field_idx=-1), Slot(id=23 type=DECIMAL(27,2) col_path=[9] offset=224 null=(offset=577 mask=40) slot_idx=14 field_idx=-1), Slot(id=24 type=BIGINT col_path=[26] offset=424 null=(offset=579 mask=80) slot_idx=31 field_idx=-1), Slot(id=25 type=BIGINT col_path=[17] offset=432 null=(offset=580 mask=1) slot_idx=32 field_idx=-1), Slot(id=26 type=INT col_path=[18] offset=568 null=(offset=582 mask=2) slot_idx=49 field_idx=-1), Slot(id=27 type=DECIMAL(26,2) col_path=[41] offset=240 null=(offset=577 mask=80) slot_idx=15 field_idx=-1), Slot(id=28 type=DOUBLE col_path=[49] offset=440 null=(offset=580 mask=2) slot_idx=33 field_idx=-1), Slot(id=29 type=BIGINT col_path=[42] offset=448 null=(offset=580 mask=4) slot_idx=34 field_idx=-1), Slot(id=30 type=BIGINT col_path=[44] offset=456 null=(offset=580 mask=8) slot_idx=35 field_idx=-1), Slot(id=31 type=BIGINT col_path=[21] offset=464 null=(offset=580 mask=10) slot_idx=36 field_idx=-1), Slot(id=32 type=BIGINT col_path=[22] offset=472 null=(offset=580 mask=20) slot_idx=37 field_idx=-1), Slot(id=33 type=DOUBLE col_path=[45] offset=480 null=(offset=580 mask=40) slot_idx=38 field_idx=-1), Slot(id=34 type=BIGINT col_path=[20] offset=488 null=(offset=580 mask=80) slot_idx=39 field_idx=-1), Slot(id=35 type=DOUBLE col_path=[46] offset=496 null=(offset=581 mask=1) slot_idx=40 field_idx=-1), Slot(id=36 type=DOUBLE col_path=[47] offset=504 null=(offset=581 mask=2) slot_idx=41 field_idx=-1), Slot(id=37 type=BIGINT col_path=[19] offset=512 null=(offset=581 mask=4) slot_idx=42 field_idx=-1), Slot(id=38 type=DECIMAL(26,2) col_path=[30] offset=256 null=(offset=578 mask=1) slot_idx=16 field_idx=-1), Slot(id=39 type=DECIMAL(31,4) col_path=[31] offset=272 null=(offset=578 mask=2) slot_idx=17 field_idx=-1), Slot(id=40 type=DECIMAL(26,2) col_path=[23] offset=288 null=(offset=578 mask=4) slot_idx=18 field_idx=-1), Slot(id=41 type=BIGINT col_path=[24] offset=520 null=(offset=581 mask=8) slot_idx=43 field_idx=-1), Slot(id=42 type=BIGINT col_path=[32] offset=528 null=(offset=581 mask=10) slot_idx=44 field_idx=-1), Slot(id=43 type=BIGINT col_path=[33] offset=536 null=(offset=581 mask=20) slot_idx=45 field_idx=-1), Slot(id=44 type=BIGINT col_path=[40] offset=544 null=(offset=581 mask=40) slot_idx=46 field_idx=-1), Slot(id=45 type=BIGINT col_path=[34] offset=552 null=(offset=581 mask=80) slot_idx=47 field_idx=-1), Slot(id=46 type=BIGINT col_path=[35] offset=560 null=(offset=582 mask=1) slot_idx=48 field_idx=-1), Slot(id=47 type=INT col_path=[36] offset=572 null=(offset=582 mask=4) slot_idx=50 field_idx=-1), Slot(id=48 type=STRING col_path=[50] offset=304 null=(offset=578 mask=8) slot_idx=19 field_idx=-1), Slot(id=49 type=STRING col_path=[14] offset=320 null=(offset=578 mask=10) slot_idx=20 field_idx=-1), Slot(id=50 type=STRING col_path=[37] offset=336 null=(offset=578 mask=20) slot_idx=21 field_idx=-1)] tuple_path=[])
I0825 11:46:43.459895 50347 query-state.cc:395] Executing instance. instance_id=c14076ebcf238a0e:9f4f276800000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=1 #in-flight=7
I0825 11:46:43.479979 50346 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=c14076ebcf238a0e:9f4f276800000000 refcnt=3
I0825 11:46:43.484055 50299 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x0e\x8a#\xcf\xebv@\xc1\x00\x00\x00\x00h'O\x9f",
      02: secret (string) = "\x0e\x8a#\xcf\xebv@\xc1\x00\x00\x00\x00h'O\x9f",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:44.541543 50181 status.cc:125] Invalid query option: timeoutSeconds
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:44.543565 50181 impala-server.cc:1015] UnregisterQuery(): query_id=c04a43cd0376f034:7d4fae9a00000000
I0825 11:46:44.548122 50181 impala-server.cc:1102] Cancel(): query_id=c04a43cd0376f034:7d4fae9a00000000
I0825 11:46:44.561210 50181 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xce\xfcrez\x8aJ\xa2\x9a\xc8f\xaa\x1e\xc9x\\",
      02: secret (string) = "\xc7\xc4P\x96\x0f\xa6H\xce\xa7GC\x10\x03w\x83\xb2",
    },
  },
  02: statement (string) = "SET useSSL=false",
  04: runAsync (bool) = true,
}
I0825 11:46:44.561975 50181 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xce\xfcrez\x8aJ\xa2\x9a\xc8f\xaa\x1e\xc9x\\",
      02: secret (string) = "\xc7\xc4P\x96\x0f\xa6H\xce\xa7GC\x10\x03w\x83\xb2",
    },
  },
  02: statement (string) = "SET useSSL=false",
  04: runAsync (bool) = true,
}
I0825 11:46:44.562960 50181 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:44.582537 50181 Frontend.java:935] Analyzing query: SET useSSL=false
I0825 11:46:44.585733 50181 Frontend.java:947] Analysis finished.
I0825 11:46:45.495095 50239 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:46:45.495994 50239 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:46:45.504741 50239 query-exec-mgr.cc:95] QueryState: query_id=c14076ebcf238a0e:9f4f276800000000 refcnt=3
I0825 11:46:45.505869 50239 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=c14076ebcf238a0e:9f4f276800000000 refcnt=3
I0825 11:46:45.517242 50386 query-exec-mgr.cc:95] QueryState: query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:46:45.518177 50386 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:46:45.898326 50282 status.cc:125] Invalid query option: queryType
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:45.899518 50282 impala-server.cc:1015] UnregisterQuery(): query_id=b241a0aebd35e884:88b9197900000000
I0825 11:46:45.901551 50282 impala-server.cc:1102] Cancel(): query_id=b241a0aebd35e884:88b9197900000000
I0825 11:46:45.903920 50282 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "/\xdf\xac\xbcKoB\x0f\xa7\b\xe2\xde8p[\xc9",
      02: secret (string) = "B\xc8\xa4\"\xb5\xd3Go\xb3\xeb\xf272\x00\x00{",
    },
  },
  02: statement (string) = "SET timeoutSeconds=1800",
  04: runAsync (bool) = true,
}
I0825 11:46:45.905751 50282 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "/\xdf\xac\xbcKoB\x0f\xa7\b\xe2\xde8p[\xc9",
      02: secret (string) = "B\xc8\xa4\"\xb5\xd3Go\xb3\xeb\xf272\x00\x00{",
    },
  },
  02: statement (string) = "SET timeoutSeconds=1800",
  04: runAsync (bool) = true,
}
I0825 11:46:45.907406 50282 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:45.972851 50299 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=c14076ebcf238a0e:9f4f276800000000
I0825 11:46:45.976850 50299 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[53] {
      [0] = TColumnDesc {
        01: columnName (string) = "bi_15159864404575209771",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "bi_5176736373764729517",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "bi_18002650512820288522",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "bi_10070664717213612371",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "bi_17363467753723988445",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "bi_17559908322177175193",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "bi_30169237570504987",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 6,
      },
      [7] = TColumnDesc {
        01: columnName (string) = "bi_630186766851260751",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 7,
      },
      [8] = TColumnDesc {
        01: columnName (string) = "bi_15231137875792296164",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 8,
      },
      [9] = TColumnDesc {
        01: columnName (string) = "bi_15621164357820908518",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 9,
      },
      [10] = TColumnDesc {
        01: columnName (string) = "bi_12117277212538675021",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 10,
      },
      [11] = TColumnDesc {
        01: columnName (string) = "bi_6646908465420298805",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 11,
      },
      [12] = TColumnDesc {
        01: columnName (string) = "bi_13530833546549329347",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 12,
      },
      [13] = TColumnDesc {
        01: columnName (string) = "bi_11273946998078465677",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 16,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 13,
      },
      [14] = TColumnDesc {
        01: columnName (string) = "bi_8288133923748336711",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 14,
      },
      [15] = TColumnDesc {
        01: columnName (string) = "bi_4970043801986327351",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 15,
      },
      [16] = TColumnDesc {
        01: columnName (string) = "bi_8381900821794444625",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 16,
      },
      [17] = TColumnDesc {
        01: columnName (string) = "bi_10723048596585302054",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 17,
      },
      [18] = TColumnDesc {
        01: columnName (string) = "bi_41819982784080953",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 27,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 18,
      },
      [19] = TColumnDesc {
        01: columnName (string) = "bi_12112238727142840682",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 19,
      },
      [20] = TColumnDesc {
        01: columnName (string) = "bi_3938683413919446579",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 20,
      },
      [21] = TColumnDesc {
        01: columnName (string) = "bi_12562378023438062621",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 21,
      },
      [22] = TColumnDesc {
        01: columnName (string) = "bi_6200430593887269742",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 22,
      },
      [23] = TColumnDesc {
        01: columnName (string) = "bi_1689351619663764928",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 27,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 23,
      },
      [24] = TColumnDesc {
        01: columnName (string) = "bi_12909975068497935338",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 24,
      },
      [25] = TColumnDesc {
        01: columnName (string) = "bi_11007498412015863178",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 25,
      },
      [26] = TColumnDesc {
        01: columnName (string) = "bi_12482824553037098532",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 26,
      },
      [27] = TColumnDesc {
        01: columnName (string) = "bi_4601843349518591292",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 27,
      },
      [28] = TColumnDesc {
        01: columnName (string) = "bi_2924531414258932610",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 28,
      },
      [29] = TColumnDesc {
        01: columnName (string) = "bi_5870083467319809789",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 29,
      },
      [30] = TColumnDesc {
        01: columnName (string) = "bi_3842164172086352148",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 30,
      },
      [31] = TColumnDesc {
        01: columnName (string) = "bi_806870660964728186",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 31,
      },
      [32] = TColumnDesc {
        01: columnName (string) = "bi_556036179544267082",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 32,
      },
      [33] = TColumnDesc {
        01: columnName (string) = "bi_1068488302117352384",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 33,
      },
      [34] = TColumnDesc {
        01: columnName (string) = "bi_8356278071803173785",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 34,
      },
      [35] = TColumnDesc {
        01: columnName (string) = "bi_5766421841800396638",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 35,
      },
      [36] = TColumnDesc {
        01: columnName (string) = "bi_14290961476284126012",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 36,
      },
      [37] = TColumnDesc {
        01: columnName (string) = "bi_992601592685606614",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 37,
      },
      [38] = TColumnDesc {
        01: columnName (string) = "bi_8276717807170841059",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 38,
      },
      [39] = TColumnDesc {
        01: columnName (string) = "bi_14967514132684380162",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 31,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 4,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 39,
      },
      [40] = TColumnDesc {
        01: columnName (string) = "bi_11701916747493263994",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 40,
      },
      [41] = TColumnDesc {
        01: columnName (string) = "bi_16449755606537913494",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 41,
      },
      [42] = TColumnDesc {
        01: columnName (string) = "bi_12225443660237330283",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 42,
      },
      [43] = TColumnDesc {
        01: columnName (string) = "bi_5256996930125776142",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 43,
      },
      [44] = TColumnDesc {
        01: columnName (string) = "bi_8414722834803604324",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 44,
      },
      [45] = TColumnDesc {
        01: columnName (string) = "bi_10212944947192418963",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 45,
      },
      [46] = TColumnDesc {
        01: columnName (string) = "bi_2466479945894447936",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 46,
      },
      [47] = TColumnDesc {
        01: columnName (string) = "bi_14279744686847475029",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 47,
      },
      [48] = TColumnDesc {
        01: columnName (string) = "bi_1040490846059638232",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 48,
      },
      [49] = TColumnDesc {
        01: columnName (string) = "bi_10101021918568318220",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 49,
      },
      [50] = TColumnDesc {
        01: columnName (string) = "bi_13138972180237352292",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 50,
      },
      [51] = TColumnDesc {
        01: columnName (string) = "bi_10651599939693506386",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 51,
      },
      [52] = TColumnDesc {
        01: columnName (string) = "bi_13164579150965645243",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 52,
      },
    },
  },
}
I0825 11:46:45.979709 50282 Frontend.java:935] Analyzing query: SET timeoutSeconds=1800
I0825 11:46:45.982534 50282 Frontend.java:947] Analysis finished.
I0825 11:46:46.058135 50199 status.cc:125] Invalid query option: useSSL
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:46.061331 50199 impala-server.cc:1015] UnregisterQuery(): query_id=4440500549eb3dcd:5951f9ca00000000
I0825 11:46:46.061674 50199 impala-server.cc:1102] Cancel(): query_id=4440500549eb3dcd:5951f9ca00000000
I0825 11:46:46.065918 50199 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xea\xa9\xf8n\xaa[K\x9b\x941z\xd0\xa3\xba\x90W",
      02: secret (string) = "]\x9e\x93\xf3\xa3qHa\x9f\xe6\x9e\xef\xce\xd5\x93A",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:46:46.067665 50199 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xea\xa9\xf8n\xaa[K\x9b\x941z\xd0\xa3\xba\x90W",
      02: secret (string) = "]\x9e\x93\xf3\xa3qHa\x9f\xe6\x9e\xef\xce\xd5\x93A",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:46:46.068449 50199 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:46.079175 50199 Frontend.java:935] Analyzing query: DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`
I0825 11:46:46.083825 50199 Frontend.java:947] Analysis finished.
I0825 11:46:46.168887 50199 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xb0\xd5\xf5\xcc\x10_H\x11\x00\x00\x00\x00\xca\xfd~Q",
      02: secret (string) = "\xb0\xd5\xf5\xcc\x10_H\x11\x00\x00\x00\x00\xca\xfd~Q",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:46.173005 50199 impala-hs2-server.cc:683] CloseOperation(): query_id=11485f10ccf5d5b0:517efdca00000000
I0825 11:46:46.175542 50199 impala-server.cc:1015] UnregisterQuery(): query_id=11485f10ccf5d5b0:517efdca00000000
I0825 11:46:46.176162 50199 impala-server.cc:1102] Cancel(): query_id=11485f10ccf5d5b0:517efdca00000000
I0825 11:46:46.180328 50199 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xea\xa9\xf8n\xaa[K\x9b\x941z\xd0\xa3\xba\x90W",
      02: secret (string) = "]\x9e\x93\xf3\xa3qHa\x9f\xe6\x9e\xef\xce\xd5\x93A",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:46:46.181704 50199 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xea\xa9\xf8n\xaa[K\x9b\x941z\xd0\xa3\xba\x90W",
      02: secret (string) = "]\x9e\x93\xf3\xa3qHa\x9f\xe6\x9e\xef\xce\xd5\x93A",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:46:46.183161 50199 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:46.195658 50199 Frontend.java:935] Analyzing query: DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`
I0825 11:46:46.197574 50199 Frontend.java:947] Analysis finished.
I0825 11:46:46.278070 50199 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xce\x81>H\x83\xd6J\t\x00\x00\x00\x002\xf0\xc3I",
      02: secret (string) = "\xce\x81>H\x83\xd6J\t\x00\x00\x00\x002\xf0\xc3I",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:46.282442 50199 impala-hs2-server.cc:683] CloseOperation(): query_id=94ad683483e81ce:49c3f03200000000
I0825 11:46:46.283226 50199 impala-server.cc:1015] UnregisterQuery(): query_id=94ad683483e81ce:49c3f03200000000
I0825 11:46:46.287643 50199 impala-server.cc:1102] Cancel(): query_id=94ad683483e81ce:49c3f03200000000
I0825 11:46:46.292677 50199 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xea\xa9\xf8n\xaa[K\x9b\x941z\xd0\xa3\xba\x90W",
      02: secret (string) = "]\x9e\x93\xf3\xa3qHa\x9f\xe6\x9e\xef\xce\xd5\x93A",
    },
  },
  02: statement (string) = "SELECT `temp`.`\xe9[...](2426)",
  04: runAsync (bool) = true,
}
I0825 11:46:46.293262 50199 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xea\xa9\xf8n\xaa[K\x9b\x941z\xd0\xa3\xba\x90W",
      02: secret (string) = "]\x9e\x93\xf3\xa3qHa\x9f\xe6\x9e\xef\xce\xd5\x93A",
    },
  },
  02: statement (string) = "SELECT `temp`.`\xe9[...](2426)",
  04: runAsync (bool) = true,
}
I0825 11:46:46.294517 50199 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:46.314153 50199 Frontend.java:935] Analyzing query: SELECT `temp`.`采购订单类型`, `temp`.`采购订单日期`, `temp`.`收货站点`, `temp`.`订单金额_不含税`, `temp`.`是否完成交货`, `temp`.`该行是否被删除`, `temp`.`该行是否退货` FROM (SELECT `temp_sub_query_table`.`采购订单类型`, `temp_sub_query_table`.`采购订单日期`, `temp_sub_query_table`.`收货站点`, `temp_sub_query_table`.`订单金额_不含税`, `temp_sub_query_table`.`是否完成交货`, `temp_sub_query_table`.`该行是否被删除`, `temp_sub_query_table`.`该行是否退货` FROM (SELECT `APP_GSMS_HOS_CGDD`.`采购订单编号`, `APP_GSMS_HOS_CGDD`.`采购订单行项目`, `APP_GSMS_HOS_CGDD`.`采购订单类型`, `APP_GSMS_HOS_CGDD`.`采购订单类型描述`, `APP_GSMS_HOS_CGDD`.`采购订单日期`, `APP_GSMS_HOS_CGDD`.`供应商编码`, `APP_GSMS_HOS_CGDD`.`供应商名称`, `APP_GSMS_HOS_CGDD`.`收货站点`, `APP_GSMS_HOS_CGDD`.`站点名称`, `APP_GSMS_HOS_CGDD`.`商品编码`, `APP_GSMS_HOS_CGDD`.`商品描述`, `APP_GSMS_HOS_CGDD`.`商品类目`, `APP_GSMS_HOS_CGDD`.`商品类目描述`, `APP_GSMS_HOS_CGDD`.`订单单位`, `APP_GSMS_HOS_CGDD`.`订单数量`, `APP_GSMS_HOS_CGDD`.`净价`, `APP_GSMS_HOS_CGDD`.`订单金额_不含税`, `APP_GSMS_HOS_CGDD`.`订单金额_含税`, `APP_GSMS_HOS_CGDD`.`税率`, `APP_GSMS_HOS_CGDD`.`税额`, `APP_GSMS_HOS_CGDD`.`是否完成交货`, `APP_GSMS_HOS_CGDD`.`是否开具发票`, `APP_GSMS_HOS_CGDD`.`该行是否被删除`, `APP_GSMS_HOS_CGDD`.`该行是否退货`, `APP_GSMS_HOS_CGDD`.`所属`, `APP_GSMS_HOS_CGDD`.`单位名称` FROM `DW04`.`APP_GSMS_HOS_CGDD`) AS temp_sub_query_table WHERE (( `temp_sub_query_table`.`单位名称` IN ('乌鲁木齐石化分公司', '独山子石化分公司', '中国石油集团西部钻探工程有限公司', '中国石油运输有限公司', '西部管道分公司', '新疆油田分公司', '吐哈油田分公司', '塔里木油田分公司', '中石油新疆销售有限公司', '中石油克拉玛依石化有限责任公司', '中国石油集团工程有限公司北京项目管理分公司') ) AND ((`temp_sub_query_table`.`订单金额_不含税` < 10000000) AND (( `temp_sub_query_table`.`采购订单类型` IN ('Z003', 'Z005') ) AND (( `temp_sub_query_table`.`该行是否被删除` IN (' ') ) AND (( `temp_sub_query_table`.`是否完成交货` IN ('是') ) AND ( `temp_sub_query_table`.`该行是否退货` IN ('否') ))))))) AS temp WHERE (1 = 0)
I0825 11:46:46.399348 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:46:46.410872 50406 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:46:46.424625 50406 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe7\xca\x1cJ\xf4FI\x91\x81\x9a\xe65X\xd9\xd5\xf4",
      02: secret (string) = "\xcc>#\xc1F\xbfE9\x8f\xe2\xfb\xa4\x02\xd7\xf2\xfc",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:46:46.438522 50199 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:46.440042 50199 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:46.441187 50199 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:46.446141 50199 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:46.451817 50406 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe7\xca\x1cJ\xf4FI\x91\x81\x9a\xe65X\xd9\xd5\xf4",
      02: secret (string) = "\xcc>#\xc1F\xbfE9\x8f\xe2\xfb\xa4\x02\xd7\xf2\xfc",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:46:46.452517 50406 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe7\xca\x1cJ\xf4FI\x91\x81\x9a\xe65X\xd9\xd5\xf4",
      02: secret (string) = "\xcc>#\xc1F\xbfE9\x8f\xe2\xfb\xa4\x02\xd7\xf2\xfc",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:46:46.455307 50406 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:46.474896 50406 Frontend.java:935] Analyzing query: use `dw04_sjfx`;
I0825 11:46:46.477360 50406 Frontend.java:947] Analysis finished.
I0825 11:46:46.493366 50199 Frontend.java:947] Analysis finished.
I0825 11:46:46.498466 50199 admission-controller.cc:508] Schedule for id=604f8c6471c12b91:baf85c6000000000 in pool_name=root.default cluster_mem_needed=8.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
I0825 11:46:46.500166 50199 admission-controller.cc:513] Stats: agg_num_running=4, agg_num_queued=0, agg_mem_reserved=144.00 GB,  local_host(local_mem_admitted=80.00 GB, num_admitted_running=2, num_queued=0, backend_mem_reserved=32.00 GB)
I0825 11:46:46.500758 50199 admission-controller.cc:529] Admitted query id=604f8c6471c12b91:baf85c6000000000
I0825 11:46:46.502904 50199 coordinator.cc:93] Exec() query_id=604f8c6471c12b91:baf85c6000000000 stmt=SELECT `temp`.`采购订单类型`, `temp`.`采购订单日期`, `temp`.`收货站点`, `temp`.`订单金额_不含税`, `temp`.`是否完成交货`, `temp`.`该行是否被删除`, `temp`.`该行是否退货` FROM (SELECT `temp_sub_query_table`.`采购订单类型`, `temp_sub_query_table`.`采购订单日期`, `temp_sub_query_table`.`收货站点`, `temp_sub_query_table`.`订单金额_不含税`, `temp_sub_query_table`.`是否完成交货`, `temp_sub_query_table`.`该行是否被删除`, `temp_sub_query_table`.`该行是否退货` FROM (SELECT `APP_GSMS_HOS_CGDD`.`采购订单编号`, `APP_GSMS_HOS_CGDD`.`采购订单行项目`, `APP_GSMS_HOS_CGDD`.`采购订单类型`, `APP_GSMS_HOS_CGDD`.`采购订单类型描述`, `APP_GSMS_HOS_CGDD`.`采购订单日期`, `APP_GSMS_HOS_CGDD`.`供应商编码`, `APP_GSMS_HOS_CGDD`.`供应商名称`, `APP_GSMS_HOS_CGDD`.`收货站点`, `APP_GSMS_HOS_CGDD`.`站点名称`, `APP_GSMS_HOS_CGDD`.`商品编码`, `APP_GSMS_HOS_CGDD`.`商品描述`, `APP_GSMS_HOS_CGDD`.`商品类目`, `APP_GSMS_HOS_CGDD`.`商品类目描述`, `APP_GSMS_HOS_CGDD`.`订单单位`, `APP_GSMS_HOS_CGDD`.`订单数量`, `APP_GSMS_HOS_CGDD`.`净价`, `APP_GSMS_HOS_CGDD`.`订单金额_不含税`, `APP_GSMS_HOS_CGDD`.`订单金额_含税`, `APP_GSMS_HOS_CGDD`.`税率`, `APP_GSMS_HOS_CGDD`.`税额`, `APP_GSMS_HOS_CGDD`.`是否完成交货`, `APP_GSMS_HOS_CGDD`.`是否开具发票`, `APP_GSMS_HOS_CGDD`.`该行是否被删除`, `APP_GSMS_HOS_CGDD`.`该行是否退货`, `APP_GSMS_HOS_CGDD`.`所属`, `APP_GSMS_HOS_CGDD`.`单位名称` FROM `DW04`.`APP_GSMS_HOS_CGDD`) AS temp_sub_query_table WHERE (( `temp_sub_query_table`.`单位名称` IN ('乌鲁木齐石化分公司', '独山子石化分公司', '中国石油集团西部钻探工程有限公司', '中国石油运输有限公司', '西部管道分公司', '新疆油田分公司', '吐哈油田分公司', '塔里木油田分公司', '中石油新疆销售有限公司', '中石油克拉玛依石化有限责任公司', '中国石油集团工程有限公司北京项目管理分公司') ) AND ((`temp_sub_query_table`.`订单金额_不含税` < 10000000) AND (( `temp_sub_query_table`.`采购订单类型` IN ('Z003', 'Z005') ) AND (( `temp_sub_query_table`.`该行是否被删除` IN (' ') ) AND (( `temp_sub_query_table`.`是否完成交货` IN ('是') ) AND ( `temp_sub_query_table`.`该行是否退货` IN ('否') ))))))) AS temp WHERE (1 = 0)
I0825 11:46:46.503719 50199 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:46.504372 50199 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:46.504987 50199 coordinator.cc:349] starting execution on 1 backends for query_id=604f8c6471c12b91:baf85c6000000000
I0825 11:46:46.506428 44904 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=604f8c6471c12b91:baf85c6000000000
I0825 11:46:46.507061 44904 query-exec-mgr.cc:46] StartQueryFInstances() query_id=604f8c6471c12b91:baf85c6000000000 coord=e4bdhpp025:22000
I0825 11:46:46.508594 44904 query-state.cc:178] Buffer pool limit for 604f8c6471c12b91:baf85c6000000000: 6871947673
I0825 11:46:46.510085 44904 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 604f8c6471c12b91:baf85c6000000000
I0825 11:46:46.511170 50407 query-state.cc:300] StartFInstances(): query_id=604f8c6471c12b91:baf85c6000000000 #instances=1
I0825 11:46:46.511433 50407 query-state.cc:313] descriptor table for query=604f8c6471c12b91:baf85c6000000000
tuples:
Tuple(id=0 size=105 slots=[Slot(id=2 type=STRING col_path=[2] offset=0 null=(offset=104 mask=1) slot_idx=0 field_idx=-1), Slot(id=4 type=TIMESTAMP col_path=[4] offset=16 null=(offset=104 mask=2) slot_idx=1 field_idx=-1), Slot(id=7 type=STRING col_path=[7] offset=32 null=(offset=104 mask=4) slot_idx=2 field_idx=-1), Slot(id=16 type=DECIMAL(16,2) col_path=[16] offset=96 null=(offset=104 mask=40) slot_idx=6 field_idx=-1), Slot(id=20 type=STRING col_path=[20] offset=48 null=(offset=104 mask=8) slot_idx=3 field_idx=-1), Slot(id=22 type=STRING col_path=[22] offset=64 null=(offset=104 mask=10) slot_idx=4 field_idx=-1), Slot(id=23 type=STRING col_path=[23] offset=80 null=(offset=104 mask=20) slot_idx=5 field_idx=-1)] tuple_path=[])
I0825 11:46:46.511476 50199 coordinator.cc:362] started execution on 1 backends for query_id=604f8c6471c12b91:baf85c6000000000
I0825 11:46:46.512692 50408 query-state.cc:395] Executing instance. instance_id=604f8c6471c12b91:baf85c6000000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=0 #in-flight=8
I0825 11:46:46.516260 50407 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=604f8c6471c12b91:baf85c6000000000 refcnt=3
I0825 11:46:46.519613 50199 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x91+\xc1qd\x8cO`\x00\x00\x00\x00`\\\xf8\xba",
      02: secret (string) = "\x91+\xc1qd\x8cO`\x00\x00\x00\x00`\\\xf8\xba",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:46.527138 50199 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=604f8c6471c12b91:baf85c6000000000
I0825 11:46:46.528240 50199 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[7] {
      [0] = TColumnDesc {
        01: columnName (string) = "\xe9\x87\x87\xe8\xb4\xad\xe8\xae\xa2\xe5\x8d\x95\xe7\xb1\xbb\xe5\x9e\x8b",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "\xe9\x87\x87\xe8\xb4\xad\xe8\xae\xa2\xe5\x8d\x95\xe6\x97\xa5\xe6\x9c\x9f",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "\xe6\x94\xb6\xe8\xb4\xa7\xe7\xab\x99\xe7\x82\xb9",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "\xe8\xae\xa2\xe5\x8d\x95\xe9\x87\x91\xe9\xa2\x9d_\xe4\xb8\x8d\xe5\x90\xab\xe7\xa8\x8e",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 16,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "\xe6\x98\xaf\xe5\x90\xa6\xe5\xae\x8c\xe6\x88\x90\xe4\xba\xa4\xe8\xb4\xa7",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "\xe8\xaf\xa5\xe8\xa1\x8c\xe6\x98\xaf\xe5\x90\xa6\xe8\xa2\xab\xe5\x88\xa0\xe9\x99\xa4",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "\xe8\xaf\xa5\xe8\xa1\x8c\xe6\x98\xaf\xe5\x90\xa6\xe9\x80\x80\xe8\xb4\xa7",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 6,
      },
    },
  },
}
I0825 11:46:46.529645 50199 impala-hs2-server.cc:683] CloseOperation(): query_id=604f8c6471c12b91:baf85c6000000000
I0825 11:46:46.530098 50199 impala-server.cc:1015] UnregisterQuery(): query_id=604f8c6471c12b91:baf85c6000000000
I0825 11:46:46.530474 50199 impala-server.cc:1102] Cancel(): query_id=604f8c6471c12b91:baf85c6000000000
I0825 11:46:46.530894 50199 coordinator.cc:629] Cancel() query_id=604f8c6471c12b91:baf85c6000000000
I0825 11:46:46.531347 50199 coordinator.cc:639] CancelBackends() query_id=604f8c6471c12b91:baf85c6000000000, tried to cancel 0 backends
I0825 11:46:46.531564 50199 coordinator.cc:783] Release admission control resources for query_id=604f8c6471c12b91:baf85c6000000000
I0825 11:46:46.531615 50408 query-state.cc:403] Instance completed. instance_id=604f8c6471c12b91:baf85c6000000000 #in-flight=7 status=OK
I0825 11:46:46.533157 50408 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=604f8c6471c12b91:baf85c6000000000 refcnt=2
I0825 11:46:46.535570 50199 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=604f8c6471c12b91:baf85c6000000000 refcnt=1
I0825 11:46:46.538084 50199 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xea\xa9\xf8n\xaa[K\x9b\x941z\xd0\xa3\xba\x90W",
      02: secret (string) = "]\x9e\x93\xf3\xa3qHa\x9f\xe6\x9e\xef\xce\xd5\x93A",
    },
  },
}
I0825 11:46:46.540557 50199 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:50034 closed, closing 2 associated session(s)
I0825 11:46:46.552058 50406 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xe9T2f\x19\x85I\xa5\x00\x00\x00\x00\x8ey\x92\xa6",
      02: secret (string) = "\xe9T2f\x19\x85I\xa5\x00\x00\x00\x00\x8ey\x92\xa6",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:46:46.558749 50406 impala-hs2-server.cc:683] CloseOperation(): query_id=a5498519663254e9:a692798e00000000
I0825 11:46:46.559211 50406 impala-server.cc:1015] UnregisterQuery(): query_id=a5498519663254e9:a692798e00000000
I0825 11:46:46.559597 50406 impala-server.cc:1102] Cancel(): query_id=a5498519663254e9:a692798e00000000
I0825 11:46:46.584815 50406 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe7\xca\x1cJ\xf4FI\x91\x81\x9a\xe65X\xd9\xd5\xf4",
      02: secret (string) = "\xcc>#\xc1F\xbfE9\x8f\xe2\xfb\xa4\x02\xd7\xf2\xfc",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:46:46.585285 50406 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe7\xca\x1cJ\xf4FI\x91\x81\x9a\xe65X\xd9\xd5\xf4",
      02: secret (string) = "\xcc>#\xc1F\xbfE9\x8f\xe2\xfb\xa4\x02\xd7\xf2\xfc",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:46:46.586180 50406 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:46.597434 50406 Frontend.java:935] Analyzing query: set REQUEST_POOL = 'agilebi';
I0825 11:46:46.598126 50406 Frontend.java:947] Analysis finished.
I0825 11:46:46.599895 50406 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xcf\x1a\xc3\xe5\xa7\xaeK\xb8\x00\x00\x00\x00R\xe5\xe8\f",
      02: secret (string) = "\xcf\x1a\xc3\xe5\xa7\xaeK\xb8\x00\x00\x00\x00R\xe5\xe8\f",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:46.613245 50406 impala-hs2-server.cc:683] CloseOperation(): query_id=b84baea7e5c31acf:ce8e55200000000
I0825 11:46:46.613592 50406 impala-server.cc:1015] UnregisterQuery(): query_id=b84baea7e5c31acf:ce8e55200000000
I0825 11:46:46.613819 50406 impala-server.cc:1102] Cancel(): query_id=b84baea7e5c31acf:ce8e55200000000
I0825 11:46:46.639130 50406 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe7\xca\x1cJ\xf4FI\x91\x81\x9a\xe65X\xd9\xd5\xf4",
      02: secret (string) = "\xcc>#\xc1F\xbfE9\x8f\xe2\xfb\xa4\x02\xd7\xf2\xfc",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:46:46.642889 50406 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe7\xca\x1cJ\xf4FI\x91\x81\x9a\xe65X\xd9\xd5\xf4",
      02: secret (string) = "\xcc>#\xc1F\xbfE9\x8f\xe2\xfb\xa4\x02\xd7\xf2\xfc",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:46:46.647961 50406 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:46.659407 50406 Frontend.java:935] Analyzing query: set MEM_LIMIT = 1024000000;
I0825 11:46:46.660099 50406 Frontend.java:947] Analysis finished.
I0825 11:46:46.661630 50406 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x01\xa5\xa8\x92\vx@\xa1\x00\x00\x00\x00\x1eV\xd7\xea",
      02: secret (string) = "\x01\xa5\xa8\x92\vx@\xa1\x00\x00\x00\x00\x1eV\xd7\xea",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:46.666528 50406 impala-hs2-server.cc:683] CloseOperation(): query_id=a140780b92a8a501:ead7561e00000000
I0825 11:46:46.666996 50406 impala-server.cc:1015] UnregisterQuery(): query_id=a140780b92a8a501:ead7561e00000000
I0825 11:46:46.667456 50406 impala-server.cc:1102] Cancel(): query_id=a140780b92a8a501:ead7561e00000000
I0825 11:46:46.671267 50406 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe7\xca\x1cJ\xf4FI\x91\x81\x9a\xe65X\xd9\xd5\xf4",
      02: secret (string) = "\xcc>#\xc1F\xbfE9\x8f\xe2\xfb\xa4\x02\xd7\xf2\xfc",
    },
  },
  02: statement (string) = "DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_NN`",
  04: runAsync (bool) = true,
}
I0825 11:46:46.672977 50406 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe7\xca\x1cJ\xf4FI\x91\x81\x9a\xe65X\xd9\xd5\xf4",
      02: secret (string) = "\xcc>#\xc1F\xbfE9\x8f\xe2\xfb\xa4\x02\xd7\xf2\xfc",
    },
  },
  02: statement (string) = "DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_NN`",
  04: runAsync (bool) = true,
}
I0825 11:46:46.674295 50406 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:46.687613 50406 Frontend.java:935] Analyzing query: DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_NN`
I0825 11:46:46.688774 50406 Frontend.java:947] Analysis finished.
I0825 11:46:46.775463 50406 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "d\x10Z\b:)F\xbe\x00\x00\x00\x00\x16Y\xa8\xa1",
      02: secret (string) = "d\x10Z\b:)F\xbe\x00\x00\x00\x00\x16Y\xa8\xa1",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:46.779175 50406 impala-hs2-server.cc:683] CloseOperation(): query_id=be46293a085a1064:a1a8591600000000
I0825 11:46:46.779624 50406 impala-server.cc:1015] UnregisterQuery(): query_id=be46293a085a1064:a1a8591600000000
I0825 11:46:46.781160 50406 impala-server.cc:1102] Cancel(): query_id=be46293a085a1064:a1a8591600000000
I0825 11:46:46.912729 50406 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe7\xca\x1cJ\xf4FI\x91\x81\x9a\xe65X\xd9\xd5\xf4",
      02: secret (string) = "\xcc>#\xc1F\xbfE9\x8f\xe2\xfb\xa4\x02\xd7\xf2\xfc",
    },
  },
  02: statement (string) = "select   `bi_228[...](15726)",
  04: runAsync (bool) = true,
}
I0825 11:46:46.913522 50406 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe7\xca\x1cJ\xf4FI\x91\x81\x9a\xe65X\xd9\xd5\xf4",
      02: secret (string) = "\xcc>#\xc1F\xbfE9\x8f\xe2\xfb\xa4\x02\xd7\xf2\xfc",
    },
  },
  02: statement (string) = "select   `bi_228[...](15726)",
  04: runAsync (bool) = true,
}
I0825 11:46:46.914526 50406 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:46.922843 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:46:46.926174 50406 Frontend.java:935] Analyzing query: select   `bi_2282682891841018241`.`帐号` as `bi_15159864404575209771` , `bi_2282682891841018241`.`卡号` as `bi_5176736373764729517` , `bi_2282682891841018241`.`卡类型描述` as `bi_18002650512820288522` , `bi_2282682891841018241`.`是否为副卡` as `bi_10070664717213612371` , `bi_2282682891841018241`.`交易主要站点` as `bi_17363467753723988445` , `bi_2282682891841018241`.`消费过加油站站点数量_1692137484` as `bi_17559908322177175193` , `bi_2282682891841018241`.`交易类型描述` as `bi_30169237570504987` , `bi_2282682891841018241`.`商品类型` as `bi_630186766851260751` , `bi_2282682891841018241`.`商品类型描述` as `bi_15231137875792296164` , `bi_2282682891841018241`.`发卡单位` as `bi_15621164357820908518` , `bi_2282682891841018241`.`发卡单位与销售单位是否一致` as `bi_12117277212538675021` , `bi_2282682891841018241`.`首次交易日期` as `bi_6646908465420298805` , `bi_2282682891841018241`.`最近交易日期` as `bi_13530833546549329347` , `bi_2282682891841018241`.`平均油量升数` as `bi_11273946998078465677` , `bi_2282682891841018241`.`平均消费金额` as `bi_8288133923748336711` , `bi_2282682891841018241`.`平均折扣金额` as `bi_4970043801986327351` , `bi_2282682891841018241`.`平均余额` as `bi_8381900821794444625` , `bi_2282682891841018241`.`日均消费笔数` as `bi_10723048596585302054` , `bi_2282682891841018241`.`日均消费金额` as `bi_41819982784080953` , `bi_2282682891841018241`.`单日消费次数过多次数` as `bi_12112238727142840682` , `bi_2282682891841018241`.`不记名卡夜间消费总次数` as `bi_3938683413919446579` , `bi_2282682891841018241`.`不记名卡夜间消费总金额` as `bi_12562378023438062621` , `bi_2282682891841018241`.`日均夜间消费笔数` as `bi_6200430593887269742` , `bi_2282682891841018241`.`日均夜间消费金额` as `bi_1689351619663764928` , `bi_2282682891841018241`.`单日夜间消费次数过多次数` as `bi_12909975068497935338` , `bi_2282682891841018241`.`睡眠次数` as `bi_11007498412015863178` , `bi_2282682891841018241`.`是否仍在睡眠` as `bi_12482824553037098532` , `bi_2282682891841018241`.`不记名卡累计消费金额` as `bi_4601843349518591292` , `bi_2282682891841018241`.`不记名卡消费金额方差` as `bi_2924531414258932610` , `bi_2282682891841018241`.`不记名卡累计消费次数` as `bi_5870083467319809789` , `bi_2282682891841018241`.`不记名卡消费金额为小数次数` as `bi_3842164172086352148` , `bi_2282682891841018241`.`不记名卡消费过油品类型数量` as `bi_806870660964728186` , `bi_2282682891841018241`.`消费过汽油品类型数量636841632` as `bi_556036179544267082` , `bi_2282682891841018241`.`不记名卡汽油消费次数占比` as `bi_1068488302117352384` , `bi_2282682891841018241`.`汽油单笔高额消费次数_1368620500` as `bi_8356278071803173785` , `bi_2282682891841018241`.`不记名卡柴油消费次数占比` as `bi_5766421841800396638` , `bi_2282682891841018241`.`不记名卡天然气消费次数占比` as `bi_14290961476284126012` , `bi_2282682891841018241`.`ic卡大额非油消费次数` as `bi_992601592685606614` , `bi_2282682891841018241`.`非油累计消费金额` as `bi_8276717807170841059` , `bi_2282682891841018241`.`非油与成品油消费金额比例` as `bi_14967514132684380162` , `bi_2282682891841018241`.`不记名卡累计充值金额` as `bi_11701916747493263994` , `bi_2282682891841018241`.`单日充值次数过多次数` as `bi_16449755606537913494` , `bi_2282682891841018241`.`即消费且余额低的次数831743621` as `bi_12225443660237330283` , `bi_2282682891841018241`.`同一班次消费的次数` as `bi_5256996930125776142` , `bi_2282682891841018241`.`密码重置次数` as `bi_8414722834803604324` , `bi_2282682891841018241`.`笔折扣额的消费的次数_2085032453` as `bi_10212944947192418963` , `bi_2282682891841018241`.`余额充足时充钱的次数1957627260` as `bi_2466479945894447936` , `bi_2282682891841018241`.`是否曾频繁转账` as `bi_14279744686847475029` , `bi_2282682891841018241`.`是否异常加油卡` as `bi_1040490846059638232` , `bi_2282682891841018241`.`单位名称` as `bi_10101021918568318220` , `bi_2282682891841018241`.`所属` as `bi_13138972180237352292` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_2282682891841018241`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_10651599939693506386` , TRIM(`bi_2282682891841018241`.`交易主要站点`) as `bi_13164579150965645243`   from (select   `bi_11409236811878669265`.`帐号` as `帐号` , `bi_11409236811878669265`.`卡号` as `卡号` , `bi_11409236811878669265`.`卡类型描述` as `卡类型描述` , `bi_11409236811878669265`.`是否为副卡` as `是否为副卡` , `bi_11409236811878669265`.`交易主要站点` as `交易主要站点` , `bi_11409236811878669265`.`不记名卡消费过加油站站点数量` as `消费过加油站站点数量_1692137484` , `bi_11409236811878669265`.`交易类型描述` as `交易类型描述` , `bi_11409236811878669265`.`商品类型` as `商品类型` , `bi_11409236811878669265`.`商品类型描述` as `商品类型描述` , `bi_11409236811878669265`.`发卡单位` as `发卡单位` , `bi_11409236811878669265`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `bi_11409236811878669265`.`首次交易日期` as `首次交易日期` , `bi_11409236811878669265`.`最近交易日期` as `最近交易日期` , `bi_11409236811878669265`.`平均油量升数` as `平均油量升数` , `bi_11409236811878669265`.`平均消费金额` as `平均消费金额` , `bi_11409236811878669265`.`平均折扣金额` as `平均折扣金额` , `bi_11409236811878669265`.`平均余额` as `平均余额` , `bi_11409236811878669265`.`日均消费笔数` as `日均消费笔数` , `bi_11409236811878669265`.`日均消费金额` as `日均消费金额` , `bi_11409236811878669265`.`单日消费次数过多次数` as `单日消费次数过多次数` , `bi_11409236811878669265`.`不记名卡夜间消费总次数` as `不记名卡夜间消费总次数` , `bi_11409236811878669265`.`不记名卡夜间消费总金额` as `不记名卡夜间消费总金额` , `bi_11409236811878669265`.`日均夜间消费笔数` as `日均夜间消费笔数` , `bi_11409236811878669265`.`日均夜间消费金额` as `日均夜间消费金额` , `bi_11409236811878669265`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `bi_11409236811878669265`.`睡眠次数` as `睡眠次数` , `bi_11409236811878669265`.`是否仍在睡眠` as `是否仍在睡眠` , `bi_11409236811878669265`.`不记名卡累计消费金额` as `不记名卡累计消费金额` , `bi_11409236811878669265`.`不记名卡消费金额方差` as `不记名卡消费金额方差` , `bi_11409236811878669265`.`不记名卡累计消费次数` as `不记名卡累计消费次数` , `bi_11409236811878669265`.`不记名卡消费金额为小数次数` as `不记名卡消费金额为小数次数` , `bi_11409236811878669265`.`不记名卡消费过油品类型数量` as `不记名卡消费过油品类型数量` , `bi_11409236811878669265`.`不记名卡消费过汽油品类型数量` as `消费过汽油品类型数量636841632` , `bi_11409236811878669265`.`不记名卡汽油消费次数占比` as `不记名卡汽油消费次数占比` , `bi_11409236811878669265`.`不记名卡汽油单笔高额消费次数` as `汽油单笔高额消费次数_1368620500` , `bi_11409236811878669265`.`不记名卡柴油消费次数占比` as `不记名卡柴油消费次数占比` , `bi_11409236811878669265`.`不记名卡天然气消费次数占比` as `不记名卡天然气消费次数占比` , `bi_11409236811878669265`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `bi_11409236811878669265`.`非油累计消费金额` as `非油累计消费金额` , `bi_11409236811878669265`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `bi_11409236811878669265`.`不记名卡累计充值金额` as `不记名卡累计充值金额` , `bi_11409236811878669265`.`单日充值次数过多次数` as `单日充值次数过多次数` , `bi_11409236811878669265`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `bi_11409236811878669265`.`同一班次消费的次数` as `同一班次消费的次数` , `bi_11409236811878669265`.`密码重置次数` as `密码重置次数` , `bi_11409236811878669265`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `bi_11409236811878669265`.`不记名卡余额充足时充钱的次数` as `余额充足时充钱的次数1957627260` , `bi_11409236811878669265`.`是否曾频繁转账` as `是否曾频繁转账` , `bi_11409236811878669265`.`是否异常加油卡` as `是否异常加油卡` , `bi_11409236811878669265`.`单位名称` as `单位名称` , `bi_11409236811878669265`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`不记名卡消费过加油站站点数量` as `不记名卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`不记名卡夜间消费总次数` as `不记名卡夜间消费总次数`,`不记名卡夜间消费总金额` as `不记名卡夜间消费总金额`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`不记名卡累计消费金额` as `不记名卡累计消费金额`,`不记名卡消费金额方差` as `不记名卡消费金额方差`,`不记名卡累计消费次数` as `不记名卡累计消费次数`,`不记名卡消费金额为小数次数` as `不记名卡消费金额为小数次数`,`不记名卡消费过油品类型数量` as `不记名卡消费过油品类型数量`,`不记名卡消费过汽油品类型数量` as `不记名卡消费过汽油品类型数量`,`不记名卡汽油消费次数占比` as `不记名卡汽油消费次数占比`,`不记名卡汽油单笔高额消费次数` as `不记名卡汽油单笔高额消费次数`,`不记名卡柴油消费次数占比` as `不记名卡柴油消费次数占比`,`不记名卡天然气消费次数占比` as `不记名卡天然气消费次数占比`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`不记名卡累计充值金额` as `不记名卡累计充值金额`,`单日充值次数过多次数` as `单日充值次数过多次数`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`不记名卡余额充足时充钱的次数` as `不记名卡余额充足时充钱的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`不记名卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`不记名卡夜间消费总次数`,`不记名卡夜间消费总金额`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`不记名卡累计消费金额`,`不记名卡消费金额方差`,`不记名卡累计消费次数`,`不记名卡消费金额为小数次数`,`不记名卡消费过油品类型数量`,`不记名卡消费过汽油品类型数量`,`不记名卡汽油消费次数占比`,`不记名卡汽油单笔高额消费次数`,`不记名卡柴油消费次数占比`,`不记名卡天然气消费次数占比`,`ic卡大额非油消费次数`,`非油累计消费金额`,`非油与成品油消费金额比例`,`不记名卡累计充值金额`,`单日充值次数过多次数`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`不记名卡余额充足时充钱的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,     
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `不记名卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`, 
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`, 
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`,
       `单日消费次数过多次数`, 
       `不记名卡夜间消费总次数`,
       `不记名卡夜间消费总金额`,
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`, 
       `睡眠次数`,
       `是否仍在睡眠`,
       `不记名卡累计消费金额`,
       `加油卡消费金额方差` `不记名卡消费金额方差`,
       `不记名卡累计消费次数`,
       `加油卡消费金额为小数次数` `不记名卡消费金额为小数次数`,
       `不记名卡消费过油品类型数量`,
       `不记名卡消费过汽油品类型数量`,
       `不记名卡汽油消费次数占比`,
       `不记名卡汽油单笔高额消费次数`,
       `不记名卡柴油消费次数占比`,
       `不记名卡天然气消费次数占比`,
       `IC卡大额非油消费次数`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `不记名卡累计充值金额`,
       `单日充值次数过多次数`, 
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `不记名卡余额充足时充钱的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM DW04_SJFX.APP_AUAP_YK_NN) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `bi_11409236811878669265`  
     ) `bi_2282682891841018241`
      limit 1200001 
I0825 11:46:46.938375 50417 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:46:46.940287 50417 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "|\x8ci:\xe0,A\x91\xb7M\xed\xdd\x95\x9f\xf5\xbb",
      02: secret (string) = "\x192\xc5u\x8f\xbeK\x7f\xaaf\xfe\x89\x1bOj\xa4",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:46:46.941910 50417 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "|\x8ci:\xe0,A\x91\xb7M\xed\xdd\x95\x9f\xf5\xbb",
      02: secret (string) = "\x192\xc5u\x8f\xbeK\x7f\xaaf\xfe\x89\x1bOj\xa4",
    },
  },
}
I0825 11:46:46.946630 50417 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:46:46.948292 50417 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\v\x14r\xad\xe7\"K\x0f\x88\xac\x007.\x97]\x81",
      02: secret (string) = "\x99?@\x90\xb1\x1eC\x84\x87\xf6ri#\x99\xe4q",
    },
  },
  02: statement (string) = "USE dw01",
  04: runAsync (bool) = true,
}
I0825 11:46:46.949393 50417 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\v\x14r\xad\xe7\"K\x0f\x88\xac\x007.\x97]\x81",
      02: secret (string) = "\x99?@\x90\xb1\x1eC\x84\x87\xf6ri#\x99\xe4q",
    },
  },
  02: statement (string) = "USE dw01",
  04: runAsync (bool) = true,
}
I0825 11:46:46.951057 50417 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:46.964769 50417 Frontend.java:935] Analyzing query: USE dw01
I0825 11:46:46.969728 50417 Frontend.java:947] Analysis finished.
I0825 11:46:47.031772 50417 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xe1\xd4O\xb6\xd9vH\x1e\x00\x00\x00\x00L\xd5\xe5\x1f",
      02: secret (string) = "\xe1\xd4O\xb6\xd9vH\x1e\x00\x00\x00\x00L\xd5\xe5\x1f",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:46:47.033465 50417 impala-hs2-server.cc:683] CloseOperation(): query_id=1e4876d9b64fd4e1:1fe5d54c00000000
I0825 11:46:47.034042 50417 impala-server.cc:1015] UnregisterQuery(): query_id=1e4876d9b64fd4e1:1fe5d54c00000000
I0825 11:46:47.034425 50417 impala-server.cc:1102] Cancel(): query_id=1e4876d9b64fd4e1:1fe5d54c00000000
I0825 11:46:47.036751 50417 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\v\x14r\xad\xe7\"K\x0f\x88\xac\x007.\x97]\x81",
      02: secret (string) = "\x99?@\x90\xb1\x1eC\x84\x87\xf6ri#\x99\xe4q",
    },
  },
  02: statement (string) = "SET KrbUserName=apprc",
  04: runAsync (bool) = true,
}
I0825 11:46:47.037169 50417 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\v\x14r\xad\xe7\"K\x0f\x88\xac\x007.\x97]\x81",
      02: secret (string) = "\x99?@\x90\xb1\x1eC\x84\x87\xf6ri#\x99\xe4q",
    },
  },
  02: statement (string) = "SET KrbUserName=apprc",
  04: runAsync (bool) = true,
}
I0825 11:46:47.038143 50417 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:47.049582 50417 Frontend.java:935] Analyzing query: SET KrbUserName=apprc
I0825 11:46:47.055814 50417 Frontend.java:947] Analysis finished.
W0825 11:46:47.367599 43831 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:46:47.368561 43831 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297106706_BP-1820042964-11.11.206.232-1548063025113
I0825 11:46:47.413996 50406 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:46:47.424822 50406 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:46:47.764299 50406 Frontend.java:947] Analysis finished.
I0825 11:46:47.774191 50406 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:46:47.783682 50181 status.cc:125] Invalid query option: useSSL
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:47.783557 50406 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:46:47.785244 50181 impala-server.cc:1015] UnregisterQuery(): query_id=e645dac6409f6f28:e2258dfe00000000
I0825 11:46:47.786697 50181 impala-server.cc:1102] Cancel(): query_id=e645dac6409f6f28:e2258dfe00000000
I0825 11:46:47.791769 50181 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xce\xfcrez\x8aJ\xa2\x9a\xc8f\xaa\x1e\xc9x\\",
      02: secret (string) = "\xc7\xc4P\x96\x0f\xa6H\xce\xa7GC\x10\x03w\x83\xb2",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:46:47.792563 50181 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xce\xfcrez\x8aJ\xa2\x9a\xc8f\xaa\x1e\xc9x\\",
      02: secret (string) = "\xc7\xc4P\x96\x0f\xa6H\xce\xa7GC\x10\x03w\x83\xb2",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:46:47.795405 50181 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:47.798907 50406 admission-controller.cc:508] Schedule for id=e54db18c4c127046:4f5d18aa00000000 in pool_name=root.agilebi cluster_mem_needed=1.91 GB PoolConfig: max_requests=500 max_queued=200 max_mem=800.00 GB
I0825 11:46:47.807425 50406 admission-controller.cc:513] Stats: agg_num_running=2, agg_num_queued=0, agg_mem_reserved=3.81 GB,  local_host(local_mem_admitted=1.91 GB, num_admitted_running=1, num_queued=0, backend_mem_reserved=976.56 MB)
I0825 11:46:47.818280 50406 admission-controller.cc:529] Admitted query id=e54db18c4c127046:4f5d18aa00000000
I0825 11:46:47.818902 50406 coordinator.cc:93] Exec() query_id=e54db18c4c127046:4f5d18aa00000000 stmt=select   `bi_2282682891841018241`.`帐号` as `bi_15159864404575209771` , `bi_2282682891841018241`.`卡号` as `bi_5176736373764729517` , `bi_2282682891841018241`.`卡类型描述` as `bi_18002650512820288522` , `bi_2282682891841018241`.`是否为副卡` as `bi_10070664717213612371` , `bi_2282682891841018241`.`交易主要站点` as `bi_17363467753723988445` , `bi_2282682891841018241`.`消费过加油站站点数量_1692137484` as `bi_17559908322177175193` , `bi_2282682891841018241`.`交易类型描述` as `bi_30169237570504987` , `bi_2282682891841018241`.`商品类型` as `bi_630186766851260751` , `bi_2282682891841018241`.`商品类型描述` as `bi_15231137875792296164` , `bi_2282682891841018241`.`发卡单位` as `bi_15621164357820908518` , `bi_2282682891841018241`.`发卡单位与销售单位是否一致` as `bi_12117277212538675021` , `bi_2282682891841018241`.`首次交易日期` as `bi_6646908465420298805` , `bi_2282682891841018241`.`最近交易日期` as `bi_13530833546549329347` , `bi_2282682891841018241`.`平均油量升数` as `bi_11273946998078465677` , `bi_2282682891841018241`.`平均消费金额` as `bi_8288133923748336711` , `bi_2282682891841018241`.`平均折扣金额` as `bi_4970043801986327351` , `bi_2282682891841018241`.`平均余额` as `bi_8381900821794444625` , `bi_2282682891841018241`.`日均消费笔数` as `bi_10723048596585302054` , `bi_2282682891841018241`.`日均消费金额` as `bi_41819982784080953` , `bi_2282682891841018241`.`单日消费次数过多次数` as `bi_12112238727142840682` , `bi_2282682891841018241`.`不记名卡夜间消费总次数` as `bi_3938683413919446579` , `bi_2282682891841018241`.`不记名卡夜间消费总金额` as `bi_12562378023438062621` , `bi_2282682891841018241`.`日均夜间消费笔数` as `bi_6200430593887269742` , `bi_2282682891841018241`.`日均夜间消费金额` as `bi_1689351619663764928` , `bi_2282682891841018241`.`单日夜间消费次数过多次数` as `bi_12909975068497935338` , `bi_2282682891841018241`.`睡眠次数` as `bi_11007498412015863178` , `bi_2282682891841018241`.`是否仍在睡眠` as `bi_12482824553037098532` , `bi_2282682891841018241`.`不记名卡累计消费金额` as `bi_4601843349518591292` , `bi_2282682891841018241`.`不记名卡消费金额方差` as `bi_2924531414258932610` , `bi_2282682891841018241`.`不记名卡累计消费次数` as `bi_5870083467319809789` , `bi_2282682891841018241`.`不记名卡消费金额为小数次数` as `bi_3842164172086352148` , `bi_2282682891841018241`.`不记名卡消费过油品类型数量` as `bi_806870660964728186` , `bi_2282682891841018241`.`消费过汽油品类型数量636841632` as `bi_556036179544267082` , `bi_2282682891841018241`.`不记名卡汽油消费次数占比` as `bi_1068488302117352384` , `bi_2282682891841018241`.`汽油单笔高额消费次数_1368620500` as `bi_8356278071803173785` , `bi_2282682891841018241`.`不记名卡柴油消费次数占比` as `bi_5766421841800396638` , `bi_2282682891841018241`.`不记名卡天然气消费次数占比` as `bi_14290961476284126012` , `bi_2282682891841018241`.`ic卡大额非油消费次数` as `bi_992601592685606614` , `bi_2282682891841018241`.`非油累计消费金额` as `bi_8276717807170841059` , `bi_2282682891841018241`.`非油与成品油消费金额比例` as `bi_14967514132684380162` , `bi_2282682891841018241`.`不记名卡累计充值金额` as `bi_11701916747493263994` , `bi_2282682891841018241`.`单日充值次数过多次数` as `bi_16449755606537913494` , `bi_2282682891841018241`.`即消费且余额低的次数831743621` as `bi_12225443660237330283` , `bi_2282682891841018241`.`同一班次消费的次数` as `bi_5256996930125776142` , `bi_2282682891841018241`.`密码重置次数` as `bi_8414722834803604324` , `bi_2282682891841018241`.`笔折扣额的消费的次数_2085032453` as `bi_10212944947192418963` , `bi_2282682891841018241`.`余额充足时充钱的次数1957627260` as `bi_2466479945894447936` , `bi_2282682891841018241`.`是否曾频繁转账` as `bi_14279744686847475029` , `bi_2282682891841018241`.`是否异常加油卡` as `bi_1040490846059638232` , `bi_2282682891841018241`.`单位名称` as `bi_10101021918568318220` , `bi_2282682891841018241`.`所属` as `bi_13138972180237352292` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_2282682891841018241`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_10651599939693506386` , TRIM(`bi_2282682891841018241`.`交易主要站点`) as `bi_13164579150965645243`   from (select   `bi_11409236811878669265`.`帐号` as `帐号` , `bi_11409236811878669265`.`卡号` as `卡号` , `bi_11409236811878669265`.`卡类型描述` as `卡类型描述` , `bi_11409236811878669265`.`是否为副卡` as `是否为副卡` , `bi_11409236811878669265`.`交易主要站点` as `交易主要站点` , `bi_11409236811878669265`.`不记名卡消费过加油站站点数量` as `消费过加油站站点数量_1692137484` , `bi_11409236811878669265`.`交易类型描述` as `交易类型描述` , `bi_11409236811878669265`.`商品类型` as `商品类型` , `bi_11409236811878669265`.`商品类型描述` as `商品类型描述` , `bi_11409236811878669265`.`发卡单位` as `发卡单位` , `bi_11409236811878669265`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `bi_11409236811878669265`.`首次交易日期` as `首次交易日期` , `bi_11409236811878669265`.`最近交易日期` as `最近交易日期` , `bi_11409236811878669265`.`平均油量升数` as `平均油量升数` , `bi_11409236811878669265`.`平均消费金额` as `平均消费金额` , `bi_11409236811878669265`.`平均折扣金额` as `平均折扣金额` , `bi_11409236811878669265`.`平均余额` as `平均余额` , `bi_11409236811878669265`.`日均消费笔数` as `日均消费笔数` , `bi_11409236811878669265`.`日均消费金额` as `日均消费金额` , `bi_11409236811878669265`.`单日消费次数过多次数` as `单日消费次数过多次数` , `bi_11409236811878669265`.`不记名卡夜间消费总次数` as `不记名卡夜间消费总次数` , `bi_11409236811878669265`.`不记名卡夜间消费总金额` as `不记名卡夜间消费总金额` , `bi_11409236811878669265`.`日均夜间消费笔数` as `日均夜间消费笔数` , `bi_11409236811878669265`.`日均夜间消费金额` as `日均夜间消费金额` , `bi_11409236811878669265`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `bi_11409236811878669265`.`睡眠次数` as `睡眠次数` , `bi_11409236811878669265`.`是否仍在睡眠` as `是否仍在睡眠` , `bi_11409236811878669265`.`不记名卡累计消费金额` as `不记名卡累计消费金额` , `bi_11409236811878669265`.`不记名卡消费金额方差` as `不记名卡消费金额方差` , `bi_11409236811878669265`.`不记名卡累计消费次数` as `不记名卡累计消费次数` , `bi_11409236811878669265`.`不记名卡消费金额为小数次数` as `不记名卡消费金额为小数次数` , `bi_11409236811878669265`.`不记名卡消费过油品类型数量` as `不记名卡消费过油品类型数量` , `bi_11409236811878669265`.`不记名卡消费过汽油品类型数量` as `消费过汽油品类型数量636841632` , `bi_11409236811878669265`.`不记名卡汽油消费次数占比` as `不记名卡汽油消费次数占比` , `bi_11409236811878669265`.`不记名卡汽油单笔高额消费次数` as `汽油单笔高额消费次数_1368620500` , `bi_11409236811878669265`.`不记名卡柴油消费次数占比` as `不记名卡柴油消费次数占比` , `bi_11409236811878669265`.`不记名卡天然气消费次数占比` as `不记名卡天然气消费次数占比` , `bi_11409236811878669265`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `bi_11409236811878669265`.`非油累计消费金额` as `非油累计消费金额` , `bi_11409236811878669265`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `bi_11409236811878669265`.`不记名卡累计充值金额` as `不记名卡累计充值金额` , `bi_11409236811878669265`.`单日充值次数过多次数` as `单日充值次数过多次数` , `bi_11409236811878669265`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `bi_11409236811878669265`.`同一班次消费的次数` as `同一班次消费的次数` , `bi_11409236811878669265`.`密码重置次数` as `密码重置次数` , `bi_11409236811878669265`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `bi_11409236811878669265`.`不记名卡余额充足时充钱的次数` as `余额充足时充钱的次数1957627260` , `bi_11409236811878669265`.`是否曾频繁转账` as `是否曾频繁转账` , `bi_11409236811878669265`.`是否异常加油卡` as `是否异常加油卡` , `bi_11409236811878669265`.`单位名称` as `单位名称` , `bi_11409236811878669265`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`不记名卡消费过加油站站点数量` as `不记名卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`不记名卡夜间消费总次数` as `不记名卡夜间消费总次数`,`不记名卡夜间消费总金额` as `不记名卡夜间消费总金额`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`不记名卡累计消费金额` as `不记名卡累计消费金额`,`不记名卡消费金额方差` as `不记名卡消费金额方差`,`不记名卡累计消费次数` as `不记名卡累计消费次数`,`不记名卡消费金额为小数次数` as `不记名卡消费金额为小数次数`,`不记名卡消费过油品类型数量` as `不记名卡消费过油品类型数量`,`不记名卡消费过汽油品类型数量` as `不记名卡消费过汽油品类型数量`,`不记名卡汽油消费次数占比` as `不记名卡汽油消费次数占比`,`不记名卡汽油单笔高额消费次数` as `不记名卡汽油单笔高额消费次数`,`不记名卡柴油消费次数占比` as `不记名卡柴油消费次数占比`,`不记名卡天然气消费次数占比` as `不记名卡天然气消费次数占比`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`不记名卡累计充值金额` as `不记名卡累计充值金额`,`单日充值次数过多次数` as `单日充值次数过多次数`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`不记名卡余额充足时充钱的次数` as `不记名卡余额充足时充钱的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`不记名卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`不记名卡夜间消费总次数`,`不记名卡夜间消费总金额`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`不记名卡累计消费金额`,`不记名卡消费金额方差`,`不记名卡累计消费次数`,`不记名卡消费金额为小数次数`,`不记名卡消费过油品类型数量`,`不记名卡消费过汽油品类型数量`,`不记名卡汽油消费次数占比`,`不记名卡汽油单笔高额消费次数`,`不记名卡柴油消费次数占比`,`不记名卡天然气消费次数占比`,`ic卡大额非油消费次数`,`非油累计消费金额`,`非油与成品油消费金额比例`,`不记名卡累计充值金额`,`单日充值次数过多次数`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`不记名卡余额充足时充钱的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,     
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `不记名卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`, 
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`, 
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`,
       `单日消费次数过多次数`, 
       `不记名卡夜间消费总次数`,
       `不记名卡夜间消费总金额`,
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`, 
       `睡眠次数`,
       `是否仍在睡眠`,
       `不记名卡累计消费金额`,
       `加油卡消费金额方差` `不记名卡消费金额方差`,
       `不记名卡累计消费次数`,
       `加油卡消费金额为小数次数` `不记名卡消费金额为小数次数`,
       `不记名卡消费过油品类型数量`,
       `不记名卡消费过汽油品类型数量`,
       `不记名卡汽油消费次数占比`,
       `不记名卡汽油单笔高额消费次数`,
       `不记名卡柴油消费次数占比`,
       `不记名卡天然气消费次数占比`,
       `IC卡大额非油消费次数`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `不记名卡累计充值金额`,
       `单日充值次数过多次数`, 
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `不记名卡余额充足时充钱的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM DW04_SJFX.APP_AUAP_YK_NN) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `bi_11409236811878669265`  
     ) `bi_2282682891841018241`
      limit 1200001 
I0825 11:46:47.820266 50406 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:46:47.820443 50406 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:46:47.821000 50406 coordinator.cc:349] starting execution on 2 backends for query_id=e54db18c4c127046:4f5d18aa00000000
I0825 11:46:47.824237 50181 Frontend.java:935] Analyzing query: DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`
I0825 11:46:47.823441 44904 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=e54db18c4c127046:4f5d18aa00000000
I0825 11:46:47.830552 44904 query-exec-mgr.cc:46] StartQueryFInstances() query_id=e54db18c4c127046:4f5d18aa00000000 coord=e4bdhpp025:22000
I0825 11:46:47.831005 44904 query-state.cc:178] Buffer pool limit for e54db18c4c127046:4f5d18aa00000000: 819200000
I0825 11:46:47.831709 44904 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query e54db18c4c127046:4f5d18aa00000000
I0825 11:46:47.831058 50181 Frontend.java:947] Analysis finished.
I0825 11:46:47.852828 50430 query-state.cc:300] StartFInstances(): query_id=e54db18c4c127046:4f5d18aa00000000 #instances=1
I0825 11:46:47.853940 50406 coordinator.cc:362] started execution on 2 backends for query_id=e54db18c4c127046:4f5d18aa00000000
I0825 11:46:47.858247 50430 query-state.cc:313] descriptor table for query=e54db18c4c127046:4f5d18aa00000000
tuples:
Tuple(id=0 size=583 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=576 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=576 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=STRING col_path=[10] offset=32 null=(offset=576 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[48] offset=48 null=(offset=576 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=STRING col_path=[39] offset=64 null=(offset=576 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=BIGINT col_path=[29] offset=352 null=(offset=578 mask=40) slot_idx=22 field_idx=-1), Slot(id=6 type=STRING col_path=[11] offset=80 null=(offset=576 mask=20) slot_idx=5 field_idx=-1), Slot(id=7 type=STRING col_path=[12] offset=96 null=(offset=576 mask=40) slot_idx=6 field_idx=-1), Slot(id=8 type=STRING col_path=[13] offset=112 null=(offset=576 mask=80) slot_idx=7 field_idx=-1), Slot(id=9 type=STRING col_path=[38] offset=128 null=(offset=577 mask=1) slot_idx=8 field_idx=-1), Slot(id=10 type=STRING col_path=[43] offset=144 null=(offset=577 mask=2) slot_idx=9 field_idx=-1), Slot(id=11 type=TIMESTAMP col_path=[15] offset=160 null=(offset=577 mask=4) slot_idx=10 field_idx=-1), Slot(id=12 type=TIMESTAMP col_path=[16] offset=176 null=(offset=577 mask=8) slot_idx=11 field_idx=-1), Slot(id=13 type=DECIMAL(16,2) col_path=[2] offset=360 null=(offset=578 mask=80) slot_idx=23 field_idx=-1), Slot(id=14 type=DECIMAL(17,2) col_path=[3] offset=368 null=(offset=579 mask=1) slot_idx=24 field_idx=-1), Slot(id=15 type=DECIMAL(17,2) col_path=[4] offset=376 null=(offset=579 mask=2) slot_idx=25 field_idx=-1), Slot(id=16 type=DECIMAL(17,2) col_path=[5] offset=384 null=(offset=579 mask=4) slot_idx=26 field_idx=-1), Slot(id=17 type=DOUBLE col_path=[6] offset=392 null=(offset=579 mask=8) slot_idx=27 field_idx=-1), Slot(id=18 type=DECIMAL(27,2) col_path=[7] offset=192 null=(offset=577 mask=10) slot_idx=12 field_idx=-1), Slot(id=19 type=BIGINT col_path=[25] offset=400 null=(offset=579 mask=10) slot_idx=28 field_idx=-1), Slot(id=20 type=BIGINT col_path=[27] offset=408 null=(offset=579 mask=20) slot_idx=29 field_idx=-1), Slot(id=21 type=DECIMAL(26,2) col_path=[28] offset=208 null=(offset=577 mask=20) slot_idx=13 field_idx=-1), Slot(id=22 type=DOUBLE col_path=[8] offset=416 null=(offset=579 mask=40) slot_idx=30 field_idx=-1), Slot(id=23 type=DECIMAL(27,2) col_path=[9] offset=224 null=(offset=577 mask=40) slot_idx=14 field_idx=-1), Slot(id=24 type=BIGINT col_path=[26] offset=424 null=(offset=579 mask=80) slot_idx=31 field_idx=-1), Slot(id=25 type=BIGINT col_path=[17] offset=432 null=(offset=580 mask=1) slot_idx=32 field_idx=-1), Slot(id=26 type=INT col_path=[18] offset=568 null=(offset=582 mask=2) slot_idx=49 field_idx=-1), Slot(id=27 type=DECIMAL(26,2) col_path=[41] offset=240 null=(offset=577 mask=80) slot_idx=15 field_idx=-1), Slot(id=28 type=DOUBLE col_path=[49] offset=440 null=(offset=580 mask=2) slot_idx=33 field_idx=-1), Slot(id=29 type=BIGINT col_path=[42] offset=448 null=(offset=580 mask=4) slot_idx=34 field_idx=-1), Slot(id=30 type=BIGINT col_path=[44] offset=456 null=(offset=580 mask=8) slot_idx=35 field_idx=-1), Slot(id=31 type=BIGINT col_path=[21] offset=464 null=(offset=580 mask=10) slot_idx=36 field_idx=-1), Slot(id=32 type=BIGINT col_path=[22] offset=472 null=(offset=580 mask=20) slot_idx=37 field_idx=-1), Slot(id=33 type=DOUBLE col_path=[45] offset=480 null=(offset=580 mask=40) slot_idx=38 field_idx=-1), Slot(id=34 type=BIGINT col_path=[20] offset=488 null=(offset=580 mask=80) slot_idx=39 field_idx=-1), Slot(id=35 type=DOUBLE col_path=[46] offset=496 null=(offset=581 mask=1) slot_idx=40 field_idx=-1), Slot(id=36 type=DOUBLE col_path=[47] offset=504 null=(offset=581 mask=2) slot_idx=41 field_idx=-1), Slot(id=37 type=BIGINT col_path=[19] offset=512 null=(offset=581 mask=4) slot_idx=42 field_idx=-1), Slot(id=38 type=DECIMAL(26,2) col_path=[30] offset=256 null=(offset=578 mask=1) slot_idx=16 field_idx=-1), Slot(id=39 type=DECIMAL(31,4) col_path=[31] offset=272 null=(offset=578 mask=2) slot_idx=17 field_idx=-1), Slot(id=40 type=DECIMAL(26,2) col_path=[23] offset=288 null=(offset=578 mask=4) slot_idx=18 field_idx=-1), Slot(id=41 type=BIGINT col_path=[24] offset=520 null=(offset=581 mask=8) slot_idx=43 field_idx=-1), Slot(id=42 type=BIGINT col_path=[32] offset=528 null=(offset=581 mask=10) slot_idx=44 field_idx=-1), Slot(id=43 type=BIGINT col_path=[33] offset=536 null=(offset=581 mask=20) slot_idx=45 field_idx=-1), Slot(id=44 type=BIGINT col_path=[40] offset=544 null=(offset=581 mask=40) slot_idx=46 field_idx=-1), Slot(id=45 type=BIGINT col_path=[34] offset=552 null=(offset=581 mask=80) slot_idx=47 field_idx=-1), Slot(id=46 type=BIGINT col_path=[35] offset=560 null=(offset=582 mask=1) slot_idx=48 field_idx=-1), Slot(id=47 type=INT col_path=[36] offset=572 null=(offset=582 mask=4) slot_idx=50 field_idx=-1), Slot(id=48 type=STRING col_path=[50] offset=304 null=(offset=578 mask=8) slot_idx=19 field_idx=-1), Slot(id=49 type=STRING col_path=[14] offset=320 null=(offset=578 mask=10) slot_idx=20 field_idx=-1), Slot(id=50 type=STRING col_path=[37] offset=336 null=(offset=578 mask=20) slot_idx=21 field_idx=-1)] tuple_path=[])
I0825 11:46:47.869123 50431 query-state.cc:395] Executing instance. instance_id=e54db18c4c127046:4f5d18aa00000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=1 #in-flight=8
I0825 11:46:47.882084 50430 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e54db18c4c127046:4f5d18aa00000000 refcnt=3
I0825 11:46:47.884219 50406 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "Fp\x12L\x8c\xb1M\xe5\x00\x00\x00\x00\xaa\x18]O",
      02: secret (string) = "Fp\x12L\x8c\xb1M\xe5\x00\x00\x00\x00\xaa\x18]O",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:47.936496 50181 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xc0'\xbd:\x92>H\x1d\x00\x00\x00\x00\xbb8\xcaF",
      02: secret (string) = "\xc0'\xbd:\x92>H\x1d\x00\x00\x00\x00\xbb8\xcaF",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:47.942405 50181 impala-hs2-server.cc:683] CloseOperation(): query_id=1d483e923abd27c0:46ca38bb00000000
I0825 11:46:47.943043 50181 impala-server.cc:1015] UnregisterQuery(): query_id=1d483e923abd27c0:46ca38bb00000000
I0825 11:46:47.943661 50181 impala-server.cc:1102] Cancel(): query_id=1d483e923abd27c0:46ca38bb00000000
I0825 11:46:47.949707 50181 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xce\xfcrez\x8aJ\xa2\x9a\xc8f\xaa\x1e\xc9x\\",
      02: secret (string) = "\xc7\xc4P\x96\x0f\xa6H\xce\xa7GC\x10\x03w\x83\xb2",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:46:47.950194 50181 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xce\xfcrez\x8aJ\xa2\x9a\xc8f\xaa\x1e\xc9x\\",
      02: secret (string) = "\xc7\xc4P\x96\x0f\xa6H\xce\xa7GC\x10\x03w\x83\xb2",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:46:47.950865 50181 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:47.961419 50181 Frontend.java:935] Analyzing query: DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`
I0825 11:46:47.963146 50181 Frontend.java:947] Analysis finished.
I0825 11:46:48.022173 50181 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "e\x1f\xa9T\xb2\x05F\x0f\x00\x00\x00\x00\xc6\x90\xf2:",
      02: secret (string) = "e\x1f\xa9T\xb2\x05F\x0f\x00\x00\x00\x00\xc6\x90\xf2:",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:48.025300 50181 impala-hs2-server.cc:683] CloseOperation(): query_id=f4605b254a91f65:3af290c600000000
I0825 11:46:48.025935 50181 impala-server.cc:1015] UnregisterQuery(): query_id=f4605b254a91f65:3af290c600000000
I0825 11:46:48.026775 50181 impala-server.cc:1102] Cancel(): query_id=f4605b254a91f65:3af290c600000000
I0825 11:46:48.031982 50181 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xce\xfcrez\x8aJ\xa2\x9a\xc8f\xaa\x1e\xc9x\\",
      02: secret (string) = "\xc7\xc4P\x96\x0f\xa6H\xce\xa7GC\x10\x03w\x83\xb2",
    },
  },
  02: statement (string) = "SELECT `temp`.`\xe9[...](2563)",
  04: runAsync (bool) = true,
}
I0825 11:46:48.032717 50181 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xce\xfcrez\x8aJ\xa2\x9a\xc8f\xaa\x1e\xc9x\\",
      02: secret (string) = "\xc7\xc4P\x96\x0f\xa6H\xce\xa7GC\x10\x03w\x83\xb2",
    },
  },
  02: statement (string) = "SELECT `temp`.`\xe9[...](2563)",
  04: runAsync (bool) = true,
}
I0825 11:46:48.033434 50181 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:48.044276 50181 Frontend.java:935] Analyzing query: SELECT `temp`.`采购订单类型`, `temp`.`采购订单日期`, `temp`.`商品描述`, `temp`.`商品类目描述`, `temp`.`订单金额_不含税`, `temp`.`是否完成交货`, `temp`.`该行是否被删除`, `temp`.`该行是否退货` FROM (SELECT `temp_sub_query_table`.`采购订单类型`, `temp_sub_query_table`.`采购订单日期`, `temp_sub_query_table`.`商品描述`, `temp_sub_query_table`.`商品类目描述`, `temp_sub_query_table`.`订单金额_不含税`, `temp_sub_query_table`.`是否完成交货`, `temp_sub_query_table`.`该行是否被删除`, `temp_sub_query_table`.`该行是否退货` FROM (SELECT `APP_GSMS_HOS_CGDD`.`采购订单编号`, `APP_GSMS_HOS_CGDD`.`采购订单行项目`, `APP_GSMS_HOS_CGDD`.`采购订单类型`, `APP_GSMS_HOS_CGDD`.`采购订单类型描述`, `APP_GSMS_HOS_CGDD`.`采购订单日期`, `APP_GSMS_HOS_CGDD`.`供应商编码`, `APP_GSMS_HOS_CGDD`.`供应商名称`, `APP_GSMS_HOS_CGDD`.`收货站点`, `APP_GSMS_HOS_CGDD`.`站点名称`, `APP_GSMS_HOS_CGDD`.`商品编码`, `APP_GSMS_HOS_CGDD`.`商品描述`, `APP_GSMS_HOS_CGDD`.`商品类目`, `APP_GSMS_HOS_CGDD`.`商品类目描述`, `APP_GSMS_HOS_CGDD`.`订单单位`, `APP_GSMS_HOS_CGDD`.`订单数量`, `APP_GSMS_HOS_CGDD`.`净价`, `APP_GSMS_HOS_CGDD`.`订单金额_不含税`, `APP_GSMS_HOS_CGDD`.`订单金额_含税`, `APP_GSMS_HOS_CGDD`.`税率`, `APP_GSMS_HOS_CGDD`.`税额`, `APP_GSMS_HOS_CGDD`.`是否完成交货`, `APP_GSMS_HOS_CGDD`.`是否开具发票`, `APP_GSMS_HOS_CGDD`.`该行是否被删除`, `APP_GSMS_HOS_CGDD`.`该行是否退货`, `APP_GSMS_HOS_CGDD`.`所属`, `APP_GSMS_HOS_CGDD`.`单位名称` FROM `DW04`.`APP_GSMS_HOS_CGDD`) AS temp_sub_query_table WHERE (( `temp_sub_query_table`.`单位名称` IN ('乌鲁木齐石化分公司', '独山子石化分公司', '中国石油集团西部钻探工程有限公司', '中国石油运输有限公司', '西部管道分公司', '新疆油田分公司', '吐哈油田分公司', '塔里木油田分公司', '中石油新疆销售有限公司', '中石油克拉玛依石化有限责任公司', '中国石油集团工程有限公司北京项目管理分公司') ) AND ((`temp_sub_query_table`.`订单金额_不含税` < 10000000) AND (( `temp_sub_query_table`.`采购订单类型` IN ('Z003', 'Z005') ) AND (( `temp_sub_query_table`.`该行是否被删除` IN (' ') ) AND (( `temp_sub_query_table`.`该行是否退货` IN ('否') ) AND ((`temp_sub_query_table`.`商品类目描述` = '白酒') AND ( `temp_sub_query_table`.`是否完成交货` IN ('是') )))))))) AS temp WHERE (1 = 0)
I0825 11:46:48.108722 50181 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:48.109421 50181 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:48.110498 50181 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:48.111158 50181 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:48.146395 50181 Frontend.java:947] Analysis finished.
I0825 11:46:48.151077 50181 admission-controller.cc:508] Schedule for id=954d25f094f59d11:63d61ad900000000 in pool_name=root.default cluster_mem_needed=8.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
I0825 11:46:48.151412 50181 admission-controller.cc:513] Stats: agg_num_running=4, agg_num_queued=0, agg_mem_reserved=136.00 GB,  local_host(local_mem_admitted=80.00 GB, num_admitted_running=2, num_queued=0, backend_mem_reserved=32.00 GB)
I0825 11:46:48.151713 50181 admission-controller.cc:529] Admitted query id=954d25f094f59d11:63d61ad900000000
I0825 11:46:48.151934 50181 coordinator.cc:93] Exec() query_id=954d25f094f59d11:63d61ad900000000 stmt=SELECT `temp`.`采购订单类型`, `temp`.`采购订单日期`, `temp`.`商品描述`, `temp`.`商品类目描述`, `temp`.`订单金额_不含税`, `temp`.`是否完成交货`, `temp`.`该行是否被删除`, `temp`.`该行是否退货` FROM (SELECT `temp_sub_query_table`.`采购订单类型`, `temp_sub_query_table`.`采购订单日期`, `temp_sub_query_table`.`商品描述`, `temp_sub_query_table`.`商品类目描述`, `temp_sub_query_table`.`订单金额_不含税`, `temp_sub_query_table`.`是否完成交货`, `temp_sub_query_table`.`该行是否被删除`, `temp_sub_query_table`.`该行是否退货` FROM (SELECT `APP_GSMS_HOS_CGDD`.`采购订单编号`, `APP_GSMS_HOS_CGDD`.`采购订单行项目`, `APP_GSMS_HOS_CGDD`.`采购订单类型`, `APP_GSMS_HOS_CGDD`.`采购订单类型描述`, `APP_GSMS_HOS_CGDD`.`采购订单日期`, `APP_GSMS_HOS_CGDD`.`供应商编码`, `APP_GSMS_HOS_CGDD`.`供应商名称`, `APP_GSMS_HOS_CGDD`.`收货站点`, `APP_GSMS_HOS_CGDD`.`站点名称`, `APP_GSMS_HOS_CGDD`.`商品编码`, `APP_GSMS_HOS_CGDD`.`商品描述`, `APP_GSMS_HOS_CGDD`.`商品类目`, `APP_GSMS_HOS_CGDD`.`商品类目描述`, `APP_GSMS_HOS_CGDD`.`订单单位`, `APP_GSMS_HOS_CGDD`.`订单数量`, `APP_GSMS_HOS_CGDD`.`净价`, `APP_GSMS_HOS_CGDD`.`订单金额_不含税`, `APP_GSMS_HOS_CGDD`.`订单金额_含税`, `APP_GSMS_HOS_CGDD`.`税率`, `APP_GSMS_HOS_CGDD`.`税额`, `APP_GSMS_HOS_CGDD`.`是否完成交货`, `APP_GSMS_HOS_CGDD`.`是否开具发票`, `APP_GSMS_HOS_CGDD`.`该行是否被删除`, `APP_GSMS_HOS_CGDD`.`该行是否退货`, `APP_GSMS_HOS_CGDD`.`所属`, `APP_GSMS_HOS_CGDD`.`单位名称` FROM `DW04`.`APP_GSMS_HOS_CGDD`) AS temp_sub_query_table WHERE (( `temp_sub_query_table`.`单位名称` IN ('乌鲁木齐石化分公司', '独山子石化分公司', '中国石油集团西部钻探工程有限公司', '中国石油运输有限公司', '西部管道分公司', '新疆油田分公司', '吐哈油田分公司', '塔里木油田分公司', '中石油新疆销售有限公司', '中石油克拉玛依石化有限责任公司', '中国石油集团工程有限公司北京项目管理分公司') ) AND ((`temp_sub_query_table`.`订单金额_不含税` < 10000000) AND (( `temp_sub_query_table`.`采购订单类型` IN ('Z003', 'Z005') ) AND (( `temp_sub_query_table`.`该行是否被删除` IN (' ') ) AND (( `temp_sub_query_table`.`该行是否退货` IN ('否') ) AND ((`temp_sub_query_table`.`商品类目描述` = '白酒') AND ( `temp_sub_query_table`.`是否完成交货` IN ('是') )))))))) AS temp WHERE (1 = 0)
I0825 11:46:48.152369 50181 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:48.153077 50181 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:48.153394 50181 coordinator.cc:349] starting execution on 1 backends for query_id=954d25f094f59d11:63d61ad900000000
I0825 11:46:48.154510 45240 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=954d25f094f59d11:63d61ad900000000
I0825 11:46:48.154963 45240 query-exec-mgr.cc:46] StartQueryFInstances() query_id=954d25f094f59d11:63d61ad900000000 coord=e4bdhpp025:22000
I0825 11:46:48.155395 45240 query-state.cc:178] Buffer pool limit for 954d25f094f59d11:63d61ad900000000: 6871947673
I0825 11:46:48.155787 45240 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 954d25f094f59d11:63d61ad900000000
I0825 11:46:48.157388 50442 query-state.cc:300] StartFInstances(): query_id=954d25f094f59d11:63d61ad900000000 #instances=1
I0825 11:46:48.157933 50442 query-state.cc:313] descriptor table for query=954d25f094f59d11:63d61ad900000000
tuples:
Tuple(id=0 size=121 slots=[Slot(id=2 type=STRING col_path=[2] offset=0 null=(offset=120 mask=1) slot_idx=0 field_idx=-1), Slot(id=4 type=TIMESTAMP col_path=[4] offset=16 null=(offset=120 mask=2) slot_idx=1 field_idx=-1), Slot(id=10 type=STRING col_path=[10] offset=32 null=(offset=120 mask=4) slot_idx=2 field_idx=-1), Slot(id=12 type=STRING col_path=[12] offset=48 null=(offset=120 mask=8) slot_idx=3 field_idx=-1), Slot(id=16 type=DECIMAL(16,2) col_path=[16] offset=112 null=(offset=120 mask=80) slot_idx=7 field_idx=-1), Slot(id=20 type=STRING col_path=[20] offset=64 null=(offset=120 mask=10) slot_idx=4 field_idx=-1), Slot(id=22 type=STRING col_path=[22] offset=80 null=(offset=120 mask=20) slot_idx=5 field_idx=-1), Slot(id=23 type=STRING col_path=[23] offset=96 null=(offset=120 mask=40) slot_idx=6 field_idx=-1)] tuple_path=[])
I0825 11:46:48.157559 50181 coordinator.cc:362] started execution on 1 backends for query_id=954d25f094f59d11:63d61ad900000000
I0825 11:46:48.160049 50443 query-state.cc:395] Executing instance. instance_id=954d25f094f59d11:63d61ad900000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=0 #in-flight=9
I0825 11:46:48.165990 50442 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=954d25f094f59d11:63d61ad900000000 refcnt=3
I0825 11:46:48.176851 50181 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x11\x9d\xf5\x94\xf0%M\x95\x00\x00\x00\x00\xd9\x1a\xd6c",
      02: secret (string) = "\x11\x9d\xf5\x94\xf0%M\x95\x00\x00\x00\x00\xd9\x1a\xd6c",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:48.179019 50181 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=954d25f094f59d11:63d61ad900000000
I0825 11:46:48.179595 50181 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[8] {
      [0] = TColumnDesc {
        01: columnName (string) = "\xe9\x87\x87\xe8\xb4\xad\xe8\xae\xa2\xe5\x8d\x95\xe7\xb1\xbb\xe5\x9e\x8b",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "\xe9\x87\x87\xe8\xb4\xad\xe8\xae\xa2\xe5\x8d\x95\xe6\x97\xa5\xe6\x9c\x9f",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "\xe5\x95\x86\xe5\x93\x81\xe6\x8f\x8f\xe8\xbf\xb0",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "\xe5\x95\x86\xe5\x93\x81\xe7\xb1\xbb\xe7\x9b\xae\xe6\x8f\x8f\xe8\xbf\xb0",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "\xe8\xae\xa2\xe5\x8d\x95\xe9\x87\x91\xe9\xa2\x9d_\xe4\xb8\x8d\xe5\x90\xab\xe7\xa8\x8e",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 16,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "\xe6\x98\xaf\xe5\x90\xa6\xe5\xae\x8c\xe6\x88\x90\xe4\xba\xa4\xe8\xb4\xa7",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "\xe8\xaf\xa5\xe8\xa1\x8c\xe6\x98\xaf\xe5\x90\xa6\xe8\xa2\xab\xe5\x88\xa0\xe9\x99\xa4",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 6,
      },
      [7] = TColumnDesc {
        01: columnName (string) = "\xe8\xaf\xa5\xe8\xa1\x8c\xe6\x98\xaf\xe5\x90\xa6\xe9\x80\x80\xe8\xb4\xa7",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 7,
      },
    },
  },
}
I0825 11:46:48.182714 50181 impala-hs2-server.cc:683] CloseOperation(): query_id=954d25f094f59d11:63d61ad900000000
I0825 11:46:48.182950 50181 impala-server.cc:1015] UnregisterQuery(): query_id=954d25f094f59d11:63d61ad900000000
I0825 11:46:48.183295 50181 impala-server.cc:1102] Cancel(): query_id=954d25f094f59d11:63d61ad900000000
I0825 11:46:48.183504 50181 coordinator.cc:629] Cancel() query_id=954d25f094f59d11:63d61ad900000000
I0825 11:46:48.183807 50181 coordinator.cc:639] CancelBackends() query_id=954d25f094f59d11:63d61ad900000000, tried to cancel 0 backends
I0825 11:46:48.184196 50181 coordinator.cc:783] Release admission control resources for query_id=954d25f094f59d11:63d61ad900000000
I0825 11:46:48.184357 50443 query-state.cc:403] Instance completed. instance_id=954d25f094f59d11:63d61ad900000000 #in-flight=8 status=OK
I0825 11:46:48.184892 50443 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=954d25f094f59d11:63d61ad900000000 refcnt=2
I0825 11:46:48.186662 50181 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=954d25f094f59d11:63d61ad900000000 refcnt=1
I0825 11:46:48.194963 50181 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xce\xfcrez\x8aJ\xa2\x9a\xc8f\xaa\x1e\xc9x\\",
      02: secret (string) = "\xc7\xc4P\x96\x0f\xa6H\xce\xa7GC\x10\x03w\x83\xb2",
    },
  },
}
I0825 11:46:48.196441 50181 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:49930 closed, closing 2 associated session(s)
I0825 11:46:48.579964 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:46:48.592213 50448 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:46:48.596681 50448 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xf4\xfd6\v\xf7lJ\xe2\xbf\xb8\xb7\xa1\xb97\xf8\x13",
      02: secret (string) = "&\xd8=\x1a\x15\x82G,\x81\x1c\xccb\xea\x9d\xed\x0e",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:46:48.597926 50448 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xf4\xfd6\v\xf7lJ\xe2\xbf\xb8\xb7\xa1\xb97\xf8\x13",
      02: secret (string) = "&\xd8=\x1a\x15\x82G,\x81\x1c\xccb\xea\x9d\xed\x0e",
    },
  },
}
I0825 11:46:48.599721 50448 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:46:48.600597 50239 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:46:48.601136 50239 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:46:48.601708 50448 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x99I\xc3\x86\x9fA\xa9\x88\xa3\xb9\x9e\xc4\x9c\xda?",
      02: secret (string) = "\a|DW\xd7\xddB\x0f\x8at>\xbe\x1b\a\xa7\xb7",
    },
  },
  02: statement (string) = "USE dw01",
  04: runAsync (bool) = true,
}
I0825 11:46:48.602514 50448 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x99I\xc3\x86\x9fA\xa9\x88\xa3\xb9\x9e\xc4\x9c\xda?",
      02: secret (string) = "\a|DW\xd7\xddB\x0f\x8at>\xbe\x1b\a\xa7\xb7",
    },
  },
  02: statement (string) = "USE dw01",
  04: runAsync (bool) = true,
}
I0825 11:46:48.605116 50448 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:48.611889 50450 query-exec-mgr.cc:95] QueryState: query_id=c14076ebcf238a0e:9f4f276800000000 refcnt=3
I0825 11:46:48.615710 50450 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=c14076ebcf238a0e:9f4f276800000000 refcnt=3
I0825 11:46:48.624475 50448 Frontend.java:935] Analyzing query: USE dw01
I0825 11:46:48.627558 50448 Frontend.java:947] Analysis finished.
I0825 11:46:48.637391 50388 query-exec-mgr.cc:95] QueryState: query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:46:48.638716 50388 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:46:48.660029 50450 query-exec-mgr.cc:95] QueryState: query_id=e54db18c4c127046:4f5d18aa00000000 refcnt=3
I0825 11:46:48.661388 50450 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e54db18c4c127046:4f5d18aa00000000 refcnt=3
I0825 11:46:48.700914 50448 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xc3!\x9c\xecn\xdeIg\x00\x00\x00\x00\xa3\xa8(\r",
      02: secret (string) = "\xc3!\x9c\xecn\xdeIg\x00\x00\x00\x00\xa3\xa8(\r",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:46:48.702834 50448 impala-hs2-server.cc:683] CloseOperation(): query_id=6749de6eec9c21c3:d28a8a300000000
I0825 11:46:48.703359 50448 impala-server.cc:1015] UnregisterQuery(): query_id=6749de6eec9c21c3:d28a8a300000000
I0825 11:46:48.704243 50448 impala-server.cc:1102] Cancel(): query_id=6749de6eec9c21c3:d28a8a300000000
I0825 11:46:48.707621 50448 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x99I\xc3\x86\x9fA\xa9\x88\xa3\xb9\x9e\xc4\x9c\xda?",
      02: secret (string) = "\a|DW\xd7\xddB\x0f\x8at>\xbe\x1b\a\xa7\xb7",
    },
  },
  02: statement (string) = "SET KrbUserName=apprc",
  04: runAsync (bool) = true,
}
I0825 11:46:48.708531 50448 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x99I\xc3\x86\x9fA\xa9\x88\xa3\xb9\x9e\xc4\x9c\xda?",
      02: secret (string) = "\a|DW\xd7\xddB\x0f\x8at>\xbe\x1b\a\xa7\xb7",
    },
  },
  02: statement (string) = "SET KrbUserName=apprc",
  04: runAsync (bool) = true,
}
I0825 11:46:48.710052 50448 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:48.730111 50448 Frontend.java:935] Analyzing query: SET KrbUserName=apprc
I0825 11:46:48.733717 50448 Frontend.java:947] Analysis finished.
I0825 11:46:48.982789 50417 status.cc:125] Invalid query option: KrbUserName
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:48.984453 50417 impala-server.cc:1015] UnregisterQuery(): query_id=4e4bbe545479e64c:5a0b59df00000000
I0825 11:46:48.985867 50417 impala-server.cc:1102] Cancel(): query_id=4e4bbe545479e64c:5a0b59df00000000
I0825 11:46:48.989354 50417 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\v\x14r\xad\xe7\"K\x0f\x88\xac\x007.\x97]\x81",
      02: secret (string) = "\x99?@\x90\xb1\x1eC\x84\x87\xf6ri#\x99\xe4q",
    },
  },
  02: statement (string) = "SET alias=`bi_6749357856600458205`",
  04: runAsync (bool) = true,
}
I0825 11:46:48.989715 50417 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\v\x14r\xad\xe7\"K\x0f\x88\xac\x007.\x97]\x81",
      02: secret (string) = "\x99?@\x90\xb1\x1eC\x84\x87\xf6ri#\x99\xe4q",
    },
  },
  02: statement (string) = "SET alias=`bi_6749357856600458205`",
  04: runAsync (bool) = true,
}
I0825 11:46:48.991314 50417 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:49.003191 50417 Frontend.java:935] Analyzing query: SET alias=`bi_6749357856600458205`
I0825 11:46:49.004401 50417 Frontend.java:947] Analysis finished.
I0825 11:46:49.077695 50322 query-state.cc:403] Instance completed. instance_id=53415ea8a369be06:dabe472a00000001 #in-flight=7 status=OK
I0825 11:46:49.078542 50322 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=53415ea8a369be06:dabe472a00000000 refcnt=1
I0825 11:46:49.656491 50282 status.cc:125] Invalid query option: timeoutSeconds
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:49.658674 50282 impala-server.cc:1015] UnregisterQuery(): query_id=704e29927c54d8af:d6a0b79000000000
I0825 11:46:49.660953 50282 impala-server.cc:1102] Cancel(): query_id=704e29927c54d8af:d6a0b79000000000
I0825 11:46:49.665881 50282 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "/\xdf\xac\xbcKoB\x0f\xa7\b\xe2\xde8p[\xc9",
      02: secret (string) = "B\xc8\xa4\"\xb5\xd3Go\xb3\xeb\xf272\x00\x00{",
    },
  },
  02: statement (string) = "SET useSSL=false",
  04: runAsync (bool) = true,
}
I0825 11:46:49.667724 50282 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "/\xdf\xac\xbcKoB\x0f\xa7\b\xe2\xde8p[\xc9",
      02: secret (string) = "B\xc8\xa4\"\xb5\xd3Go\xb3\xeb\xf272\x00\x00{",
    },
  },
  02: statement (string) = "SET useSSL=false",
  04: runAsync (bool) = true,
}
I0825 11:46:49.668973 50282 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:49.685189 50282 Frontend.java:935] Analyzing query: SET useSSL=false
I0825 11:46:49.687026 50282 Frontend.java:947] Analysis finished.
I0825 11:46:49.873186 50406 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=e54db18c4c127046:4f5d18aa00000000
I0825 11:46:49.875169 50406 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[53] {
      [0] = TColumnDesc {
        01: columnName (string) = "bi_15159864404575209771",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "bi_5176736373764729517",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "bi_18002650512820288522",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "bi_10070664717213612371",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "bi_17363467753723988445",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "bi_17559908322177175193",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "bi_30169237570504987",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 6,
      },
      [7] = TColumnDesc {
        01: columnName (string) = "bi_630186766851260751",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 7,
      },
      [8] = TColumnDesc {
        01: columnName (string) = "bi_15231137875792296164",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 8,
      },
      [9] = TColumnDesc {
        01: columnName (string) = "bi_15621164357820908518",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 9,
      },
      [10] = TColumnDesc {
        01: columnName (string) = "bi_12117277212538675021",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 10,
      },
      [11] = TColumnDesc {
        01: columnName (string) = "bi_6646908465420298805",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 11,
      },
      [12] = TColumnDesc {
        01: columnName (string) = "bi_13530833546549329347",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 12,
      },
      [13] = TColumnDesc {
        01: columnName (string) = "bi_11273946998078465677",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 16,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 13,
      },
      [14] = TColumnDesc {
        01: columnName (string) = "bi_8288133923748336711",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 14,
      },
      [15] = TColumnDesc {
        01: columnName (string) = "bi_4970043801986327351",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 15,
      },
      [16] = TColumnDesc {
        01: columnName (string) = "bi_8381900821794444625",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 16,
      },
      [17] = TColumnDesc {
        01: columnName (string) = "bi_10723048596585302054",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 17,
      },
      [18] = TColumnDesc {
        01: columnName (string) = "bi_41819982784080953",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 27,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 18,
      },
      [19] = TColumnDesc {
        01: columnName (string) = "bi_12112238727142840682",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 19,
      },
      [20] = TColumnDesc {
        01: columnName (string) = "bi_3938683413919446579",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 20,
      },
      [21] = TColumnDesc {
        01: columnName (string) = "bi_12562378023438062621",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 21,
      },
      [22] = TColumnDesc {
        01: columnName (string) = "bi_6200430593887269742",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 22,
      },
      [23] = TColumnDesc {
        01: columnName (string) = "bi_1689351619663764928",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 27,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 23,
      },
      [24] = TColumnDesc {
        01: columnName (string) = "bi_12909975068497935338",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 24,
      },
      [25] = TColumnDesc {
        01: columnName (string) = "bi_11007498412015863178",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 25,
      },
      [26] = TColumnDesc {
        01: columnName (string) = "bi_12482824553037098532",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 26,
      },
      [27] = TColumnDesc {
        01: columnName (string) = "bi_4601843349518591292",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 27,
      },
      [28] = TColumnDesc {
        01: columnName (string) = "bi_2924531414258932610",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 28,
      },
      [29] = TColumnDesc {
        01: columnName (string) = "bi_5870083467319809789",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 29,
      },
      [30] = TColumnDesc {
        01: columnName (string) = "bi_3842164172086352148",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 30,
      },
      [31] = TColumnDesc {
        01: columnName (string) = "bi_806870660964728186",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 31,
      },
      [32] = TColumnDesc {
        01: columnName (string) = "bi_556036179544267082",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 32,
      },
      [33] = TColumnDesc {
        01: columnName (string) = "bi_1068488302117352384",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 33,
      },
      [34] = TColumnDesc {
        01: columnName (string) = "bi_8356278071803173785",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 34,
      },
      [35] = TColumnDesc {
        01: columnName (string) = "bi_5766421841800396638",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 35,
      },
      [36] = TColumnDesc {
        01: columnName (string) = "bi_14290961476284126012",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 36,
      },
      [37] = TColumnDesc {
        01: columnName (string) = "bi_992601592685606614",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 37,
      },
      [38] = TColumnDesc {
        01: columnName (string) = "bi_8276717807170841059",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 38,
      },
      [39] = TColumnDesc {
        01: columnName (string) = "bi_14967514132684380162",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 31,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 4,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 39,
      },
      [40] = TColumnDesc {
        01: columnName (string) = "bi_11701916747493263994",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 40,
      },
      [41] = TColumnDesc {
        01: columnName (string) = "bi_16449755606537913494",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 41,
      },
      [42] = TColumnDesc {
        01: columnName (string) = "bi_12225443660237330283",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 42,
      },
      [43] = TColumnDesc {
        01: columnName (string) = "bi_5256996930125776142",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 43,
      },
      [44] = TColumnDesc {
        01: columnName (string) = "bi_8414722834803604324",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 44,
      },
      [45] = TColumnDesc {
        01: columnName (string) = "bi_10212944947192418963",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 45,
      },
      [46] = TColumnDesc {
        01: columnName (string) = "bi_2466479945894447936",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 46,
      },
      [47] = TColumnDesc {
        01: columnName (string) = "bi_14279744686847475029",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 47,
      },
      [48] = TColumnDesc {
        01: columnName (string) = "bi_1040490846059638232",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 48,
      },
      [49] = TColumnDesc {
        01: columnName (string) = "bi_10101021918568318220",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 49,
      },
      [50] = TColumnDesc {
        01: columnName (string) = "bi_13138972180237352292",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 50,
      },
      [51] = TColumnDesc {
        01: columnName (string) = "bi_10651599939693506386",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 51,
      },
      [52] = TColumnDesc {
        01: columnName (string) = "bi_13164579150965645243",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 52,
      },
    },
  },
}
W0825 11:46:49.930558 43832 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:46:49.931463 43832 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297105980_BP-1820042964-11.11.206.232-1548063025113
I0825 11:46:50.366720 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:46:50.373991 50471 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:46:50.376493 50471 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xde\xdb\x1d]K\x9aK+\x8d\x97L\xa5\t\"u\x18",
      02: secret (string) = "=\xca\xa6?\x12\x9aN\xe2\xb0\n\x14`\x00\xe7\x97^",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:46:50.772637 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:46:50.775854 50473 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:46:50.778061 50471 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xde\xdb\x1d]K\x9aK+\x8d\x97L\xa5\t\"u\x18",
      02: secret (string) = "=\xca\xa6?\x12\x9aN\xe2\xb0\n\x14`\x00\xe7\x97^",
    },
  },
}
I0825 11:46:50.779212 50471 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:55124 closed, closing 1 associated session(s)
I0825 11:46:50.806425 50473 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xd2Gk\xd7\bcJ\x16\xa1oVT\x9c\b-\x93",
      02: secret (string) = "\xd1e\x80\xc4\xf8\x05I\xde\xa0P\xe1\x14K\x0fX9",
    },
  },
  02: statement (string) = "use dw18_la",
  04: runAsync (bool) = true,
}
I0825 11:46:50.807399 50473 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xd2Gk\xd7\bcJ\x16\xa1oVT\x9c\b-\x93",
      02: secret (string) = "\xd1e\x80\xc4\xf8\x05I\xde\xa0P\xe1\x14K\x0fX9",
    },
  },
  02: statement (string) = "use dw18_la",
  04: runAsync (bool) = true,
}
I0825 11:46:50.810745 50473 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:50.830567 50473 Frontend.java:935] Analyzing query: use dw18_la
I0825 11:46:50.838047 50473 Frontend.java:947] Analysis finished.
I0825 11:46:50.887331 50417 status.cc:125] Invalid query option: alias
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:50.888320 50417 impala-server.cc:1015] UnregisterQuery(): query_id=9a43c59dbb01d5a4:f084569a00000000
I0825 11:46:50.888581 50417 impala-server.cc:1102] Cancel(): query_id=9a43c59dbb01d5a4:f084569a00000000
I0825 11:46:50.891192 50417 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\v\x14r\xad\xe7\"K\x0f\x88\xac\x007.\x97]\x81",
      02: secret (string) = "\x99?@\x90\xb1\x1eC\x84\x87\xf6ri#\x99\xe4q",
    },
  },
  02: statement (string) = "SET mem_limit=8g",
  04: runAsync (bool) = true,
}
I0825 11:46:50.893208 50417 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\v\x14r\xad\xe7\"K\x0f\x88\xac\x007.\x97]\x81",
      02: secret (string) = "\x99?@\x90\xb1\x1eC\x84\x87\xf6ri#\x99\xe4q",
    },
  },
  02: statement (string) = "SET mem_limit=8g",
  04: runAsync (bool) = true,
}
I0825 11:46:50.894440 50417 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:50.904943 50473 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "!\xf1\xdc$\xb7\xdaE\x7f\x00\x00\x00\x00\xb2\xf1\xb90",
      02: secret (string) = "!\xf1\xdc$\xb7\xdaE\x7f\x00\x00\x00\x00\xb2\xf1\xb90",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:46:50.907405 50417 Frontend.java:935] Analyzing query: SET mem_limit=8g
I0825 11:46:50.908213 50417 Frontend.java:947] Analysis finished.
I0825 11:46:50.910648 50473 impala-hs2-server.cc:683] CloseOperation(): query_id=7f45dab724dcf121:30b9f1b200000000
I0825 11:46:50.911393 50473 impala-server.cc:1015] UnregisterQuery(): query_id=7f45dab724dcf121:30b9f1b200000000
I0825 11:46:50.912166 50473 impala-server.cc:1102] Cancel(): query_id=7f45dab724dcf121:30b9f1b200000000
I0825 11:46:50.914745 50417 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xe3\x9a\x84\xbf\xd3\xa5A\xb6\x00\x00\x00\x00\xac\v&'",
      02: secret (string) = "\xe3\x9a\x84\xbf\xd3\xa5A\xb6\x00\x00\x00\x00\xac\v&'",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:50.916602 50417 impala-hs2-server.cc:683] CloseOperation(): query_id=b641a5d3bf849ae3:27260bac00000000
I0825 11:46:50.917873 50417 impala-server.cc:1015] UnregisterQuery(): query_id=b641a5d3bf849ae3:27260bac00000000
I0825 11:46:50.918368 50417 impala-server.cc:1102] Cancel(): query_id=b641a5d3bf849ae3:27260bac00000000
I0825 11:46:50.920503 50417 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\v\x14r\xad\xe7\"K\x0f\x88\xac\x007.\x97]\x81",
      02: secret (string) = "\x99?@\x90\xb1\x1eC\x84\x87\xf6ri#\x99\xe4q",
    },
  },
  02: statement (string) = "SET queryType=JDBC",
  04: runAsync (bool) = true,
}
I0825 11:46:50.921298 50417 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\v\x14r\xad\xe7\"K\x0f\x88\xac\x007.\x97]\x81",
      02: secret (string) = "\x99?@\x90\xb1\x1eC\x84\x87\xf6ri#\x99\xe4q",
    },
  },
  02: statement (string) = "SET queryType=JDBC",
  04: runAsync (bool) = true,
}
I0825 11:46:50.922197 50417 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:50.934448 50417 Frontend.java:935] Analyzing query: SET queryType=JDBC
I0825 11:46:50.937168 50473 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xd2Gk\xd7\bcJ\x16\xa1oVT\x9c\b-\x93",
      02: secret (string) = "\xd1e\x80\xc4\xf8\x05I\xde\xa0P\xe1\x14K\x0fX9",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:46:50.938433 50417 Frontend.java:947] Analysis finished.
I0825 11:46:50.940968 50473 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xd2Gk\xd7\bcJ\x16\xa1oVT\x9c\b-\x93",
      02: secret (string) = "\xd1e\x80\xc4\xf8\x05I\xde\xa0P\xe1\x14K\x0fX9",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:46:50.942674 50473 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:50.952595 50473 Frontend.java:935] Analyzing query: set mem_limit='8g'
I0825 11:46:50.953130 50473 Frontend.java:947] Analysis finished.
I0825 11:46:50.955602 50473 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x82\xd0b\xcau\xb4G\xe3\x00\x00\x00\x00\x8cz\x03{",
      02: secret (string) = "\x82\xd0b\xcau\xb4G\xe3\x00\x00\x00\x00\x8cz\x03{",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:50.959300 50473 impala-hs2-server.cc:683] CloseOperation(): query_id=e347b475ca62d082:7b037a8c00000000
I0825 11:46:50.960069 50473 impala-server.cc:1015] UnregisterQuery(): query_id=e347b475ca62d082:7b037a8c00000000
I0825 11:46:50.960963 50473 impala-server.cc:1102] Cancel(): query_id=e347b475ca62d082:7b037a8c00000000
I0825 11:46:50.963483 50473 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xd2Gk\xd7\bcJ\x16\xa1oVT\x9c\b-\x93",
      02: secret (string) = "\xd1e\x80\xc4\xf8\x05I\xde\xa0P\xe1\x14K\x0fX9",
    },
  },
  02: statement (string) = "DESCRIBE `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120`",
  04: runAsync (bool) = true,
}
I0825 11:46:50.963948 50473 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xd2Gk\xd7\bcJ\x16\xa1oVT\x9c\b-\x93",
      02: secret (string) = "\xd1e\x80\xc4\xf8\x05I\xde\xa0P\xe1\x14K\x0fX9",
    },
  },
  02: statement (string) = "DESCRIBE `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120`",
  04: runAsync (bool) = true,
}
I0825 11:46:50.965034 50473 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:50.977557 50473 Frontend.java:935] Analyzing query: DESCRIBE `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120`
I0825 11:46:50.979465 50473 Frontend.java:947] Analysis finished.
I0825 11:46:51.039409 50473 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "(\xcd\xf1\xb1]aOM\x00\x00\x00\x00\x1f\xb1y+",
      02: secret (string) = "(\xcd\xf1\xb1]aOM\x00\x00\x00\x00\x1f\xb1y+",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:51.043321 50473 impala-hs2-server.cc:683] CloseOperation(): query_id=4d4f615db1f1cd28:2b79b11f00000000
I0825 11:46:51.043725 50473 impala-server.cc:1015] UnregisterQuery(): query_id=4d4f615db1f1cd28:2b79b11f00000000
I0825 11:46:51.044821 50473 impala-server.cc:1102] Cancel(): query_id=4d4f615db1f1cd28:2b79b11f00000000
I0825 11:46:51.049345 50473 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xd2Gk\xd7\bcJ\x16\xa1oVT\x9c\b-\x93",
      02: secret (string) = "\xd1e\x80\xc4\xf8\x05I\xde\xa0P\xe1\x14K\x0fX9",
    },
  },
  02: statement (string) = "SELECT `bi_16518[...](3395)",
  04: runAsync (bool) = true,
}
I0825 11:46:51.049484 50473 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xd2Gk\xd7\bcJ\x16\xa1oVT\x9c\b-\x93",
      02: secret (string) = "\xd1e\x80\xc4\xf8\x05I\xde\xa0P\xe1\x14K\x0fX9",
    },
  },
  02: statement (string) = "SELECT `bi_16518[...](3395)",
  04: runAsync (bool) = true,
}
I0825 11:46:51.050254 50473 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:51.066686 50473 Frontend.java:935] Analyzing query: SELECT `bi_16518359572041906452`.`bi_15518877374181664639` AS `bi_3553687481121517161` , `bi_16518359572041906452`.`bi_10491841080111616035` AS `bi_1801344474855471949` , `bi_16518359572041906452`.`bi_16048134125873699212` AS `bi_11114444472631880056` , `bi_16518359572041906452`.`bi_11047500209402619491` AS `bi_4584329074808174062` , `bi_16518359572041906452`.`bi_8739345836465617530` AS `bi_813660579643793135` , `bi_16518359572041906452`.`bi_6439070652440084537` AS `bi_2671125010966300805`  FROM (SELECT `b_la_v_foreign_counterparty_c120`.`oulabel` AS `bi_15518877374181664639` , `b_la_v_foreign_counterparty_c120`.`oulabel_t` AS `bi_10491841080111616035` , `b_la_v_foreign_counterparty_c120`.`contractid` AS `bi_16048134125873699212` , `b_la_v_foreign_counterparty_c120`.`relativorrelationid` AS `bi_11047500209402619491` , `b_la_v_foreign_counterparty_c120`.`counterpartyname` AS `bi_8739345836465617530` , `b_la_v_foreign_counterparty_c120`.`counterpartyname_key` AS `bi_6439070652440084537`  FROM (SELECT `temp_sql_wrapper_table`.`oulabel` AS `oulabel` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`contractid` AS `contractid` , `temp_sql_wrapper_table`.`relativorrelationid` AS `relativorrelationid` , `temp_sql_wrapper_table`.`counterpartyname` AS `counterpartyname` , `temp_sql_wrapper_table`.`counterpartyname_key` AS `counterpartyname_key`  FROM (SELECT `temp_sub_query_table`.`oulabel`, `temp_sub_query_table`.`oulabel_t`, `temp_sub_query_table`.`contractid`, `temp_sub_query_table`.`relativorrelationid`, `temp_sub_query_table`.`counterpartyname`, `temp_sub_query_table`.`counterpartyname_key` FROM (SELECT `b_la_v_foreign_contractrelativorrelation_c120`.`rowkey`, `b_la_v_foreign_contractrelativorrelation_c120`.`id`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`contractid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativorrelationid`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname_key`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_name`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_relativeid`, `b_la_v_foreign_contractrelativorrelation_c120`.`regionsign`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgname`, `b_la_v_foreign_contractrelativorrelation_c120`.`mdmcode`, `b_la_v_foreign_contractrelativorrelation_c120`.`creator`, `b_la_v_foreign_contractrelativorrelation_c120`.`created`, `b_la_v_foreign_contractrelativorrelation_c120`.`editor`, `b_la_v_foreign_contractrelativorrelation_c120`.`edited`, `b_la_v_foreign_contractrelativorrelation_c120`.`isdeleted`, `b_la_v_foreign_contractrelativorrelation_c120`.`etl_date` FROM `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120` `b_la_v_foreign_contractrelativorrelation_c120` ) `temp_sub_query_table` WHERE (`temp_sub_query_table`.`oulabel_t` LIKE '%辽河油田%')  LIMIT 100 ) `temp_sql_wrapper_table`) `b_la_v_foreign_counterparty_c120`) `bi_16518359572041906452` LIMIT 1200001 
I0825 11:46:51.077965 50473 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:51.078575 50473 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:51.079159 50473 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:51.079697 50473 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:51.083679 50473 Frontend.java:947] Analysis finished.
I0825 11:46:51.089327 50473 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:51.090157 50473 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:51.095017 50473 admission-controller.cc:508] Schedule for id=264609830b2ae88f:687e499200000000 in pool_name=root.default cluster_mem_needed=8.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
I0825 11:46:51.096916 50473 admission-controller.cc:513] Stats: agg_num_running=4, agg_num_queued=0, agg_mem_reserved=128.00 GB,  local_host(local_mem_admitted=80.00 GB, num_admitted_running=2, num_queued=0, backend_mem_reserved=24.00 GB)
I0825 11:46:51.097258 50473 admission-controller.cc:529] Admitted query id=264609830b2ae88f:687e499200000000
I0825 11:46:51.098017 50473 coordinator.cc:93] Exec() query_id=264609830b2ae88f:687e499200000000 stmt=SELECT `bi_16518359572041906452`.`bi_15518877374181664639` AS `bi_3553687481121517161` , `bi_16518359572041906452`.`bi_10491841080111616035` AS `bi_1801344474855471949` , `bi_16518359572041906452`.`bi_16048134125873699212` AS `bi_11114444472631880056` , `bi_16518359572041906452`.`bi_11047500209402619491` AS `bi_4584329074808174062` , `bi_16518359572041906452`.`bi_8739345836465617530` AS `bi_813660579643793135` , `bi_16518359572041906452`.`bi_6439070652440084537` AS `bi_2671125010966300805`  FROM (SELECT `b_la_v_foreign_counterparty_c120`.`oulabel` AS `bi_15518877374181664639` , `b_la_v_foreign_counterparty_c120`.`oulabel_t` AS `bi_10491841080111616035` , `b_la_v_foreign_counterparty_c120`.`contractid` AS `bi_16048134125873699212` , `b_la_v_foreign_counterparty_c120`.`relativorrelationid` AS `bi_11047500209402619491` , `b_la_v_foreign_counterparty_c120`.`counterpartyname` AS `bi_8739345836465617530` , `b_la_v_foreign_counterparty_c120`.`counterpartyname_key` AS `bi_6439070652440084537`  FROM (SELECT `temp_sql_wrapper_table`.`oulabel` AS `oulabel` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`contractid` AS `contractid` , `temp_sql_wrapper_table`.`relativorrelationid` AS `relativorrelationid` , `temp_sql_wrapper_table`.`counterpartyname` AS `counterpartyname` , `temp_sql_wrapper_table`.`counterpartyname_key` AS `counterpartyname_key`  FROM (SELECT `temp_sub_query_table`.`oulabel`, `temp_sub_query_table`.`oulabel_t`, `temp_sub_query_table`.`contractid`, `temp_sub_query_table`.`relativorrelationid`, `temp_sub_query_table`.`counterpartyname`, `temp_sub_query_table`.`counterpartyname_key` FROM (SELECT `b_la_v_foreign_contractrelativorrelation_c120`.`rowkey`, `b_la_v_foreign_contractrelativorrelation_c120`.`id`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`contractid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativorrelationid`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname_key`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_name`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_relativeid`, `b_la_v_foreign_contractrelativorrelation_c120`.`regionsign`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgname`, `b_la_v_foreign_contractrelativorrelation_c120`.`mdmcode`, `b_la_v_foreign_contractrelativorrelation_c120`.`creator`, `b_la_v_foreign_contractrelativorrelation_c120`.`created`, `b_la_v_foreign_contractrelativorrelation_c120`.`editor`, `b_la_v_foreign_contractrelativorrelation_c120`.`edited`, `b_la_v_foreign_contractrelativorrelation_c120`.`isdeleted`, `b_la_v_foreign_contractrelativorrelation_c120`.`etl_date` FROM `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120` `b_la_v_foreign_contractrelativorrelation_c120` ) `temp_sub_query_table` WHERE (`temp_sub_query_table`.`oulabel_t` LIKE '%辽河油田%')  LIMIT 100 ) `temp_sql_wrapper_table`) `b_la_v_foreign_counterparty_c120`) `bi_16518359572041906452` LIMIT 1200001 
I0825 11:46:51.098305 50473 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:51.098697 50473 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:51.098923 50473 coordinator.cc:349] starting execution on 1 backends for query_id=264609830b2ae88f:687e499200000000
I0825 11:46:51.099617 45240 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=264609830b2ae88f:687e499200000000
I0825 11:46:51.099795 45240 query-exec-mgr.cc:46] StartQueryFInstances() query_id=264609830b2ae88f:687e499200000000 coord=e4bdhpp025:22000
I0825 11:46:51.100068 45240 query-state.cc:178] Buffer pool limit for 264609830b2ae88f:687e499200000000: 6871947673
I0825 11:46:51.101524 45240 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 264609830b2ae88f:687e499200000000
I0825 11:46:51.110880 50473 coordinator.cc:362] started execution on 1 backends for query_id=264609830b2ae88f:687e499200000000
I0825 11:46:51.110728 50479 query-state.cc:300] StartFInstances(): query_id=264609830b2ae88f:687e499200000000 #instances=2
I0825 11:46:51.112239 50479 query-state.cc:313] descriptor table for query=264609830b2ae88f:687e499200000000
tuples:
Tuple(id=0 size=97 slots=[Slot(id=2 type=DECIMAL(38,0) col_path=[2] offset=0 null=(offset=96 mask=1) slot_idx=0 field_idx=-1), Slot(id=3 type=STRING col_path=[3] offset=16 null=(offset=96 mask=2) slot_idx=1 field_idx=-1), Slot(id=4 type=DECIMAL(38,0) col_path=[4] offset=32 null=(offset=96 mask=4) slot_idx=2 field_idx=-1), Slot(id=5 type=STRING col_path=[5] offset=48 null=(offset=96 mask=8) slot_idx=3 field_idx=-1), Slot(id=6 type=STRING col_path=[6] offset=64 null=(offset=96 mask=10) slot_idx=4 field_idx=-1), Slot(id=7 type=STRING col_path=[7] offset=80 null=(offset=96 mask=20) slot_idx=5 field_idx=-1)] tuple_path=[])
I0825 11:46:51.114190 50480 query-state.cc:395] Executing instance. instance_id=264609830b2ae88f:687e499200000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=0 #in-flight=8
I0825 11:46:51.116175 50481 query-state.cc:395] Executing instance. instance_id=264609830b2ae88f:687e499200000001 fragment_idx=1 per_fragment_instance_idx=0 coord_state_idx=0 #in-flight=9
I0825 11:46:51.116636 50481 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '264609830b2ae88f:687e499200000001': 190
I0825 11:46:51.119482 50479 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=264609830b2ae88f:687e499200000000 refcnt=4
I0825 11:46:51.122520 50473 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x8f\xe8*\v\x83\tF&\x00\x00\x00\x00\x92I~h",
      02: secret (string) = "\x8f\xe8*\v\x83\tF&\x00\x00\x00\x00\x92I~h",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
W0825 11:46:51.162639 43836 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:46:51.178160 43836 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1324210723_BP-1820042964-11.11.206.232-1548063025113
W0825 11:46:51.181241 43862 ShortCircuitCache.java:773] ShortCircuitCache(0x45360bf1): failed to get 1324210723_BP-1820042964-11.11.206.232-1548063025113
I0825 11:46:51.684721 44439 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=634b0245a20d2f51:fcc63a7c00000000
I0825 11:46:51.686945 44439 query-exec-mgr.cc:46] StartQueryFInstances() query_id=634b0245a20d2f51:fcc63a7c00000000 coord=e4bdhpp023:22000
I0825 11:46:51.687355 44439 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:51.688036 44439 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:51.688539 44439 query-state.cc:178] Buffer pool limit for 634b0245a20d2f51:fcc63a7c00000000: 6871947673
I0825 11:46:51.689361 44439 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 634b0245a20d2f51:fcc63a7c00000000
I0825 11:46:51.694326 50519 query-state.cc:300] StartFInstances(): query_id=634b0245a20d2f51:fcc63a7c00000000 #instances=1
I0825 11:46:51.695896 50519 query-state.cc:313] descriptor table for query=634b0245a20d2f51:fcc63a7c00000000
tuples:
Tuple(id=6 size=8 slots=[Slot(id=68 type=BIGINT col_path=[] offset=0 null=(offset=0 mask=0) slot_idx=0 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=17 slots=[Slot(id=3 type=STRING col_path=[3] offset=0 null=(offset=16 mask=1) slot_idx=0 field_idx=-1)] tuple_path=[])
I0825 11:46:51.696830 50521 query-state.cc:395] Executing instance. instance_id=634b0245a20d2f51:fcc63a7c00000001 fragment_idx=1 per_fragment_instance_idx=0 coord_state_idx=1 #in-flight=10
I0825 11:46:51.698714 50521 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '634b0245a20d2f51:fcc63a7c00000001': 190
I0825 11:46:51.703811 50519 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=634b0245a20d2f51:fcc63a7c00000000 refcnt=2
I0825 11:46:51.729091 50524 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:46:51.729753 50524 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:46:51.739815 50526 query-exec-mgr.cc:95] QueryState: query_id=c14076ebcf238a0e:9f4f276800000000 refcnt=3
I0825 11:46:51.741276 50526 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=c14076ebcf238a0e:9f4f276800000000 refcnt=3
I0825 11:46:51.751502 50528 query-exec-mgr.cc:95] QueryState: query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:46:51.754503 50528 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:46:51.759845 50473 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=264609830b2ae88f:687e499200000000
I0825 11:46:51.761005 50473 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[6] {
      [0] = TColumnDesc {
        01: columnName (string) = "bi_3553687481121517161",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "bi_1801344474855471949",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "bi_11114444472631880056",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "bi_4584329074808174062",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "bi_813660579643793135",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "bi_2671125010966300805",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 5,
      },
    },
  },
}
I0825 11:46:51.764942 50473 coordinator.cc:522] Coordinator waiting for backends to finish, 1 remaining. query_id=264609830b2ae88f:687e499200000000
I0825 11:46:51.766908 50480 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=264609830b2ae88f:687e499200000000, node=1
I0825 11:46:51.766592 50473 coordinator.cc:527] All backends finished successfully. query_id=264609830b2ae88f:687e499200000000
I0825 11:46:51.767285 50480 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=264609830b2ae88f:687e499200000000 node_id=1
I0825 11:46:51.767920 50473 coordinator.cc:783] Release admission control resources for query_id=264609830b2ae88f:687e499200000000
I0825 11:46:51.772743 50452 query-exec-mgr.cc:95] QueryState: query_id=e54db18c4c127046:4f5d18aa00000000 refcnt=3
I0825 11:46:51.773138 50473 impala-hs2-server.cc:683] CloseOperation(): query_id=264609830b2ae88f:687e499200000000
I0825 11:46:51.773716 50452 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e54db18c4c127046:4f5d18aa00000000 refcnt=3
I0825 11:46:51.774008 50481 query-state.cc:403] Instance completed. instance_id=264609830b2ae88f:687e499200000001 #in-flight=9 status=OK
I0825 11:46:51.781008 50481 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=264609830b2ae88f:687e499200000000 refcnt=3
I0825 11:46:51.775574 50480 query-state.cc:403] Instance completed. instance_id=264609830b2ae88f:687e499200000000 #in-flight=8 status=OK
I0825 11:46:51.773823 50473 impala-server.cc:1015] UnregisterQuery(): query_id=264609830b2ae88f:687e499200000000
I0825 11:46:51.787111 50480 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=264609830b2ae88f:687e499200000000 refcnt=2
I0825 11:46:51.787408 50473 impala-server.cc:1102] Cancel(): query_id=264609830b2ae88f:687e499200000000
I0825 11:46:51.788089 50473 coordinator.cc:629] Cancel() query_id=264609830b2ae88f:687e499200000000
I0825 11:46:51.788717 50473 coordinator.cc:639] CancelBackends() query_id=264609830b2ae88f:687e499200000000, tried to cancel 0 backends
I0825 11:46:51.796588 50473 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=264609830b2ae88f:687e499200000000 refcnt=1
I0825 11:46:51.814363 50473 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xd2Gk\xd7\bcJ\x16\xa1oVT\x9c\b-\x93",
      02: secret (string) = "\xd1e\x80\xc4\xf8\x05I\xde\xa0P\xe1\x14K\x0fX9",
    },
  },
}
I0825 11:46:51.817171 50473 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:55232 closed, closing 1 associated session(s)
W0825 11:46:52.223838 43861 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:46:52.225718 43861 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1324210723_BP-1820042964-11.11.206.232-1548063025113
I0825 11:46:52.275276 50282 status.cc:125] Invalid query option: useSSL
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:52.277084 50282 impala-server.cc:1015] UnregisterQuery(): query_id=c94922946861c9c4:e466f57600000000
I0825 11:46:52.277621 50282 impala-server.cc:1102] Cancel(): query_id=c94922946861c9c4:e466f57600000000
I0825 11:46:52.281050 50282 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "/\xdf\xac\xbcKoB\x0f\xa7\b\xe2\xde8p[\xc9",
      02: secret (string) = "B\xc8\xa4\"\xb5\xd3Go\xb3\xeb\xf272\x00\x00{",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:46:52.281723 50282 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "/\xdf\xac\xbcKoB\x0f\xa7\b\xe2\xde8p[\xc9",
      02: secret (string) = "B\xc8\xa4\"\xb5\xd3Go\xb3\xeb\xf272\x00\x00{",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:46:52.282434 50282 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:52.296380 50282 Frontend.java:935] Analyzing query: DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`
I0825 11:46:52.298879 50282 Frontend.java:947] Analysis finished.
I0825 11:46:52.343643 50448 status.cc:125] Invalid query option: KrbUserName
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:52.344955 50448 impala-server.cc:1015] UnregisterQuery(): query_id=f1420e616742ead4:f080ffc400000000
I0825 11:46:52.346062 50448 impala-server.cc:1102] Cancel(): query_id=f1420e616742ead4:f080ffc400000000
I0825 11:46:52.350775 50448 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x99I\xc3\x86\x9fA\xa9\x88\xa3\xb9\x9e\xc4\x9c\xda?",
      02: secret (string) = "\a|DW\xd7\xddB\x0f\x8at>\xbe\x1b\a\xa7\xb7",
    },
  },
  02: statement (string) = "SET alias=`bi_6749357856600458205`",
  04: runAsync (bool) = true,
}
I0825 11:46:52.351527 50448 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x99I\xc3\x86\x9fA\xa9\x88\xa3\xb9\x9e\xc4\x9c\xda?",
      02: secret (string) = "\a|DW\xd7\xddB\x0f\x8at>\xbe\x1b\a\xa7\xb7",
    },
  },
  02: statement (string) = "SET alias=`bi_6749357856600458205`",
  04: runAsync (bool) = true,
}
I0825 11:46:52.352828 50448 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:52.365988 50282 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xafK$\x1b\xb7\x95J\xaa\x00\x00\x00\x00+\x87\xbb\xdb",
      02: secret (string) = "\xafK$\x1b\xb7\x95J\xaa\x00\x00\x00\x00+\x87\xbb\xdb",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:52.369477 50282 impala-hs2-server.cc:683] CloseOperation(): query_id=aa4a95b71b244baf:dbbb872b00000000
I0825 11:46:52.369978 50282 impala-server.cc:1015] UnregisterQuery(): query_id=aa4a95b71b244baf:dbbb872b00000000
I0825 11:46:52.370517 50282 impala-server.cc:1102] Cancel(): query_id=aa4a95b71b244baf:dbbb872b00000000
I0825 11:46:52.373664 50448 Frontend.java:935] Analyzing query: SET alias=`bi_6749357856600458205`
I0825 11:46:52.375000 50448 Frontend.java:947] Analysis finished.
I0825 11:46:52.377210 50282 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "/\xdf\xac\xbcKoB\x0f\xa7\b\xe2\xde8p[\xc9",
      02: secret (string) = "B\xc8\xa4\"\xb5\xd3Go\xb3\xeb\xf272\x00\x00{",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:46:52.379737 50282 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "/\xdf\xac\xbcKoB\x0f\xa7\b\xe2\xde8p[\xc9",
      02: secret (string) = "B\xc8\xa4\"\xb5\xd3Go\xb3\xeb\xf272\x00\x00{",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:46:52.380771 50282 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:52.398874 50282 Frontend.java:935] Analyzing query: DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`
I0825 11:46:52.400514 50282 Frontend.java:947] Analysis finished.
I0825 11:46:52.494866 50282 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\v\xa7=\xfc\xf3\xbbM\b\x00\x00\x00\x00\xcd\xc6\xaa\x9f",
      02: secret (string) = "\v\xa7=\xfc\xf3\xbbM\b\x00\x00\x00\x00\xcd\xc6\xaa\x9f",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:52.507854 50282 impala-hs2-server.cc:683] CloseOperation(): query_id=84dbbf3fc3da70b:9faac6cd00000000
I0825 11:46:52.517710 50282 impala-server.cc:1015] UnregisterQuery(): query_id=84dbbf3fc3da70b:9faac6cd00000000
I0825 11:46:52.523751 50282 impala-server.cc:1102] Cancel(): query_id=84dbbf3fc3da70b:9faac6cd00000000
I0825 11:46:52.529100 50282 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "/\xdf\xac\xbcKoB\x0f\xa7\b\xe2\xde8p[\xc9",
      02: secret (string) = "B\xc8\xa4\"\xb5\xd3Go\xb3\xeb\xf272\x00\x00{",
    },
  },
  02: statement (string) = "SELECT `temp`.`\xe9[...](2424)",
  04: runAsync (bool) = true,
}
I0825 11:46:52.529793 50282 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "/\xdf\xac\xbcKoB\x0f\xa7\b\xe2\xde8p[\xc9",
      02: secret (string) = "B\xc8\xa4\"\xb5\xd3Go\xb3\xeb\xf272\x00\x00{",
    },
  },
  02: statement (string) = "SELECT `temp`.`\xe9[...](2424)",
  04: runAsync (bool) = true,
}
I0825 11:46:52.530890 50282 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:52.542315 50282 Frontend.java:935] Analyzing query: SELECT `temp`.`采购订单类型`, `temp`.`采购订单日期`, `temp`.`商品类目描述`, `temp`.`订单金额_不含税`, `temp`.`是否完成交货`, `temp`.`该行是否被删除`, `temp`.`该行是否退货` FROM (SELECT `temp_sub_query_table`.`采购订单类型`, `temp_sub_query_table`.`采购订单日期`, `temp_sub_query_table`.`商品类目描述`, `temp_sub_query_table`.`订单金额_不含税`, `temp_sub_query_table`.`是否完成交货`, `temp_sub_query_table`.`该行是否被删除`, `temp_sub_query_table`.`该行是否退货` FROM (SELECT `APP_GSMS_HOS_CGDD`.`采购订单编号`, `APP_GSMS_HOS_CGDD`.`采购订单行项目`, `APP_GSMS_HOS_CGDD`.`采购订单类型`, `APP_GSMS_HOS_CGDD`.`采购订单类型描述`, `APP_GSMS_HOS_CGDD`.`采购订单日期`, `APP_GSMS_HOS_CGDD`.`供应商编码`, `APP_GSMS_HOS_CGDD`.`供应商名称`, `APP_GSMS_HOS_CGDD`.`收货站点`, `APP_GSMS_HOS_CGDD`.`站点名称`, `APP_GSMS_HOS_CGDD`.`商品编码`, `APP_GSMS_HOS_CGDD`.`商品描述`, `APP_GSMS_HOS_CGDD`.`商品类目`, `APP_GSMS_HOS_CGDD`.`商品类目描述`, `APP_GSMS_HOS_CGDD`.`订单单位`, `APP_GSMS_HOS_CGDD`.`订单数量`, `APP_GSMS_HOS_CGDD`.`净价`, `APP_GSMS_HOS_CGDD`.`订单金额_不含税`, `APP_GSMS_HOS_CGDD`.`订单金额_含税`, `APP_GSMS_HOS_CGDD`.`税率`, `APP_GSMS_HOS_CGDD`.`税额`, `APP_GSMS_HOS_CGDD`.`是否完成交货`, `APP_GSMS_HOS_CGDD`.`是否开具发票`, `APP_GSMS_HOS_CGDD`.`该行是否被删除`, `APP_GSMS_HOS_CGDD`.`该行是否退货`, `APP_GSMS_HOS_CGDD`.`所属`, `APP_GSMS_HOS_CGDD`.`单位名称` FROM `DW04`.`APP_GSMS_HOS_CGDD`) AS temp_sub_query_table WHERE (( `temp_sub_query_table`.`单位名称` IN ('乌鲁木齐石化分公司', '独山子石化分公司', '中国石油集团西部钻探工程有限公司', '中国石油运输有限公司', '西部管道分公司', '新疆油田分公司', '吐哈油田分公司', '塔里木油田分公司', '中石油新疆销售有限公司', '中石油克拉玛依石化有限责任公司', '中国石油集团工程有限公司北京项目管理分公司') ) AND ((`temp_sub_query_table`.`订单金额_不含税` < 10000000) AND (( `temp_sub_query_table`.`采购订单类型` IN ('Z003', 'Z005') ) AND (( `temp_sub_query_table`.`该行是否被删除` IN (' ') ) AND (( `temp_sub_query_table`.`是否完成交货` IN ('是') ) AND ( `temp_sub_query_table`.`该行是否退货` IN ('否') ))))))) AS temp
I0825 11:46:52.546783 50417 status.cc:125] Invalid query option: queryType
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:52.551195 50417 impala-server.cc:1015] UnregisterQuery(): query_id=a249714e54ec2670:fe3256cf00000000
I0825 11:46:52.552606 50417 impala-server.cc:1102] Cancel(): query_id=a249714e54ec2670:fe3256cf00000000
I0825 11:46:52.554626 50417 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\v\x14r\xad\xe7\"K\x0f\x88\xac\x007.\x97]\x81",
      02: secret (string) = "\x99?@\x90\xb1\x1eC\x84\x87\xf6ri#\x99\xe4q",
    },
  },
  02: statement (string) = "SET timeoutSeconds=1800",
  04: runAsync (bool) = true,
}
I0825 11:46:52.555063 50417 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\v\x14r\xad\xe7\"K\x0f\x88\xac\x007.\x97]\x81",
      02: secret (string) = "\x99?@\x90\xb1\x1eC\x84\x87\xf6ri#\x99\xe4q",
    },
  },
  02: statement (string) = "SET timeoutSeconds=1800",
  04: runAsync (bool) = true,
}
I0825 11:46:52.555757 50417 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:52.559743 50521 query-state.cc:403] Instance completed. instance_id=634b0245a20d2f51:fcc63a7c00000001 #in-flight=7 status=OK
I0825 11:46:52.560884 50521 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=634b0245a20d2f51:fcc63a7c00000000 refcnt=1
I0825 11:46:52.566038 50417 Frontend.java:935] Analyzing query: SET timeoutSeconds=1800
I0825 11:46:52.567065 50417 Frontend.java:947] Analysis finished.
I0825 11:46:52.599833 50282 Frontend.java:947] Analysis finished.
I0825 11:46:52.602355 50282 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:52.603595 50282 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:52.604466 50282 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:52.605245 50282 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:52.607304 50282 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:52.618567 50282 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:52.622035 50282 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:52.622467 50282 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:52.623143 50282 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:52.628882 50282 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:52.630753 50282 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:52.632308 50282 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:52.663833 50282 admission-controller.cc:508] Schedule for id=5e4ad2c4759ffeb2:96e6fbfa00000000 in pool_name=root.default cluster_mem_needed=40.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
I0825 11:46:52.665014 50282 admission-controller.cc:513] Stats: agg_num_running=3, agg_num_queued=0, agg_mem_reserved=120.00 GB,  local_host(local_mem_admitted=80.00 GB, num_admitted_running=2, num_queued=0, backend_mem_reserved=24.00 GB)
I0825 11:46:52.666527 50282 admission-controller.cc:529] Admitted query id=5e4ad2c4759ffeb2:96e6fbfa00000000
I0825 11:46:52.667901 50282 coordinator.cc:93] Exec() query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 stmt=SELECT `temp`.`采购订单类型`, `temp`.`采购订单日期`, `temp`.`商品类目描述`, `temp`.`订单金额_不含税`, `temp`.`是否完成交货`, `temp`.`该行是否被删除`, `temp`.`该行是否退货` FROM (SELECT `temp_sub_query_table`.`采购订单类型`, `temp_sub_query_table`.`采购订单日期`, `temp_sub_query_table`.`商品类目描述`, `temp_sub_query_table`.`订单金额_不含税`, `temp_sub_query_table`.`是否完成交货`, `temp_sub_query_table`.`该行是否被删除`, `temp_sub_query_table`.`该行是否退货` FROM (SELECT `APP_GSMS_HOS_CGDD`.`采购订单编号`, `APP_GSMS_HOS_CGDD`.`采购订单行项目`, `APP_GSMS_HOS_CGDD`.`采购订单类型`, `APP_GSMS_HOS_CGDD`.`采购订单类型描述`, `APP_GSMS_HOS_CGDD`.`采购订单日期`, `APP_GSMS_HOS_CGDD`.`供应商编码`, `APP_GSMS_HOS_CGDD`.`供应商名称`, `APP_GSMS_HOS_CGDD`.`收货站点`, `APP_GSMS_HOS_CGDD`.`站点名称`, `APP_GSMS_HOS_CGDD`.`商品编码`, `APP_GSMS_HOS_CGDD`.`商品描述`, `APP_GSMS_HOS_CGDD`.`商品类目`, `APP_GSMS_HOS_CGDD`.`商品类目描述`, `APP_GSMS_HOS_CGDD`.`订单单位`, `APP_GSMS_HOS_CGDD`.`订单数量`, `APP_GSMS_HOS_CGDD`.`净价`, `APP_GSMS_HOS_CGDD`.`订单金额_不含税`, `APP_GSMS_HOS_CGDD`.`订单金额_含税`, `APP_GSMS_HOS_CGDD`.`税率`, `APP_GSMS_HOS_CGDD`.`税额`, `APP_GSMS_HOS_CGDD`.`是否完成交货`, `APP_GSMS_HOS_CGDD`.`是否开具发票`, `APP_GSMS_HOS_CGDD`.`该行是否被删除`, `APP_GSMS_HOS_CGDD`.`该行是否退货`, `APP_GSMS_HOS_CGDD`.`所属`, `APP_GSMS_HOS_CGDD`.`单位名称` FROM `DW04`.`APP_GSMS_HOS_CGDD`) AS temp_sub_query_table WHERE (( `temp_sub_query_table`.`单位名称` IN ('乌鲁木齐石化分公司', '独山子石化分公司', '中国石油集团西部钻探工程有限公司', '中国石油运输有限公司', '西部管道分公司', '新疆油田分公司', '吐哈油田分公司', '塔里木油田分公司', '中石油新疆销售有限公司', '中石油克拉玛依石化有限责任公司', '中国石油集团工程有限公司北京项目管理分公司') ) AND ((`temp_sub_query_table`.`订单金额_不含税` < 10000000) AND (( `temp_sub_query_table`.`采购订单类型` IN ('Z003', 'Z005') ) AND (( `temp_sub_query_table`.`该行是否被删除` IN (' ') ) AND (( `temp_sub_query_table`.`是否完成交货` IN ('是') ) AND ( `temp_sub_query_table`.`该行是否退货` IN ('否') ))))))) AS temp
I0825 11:46:52.668618 50282 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:52.669142 50282 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:52.669872 50282 coordinator.cc:349] starting execution on 5 backends for query_id=5e4ad2c4759ffeb2:96e6fbfa00000000
I0825 11:46:52.673475 45240 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000
I0825 11:46:52.673966 45240 query-exec-mgr.cc:46] StartQueryFInstances() query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 coord=e4bdhpp025:22000
I0825 11:46:52.674674 45240 query-state.cc:178] Buffer pool limit for 5e4ad2c4759ffeb2:96e6fbfa00000000: 6871947673
I0825 11:46:52.675321 45240 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 5e4ad2c4759ffeb2:96e6fbfa00000000
I0825 11:46:52.679478 50581 query-state.cc:300] StartFInstances(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 #instances=2
I0825 11:46:52.681546 50581 query-state.cc:313] descriptor table for query=5e4ad2c4759ffeb2:96e6fbfa00000000
tuples:
Tuple(id=3 size=170 slots=[Slot(id=59 type=STRING col_path=[20] offset=0 null=(offset=168 mask=1) slot_idx=0 field_idx=-1), Slot(id=60 type=STRING col_path=[20] offset=16 null=(offset=168 mask=2) slot_idx=1 field_idx=-1), Slot(id=61 type=DECIMAL(16,2) col_path=[16] offset=160 null=(offset=169 mask=4) slot_idx=10 field_idx=-1), Slot(id=62 type=STRING col_path=[22] offset=32 null=(offset=168 mask=4) slot_idx=2 field_idx=-1), Slot(id=63 type=STRING col_path=[22] offset=48 null=(offset=168 mask=8) slot_idx=3 field_idx=-1), Slot(id=64 type=STRING col_path=[23] offset=64 null=(offset=168 mask=10) slot_idx=4 field_idx=-1), Slot(id=65 type=STRING col_path=[23] offset=80 null=(offset=168 mask=20) slot_idx=5 field_idx=-1), Slot(id=66 type=STRING col_path=[2] offset=96 null=(offset=168 mask=40) slot_idx=6 field_idx=-1), Slot(id=67 type=STRING col_path=[2] offset=112 null=(offset=168 mask=80) slot_idx=7 field_idx=-1), Slot(id=68 type=STRING col_path=[25] offset=128 null=(offset=169 mask=1) slot_idx=8 field_idx=-1), Slot(id=69 type=STRING col_path=[25] offset=144 null=(offset=169 mask=2) slot_idx=9 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=121 slots=[Slot(id=2 type=STRING col_path=[2] offset=0 null=(offset=120 mask=1) slot_idx=0 field_idx=-1), Slot(id=4 type=TIMESTAMP col_path=[4] offset=16 null=(offset=120 mask=2) slot_idx=1 field_idx=-1), Slot(id=12 type=STRING col_path=[12] offset=32 null=(offset=120 mask=4) slot_idx=2 field_idx=-1), Slot(id=16 type=DECIMAL(16,2) col_path=[16] offset=112 null=(offset=120 mask=80) slot_idx=7 field_idx=-1), Slot(id=20 type=STRING col_path=[20] offset=48 null=(offset=120 mask=8) slot_idx=3 field_idx=-1), Slot(id=22 type=STRING col_path=[22] offset=64 null=(offset=120 mask=10) slot_idx=4 field_idx=-1), Slot(id=23 type=STRING col_path=[23] offset=80 null=(offset=120 mask=20) slot_idx=5 field_idx=-1), Slot(id=25 type=STRING col_path=[25] offset=96 null=(offset=120 mask=40) slot_idx=6 field_idx=-1)] tuple_path=[])
I0825 11:46:52.683847 50582 query-state.cc:395] Executing instance. instance_id=5e4ad2c4759ffeb2:96e6fbfa00000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=4 #in-flight=8
I0825 11:46:52.692384 50583 query-state.cc:395] Executing instance. instance_id=5e4ad2c4759ffeb2:96e6fbfa00000002 fragment_idx=1 per_fragment_instance_idx=1 coord_state_idx=4 #in-flight=9
I0825 11:46:52.693249 50583 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '5e4ad2c4759ffeb2:96e6fbfa00000002': 190
I0825 11:46:52.698558 50581 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:46:52.800545 50282 coordinator.cc:362] started execution on 5 backends for query_id=5e4ad2c4759ffeb2:96e6fbfa00000000
I0825 11:46:52.804220 50282 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xb2\xfe\x9fu\xc4\xd2J^\x00\x00\x00\x00\xfa\xfb\xe6\x96",
      02: secret (string) = "\xb2\xfe\x9fu\xc4\xd2J^\x00\x00\x00\x00\xfa\xfb\xe6\x96",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
W0825 11:46:53.227977 43828 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:46:53.235033 43828 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064312_BP-1820042964-11.11.206.232-1548063025113
W0825 11:46:53.236068 43832 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:46:53.238770 43832 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064614_BP-1820042964-11.11.206.232-1548063025113
I0825 11:46:54.136922 44439 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=b741a2d6f09052d9:8993c4e700000000
I0825 11:46:54.137672 44439 query-exec-mgr.cc:46] StartQueryFInstances() query_id=b741a2d6f09052d9:8993c4e700000000 coord=e4bdhpp023:22000
I0825 11:46:54.138345 44439 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:54.139096 44439 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:54.139369 44439 query-state.cc:178] Buffer pool limit for b741a2d6f09052d9:8993c4e700000000: 6871947673
I0825 11:46:54.140677 44439 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query b741a2d6f09052d9:8993c4e700000000
I0825 11:46:54.142627 50721 query-state.cc:300] StartFInstances(): query_id=b741a2d6f09052d9:8993c4e700000000 #instances=1
I0825 11:46:54.144310 50721 query-state.cc:313] descriptor table for query=b741a2d6f09052d9:8993c4e700000000
tuples:
Tuple(id=3 size=170 slots=[Slot(id=59 type=STRING col_path=[20] offset=0 null=(offset=168 mask=1) slot_idx=0 field_idx=-1), Slot(id=60 type=STRING col_path=[20] offset=16 null=(offset=168 mask=2) slot_idx=1 field_idx=-1), Slot(id=61 type=DECIMAL(16,2) col_path=[16] offset=160 null=(offset=169 mask=4) slot_idx=10 field_idx=-1), Slot(id=62 type=STRING col_path=[22] offset=32 null=(offset=168 mask=4) slot_idx=2 field_idx=-1), Slot(id=63 type=STRING col_path=[22] offset=48 null=(offset=168 mask=8) slot_idx=3 field_idx=-1), Slot(id=64 type=STRING col_path=[23] offset=64 null=(offset=168 mask=10) slot_idx=4 field_idx=-1), Slot(id=65 type=STRING col_path=[23] offset=80 null=(offset=168 mask=20) slot_idx=5 field_idx=-1), Slot(id=66 type=STRING col_path=[2] offset=96 null=(offset=168 mask=40) slot_idx=6 field_idx=-1), Slot(id=67 type=STRING col_path=[2] offset=112 null=(offset=168 mask=80) slot_idx=7 field_idx=-1), Slot(id=68 type=STRING col_path=[25] offset=128 null=(offset=169 mask=1) slot_idx=8 field_idx=-1), Slot(id=69 type=STRING col_path=[25] offset=144 null=(offset=169 mask=2) slot_idx=9 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=121 slots=[Slot(id=2 type=STRING col_path=[2] offset=0 null=(offset=120 mask=1) slot_idx=0 field_idx=-1), Slot(id=4 type=TIMESTAMP col_path=[4] offset=16 null=(offset=120 mask=2) slot_idx=1 field_idx=-1), Slot(id=12 type=STRING col_path=[12] offset=32 null=(offset=120 mask=4) slot_idx=2 field_idx=-1), Slot(id=16 type=DECIMAL(16,2) col_path=[16] offset=112 null=(offset=120 mask=80) slot_idx=7 field_idx=-1), Slot(id=20 type=STRING col_path=[20] offset=48 null=(offset=120 mask=8) slot_idx=3 field_idx=-1), Slot(id=22 type=STRING col_path=[22] offset=64 null=(offset=120 mask=10) slot_idx=4 field_idx=-1), Slot(id=23 type=STRING col_path=[23] offset=80 null=(offset=120 mask=20) slot_idx=5 field_idx=-1), Slot(id=25 type=STRING col_path=[25] offset=96 null=(offset=120 mask=40) slot_idx=6 field_idx=-1)] tuple_path=[])
I0825 11:46:54.146265 50722 query-state.cc:395] Executing instance. instance_id=b741a2d6f09052d9:8993c4e700000002 fragment_idx=1 per_fragment_instance_idx=1 coord_state_idx=4 #in-flight=10
I0825 11:46:54.146941 50722 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance 'b741a2d6f09052d9:8993c4e700000002': 190
I0825 11:46:54.171012 50721 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=b741a2d6f09052d9:8993c4e700000000 refcnt=2
W0825 11:46:54.269089 43858 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:46:54.273736 43858 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297105045_BP-1820042964-11.11.206.232-1548063025113
I0825 11:46:54.403025 50417 status.cc:125] Invalid query option: timeoutSeconds
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:54.403775 50417 impala-server.cc:1015] UnregisterQuery(): query_id=664945bcb11ca761:4246e5400000000
I0825 11:46:54.404542 50417 impala-server.cc:1102] Cancel(): query_id=664945bcb11ca761:4246e5400000000
I0825 11:46:54.406854 50417 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\v\x14r\xad\xe7\"K\x0f\x88\xac\x007.\x97]\x81",
      02: secret (string) = "\x99?@\x90\xb1\x1eC\x84\x87\xf6ri#\x99\xe4q",
    },
  },
  02: statement (string) = "SET useSSL=false",
  04: runAsync (bool) = true,
}
I0825 11:46:54.427331 50417 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\v\x14r\xad\xe7\"K\x0f\x88\xac\x007.\x97]\x81",
      02: secret (string) = "\x99?@\x90\xb1\x1eC\x84\x87\xf6ri#\x99\xe4q",
    },
  },
  02: statement (string) = "SET useSSL=false",
  04: runAsync (bool) = true,
}
I0825 11:46:54.434896 50417 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:54.445935 50417 Frontend.java:935] Analyzing query: SET useSSL=false
I0825 11:46:54.447223 50417 Frontend.java:947] Analysis finished.
I0825 11:46:54.690497 45342 coordinator.cc:689] Backend completed:  host=e4bdhpp018:22000 remaining=4 query_id=fb422d3e84a054e6:cb70527e00000000
I0825 11:46:54.693790 45342 coordinator-backend-state.cc:226] query_id=fb422d3e84a054e6:cb70527e00000000: first in-progress backend: e4bdhpp014:22000
I0825 11:46:54.852471 50538 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:46:54.853211 50538 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:46:54.870692 50538 query-exec-mgr.cc:95] QueryState: query_id=c14076ebcf238a0e:9f4f276800000000 refcnt=3
I0825 11:46:54.871448 50538 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=c14076ebcf238a0e:9f4f276800000000 refcnt=3
I0825 11:46:54.884003 50808 query-exec-mgr.cc:95] QueryState: query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:46:54.885370 50808 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:46:54.908846 50810 query-exec-mgr.cc:95] QueryState: query_id=e54db18c4c127046:4f5d18aa00000000 refcnt=3
I0825 11:46:54.916314 50810 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e54db18c4c127046:4f5d18aa00000000 refcnt=3
I0825 11:46:54.914959 50448 status.cc:125] Invalid query option: alias
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:54.917627 50448 impala-server.cc:1015] UnregisterQuery(): query_id=bc46bda061e68d69:2060445500000000
I0825 11:46:54.918294 50448 impala-server.cc:1102] Cancel(): query_id=bc46bda061e68d69:2060445500000000
I0825 11:46:54.922446 50448 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x99I\xc3\x86\x9fA\xa9\x88\xa3\xb9\x9e\xc4\x9c\xda?",
      02: secret (string) = "\a|DW\xd7\xddB\x0f\x8at>\xbe\x1b\a\xa7\xb7",
    },
  },
  02: statement (string) = "SET mem_limit=8g",
  04: runAsync (bool) = true,
}
I0825 11:46:54.923650 50448 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x99I\xc3\x86\x9fA\xa9\x88\xa3\xb9\x9e\xc4\x9c\xda?",
      02: secret (string) = "\a|DW\xd7\xddB\x0f\x8at>\xbe\x1b\a\xa7\xb7",
    },
  },
  02: statement (string) = "SET mem_limit=8g",
  04: runAsync (bool) = true,
}
I0825 11:46:54.924978 50448 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:54.937749 50525 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:46:54.938716 50525 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:46:54.941258 50448 Frontend.java:935] Analyzing query: SET mem_limit=8g
I0825 11:46:54.944921 50448 Frontend.java:947] Analysis finished.
I0825 11:46:54.963743 50448 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xde]\t\xbc\x96\xefE\xe8\x00\x00\x00\x00\xdc4\xd1\xde",
      02: secret (string) = "\xde]\t\xbc\x96\xefE\xe8\x00\x00\x00\x00\xdc4\xd1\xde",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:54.965839 50448 impala-hs2-server.cc:683] CloseOperation(): query_id=e845ef96bc095dde:ded134dc00000000
I0825 11:46:54.966609 50448 impala-server.cc:1015] UnregisterQuery(): query_id=e845ef96bc095dde:ded134dc00000000
I0825 11:46:54.967166 50448 impala-server.cc:1102] Cancel(): query_id=e845ef96bc095dde:ded134dc00000000
I0825 11:46:54.970935 50448 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x99I\xc3\x86\x9fA\xa9\x88\xa3\xb9\x9e\xc4\x9c\xda?",
      02: secret (string) = "\a|DW\xd7\xddB\x0f\x8at>\xbe\x1b\a\xa7\xb7",
    },
  },
  02: statement (string) = "SET queryType=JDBC",
  04: runAsync (bool) = true,
}
I0825 11:46:54.972049 50448 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x99I\xc3\x86\x9fA\xa9\x88\xa3\xb9\x9e\xc4\x9c\xda?",
      02: secret (string) = "\a|DW\xd7\xddB\x0f\x8at>\xbe\x1b\a\xa7\xb7",
    },
  },
  02: statement (string) = "SET queryType=JDBC",
  04: runAsync (bool) = true,
}
I0825 11:46:54.973121 50448 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:54.987627 50448 Frontend.java:935] Analyzing query: SET queryType=JDBC
I0825 11:46:54.991293 50448 Frontend.java:947] Analysis finished.
I0825 11:46:55.195854 45243 coordinator.cc:689] Backend completed:  host=e4bdhpp015:22000 remaining=3 query_id=fb422d3e84a054e6:cb70527e00000000
I0825 11:46:55.196760 45243 coordinator-backend-state.cc:226] query_id=fb422d3e84a054e6:cb70527e00000000: first in-progress backend: e4bdhpp014:22000
I0825 11:46:55.805778 44439 coordinator.cc:689] Backend completed:  host=e4bdhpp023:22000 remaining=2 query_id=fb422d3e84a054e6:cb70527e00000000
I0825 11:46:55.807021 44439 coordinator-backend-state.cc:226] query_id=fb422d3e84a054e6:cb70527e00000000: first in-progress backend: e4bdhpp014:22000
I0825 11:46:56.097817 44439 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=e140be5932aa70b9:74083d7a00000000
I0825 11:46:56.099215 44439 query-exec-mgr.cc:46] StartQueryFInstances() query_id=e140be5932aa70b9:74083d7a00000000 coord=e4bdhpp023:22000
I0825 11:46:56.099900 44439 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:56.100154 44439 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:56.100884 44439 query-state.cc:178] Buffer pool limit for e140be5932aa70b9:74083d7a00000000: 6871947673
I0825 11:46:56.101372 44439 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query e140be5932aa70b9:74083d7a00000000
I0825 11:46:56.116817 50851 query-state.cc:300] StartFInstances(): query_id=e140be5932aa70b9:74083d7a00000000 #instances=1
I0825 11:46:56.117774 50851 query-state.cc:313] descriptor table for query=e140be5932aa70b9:74083d7a00000000
tuples:
Tuple(id=3 size=170 slots=[Slot(id=59 type=STRING col_path=[20] offset=0 null=(offset=168 mask=1) slot_idx=0 field_idx=-1), Slot(id=60 type=STRING col_path=[20] offset=16 null=(offset=168 mask=2) slot_idx=1 field_idx=-1), Slot(id=61 type=DECIMAL(16,2) col_path=[16] offset=160 null=(offset=169 mask=4) slot_idx=10 field_idx=-1), Slot(id=62 type=STRING col_path=[22] offset=32 null=(offset=168 mask=4) slot_idx=2 field_idx=-1), Slot(id=63 type=STRING col_path=[22] offset=48 null=(offset=168 mask=8) slot_idx=3 field_idx=-1), Slot(id=64 type=STRING col_path=[23] offset=64 null=(offset=168 mask=10) slot_idx=4 field_idx=-1), Slot(id=65 type=STRING col_path=[23] offset=80 null=(offset=168 mask=20) slot_idx=5 field_idx=-1), Slot(id=66 type=STRING col_path=[2] offset=96 null=(offset=168 mask=40) slot_idx=6 field_idx=-1), Slot(id=67 type=STRING col_path=[2] offset=112 null=(offset=168 mask=80) slot_idx=7 field_idx=-1), Slot(id=68 type=STRING col_path=[25] offset=128 null=(offset=169 mask=1) slot_idx=8 field_idx=-1), Slot(id=69 type=STRING col_path=[25] offset=144 null=(offset=169 mask=2) slot_idx=9 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=121 slots=[Slot(id=2 type=STRING col_path=[2] offset=0 null=(offset=120 mask=1) slot_idx=0 field_idx=-1), Slot(id=4 type=TIMESTAMP col_path=[4] offset=16 null=(offset=120 mask=2) slot_idx=1 field_idx=-1), Slot(id=7 type=STRING col_path=[7] offset=32 null=(offset=120 mask=4) slot_idx=2 field_idx=-1), Slot(id=16 type=DECIMAL(16,2) col_path=[16] offset=112 null=(offset=120 mask=80) slot_idx=7 field_idx=-1), Slot(id=20 type=STRING col_path=[20] offset=48 null=(offset=120 mask=8) slot_idx=3 field_idx=-1), Slot(id=22 type=STRING col_path=[22] offset=64 null=(offset=120 mask=10) slot_idx=4 field_idx=-1), Slot(id=23 type=STRING col_path=[23] offset=80 null=(offset=120 mask=20) slot_idx=5 field_idx=-1), Slot(id=25 type=STRING col_path=[25] offset=96 null=(offset=120 mask=40) slot_idx=6 field_idx=-1)] tuple_path=[])
I0825 11:46:56.307000 50282 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000
I0825 11:46:56.310647 50282 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[7] {
      [0] = TColumnDesc {
        01: columnName (string) = "\xe9\x87\x87\xe8\xb4\xad\xe8\xae\xa2\xe5\x8d\x95\xe7\xb1\xbb\xe5\x9e\x8b",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "\xe9\x87\x87\xe8\xb4\xad\xe8\xae\xa2\xe5\x8d\x95\xe6\x97\xa5\xe6\x9c\x9f",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "\xe5\x95\x86\xe5\x93\x81\xe7\xb1\xbb\xe7\x9b\xae\xe6\x8f\x8f\xe8\xbf\xb0",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "\xe8\xae\xa2\xe5\x8d\x95\xe9\x87\x91\xe9\xa2\x9d_\xe4\xb8\x8d\xe5\x90\xab\xe7\xa8\x8e",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 16,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "\xe6\x98\xaf\xe5\x90\xa6\xe5\xae\x8c\xe6\x88\x90\xe4\xba\xa4\xe8\xb4\xa7",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "\xe8\xaf\xa5\xe8\xa1\x8c\xe6\x98\xaf\xe5\x90\xa6\xe8\xa2\xab\xe5\x88\xa0\xe9\x99\xa4",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "\xe8\xaf\xa5\xe8\xa1\x8c\xe6\x98\xaf\xe5\x90\xa6\xe9\x80\x80\xe8\xb4\xa7",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 6,
      },
    },
  },
}
I0825 11:46:56.335358 50853 query-state.cc:395] Executing instance. instance_id=e140be5932aa70b9:74083d7a00000002 fragment_idx=1 per_fragment_instance_idx=1 coord_state_idx=4 #in-flight=11
I0825 11:46:56.352066 50853 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance 'e140be5932aa70b9:74083d7a00000002': 190
W0825 11:46:56.393433 43836 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:46:56.394881 43836 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297108646_BP-1820042964-11.11.206.232-1548063025113
I0825 11:46:56.398710 50851 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e140be5932aa70b9:74083d7a00000000 refcnt=2
I0825 11:46:56.551914 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:46:56.552327 50417 status.cc:125] Invalid query option: useSSL
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:56.553683 50417 impala-server.cc:1015] UnregisterQuery(): query_id=2d467e4080df28de:1496d05c00000000
I0825 11:46:56.553891 50417 impala-server.cc:1102] Cancel(): query_id=2d467e4080df28de:1496d05c00000000
I0825 11:46:56.554574 50864 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:46:56.557554 50417 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\v\x14r\xad\xe7\"K\x0f\x88\xac\x007.\x97]\x81",
      02: secret (string) = "\x99?@\x90\xb1\x1eC\x84\x87\xf6ri#\x99\xe4q",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:46:56.557960 50417 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\v\x14r\xad\xe7\"K\x0f\x88\xac\x007.\x97]\x81",
      02: secret (string) = "\x99?@\x90\xb1\x1eC\x84\x87\xf6ri#\x99\xe4q",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:46:56.557046 50864 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\rf\xad\x8a\x90vL\x17\xb9|\x9a\xa7[\xa9\xea\xbb",
      02: secret (string) = "]\xda\xda\x96\x1b\xe3DR\x95\xb2\"\xbfa\x9b\xfcV",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:46:56.559046 50417 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:56.588104 50417 Frontend.java:935] Analyzing query: DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`
I0825 11:46:56.589587 50417 Frontend.java:947] Analysis finished.
I0825 11:46:56.606448 50864 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\rf\xad\x8a\x90vL\x17\xb9|\x9a\xa7[\xa9\xea\xbb",
      02: secret (string) = "]\xda\xda\x96\x1b\xe3DR\x95\xb2\"\xbfa\x9b\xfcV",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:46:56.607115 50864 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\rf\xad\x8a\x90vL\x17\xb9|\x9a\xa7[\xa9\xea\xbb",
      02: secret (string) = "]\xda\xda\x96\x1b\xe3DR\x95\xb2\"\xbfa\x9b\xfcV",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:46:56.609658 50864 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:56.627393 50864 Frontend.java:935] Analyzing query: use `dw04_sjfx`;
I0825 11:46:56.631175 50864 Frontend.java:947] Analysis finished.
I0825 11:46:56.704715 50417 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xe3\xed\x89\xb7\xd1\xabA\\\x00\x00\x00\x00+\xcb\xab;",
      02: secret (string) = "\xe3\xed\x89\xb7\xd1\xabA\\\x00\x00\x00\x00+\xcb\xab;",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:56.708650 50417 impala-hs2-server.cc:683] CloseOperation(): query_id=5c41abd1b789ede3:3babcb2b00000000
I0825 11:46:56.714932 50417 impala-server.cc:1015] UnregisterQuery(): query_id=5c41abd1b789ede3:3babcb2b00000000
I0825 11:46:56.715595 50417 impala-server.cc:1102] Cancel(): query_id=5c41abd1b789ede3:3babcb2b00000000
I0825 11:46:56.726320 50417 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\v\x14r\xad\xe7\"K\x0f\x88\xac\x007.\x97]\x81",
      02: secret (string) = "\x99?@\x90\xb1\x1eC\x84\x87\xf6ri#\x99\xe4q",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:46:56.729698 50417 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\v\x14r\xad\xe7\"K\x0f\x88\xac\x007.\x97]\x81",
      02: secret (string) = "\x99?@\x90\xb1\x1eC\x84\x87\xf6ri#\x99\xe4q",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:46:56.728328 50864 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "X\\\xadqx\"C\x97\x00\x00\x00\x00\x87\tB\xd3",
      02: secret (string) = "X\\\xadqx\"C\x97\x00\x00\x00\x00\x87\tB\xd3",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:46:56.731027 50417 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:56.736600 50864 impala-hs2-server.cc:683] CloseOperation(): query_id=9743227871ad5c58:d342098700000000
I0825 11:46:56.737764 50864 impala-server.cc:1015] UnregisterQuery(): query_id=9743227871ad5c58:d342098700000000
I0825 11:46:56.738358 50864 impala-server.cc:1102] Cancel(): query_id=9743227871ad5c58:d342098700000000
I0825 11:46:56.749248 44439 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=9f402daf3559339b:461883ed00000000
I0825 11:46:56.749650 44439 query-exec-mgr.cc:46] StartQueryFInstances() query_id=9f402daf3559339b:461883ed00000000 coord=e4bdhpp023:22000
I0825 11:46:56.750233 44439 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:56.751158 44439 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:56.751442 44439 query-state.cc:178] Buffer pool limit for 9f402daf3559339b:461883ed00000000: 6871947673
I0825 11:46:56.751999 44439 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 9f402daf3559339b:461883ed00000000
I0825 11:46:56.751806 50417 Frontend.java:935] Analyzing query: DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`
I0825 11:46:56.754424 50417 Frontend.java:947] Analysis finished.
I0825 11:46:56.764804 50864 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\rf\xad\x8a\x90vL\x17\xb9|\x9a\xa7[\xa9\xea\xbb",
      02: secret (string) = "]\xda\xda\x96\x1b\xe3DR\x95\xb2\"\xbfa\x9b\xfcV",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:46:56.760782 50870 query-state.cc:300] StartFInstances(): query_id=9f402daf3559339b:461883ed00000000 #instances=1
I0825 11:46:56.766796 50864 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\rf\xad\x8a\x90vL\x17\xb9|\x9a\xa7[\xa9\xea\xbb",
      02: secret (string) = "]\xda\xda\x96\x1b\xe3DR\x95\xb2\"\xbfa\x9b\xfcV",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:46:56.767141 50870 query-state.cc:313] descriptor table for query=9f402daf3559339b:461883ed00000000
tuples:
Tuple(id=3 size=234 slots=[Slot(id=65 type=STRING col_path=[20] offset=0 null=(offset=232 mask=1) slot_idx=0 field_idx=-1), Slot(id=66 type=STRING col_path=[20] offset=16 null=(offset=232 mask=2) slot_idx=1 field_idx=-1), Slot(id=67 type=DECIMAL(16,2) col_path=[16] offset=224 null=(offset=233 mask=40) slot_idx=14 field_idx=-1), Slot(id=68 type=STRING col_path=[22] offset=32 null=(offset=232 mask=4) slot_idx=2 field_idx=-1), Slot(id=69 type=STRING col_path=[22] offset=48 null=(offset=232 mask=8) slot_idx=3 field_idx=-1), Slot(id=70 type=STRING col_path=[23] offset=64 null=(offset=232 mask=10) slot_idx=4 field_idx=-1), Slot(id=71 type=STRING col_path=[23] offset=80 null=(offset=232 mask=20) slot_idx=5 field_idx=-1), Slot(id=72 type=STRING col_path=[2] offset=96 null=(offset=232 mask=40) slot_idx=6 field_idx=-1), Slot(id=73 type=STRING col_path=[2] offset=112 null=(offset=232 mask=80) slot_idx=7 field_idx=-1), Slot(id=74 type=STRING col_path=[12] offset=128 null=(offset=233 mask=1) slot_idx=8 field_idx=-1), Slot(id=75 type=STRING col_path=[12] offset=144 null=(offset=233 mask=2) slot_idx=9 field_idx=-1), Slot(id=76 type=STRING col_path=[10] offset=160 null=(offset=233 mask=4) slot_idx=10 field_idx=-1), Slot(id=77 type=STRING col_path=[10] offset=176 null=(offset=233 mask=8) slot_idx=11 field_idx=-1), Slot(id=78 type=STRING col_path=[25] offset=192 null=(offset=233 mask=10) slot_idx=12 field_idx=-1), Slot(id=79 type=STRING col_path=[25] offset=208 null=(offset=233 mask=20) slot_idx=13 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=202 slots=[Slot(id=2 type=STRING col_path=[2] offset=0 null=(offset=200 mask=1) slot_idx=0 field_idx=-1), Slot(id=4 type=TIMESTAMP col_path=[4] offset=16 null=(offset=200 mask=2) slot_idx=1 field_idx=-1), Slot(id=6 type=STRING col_path=[6] offset=32 null=(offset=200 mask=4) slot_idx=2 field_idx=-1), Slot(id=7 type=STRING col_path=[7] offset=48 null=(offset=200 mask=8) slot_idx=3 field_idx=-1), Slot(id=8 type=STRING col_path=[8] offset=64 null=(offset=200 mask=10) slot_idx=4 field_idx=-1), Slot(id=10 type=STRING col_path=[10] offset=80 null=(offset=200 mask=20) slot_idx=5 field_idx=-1), Slot(id=12 type=STRING col_path=[12] offset=96 null=(offset=200 mask=40) slot_idx=6 field_idx=-1), Slot(id=14 type=DECIMAL(16,3) col_path=[14] offset=176 null=(offset=201 mask=8) slot_idx=11 field_idx=-1), Slot(id=15 type=DECIMAL(16,2) col_path=[15] offset=184 null=(offset=201 mask=10) slot_idx=12 field_idx=-1), Slot(id=16 type=DECIMAL(16,2) col_path=[16] offset=192 null=(offset=201 mask=20) slot_idx=13 field_idx=-1), Slot(id=20 type=STRING col_path=[20] offset=112 null=(offset=200 mask=80) slot_idx=7 field_idx=-1), Slot(id=22 type=STRING col_path=[22] offset=128 null=(offset=201 mask=1) slot_idx=8 field_idx=-1), Slot(id=23 type=STRING col_path=[23] offset=144 null=(offset=201 mask=2) slot_idx=9 field_idx=-1), Slot(id=25 type=STRING col_path=[25] offset=160 null=(offset=201 mask=4) slot_idx=10 field_idx=-1)] tuple_path=[])
I0825 11:46:56.767988 50864 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:56.772728 50874 query-state.cc:395] Executing instance. instance_id=9f402daf3559339b:461883ed00000002 fragment_idx=1 per_fragment_instance_idx=1 coord_state_idx=4 #in-flight=12
I0825 11:46:56.775580 50874 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '9f402daf3559339b:461883ed00000002': 190
I0825 11:46:56.781821 50870 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=9f402daf3559339b:461883ed00000000 refcnt=2
I0825 11:46:56.786886 50864 Frontend.java:935] Analyzing query: set REQUEST_POOL = 'agilebi';
I0825 11:46:56.790807 50864 Frontend.java:947] Analysis finished.
I0825 11:46:56.798293 50864 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "c\xe5}\xb4\xbeeBm\x00\x00\x00\x00\xad\xf7\xff\xf3",
      02: secret (string) = "c\xe5}\xb4\xbeeBm\x00\x00\x00\x00\xad\xf7\xff\xf3",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:56.804425 50864 impala-hs2-server.cc:683] CloseOperation(): query_id=6d4265beb47de563:f3fff7ad00000000
I0825 11:46:56.809144 50864 impala-server.cc:1015] UnregisterQuery(): query_id=6d4265beb47de563:f3fff7ad00000000
I0825 11:46:56.811025 50864 impala-server.cc:1102] Cancel(): query_id=6d4265beb47de563:f3fff7ad00000000
I0825 11:46:56.835003 50864 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\rf\xad\x8a\x90vL\x17\xb9|\x9a\xa7[\xa9\xea\xbb",
      02: secret (string) = "]\xda\xda\x96\x1b\xe3DR\x95\xb2\"\xbfa\x9b\xfcV",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:46:56.839556 50864 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\rf\xad\x8a\x90vL\x17\xb9|\x9a\xa7[\xa9\xea\xbb",
      02: secret (string) = "]\xda\xda\x96\x1b\xe3DR\x95\xb2\"\xbfa\x9b\xfcV",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:46:56.840895 50864 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:56.883458 50864 Frontend.java:935] Analyzing query: set MEM_LIMIT = 1024000000;
I0825 11:46:56.884938 50417 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xd4`\xfdR\xd1\fAD\x00\x00\x00\x00\xd7\xe4\x10\xcd",
      02: secret (string) = "\xd4`\xfdR\xd1\fAD\x00\x00\x00\x00\xd7\xe4\x10\xcd",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:56.887115 50864 Frontend.java:947] Analysis finished.
I0825 11:46:56.895030 50417 impala-hs2-server.cc:683] CloseOperation(): query_id=44410cd152fd60d4:cd10e4d700000000
I0825 11:46:56.895660 50417 impala-server.cc:1015] UnregisterQuery(): query_id=44410cd152fd60d4:cd10e4d700000000
I0825 11:46:56.895890 50417 impala-server.cc:1102] Cancel(): query_id=44410cd152fd60d4:cd10e4d700000000
I0825 11:46:56.898509 50864 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xf9\xfc\v\xdc\a\xa9J*\x00\x00\x00\x00\xdd\xb3\x91\xaf",
      02: secret (string) = "\xf9\xfc\v\xdc\a\xa9J*\x00\x00\x00\x00\xdd\xb3\x91\xaf",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:56.899008 50417 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\v\x14r\xad\xe7\"K\x0f\x88\xac\x007.\x97]\x81",
      02: secret (string) = "\x99?@\x90\xb1\x1eC\x84\x87\xf6ri#\x99\xe4q",
    },
  },
  02: statement (string) = "SELECT `temp`.`\xe9[...](2412)",
  04: runAsync (bool) = true,
}
I0825 11:46:56.899307 50417 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\v\x14r\xad\xe7\"K\x0f\x88\xac\x007.\x97]\x81",
      02: secret (string) = "\x99?@\x90\xb1\x1eC\x84\x87\xf6ri#\x99\xe4q",
    },
  },
  02: statement (string) = "SELECT `temp`.`\xe9[...](2412)",
  04: runAsync (bool) = true,
}
I0825 11:46:56.900103 50417 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:56.907451 50864 impala-hs2-server.cc:683] CloseOperation(): query_id=2a4aa907dc0bfcf9:af91b3dd00000000
I0825 11:46:56.909008 50864 impala-server.cc:1015] UnregisterQuery(): query_id=2a4aa907dc0bfcf9:af91b3dd00000000
I0825 11:46:56.912356 50417 Frontend.java:935] Analyzing query: SELECT `temp`.`采购订单类型`, `temp`.`采购订单日期`, `temp`.`收货站点`, `temp`.`订单金额_不含税`, `temp`.`是否完成交货`, `temp`.`该行是否被删除`, `temp`.`该行是否退货` FROM (SELECT `temp_sub_query_table`.`采购订单类型`, `temp_sub_query_table`.`采购订单日期`, `temp_sub_query_table`.`收货站点`, `temp_sub_query_table`.`订单金额_不含税`, `temp_sub_query_table`.`是否完成交货`, `temp_sub_query_table`.`该行是否被删除`, `temp_sub_query_table`.`该行是否退货` FROM (SELECT `APP_GSMS_HOS_CGDD`.`采购订单编号`, `APP_GSMS_HOS_CGDD`.`采购订单行项目`, `APP_GSMS_HOS_CGDD`.`采购订单类型`, `APP_GSMS_HOS_CGDD`.`采购订单类型描述`, `APP_GSMS_HOS_CGDD`.`采购订单日期`, `APP_GSMS_HOS_CGDD`.`供应商编码`, `APP_GSMS_HOS_CGDD`.`供应商名称`, `APP_GSMS_HOS_CGDD`.`收货站点`, `APP_GSMS_HOS_CGDD`.`站点名称`, `APP_GSMS_HOS_CGDD`.`商品编码`, `APP_GSMS_HOS_CGDD`.`商品描述`, `APP_GSMS_HOS_CGDD`.`商品类目`, `APP_GSMS_HOS_CGDD`.`商品类目描述`, `APP_GSMS_HOS_CGDD`.`订单单位`, `APP_GSMS_HOS_CGDD`.`订单数量`, `APP_GSMS_HOS_CGDD`.`净价`, `APP_GSMS_HOS_CGDD`.`订单金额_不含税`, `APP_GSMS_HOS_CGDD`.`订单金额_含税`, `APP_GSMS_HOS_CGDD`.`税率`, `APP_GSMS_HOS_CGDD`.`税额`, `APP_GSMS_HOS_CGDD`.`是否完成交货`, `APP_GSMS_HOS_CGDD`.`是否开具发票`, `APP_GSMS_HOS_CGDD`.`该行是否被删除`, `APP_GSMS_HOS_CGDD`.`该行是否退货`, `APP_GSMS_HOS_CGDD`.`所属`, `APP_GSMS_HOS_CGDD`.`单位名称` FROM `DW04`.`APP_GSMS_HOS_CGDD`) AS temp_sub_query_table WHERE (( `temp_sub_query_table`.`单位名称` IN ('乌鲁木齐石化分公司', '独山子石化分公司', '中国石油集团西部钻探工程有限公司', '中国石油运输有限公司', '西部管道分公司', '新疆油田分公司', '吐哈油田分公司', '塔里木油田分公司', '中石油新疆销售有限公司', '中石油克拉玛依石化有限责任公司', '中国石油集团工程有限公司北京项目管理分公司') ) AND ((`temp_sub_query_table`.`订单金额_不含税` < 10000000) AND (( `temp_sub_query_table`.`采购订单类型` IN ('Z003', 'Z005') ) AND (( `temp_sub_query_table`.`该行是否被删除` IN (' ') ) AND (( `temp_sub_query_table`.`是否完成交货` IN ('是') ) AND ( `temp_sub_query_table`.`该行是否退货` IN ('否') ))))))) AS temp
I0825 11:46:56.913033 50864 impala-server.cc:1102] Cancel(): query_id=2a4aa907dc0bfcf9:af91b3dd00000000
I0825 11:46:56.925892 50864 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\rf\xad\x8a\x90vL\x17\xb9|\x9a\xa7[\xa9\xea\xbb",
      02: secret (string) = "]\xda\xda\x96\x1b\xe3DR\x95\xb2\"\xbfa\x9b\xfcV",
    },
  },
  02: statement (string) = "DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_NN`",
  04: runAsync (bool) = true,
}
I0825 11:46:56.927162 50864 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\rf\xad\x8a\x90vL\x17\xb9|\x9a\xa7[\xa9\xea\xbb",
      02: secret (string) = "]\xda\xda\x96\x1b\xe3DR\x95\xb2\"\xbfa\x9b\xfcV",
    },
  },
  02: statement (string) = "DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_NN`",
  04: runAsync (bool) = true,
}
I0825 11:46:56.930943 50864 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:56.954751 50864 Frontend.java:935] Analyzing query: DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_NN`
I0825 11:46:56.962062 50864 Frontend.java:947] Analysis finished.
I0825 11:46:56.974437 50448 status.cc:125] Invalid query option: queryType
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:56.978642 50448 impala-server.cc:1015] UnregisterQuery(): query_id=cb46e97310c23a0b:e62351ab00000000
I0825 11:46:56.981544 50448 impala-server.cc:1102] Cancel(): query_id=cb46e97310c23a0b:e62351ab00000000
I0825 11:46:56.984191 50448 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x99I\xc3\x86\x9fA\xa9\x88\xa3\xb9\x9e\xc4\x9c\xda?",
      02: secret (string) = "\a|DW\xd7\xddB\x0f\x8at>\xbe\x1b\a\xa7\xb7",
    },
  },
  02: statement (string) = "SET timeoutSeconds=1800",
  04: runAsync (bool) = true,
}
I0825 11:46:56.984757 50448 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x99I\xc3\x86\x9fA\xa9\x88\xa3\xb9\x9e\xc4\x9c\xda?",
      02: secret (string) = "\a|DW\xd7\xddB\x0f\x8at>\xbe\x1b\a\xa7\xb7",
    },
  },
  02: statement (string) = "SET timeoutSeconds=1800",
  04: runAsync (bool) = true,
}
I0825 11:46:56.985810 50448 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:56.999023 50448 Frontend.java:935] Analyzing query: SET timeoutSeconds=1800
I0825 11:46:57.001471 50417 Frontend.java:947] Analysis finished.
I0825 11:46:57.003834 50448 Frontend.java:947] Analysis finished.
I0825 11:46:57.009100 50417 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:57.010926 50417 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:57.014708 50417 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:57.016501 50417 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:57.017448 50417 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:57.019289 50417 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:57.022287 50417 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:57.022907 50417 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:57.024413 50417 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:57.026518 50417 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:57.028673 50417 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:57.029383 50417 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:57.041016 50417 admission-controller.cc:508] Schedule for id=cd4c8d2a10c6a92f:533303c600000000 in pool_name=root.default cluster_mem_needed=40.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
I0825 11:46:57.047916 50417 admission-controller.cc:513] Stats: agg_num_running=7, agg_num_queued=0, agg_mem_reserved=256.00 GB,  local_host(local_mem_admitted=120.00 GB, num_admitted_running=3, num_queued=0, backend_mem_reserved=56.00 GB)
I0825 11:46:57.048719 50417 admission-controller.cc:529] Admitted query id=cd4c8d2a10c6a92f:533303c600000000
I0825 11:46:57.048947 50417 coordinator.cc:93] Exec() query_id=cd4c8d2a10c6a92f:533303c600000000 stmt=SELECT `temp`.`采购订单类型`, `temp`.`采购订单日期`, `temp`.`收货站点`, `temp`.`订单金额_不含税`, `temp`.`是否完成交货`, `temp`.`该行是否被删除`, `temp`.`该行是否退货` FROM (SELECT `temp_sub_query_table`.`采购订单类型`, `temp_sub_query_table`.`采购订单日期`, `temp_sub_query_table`.`收货站点`, `temp_sub_query_table`.`订单金额_不含税`, `temp_sub_query_table`.`是否完成交货`, `temp_sub_query_table`.`该行是否被删除`, `temp_sub_query_table`.`该行是否退货` FROM (SELECT `APP_GSMS_HOS_CGDD`.`采购订单编号`, `APP_GSMS_HOS_CGDD`.`采购订单行项目`, `APP_GSMS_HOS_CGDD`.`采购订单类型`, `APP_GSMS_HOS_CGDD`.`采购订单类型描述`, `APP_GSMS_HOS_CGDD`.`采购订单日期`, `APP_GSMS_HOS_CGDD`.`供应商编码`, `APP_GSMS_HOS_CGDD`.`供应商名称`, `APP_GSMS_HOS_CGDD`.`收货站点`, `APP_GSMS_HOS_CGDD`.`站点名称`, `APP_GSMS_HOS_CGDD`.`商品编码`, `APP_GSMS_HOS_CGDD`.`商品描述`, `APP_GSMS_HOS_CGDD`.`商品类目`, `APP_GSMS_HOS_CGDD`.`商品类目描述`, `APP_GSMS_HOS_CGDD`.`订单单位`, `APP_GSMS_HOS_CGDD`.`订单数量`, `APP_GSMS_HOS_CGDD`.`净价`, `APP_GSMS_HOS_CGDD`.`订单金额_不含税`, `APP_GSMS_HOS_CGDD`.`订单金额_含税`, `APP_GSMS_HOS_CGDD`.`税率`, `APP_GSMS_HOS_CGDD`.`税额`, `APP_GSMS_HOS_CGDD`.`是否完成交货`, `APP_GSMS_HOS_CGDD`.`是否开具发票`, `APP_GSMS_HOS_CGDD`.`该行是否被删除`, `APP_GSMS_HOS_CGDD`.`该行是否退货`, `APP_GSMS_HOS_CGDD`.`所属`, `APP_GSMS_HOS_CGDD`.`单位名称` FROM `DW04`.`APP_GSMS_HOS_CGDD`) AS temp_sub_query_table WHERE (( `temp_sub_query_table`.`单位名称` IN ('乌鲁木齐石化分公司', '独山子石化分公司', '中国石油集团西部钻探工程有限公司', '中国石油运输有限公司', '西部管道分公司', '新疆油田分公司', '吐哈油田分公司', '塔里木油田分公司', '中石油新疆销售有限公司', '中石油克拉玛依石化有限责任公司', '中国石油集团工程有限公司北京项目管理分公司') ) AND ((`temp_sub_query_table`.`订单金额_不含税` < 10000000) AND (( `temp_sub_query_table`.`采购订单类型` IN ('Z003', 'Z005') ) AND (( `temp_sub_query_table`.`该行是否被删除` IN (' ') ) AND (( `temp_sub_query_table`.`是否完成交货` IN ('是') ) AND ( `temp_sub_query_table`.`该行是否退货` IN ('否') ))))))) AS temp
I0825 11:46:57.050146 50417 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:57.052619 50417 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:57.053226 50417 coordinator.cc:349] starting execution on 5 backends for query_id=cd4c8d2a10c6a92f:533303c600000000
I0825 11:46:57.054929 45240 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=cd4c8d2a10c6a92f:533303c600000000
I0825 11:46:57.056006 45240 query-exec-mgr.cc:46] StartQueryFInstances() query_id=cd4c8d2a10c6a92f:533303c600000000 coord=e4bdhpp025:22000
I0825 11:46:57.056511 45240 query-state.cc:178] Buffer pool limit for cd4c8d2a10c6a92f:533303c600000000: 6871947673
I0825 11:46:57.057684 45240 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query cd4c8d2a10c6a92f:533303c600000000
I0825 11:46:57.061714 50948 query-state.cc:300] StartFInstances(): query_id=cd4c8d2a10c6a92f:533303c600000000 #instances=2
I0825 11:46:57.064309 50948 query-state.cc:313] descriptor table for query=cd4c8d2a10c6a92f:533303c600000000
tuples:
Tuple(id=3 size=170 slots=[Slot(id=59 type=STRING col_path=[20] offset=0 null=(offset=168 mask=1) slot_idx=0 field_idx=-1), Slot(id=60 type=STRING col_path=[20] offset=16 null=(offset=168 mask=2) slot_idx=1 field_idx=-1), Slot(id=61 type=DECIMAL(16,2) col_path=[16] offset=160 null=(offset=169 mask=4) slot_idx=10 field_idx=-1), Slot(id=62 type=STRING col_path=[22] offset=32 null=(offset=168 mask=4) slot_idx=2 field_idx=-1), Slot(id=63 type=STRING col_path=[22] offset=48 null=(offset=168 mask=8) slot_idx=3 field_idx=-1), Slot(id=64 type=STRING col_path=[23] offset=64 null=(offset=168 mask=10) slot_idx=4 field_idx=-1), Slot(id=65 type=STRING col_path=[23] offset=80 null=(offset=168 mask=20) slot_idx=5 field_idx=-1), Slot(id=66 type=STRING col_path=[2] offset=96 null=(offset=168 mask=40) slot_idx=6 field_idx=-1), Slot(id=67 type=STRING col_path=[2] offset=112 null=(offset=168 mask=80) slot_idx=7 field_idx=-1), Slot(id=68 type=STRING col_path=[25] offset=128 null=(offset=169 mask=1) slot_idx=8 field_idx=-1), Slot(id=69 type=STRING col_path=[25] offset=144 null=(offset=169 mask=2) slot_idx=9 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=121 slots=[Slot(id=2 type=STRING col_path=[2] offset=0 null=(offset=120 mask=1) slot_idx=0 field_idx=-1), Slot(id=4 type=TIMESTAMP col_path=[4] offset=16 null=(offset=120 mask=2) slot_idx=1 field_idx=-1), Slot(id=7 type=STRING col_path=[7] offset=32 null=(offset=120 mask=4) slot_idx=2 field_idx=-1), Slot(id=16 type=DECIMAL(16,2) col_path=[16] offset=112 null=(offset=120 mask=80) slot_idx=7 field_idx=-1), Slot(id=20 type=STRING col_path=[20] offset=48 null=(offset=120 mask=8) slot_idx=3 field_idx=-1), Slot(id=22 type=STRING col_path=[22] offset=64 null=(offset=120 mask=10) slot_idx=4 field_idx=-1), Slot(id=23 type=STRING col_path=[23] offset=80 null=(offset=120 mask=20) slot_idx=5 field_idx=-1), Slot(id=25 type=STRING col_path=[25] offset=96 null=(offset=120 mask=40) slot_idx=6 field_idx=-1)] tuple_path=[])
I0825 11:46:57.076377 50950 query-state.cc:395] Executing instance. instance_id=cd4c8d2a10c6a92f:533303c600000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=4 #in-flight=13
I0825 11:46:57.083169 50951 query-state.cc:395] Executing instance. instance_id=cd4c8d2a10c6a92f:533303c600000002 fragment_idx=1 per_fragment_instance_idx=1 coord_state_idx=4 #in-flight=14
I0825 11:46:57.086719 50951 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance 'cd4c8d2a10c6a92f:533303c600000002': 190
I0825 11:46:57.093019 50948 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:46:57.114143 50864 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xb3\xf5\x91\xe1a\x05L\xe3\x00\x00\x00\x00\xcc\x8c\xb8o",
      02: secret (string) = "\xb3\xf5\x91\xe1a\x05L\xe3\x00\x00\x00\x00\xcc\x8c\xb8o",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:57.118710 50864 impala-hs2-server.cc:683] CloseOperation(): query_id=e34c0561e191f5b3:6fb88ccc00000000
I0825 11:46:57.119181 50864 impala-server.cc:1015] UnregisterQuery(): query_id=e34c0561e191f5b3:6fb88ccc00000000
I0825 11:46:57.120980 50864 impala-server.cc:1102] Cancel(): query_id=e34c0561e191f5b3:6fb88ccc00000000
I0825 11:46:57.147169 50417 coordinator.cc:362] started execution on 5 backends for query_id=cd4c8d2a10c6a92f:533303c600000000
I0825 11:46:57.168407 50417 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "/\xa9\xc6\x10*\x8dL\xcd\x00\x00\x00\x00\xc6\x033S",
      02: secret (string) = "/\xa9\xc6\x10*\x8dL\xcd\x00\x00\x00\x00\xc6\x033S",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:57.252812 50864 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\rf\xad\x8a\x90vL\x17\xb9|\x9a\xa7[\xa9\xea\xbb",
      02: secret (string) = "]\xda\xda\x96\x1b\xe3DR\x95\xb2\"\xbfa\x9b\xfcV",
    },
  },
  02: statement (string) = "select   `bi_228[...](15726)",
  04: runAsync (bool) = true,
}
I0825 11:46:57.254014 50864 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\rf\xad\x8a\x90vL\x17\xb9|\x9a\xa7[\xa9\xea\xbb",
      02: secret (string) = "]\xda\xda\x96\x1b\xe3DR\x95\xb2\"\xbfa\x9b\xfcV",
    },
  },
  02: statement (string) = "select   `bi_228[...](15726)",
  04: runAsync (bool) = true,
}
I0825 11:46:57.255460 50864 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:57.284422 50864 Frontend.java:935] Analyzing query: select   `bi_2282682891841018241`.`帐号` as `bi_15159864404575209771` , `bi_2282682891841018241`.`卡号` as `bi_5176736373764729517` , `bi_2282682891841018241`.`卡类型描述` as `bi_18002650512820288522` , `bi_2282682891841018241`.`是否为副卡` as `bi_10070664717213612371` , `bi_2282682891841018241`.`交易主要站点` as `bi_17363467753723988445` , `bi_2282682891841018241`.`消费过加油站站点数量_1692137484` as `bi_17559908322177175193` , `bi_2282682891841018241`.`交易类型描述` as `bi_30169237570504987` , `bi_2282682891841018241`.`商品类型` as `bi_630186766851260751` , `bi_2282682891841018241`.`商品类型描述` as `bi_15231137875792296164` , `bi_2282682891841018241`.`发卡单位` as `bi_15621164357820908518` , `bi_2282682891841018241`.`发卡单位与销售单位是否一致` as `bi_12117277212538675021` , `bi_2282682891841018241`.`首次交易日期` as `bi_6646908465420298805` , `bi_2282682891841018241`.`最近交易日期` as `bi_13530833546549329347` , `bi_2282682891841018241`.`平均油量升数` as `bi_11273946998078465677` , `bi_2282682891841018241`.`平均消费金额` as `bi_8288133923748336711` , `bi_2282682891841018241`.`平均折扣金额` as `bi_4970043801986327351` , `bi_2282682891841018241`.`平均余额` as `bi_8381900821794444625` , `bi_2282682891841018241`.`日均消费笔数` as `bi_10723048596585302054` , `bi_2282682891841018241`.`日均消费金额` as `bi_41819982784080953` , `bi_2282682891841018241`.`单日消费次数过多次数` as `bi_12112238727142840682` , `bi_2282682891841018241`.`不记名卡夜间消费总次数` as `bi_3938683413919446579` , `bi_2282682891841018241`.`不记名卡夜间消费总金额` as `bi_12562378023438062621` , `bi_2282682891841018241`.`日均夜间消费笔数` as `bi_6200430593887269742` , `bi_2282682891841018241`.`日均夜间消费金额` as `bi_1689351619663764928` , `bi_2282682891841018241`.`单日夜间消费次数过多次数` as `bi_12909975068497935338` , `bi_2282682891841018241`.`睡眠次数` as `bi_11007498412015863178` , `bi_2282682891841018241`.`是否仍在睡眠` as `bi_12482824553037098532` , `bi_2282682891841018241`.`不记名卡累计消费金额` as `bi_4601843349518591292` , `bi_2282682891841018241`.`不记名卡消费金额方差` as `bi_2924531414258932610` , `bi_2282682891841018241`.`不记名卡累计消费次数` as `bi_5870083467319809789` , `bi_2282682891841018241`.`不记名卡消费金额为小数次数` as `bi_3842164172086352148` , `bi_2282682891841018241`.`不记名卡消费过油品类型数量` as `bi_806870660964728186` , `bi_2282682891841018241`.`消费过汽油品类型数量636841632` as `bi_556036179544267082` , `bi_2282682891841018241`.`不记名卡汽油消费次数占比` as `bi_1068488302117352384` , `bi_2282682891841018241`.`汽油单笔高额消费次数_1368620500` as `bi_8356278071803173785` , `bi_2282682891841018241`.`不记名卡柴油消费次数占比` as `bi_5766421841800396638` , `bi_2282682891841018241`.`不记名卡天然气消费次数占比` as `bi_14290961476284126012` , `bi_2282682891841018241`.`ic卡大额非油消费次数` as `bi_992601592685606614` , `bi_2282682891841018241`.`非油累计消费金额` as `bi_8276717807170841059` , `bi_2282682891841018241`.`非油与成品油消费金额比例` as `bi_14967514132684380162` , `bi_2282682891841018241`.`不记名卡累计充值金额` as `bi_11701916747493263994` , `bi_2282682891841018241`.`单日充值次数过多次数` as `bi_16449755606537913494` , `bi_2282682891841018241`.`即消费且余额低的次数831743621` as `bi_12225443660237330283` , `bi_2282682891841018241`.`同一班次消费的次数` as `bi_5256996930125776142` , `bi_2282682891841018241`.`密码重置次数` as `bi_8414722834803604324` , `bi_2282682891841018241`.`笔折扣额的消费的次数_2085032453` as `bi_10212944947192418963` , `bi_2282682891841018241`.`余额充足时充钱的次数1957627260` as `bi_2466479945894447936` , `bi_2282682891841018241`.`是否曾频繁转账` as `bi_14279744686847475029` , `bi_2282682891841018241`.`是否异常加油卡` as `bi_1040490846059638232` , `bi_2282682891841018241`.`单位名称` as `bi_10101021918568318220` , `bi_2282682891841018241`.`所属` as `bi_13138972180237352292` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_2282682891841018241`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_10651599939693506386` , TRIM(`bi_2282682891841018241`.`交易主要站点`) as `bi_13164579150965645243`   from (select   `bi_11409236811878669265`.`帐号` as `帐号` , `bi_11409236811878669265`.`卡号` as `卡号` , `bi_11409236811878669265`.`卡类型描述` as `卡类型描述` , `bi_11409236811878669265`.`是否为副卡` as `是否为副卡` , `bi_11409236811878669265`.`交易主要站点` as `交易主要站点` , `bi_11409236811878669265`.`不记名卡消费过加油站站点数量` as `消费过加油站站点数量_1692137484` , `bi_11409236811878669265`.`交易类型描述` as `交易类型描述` , `bi_11409236811878669265`.`商品类型` as `商品类型` , `bi_11409236811878669265`.`商品类型描述` as `商品类型描述` , `bi_11409236811878669265`.`发卡单位` as `发卡单位` , `bi_11409236811878669265`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `bi_11409236811878669265`.`首次交易日期` as `首次交易日期` , `bi_11409236811878669265`.`最近交易日期` as `最近交易日期` , `bi_11409236811878669265`.`平均油量升数` as `平均油量升数` , `bi_11409236811878669265`.`平均消费金额` as `平均消费金额` , `bi_11409236811878669265`.`平均折扣金额` as `平均折扣金额` , `bi_11409236811878669265`.`平均余额` as `平均余额` , `bi_11409236811878669265`.`日均消费笔数` as `日均消费笔数` , `bi_11409236811878669265`.`日均消费金额` as `日均消费金额` , `bi_11409236811878669265`.`单日消费次数过多次数` as `单日消费次数过多次数` , `bi_11409236811878669265`.`不记名卡夜间消费总次数` as `不记名卡夜间消费总次数` , `bi_11409236811878669265`.`不记名卡夜间消费总金额` as `不记名卡夜间消费总金额` , `bi_11409236811878669265`.`日均夜间消费笔数` as `日均夜间消费笔数` , `bi_11409236811878669265`.`日均夜间消费金额` as `日均夜间消费金额` , `bi_11409236811878669265`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `bi_11409236811878669265`.`睡眠次数` as `睡眠次数` , `bi_11409236811878669265`.`是否仍在睡眠` as `是否仍在睡眠` , `bi_11409236811878669265`.`不记名卡累计消费金额` as `不记名卡累计消费金额` , `bi_11409236811878669265`.`不记名卡消费金额方差` as `不记名卡消费金额方差` , `bi_11409236811878669265`.`不记名卡累计消费次数` as `不记名卡累计消费次数` , `bi_11409236811878669265`.`不记名卡消费金额为小数次数` as `不记名卡消费金额为小数次数` , `bi_11409236811878669265`.`不记名卡消费过油品类型数量` as `不记名卡消费过油品类型数量` , `bi_11409236811878669265`.`不记名卡消费过汽油品类型数量` as `消费过汽油品类型数量636841632` , `bi_11409236811878669265`.`不记名卡汽油消费次数占比` as `不记名卡汽油消费次数占比` , `bi_11409236811878669265`.`不记名卡汽油单笔高额消费次数` as `汽油单笔高额消费次数_1368620500` , `bi_11409236811878669265`.`不记名卡柴油消费次数占比` as `不记名卡柴油消费次数占比` , `bi_11409236811878669265`.`不记名卡天然气消费次数占比` as `不记名卡天然气消费次数占比` , `bi_11409236811878669265`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `bi_11409236811878669265`.`非油累计消费金额` as `非油累计消费金额` , `bi_11409236811878669265`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `bi_11409236811878669265`.`不记名卡累计充值金额` as `不记名卡累计充值金额` , `bi_11409236811878669265`.`单日充值次数过多次数` as `单日充值次数过多次数` , `bi_11409236811878669265`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `bi_11409236811878669265`.`同一班次消费的次数` as `同一班次消费的次数` , `bi_11409236811878669265`.`密码重置次数` as `密码重置次数` , `bi_11409236811878669265`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `bi_11409236811878669265`.`不记名卡余额充足时充钱的次数` as `余额充足时充钱的次数1957627260` , `bi_11409236811878669265`.`是否曾频繁转账` as `是否曾频繁转账` , `bi_11409236811878669265`.`是否异常加油卡` as `是否异常加油卡` , `bi_11409236811878669265`.`单位名称` as `单位名称` , `bi_11409236811878669265`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`不记名卡消费过加油站站点数量` as `不记名卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`不记名卡夜间消费总次数` as `不记名卡夜间消费总次数`,`不记名卡夜间消费总金额` as `不记名卡夜间消费总金额`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`不记名卡累计消费金额` as `不记名卡累计消费金额`,`不记名卡消费金额方差` as `不记名卡消费金额方差`,`不记名卡累计消费次数` as `不记名卡累计消费次数`,`不记名卡消费金额为小数次数` as `不记名卡消费金额为小数次数`,`不记名卡消费过油品类型数量` as `不记名卡消费过油品类型数量`,`不记名卡消费过汽油品类型数量` as `不记名卡消费过汽油品类型数量`,`不记名卡汽油消费次数占比` as `不记名卡汽油消费次数占比`,`不记名卡汽油单笔高额消费次数` as `不记名卡汽油单笔高额消费次数`,`不记名卡柴油消费次数占比` as `不记名卡柴油消费次数占比`,`不记名卡天然气消费次数占比` as `不记名卡天然气消费次数占比`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`不记名卡累计充值金额` as `不记名卡累计充值金额`,`单日充值次数过多次数` as `单日充值次数过多次数`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`不记名卡余额充足时充钱的次数` as `不记名卡余额充足时充钱的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`不记名卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`不记名卡夜间消费总次数`,`不记名卡夜间消费总金额`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`不记名卡累计消费金额`,`不记名卡消费金额方差`,`不记名卡累计消费次数`,`不记名卡消费金额为小数次数`,`不记名卡消费过油品类型数量`,`不记名卡消费过汽油品类型数量`,`不记名卡汽油消费次数占比`,`不记名卡汽油单笔高额消费次数`,`不记名卡柴油消费次数占比`,`不记名卡天然气消费次数占比`,`ic卡大额非油消费次数`,`非油累计消费金额`,`非油与成品油消费金额比例`,`不记名卡累计充值金额`,`单日充值次数过多次数`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`不记名卡余额充足时充钱的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,     
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `不记名卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`, 
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`, 
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`,
       `单日消费次数过多次数`, 
       `不记名卡夜间消费总次数`,
       `不记名卡夜间消费总金额`,
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`, 
       `睡眠次数`,
       `是否仍在睡眠`,
       `不记名卡累计消费金额`,
       `加油卡消费金额方差` `不记名卡消费金额方差`,
       `不记名卡累计消费次数`,
       `加油卡消费金额为小数次数` `不记名卡消费金额为小数次数`,
       `不记名卡消费过油品类型数量`,
       `不记名卡消费过汽油品类型数量`,
       `不记名卡汽油消费次数占比`,
       `不记名卡汽油单笔高额消费次数`,
       `不记名卡柴油消费次数占比`,
       `不记名卡天然气消费次数占比`,
       `IC卡大额非油消费次数`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `不记名卡累计充值金额`,
       `单日充值次数过多次数`, 
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `不记名卡余额充足时充钱的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM DW04_SJFX.APP_AUAP_YK_NN) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `bi_11409236811878669265`  
     ) `bi_2282682891841018241`
      limit 1200001 
W0825 11:46:57.398311 43828 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:46:57.399518 43828 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064312_BP-1820042964-11.11.206.232-1548063025113
I0825 11:46:57.724882 44439 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=204f9bc9a05faaff:3a46cbcf00000000
I0825 11:46:57.730703 44439 query-exec-mgr.cc:46] StartQueryFInstances() query_id=204f9bc9a05faaff:3a46cbcf00000000 coord=e4bdhpp023:22000
I0825 11:46:57.732002 44439 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:46:57.732396 44439 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:46:57.732592 44439 query-state.cc:178] Buffer pool limit for 204f9bc9a05faaff:3a46cbcf00000000: 6871947673
I0825 11:46:57.732956 44439 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 204f9bc9a05faaff:3a46cbcf00000000
I0825 11:46:57.741705 51030 query-state.cc:300] StartFInstances(): query_id=204f9bc9a05faaff:3a46cbcf00000000 #instances=1
I0825 11:46:57.745004 51030 query-state.cc:313] descriptor table for query=204f9bc9a05faaff:3a46cbcf00000000
tuples:
Tuple(id=3 size=202 slots=[Slot(id=60 type=STRING col_path=[20] offset=0 null=(offset=200 mask=1) slot_idx=0 field_idx=-1), Slot(id=61 type=STRING col_path=[20] offset=16 null=(offset=200 mask=2) slot_idx=1 field_idx=-1), Slot(id=62 type=DECIMAL(16,2) col_path=[16] offset=192 null=(offset=201 mask=10) slot_idx=12 field_idx=-1), Slot(id=63 type=STRING col_path=[22] offset=32 null=(offset=200 mask=4) slot_idx=2 field_idx=-1), Slot(id=64 type=STRING col_path=[22] offset=48 null=(offset=200 mask=8) slot_idx=3 field_idx=-1), Slot(id=65 type=STRING col_path=[23] offset=64 null=(offset=200 mask=10) slot_idx=4 field_idx=-1), Slot(id=66 type=STRING col_path=[23] offset=80 null=(offset=200 mask=20) slot_idx=5 field_idx=-1), Slot(id=67 type=STRING col_path=[2] offset=96 null=(offset=200 mask=40) slot_idx=6 field_idx=-1), Slot(id=68 type=STRING col_path=[2] offset=112 null=(offset=200 mask=80) slot_idx=7 field_idx=-1), Slot(id=69 type=STRING col_path=[12] offset=128 null=(offset=201 mask=1) slot_idx=8 field_idx=-1), Slot(id=70 type=STRING col_path=[12] offset=144 null=(offset=201 mask=2) slot_idx=9 field_idx=-1), Slot(id=71 type=STRING col_path=[25] offset=160 null=(offset=201 mask=4) slot_idx=10 field_idx=-1), Slot(id=72 type=STRING col_path=[25] offset=176 null=(offset=201 mask=8) slot_idx=11 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=138 slots=[Slot(id=2 type=STRING col_path=[2] offset=0 null=(offset=136 mask=1) slot_idx=0 field_idx=-1), Slot(id=4 type=TIMESTAMP col_path=[4] offset=16 null=(offset=136 mask=2) slot_idx=1 field_idx=-1), Slot(id=10 type=STRING col_path=[10] offset=32 null=(offset=136 mask=4) slot_idx=2 field_idx=-1), Slot(id=12 type=STRING col_path=[12] offset=48 null=(offset=136 mask=8) slot_idx=3 field_idx=-1), Slot(id=16 type=DECIMAL(16,2) col_path=[16] offset=128 null=(offset=137 mask=1) slot_idx=8 field_idx=-1), Slot(id=20 type=STRING col_path=[20] offset=64 null=(offset=136 mask=10) slot_idx=4 field_idx=-1), Slot(id=22 type=STRING col_path=[22] offset=80 null=(offset=136 mask=20) slot_idx=5 field_idx=-1), Slot(id=23 type=STRING col_path=[23] offset=96 null=(offset=136 mask=40) slot_idx=6 field_idx=-1), Slot(id=25 type=STRING col_path=[25] offset=112 null=(offset=136 mask=80) slot_idx=7 field_idx=-1)] tuple_path=[])
I0825 11:46:57.751842 51034 query-state.cc:395] Executing instance. instance_id=204f9bc9a05faaff:3a46cbcf00000002 fragment_idx=1 per_fragment_instance_idx=1 coord_state_idx=4 #in-flight=15
I0825 11:46:57.753334 51034 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '204f9bc9a05faaff:3a46cbcf00000002': 190
I0825 11:46:57.771304 51030 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=204f9bc9a05faaff:3a46cbcf00000000 refcnt=2
I0825 11:46:57.823645 50864 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:46:57.824965 50864 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:46:58.078014 51109 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:46:58.082878 51109 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:46:58.108692 50452 query-exec-mgr.cc:95] QueryState: query_id=c14076ebcf238a0e:9f4f276800000000 refcnt=3
I0825 11:46:58.109321 50452 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=c14076ebcf238a0e:9f4f276800000000 refcnt=3
I0825 11:46:58.120689 50452 query-exec-mgr.cc:95] QueryState: query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:46:58.122149 50452 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:46:58.138381 50452 query-exec-mgr.cc:95] QueryState: query_id=e54db18c4c127046:4f5d18aa00000000 refcnt=3
I0825 11:46:58.140388 50452 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e54db18c4c127046:4f5d18aa00000000 refcnt=3
I0825 11:46:58.176321 51115 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:46:58.178071 51115 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:46:58.193593 51109 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:46:58.194451 51109 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:46:58.327728 50864 Frontend.java:947] Analysis finished.
I0825 11:46:58.334959 50864 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:46:58.341028 50864 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:46:58.352478 50864 admission-controller.cc:508] Schedule for id=fc4f8c7db929bb7d:9d4b8ef300000000 in pool_name=root.agilebi cluster_mem_needed=1.91 GB PoolConfig: max_requests=500 max_queued=200 max_mem=800.00 GB
I0825 11:46:58.354892 50864 admission-controller.cc:513] Stats: agg_num_running=3, agg_num_queued=0, agg_mem_reserved=5.72 GB,  local_host(local_mem_admitted=3.81 GB, num_admitted_running=2, num_queued=0, backend_mem_reserved=1.91 GB)
I0825 11:46:58.357470 50864 admission-controller.cc:529] Admitted query id=fc4f8c7db929bb7d:9d4b8ef300000000
I0825 11:46:58.366291 50864 coordinator.cc:93] Exec() query_id=fc4f8c7db929bb7d:9d4b8ef300000000 stmt=select   `bi_2282682891841018241`.`帐号` as `bi_15159864404575209771` , `bi_2282682891841018241`.`卡号` as `bi_5176736373764729517` , `bi_2282682891841018241`.`卡类型描述` as `bi_18002650512820288522` , `bi_2282682891841018241`.`是否为副卡` as `bi_10070664717213612371` , `bi_2282682891841018241`.`交易主要站点` as `bi_17363467753723988445` , `bi_2282682891841018241`.`消费过加油站站点数量_1692137484` as `bi_17559908322177175193` , `bi_2282682891841018241`.`交易类型描述` as `bi_30169237570504987` , `bi_2282682891841018241`.`商品类型` as `bi_630186766851260751` , `bi_2282682891841018241`.`商品类型描述` as `bi_15231137875792296164` , `bi_2282682891841018241`.`发卡单位` as `bi_15621164357820908518` , `bi_2282682891841018241`.`发卡单位与销售单位是否一致` as `bi_12117277212538675021` , `bi_2282682891841018241`.`首次交易日期` as `bi_6646908465420298805` , `bi_2282682891841018241`.`最近交易日期` as `bi_13530833546549329347` , `bi_2282682891841018241`.`平均油量升数` as `bi_11273946998078465677` , `bi_2282682891841018241`.`平均消费金额` as `bi_8288133923748336711` , `bi_2282682891841018241`.`平均折扣金额` as `bi_4970043801986327351` , `bi_2282682891841018241`.`平均余额` as `bi_8381900821794444625` , `bi_2282682891841018241`.`日均消费笔数` as `bi_10723048596585302054` , `bi_2282682891841018241`.`日均消费金额` as `bi_41819982784080953` , `bi_2282682891841018241`.`单日消费次数过多次数` as `bi_12112238727142840682` , `bi_2282682891841018241`.`不记名卡夜间消费总次数` as `bi_3938683413919446579` , `bi_2282682891841018241`.`不记名卡夜间消费总金额` as `bi_12562378023438062621` , `bi_2282682891841018241`.`日均夜间消费笔数` as `bi_6200430593887269742` , `bi_2282682891841018241`.`日均夜间消费金额` as `bi_1689351619663764928` , `bi_2282682891841018241`.`单日夜间消费次数过多次数` as `bi_12909975068497935338` , `bi_2282682891841018241`.`睡眠次数` as `bi_11007498412015863178` , `bi_2282682891841018241`.`是否仍在睡眠` as `bi_12482824553037098532` , `bi_2282682891841018241`.`不记名卡累计消费金额` as `bi_4601843349518591292` , `bi_2282682891841018241`.`不记名卡消费金额方差` as `bi_2924531414258932610` , `bi_2282682891841018241`.`不记名卡累计消费次数` as `bi_5870083467319809789` , `bi_2282682891841018241`.`不记名卡消费金额为小数次数` as `bi_3842164172086352148` , `bi_2282682891841018241`.`不记名卡消费过油品类型数量` as `bi_806870660964728186` , `bi_2282682891841018241`.`消费过汽油品类型数量636841632` as `bi_556036179544267082` , `bi_2282682891841018241`.`不记名卡汽油消费次数占比` as `bi_1068488302117352384` , `bi_2282682891841018241`.`汽油单笔高额消费次数_1368620500` as `bi_8356278071803173785` , `bi_2282682891841018241`.`不记名卡柴油消费次数占比` as `bi_5766421841800396638` , `bi_2282682891841018241`.`不记名卡天然气消费次数占比` as `bi_14290961476284126012` , `bi_2282682891841018241`.`ic卡大额非油消费次数` as `bi_992601592685606614` , `bi_2282682891841018241`.`非油累计消费金额` as `bi_8276717807170841059` , `bi_2282682891841018241`.`非油与成品油消费金额比例` as `bi_14967514132684380162` , `bi_2282682891841018241`.`不记名卡累计充值金额` as `bi_11701916747493263994` , `bi_2282682891841018241`.`单日充值次数过多次数` as `bi_16449755606537913494` , `bi_2282682891841018241`.`即消费且余额低的次数831743621` as `bi_12225443660237330283` , `bi_2282682891841018241`.`同一班次消费的次数` as `bi_5256996930125776142` , `bi_2282682891841018241`.`密码重置次数` as `bi_8414722834803604324` , `bi_2282682891841018241`.`笔折扣额的消费的次数_2085032453` as `bi_10212944947192418963` , `bi_2282682891841018241`.`余额充足时充钱的次数1957627260` as `bi_2466479945894447936` , `bi_2282682891841018241`.`是否曾频繁转账` as `bi_14279744686847475029` , `bi_2282682891841018241`.`是否异常加油卡` as `bi_1040490846059638232` , `bi_2282682891841018241`.`单位名称` as `bi_10101021918568318220` , `bi_2282682891841018241`.`所属` as `bi_13138972180237352292` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_2282682891841018241`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_10651599939693506386` , TRIM(`bi_2282682891841018241`.`交易主要站点`) as `bi_13164579150965645243`   from (select   `bi_11409236811878669265`.`帐号` as `帐号` , `bi_11409236811878669265`.`卡号` as `卡号` , `bi_11409236811878669265`.`卡类型描述` as `卡类型描述` , `bi_11409236811878669265`.`是否为副卡` as `是否为副卡` , `bi_11409236811878669265`.`交易主要站点` as `交易主要站点` , `bi_11409236811878669265`.`不记名卡消费过加油站站点数量` as `消费过加油站站点数量_1692137484` , `bi_11409236811878669265`.`交易类型描述` as `交易类型描述` , `bi_11409236811878669265`.`商品类型` as `商品类型` , `bi_11409236811878669265`.`商品类型描述` as `商品类型描述` , `bi_11409236811878669265`.`发卡单位` as `发卡单位` , `bi_11409236811878669265`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `bi_11409236811878669265`.`首次交易日期` as `首次交易日期` , `bi_11409236811878669265`.`最近交易日期` as `最近交易日期` , `bi_11409236811878669265`.`平均油量升数` as `平均油量升数` , `bi_11409236811878669265`.`平均消费金额` as `平均消费金额` , `bi_11409236811878669265`.`平均折扣金额` as `平均折扣金额` , `bi_11409236811878669265`.`平均余额` as `平均余额` , `bi_11409236811878669265`.`日均消费笔数` as `日均消费笔数` , `bi_11409236811878669265`.`日均消费金额` as `日均消费金额` , `bi_11409236811878669265`.`单日消费次数过多次数` as `单日消费次数过多次数` , `bi_11409236811878669265`.`不记名卡夜间消费总次数` as `不记名卡夜间消费总次数` , `bi_11409236811878669265`.`不记名卡夜间消费总金额` as `不记名卡夜间消费总金额` , `bi_11409236811878669265`.`日均夜间消费笔数` as `日均夜间消费笔数` , `bi_11409236811878669265`.`日均夜间消费金额` as `日均夜间消费金额` , `bi_11409236811878669265`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `bi_11409236811878669265`.`睡眠次数` as `睡眠次数` , `bi_11409236811878669265`.`是否仍在睡眠` as `是否仍在睡眠` , `bi_11409236811878669265`.`不记名卡累计消费金额` as `不记名卡累计消费金额` , `bi_11409236811878669265`.`不记名卡消费金额方差` as `不记名卡消费金额方差` , `bi_11409236811878669265`.`不记名卡累计消费次数` as `不记名卡累计消费次数` , `bi_11409236811878669265`.`不记名卡消费金额为小数次数` as `不记名卡消费金额为小数次数` , `bi_11409236811878669265`.`不记名卡消费过油品类型数量` as `不记名卡消费过油品类型数量` , `bi_11409236811878669265`.`不记名卡消费过汽油品类型数量` as `消费过汽油品类型数量636841632` , `bi_11409236811878669265`.`不记名卡汽油消费次数占比` as `不记名卡汽油消费次数占比` , `bi_11409236811878669265`.`不记名卡汽油单笔高额消费次数` as `汽油单笔高额消费次数_1368620500` , `bi_11409236811878669265`.`不记名卡柴油消费次数占比` as `不记名卡柴油消费次数占比` , `bi_11409236811878669265`.`不记名卡天然气消费次数占比` as `不记名卡天然气消费次数占比` , `bi_11409236811878669265`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `bi_11409236811878669265`.`非油累计消费金额` as `非油累计消费金额` , `bi_11409236811878669265`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `bi_11409236811878669265`.`不记名卡累计充值金额` as `不记名卡累计充值金额` , `bi_11409236811878669265`.`单日充值次数过多次数` as `单日充值次数过多次数` , `bi_11409236811878669265`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `bi_11409236811878669265`.`同一班次消费的次数` as `同一班次消费的次数` , `bi_11409236811878669265`.`密码重置次数` as `密码重置次数` , `bi_11409236811878669265`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `bi_11409236811878669265`.`不记名卡余额充足时充钱的次数` as `余额充足时充钱的次数1957627260` , `bi_11409236811878669265`.`是否曾频繁转账` as `是否曾频繁转账` , `bi_11409236811878669265`.`是否异常加油卡` as `是否异常加油卡` , `bi_11409236811878669265`.`单位名称` as `单位名称` , `bi_11409236811878669265`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`不记名卡消费过加油站站点数量` as `不记名卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`不记名卡夜间消费总次数` as `不记名卡夜间消费总次数`,`不记名卡夜间消费总金额` as `不记名卡夜间消费总金额`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`不记名卡累计消费金额` as `不记名卡累计消费金额`,`不记名卡消费金额方差` as `不记名卡消费金额方差`,`不记名卡累计消费次数` as `不记名卡累计消费次数`,`不记名卡消费金额为小数次数` as `不记名卡消费金额为小数次数`,`不记名卡消费过油品类型数量` as `不记名卡消费过油品类型数量`,`不记名卡消费过汽油品类型数量` as `不记名卡消费过汽油品类型数量`,`不记名卡汽油消费次数占比` as `不记名卡汽油消费次数占比`,`不记名卡汽油单笔高额消费次数` as `不记名卡汽油单笔高额消费次数`,`不记名卡柴油消费次数占比` as `不记名卡柴油消费次数占比`,`不记名卡天然气消费次数占比` as `不记名卡天然气消费次数占比`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`不记名卡累计充值金额` as `不记名卡累计充值金额`,`单日充值次数过多次数` as `单日充值次数过多次数`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`不记名卡余额充足时充钱的次数` as `不记名卡余额充足时充钱的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`不记名卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`不记名卡夜间消费总次数`,`不记名卡夜间消费总金额`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`不记名卡累计消费金额`,`不记名卡消费金额方差`,`不记名卡累计消费次数`,`不记名卡消费金额为小数次数`,`不记名卡消费过油品类型数量`,`不记名卡消费过汽油品类型数量`,`不记名卡汽油消费次数占比`,`不记名卡汽油单笔高额消费次数`,`不记名卡柴油消费次数占比`,`不记名卡天然气消费次数占比`,`ic卡大额非油消费次数`,`非油累计消费金额`,`非油与成品油消费金额比例`,`不记名卡累计充值金额`,`单日充值次数过多次数`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`不记名卡余额充足时充钱的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,     
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `不记名卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`, 
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`, 
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`,
       `单日消费次数过多次数`, 
       `不记名卡夜间消费总次数`,
       `不记名卡夜间消费总金额`,
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`, 
       `睡眠次数`,
       `是否仍在睡眠`,
       `不记名卡累计消费金额`,
       `加油卡消费金额方差` `不记名卡消费金额方差`,
       `不记名卡累计消费次数`,
       `加油卡消费金额为小数次数` `不记名卡消费金额为小数次数`,
       `不记名卡消费过油品类型数量`,
       `不记名卡消费过汽油品类型数量`,
       `不记名卡汽油消费次数占比`,
       `不记名卡汽油单笔高额消费次数`,
       `不记名卡柴油消费次数占比`,
       `不记名卡天然气消费次数占比`,
       `IC卡大额非油消费次数`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `不记名卡累计充值金额`,
       `单日充值次数过多次数`, 
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `不记名卡余额充足时充钱的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM DW04_SJFX.APP_AUAP_YK_NN) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `bi_11409236811878669265`  
     ) `bi_2282682891841018241`
      limit 1200001 
I0825 11:46:58.367712 50864 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:46:58.369884 50864 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:46:58.371870 50864 coordinator.cc:349] starting execution on 2 backends for query_id=fc4f8c7db929bb7d:9d4b8ef300000000
I0825 11:46:58.374595 44904 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=fc4f8c7db929bb7d:9d4b8ef300000000
I0825 11:46:58.375380 44904 query-exec-mgr.cc:46] StartQueryFInstances() query_id=fc4f8c7db929bb7d:9d4b8ef300000000 coord=e4bdhpp025:22000
I0825 11:46:58.375911 44904 query-state.cc:178] Buffer pool limit for fc4f8c7db929bb7d:9d4b8ef300000000: 819200000
I0825 11:46:58.376425 44904 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query fc4f8c7db929bb7d:9d4b8ef300000000
I0825 11:46:58.398059 50864 coordinator.cc:362] started execution on 2 backends for query_id=fc4f8c7db929bb7d:9d4b8ef300000000
I0825 11:46:58.398224 51165 query-state.cc:300] StartFInstances(): query_id=fc4f8c7db929bb7d:9d4b8ef300000000 #instances=1
I0825 11:46:58.400830 51165 query-state.cc:313] descriptor table for query=fc4f8c7db929bb7d:9d4b8ef300000000
tuples:
Tuple(id=0 size=583 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=576 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=576 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=STRING col_path=[10] offset=32 null=(offset=576 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[48] offset=48 null=(offset=576 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=STRING col_path=[39] offset=64 null=(offset=576 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=BIGINT col_path=[29] offset=352 null=(offset=578 mask=40) slot_idx=22 field_idx=-1), Slot(id=6 type=STRING col_path=[11] offset=80 null=(offset=576 mask=20) slot_idx=5 field_idx=-1), Slot(id=7 type=STRING col_path=[12] offset=96 null=(offset=576 mask=40) slot_idx=6 field_idx=-1), Slot(id=8 type=STRING col_path=[13] offset=112 null=(offset=576 mask=80) slot_idx=7 field_idx=-1), Slot(id=9 type=STRING col_path=[38] offset=128 null=(offset=577 mask=1) slot_idx=8 field_idx=-1), Slot(id=10 type=STRING col_path=[43] offset=144 null=(offset=577 mask=2) slot_idx=9 field_idx=-1), Slot(id=11 type=TIMESTAMP col_path=[15] offset=160 null=(offset=577 mask=4) slot_idx=10 field_idx=-1), Slot(id=12 type=TIMESTAMP col_path=[16] offset=176 null=(offset=577 mask=8) slot_idx=11 field_idx=-1), Slot(id=13 type=DECIMAL(16,2) col_path=[2] offset=360 null=(offset=578 mask=80) slot_idx=23 field_idx=-1), Slot(id=14 type=DECIMAL(17,2) col_path=[3] offset=368 null=(offset=579 mask=1) slot_idx=24 field_idx=-1), Slot(id=15 type=DECIMAL(17,2) col_path=[4] offset=376 null=(offset=579 mask=2) slot_idx=25 field_idx=-1), Slot(id=16 type=DECIMAL(17,2) col_path=[5] offset=384 null=(offset=579 mask=4) slot_idx=26 field_idx=-1), Slot(id=17 type=DOUBLE col_path=[6] offset=392 null=(offset=579 mask=8) slot_idx=27 field_idx=-1), Slot(id=18 type=DECIMAL(27,2) col_path=[7] offset=192 null=(offset=577 mask=10) slot_idx=12 field_idx=-1), Slot(id=19 type=BIGINT col_path=[25] offset=400 null=(offset=579 mask=10) slot_idx=28 field_idx=-1), Slot(id=20 type=BIGINT col_path=[27] offset=408 null=(offset=579 mask=20) slot_idx=29 field_idx=-1), Slot(id=21 type=DECIMAL(26,2) col_path=[28] offset=208 null=(offset=577 mask=20) slot_idx=13 field_idx=-1), Slot(id=22 type=DOUBLE col_path=[8] offset=416 null=(offset=579 mask=40) slot_idx=30 field_idx=-1), Slot(id=23 type=DECIMAL(27,2) col_path=[9] offset=224 null=(offset=577 mask=40) slot_idx=14 field_idx=-1), Slot(id=24 type=BIGINT col_path=[26] offset=424 null=(offset=579 mask=80) slot_idx=31 field_idx=-1), Slot(id=25 type=BIGINT col_path=[17] offset=432 null=(offset=580 mask=1) slot_idx=32 field_idx=-1), Slot(id=26 type=INT col_path=[18] offset=568 null=(offset=582 mask=2) slot_idx=49 field_idx=-1), Slot(id=27 type=DECIMAL(26,2) col_path=[41] offset=240 null=(offset=577 mask=80) slot_idx=15 field_idx=-1), Slot(id=28 type=DOUBLE col_path=[49] offset=440 null=(offset=580 mask=2) slot_idx=33 field_idx=-1), Slot(id=29 type=BIGINT col_path=[42] offset=448 null=(offset=580 mask=4) slot_idx=34 field_idx=-1), Slot(id=30 type=BIGINT col_path=[44] offset=456 null=(offset=580 mask=8) slot_idx=35 field_idx=-1), Slot(id=31 type=BIGINT col_path=[21] offset=464 null=(offset=580 mask=10) slot_idx=36 field_idx=-1), Slot(id=32 type=BIGINT col_path=[22] offset=472 null=(offset=580 mask=20) slot_idx=37 field_idx=-1), Slot(id=33 type=DOUBLE col_path=[45] offset=480 null=(offset=580 mask=40) slot_idx=38 field_idx=-1), Slot(id=34 type=BIGINT col_path=[20] offset=488 null=(offset=580 mask=80) slot_idx=39 field_idx=-1), Slot(id=35 type=DOUBLE col_path=[46] offset=496 null=(offset=581 mask=1) slot_idx=40 field_idx=-1), Slot(id=36 type=DOUBLE col_path=[47] offset=504 null=(offset=581 mask=2) slot_idx=41 field_idx=-1), Slot(id=37 type=BIGINT col_path=[19] offset=512 null=(offset=581 mask=4) slot_idx=42 field_idx=-1), Slot(id=38 type=DECIMAL(26,2) col_path=[30] offset=256 null=(offset=578 mask=1) slot_idx=16 field_idx=-1), Slot(id=39 type=DECIMAL(31,4) col_path=[31] offset=272 null=(offset=578 mask=2) slot_idx=17 field_idx=-1), Slot(id=40 type=DECIMAL(26,2) col_path=[23] offset=288 null=(offset=578 mask=4) slot_idx=18 field_idx=-1), Slot(id=41 type=BIGINT col_path=[24] offset=520 null=(offset=581 mask=8) slot_idx=43 field_idx=-1), Slot(id=42 type=BIGINT col_path=[32] offset=528 null=(offset=581 mask=10) slot_idx=44 field_idx=-1), Slot(id=43 type=BIGINT col_path=[33] offset=536 null=(offset=581 mask=20) slot_idx=45 field_idx=-1), Slot(id=44 type=BIGINT col_path=[40] offset=544 null=(offset=581 mask=40) slot_idx=46 field_idx=-1), Slot(id=45 type=BIGINT col_path=[34] offset=552 null=(offset=581 mask=80) slot_idx=47 field_idx=-1), Slot(id=46 type=BIGINT col_path=[35] offset=560 null=(offset=582 mask=1) slot_idx=48 field_idx=-1), Slot(id=47 type=INT col_path=[36] offset=572 null=(offset=582 mask=4) slot_idx=50 field_idx=-1), Slot(id=48 type=STRING col_path=[50] offset=304 null=(offset=578 mask=8) slot_idx=19 field_idx=-1), Slot(id=49 type=STRING col_path=[14] offset=320 null=(offset=578 mask=10) slot_idx=20 field_idx=-1), Slot(id=50 type=STRING col_path=[37] offset=336 null=(offset=578 mask=20) slot_idx=21 field_idx=-1)] tuple_path=[])
W0825 11:46:58.411188 43831 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
I0825 11:46:58.413496 51167 query-state.cc:395] Executing instance. instance_id=fc4f8c7db929bb7d:9d4b8ef300000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=1 #in-flight=16
W0825 11:46:58.419232 43831 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064873_BP-1820042964-11.11.206.232-1548063025113
I0825 11:46:58.427789 51165 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fc4f8c7db929bb7d:9d4b8ef300000000 refcnt=3
I0825 11:46:58.428479 50864 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "}\xbb)\xb9}\x8cO\xfc\x00\x00\x00\x00\xf3\x8eK\x9d",
      02: secret (string) = "}\xbb)\xb9}\x8cO\xfc\x00\x00\x00\x00\xf3\x8eK\x9d",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:46:59.271582 50448 status.cc:125] Invalid query option: timeoutSeconds
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:46:59.273890 50448 impala-server.cc:1015] UnregisterQuery(): query_id=b64d387b0b67cc35:62bf458b00000000
I0825 11:46:59.274242 50448 impala-server.cc:1102] Cancel(): query_id=b64d387b0b67cc35:62bf458b00000000
I0825 11:46:59.281643 50448 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x99I\xc3\x86\x9fA\xa9\x88\xa3\xb9\x9e\xc4\x9c\xda?",
      02: secret (string) = "\a|DW\xd7\xddB\x0f\x8at>\xbe\x1b\a\xa7\xb7",
    },
  },
  02: statement (string) = "SET useSSL=false",
  04: runAsync (bool) = true,
}
I0825 11:46:59.282021 50448 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x99I\xc3\x86\x9fA\xa9\x88\xa3\xb9\x9e\xc4\x9c\xda?",
      02: secret (string) = "\a|DW\xd7\xddB\x0f\x8at>\xbe\x1b\a\xa7\xb7",
    },
  },
  02: statement (string) = "SET useSSL=false",
  04: runAsync (bool) = true,
}
I0825 11:46:59.284076 50448 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:46:59.299412 50448 Frontend.java:935] Analyzing query: SET useSSL=false
I0825 11:46:59.318706 50448 Frontend.java:947] Analysis finished.
I0825 11:46:59.816572 50864 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=fc4f8c7db929bb7d:9d4b8ef300000000
I0825 11:46:59.819072 50864 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[53] {
      [0] = TColumnDesc {
        01: columnName (string) = "bi_15159864404575209771",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "bi_5176736373764729517",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "bi_18002650512820288522",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "bi_10070664717213612371",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "bi_17363467753723988445",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "bi_17559908322177175193",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "bi_30169237570504987",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 6,
      },
      [7] = TColumnDesc {
        01: columnName (string) = "bi_630186766851260751",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 7,
      },
      [8] = TColumnDesc {
        01: columnName (string) = "bi_15231137875792296164",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 8,
      },
      [9] = TColumnDesc {
        01: columnName (string) = "bi_15621164357820908518",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 9,
      },
      [10] = TColumnDesc {
        01: columnName (string) = "bi_12117277212538675021",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 10,
      },
      [11] = TColumnDesc {
        01: columnName (string) = "bi_6646908465420298805",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 11,
      },
      [12] = TColumnDesc {
        01: columnName (string) = "bi_13530833546549329347",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 12,
      },
      [13] = TColumnDesc {
        01: columnName (string) = "bi_11273946998078465677",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 16,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 13,
      },
      [14] = TColumnDesc {
        01: columnName (string) = "bi_8288133923748336711",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 14,
      },
      [15] = TColumnDesc {
        01: columnName (string) = "bi_4970043801986327351",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 15,
      },
      [16] = TColumnDesc {
        01: columnName (string) = "bi_8381900821794444625",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 16,
      },
      [17] = TColumnDesc {
        01: columnName (string) = "bi_10723048596585302054",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 17,
      },
      [18] = TColumnDesc {
        01: columnName (string) = "bi_41819982784080953",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 27,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 18,
      },
      [19] = TColumnDesc {
        01: columnName (string) = "bi_12112238727142840682",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 19,
      },
      [20] = TColumnDesc {
        01: columnName (string) = "bi_3938683413919446579",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 20,
      },
      [21] = TColumnDesc {
        01: columnName (string) = "bi_12562378023438062621",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 21,
      },
      [22] = TColumnDesc {
        01: columnName (string) = "bi_6200430593887269742",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 22,
      },
      [23] = TColumnDesc {
        01: columnName (string) = "bi_1689351619663764928",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 27,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 23,
      },
      [24] = TColumnDesc {
        01: columnName (string) = "bi_12909975068497935338",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 24,
      },
      [25] = TColumnDesc {
        01: columnName (string) = "bi_11007498412015863178",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 25,
      },
      [26] = TColumnDesc {
        01: columnName (string) = "bi_12482824553037098532",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 26,
      },
      [27] = TColumnDesc {
        01: columnName (string) = "bi_4601843349518591292",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 27,
      },
      [28] = TColumnDesc {
        01: columnName (string) = "bi_2924531414258932610",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 28,
      },
      [29] = TColumnDesc {
        01: columnName (string) = "bi_5870083467319809789",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 29,
      },
      [30] = TColumnDesc {
        01: columnName (string) = "bi_3842164172086352148",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 30,
      },
      [31] = TColumnDesc {
        01: columnName (string) = "bi_806870660964728186",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 31,
      },
      [32] = TColumnDesc {
        01: columnName (string) = "bi_556036179544267082",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 32,
      },
      [33] = TColumnDesc {
        01: columnName (string) = "bi_1068488302117352384",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 33,
      },
      [34] = TColumnDesc {
        01: columnName (string) = "bi_8356278071803173785",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 34,
      },
      [35] = TColumnDesc {
        01: columnName (string) = "bi_5766421841800396638",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 35,
      },
      [36] = TColumnDesc {
        01: columnName (string) = "bi_14290961476284126012",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 36,
      },
      [37] = TColumnDesc {
        01: columnName (string) = "bi_992601592685606614",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 37,
      },
      [38] = TColumnDesc {
        01: columnName (string) = "bi_8276717807170841059",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 38,
      },
      [39] = TColumnDesc {
        01: columnName (string) = "bi_14967514132684380162",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 31,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 4,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 39,
      },
      [40] = TColumnDesc {
        01: columnName (string) = "bi_11701916747493263994",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 40,
      },
      [41] = TColumnDesc {
        01: columnName (string) = "bi_16449755606537913494",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 41,
      },
      [42] = TColumnDesc {
        01: columnName (string) = "bi_12225443660237330283",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 42,
      },
      [43] = TColumnDesc {
        01: columnName (string) = "bi_5256996930125776142",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 43,
      },
      [44] = TColumnDesc {
        01: columnName (string) = "bi_8414722834803604324",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 44,
      },
      [45] = TColumnDesc {
        01: columnName (string) = "bi_10212944947192418963",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 45,
      },
      [46] = TColumnDesc {
        01: columnName (string) = "bi_2466479945894447936",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 46,
      },
      [47] = TColumnDesc {
        01: columnName (string) = "bi_14279744686847475029",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 47,
      },
      [48] = TColumnDesc {
        01: columnName (string) = "bi_1040490846059638232",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 48,
      },
      [49] = TColumnDesc {
        01: columnName (string) = "bi_10101021918568318220",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 49,
      },
      [50] = TColumnDesc {
        01: columnName (string) = "bi_13138972180237352292",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 50,
      },
      [51] = TColumnDesc {
        01: columnName (string) = "bi_10651599939693506386",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 51,
      },
      [52] = TColumnDesc {
        01: columnName (string) = "bi_13164579150965645243",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 52,
      },
    },
  },
}
I0825 11:47:00.385452 45241 coordinator.cc:689] Backend completed:  host=e4bdhpp014:22000 remaining=1 query_id=c14076ebcf238a0e:9f4f276800000000
I0825 11:47:00.386036 45241 coordinator-backend-state.cc:226] query_id=c14076ebcf238a0e:9f4f276800000000: first in-progress backend: e4bdhpp025:22000
I0825 11:47:00.446498 50299 coordinator.cc:522] Coordinator waiting for backends to finish, 1 remaining. query_id=c14076ebcf238a0e:9f4f276800000000
I0825 11:47:00.454914 50299 coordinator.cc:527] All backends finished successfully. query_id=c14076ebcf238a0e:9f4f276800000000
I0825 11:47:00.455430 50299 coordinator.cc:783] Release admission control resources for query_id=c14076ebcf238a0e:9f4f276800000000
I0825 11:47:00.456748 50347 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=c14076ebcf238a0e:9f4f276800000000, node=1
I0825 11:47:00.458806 50347 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=c14076ebcf238a0e:9f4f276800000000 node_id=1
I0825 11:47:00.466672 50347 query-state.cc:403] Instance completed. instance_id=c14076ebcf238a0e:9f4f276800000000 #in-flight=15 status=OK
I0825 11:47:00.467388 50347 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=c14076ebcf238a0e:9f4f276800000000 refcnt=2
I0825 11:47:00.510627 50299 impala-hs2-server.cc:683] CloseOperation(): query_id=c14076ebcf238a0e:9f4f276800000000
I0825 11:47:00.513707 50299 impala-server.cc:1015] UnregisterQuery(): query_id=c14076ebcf238a0e:9f4f276800000000
I0825 11:47:00.514106 50299 impala-server.cc:1102] Cancel(): query_id=c14076ebcf238a0e:9f4f276800000000
I0825 11:47:00.514370 50299 coordinator.cc:629] Cancel() query_id=c14076ebcf238a0e:9f4f276800000000
I0825 11:47:00.514529 50299 coordinator.cc:639] CancelBackends() query_id=c14076ebcf238a0e:9f4f276800000000, tried to cancel 0 backends
I0825 11:47:00.522883 50299 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=c14076ebcf238a0e:9f4f276800000000 refcnt=1
I0825 11:47:01.324977 51258 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:01.326622 51258 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:01.343020 51259 query-exec-mgr.cc:95] QueryState: query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:01.349797 51259 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:01.362821 51260 query-exec-mgr.cc:95] QueryState: query_id=e54db18c4c127046:4f5d18aa00000000 refcnt=3
I0825 11:47:01.363670 51260 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e54db18c4c127046:4f5d18aa00000000 refcnt=3
I0825 11:47:01.376855 51261 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:01.380678 51261 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:01.391013 51262 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:01.405795 51262 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:01.432832 50452 query-exec-mgr.cc:95] QueryState: query_id=fc4f8c7db929bb7d:9d4b8ef300000000 refcnt=3
I0825 11:47:01.433452 50452 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fc4f8c7db929bb7d:9d4b8ef300000000 refcnt=3
I0825 11:47:01.847815 44132 thrift-util.cc:123] TAcceptQueueServer: Caught TException: No more data to read.
I0825 11:47:01.913972 50448 status.cc:125] Invalid query option: useSSL
    @           0x9e215a  impala::Status::Status()
    @           0xcaf893  impala::SetQueryOption()
    @           0xccaba4  impala::ClientRequestState::Exec()
    @           0xc87877  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:47:01.959009 50448 impala-server.cc:1015] UnregisterQuery(): query_id=9e4bd3014e5054fb:7134a84f00000000
I0825 11:47:01.959578 50448 impala-server.cc:1102] Cancel(): query_id=9e4bd3014e5054fb:7134a84f00000000
I0825 11:47:01.963847 50448 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x99I\xc3\x86\x9fA\xa9\x88\xa3\xb9\x9e\xc4\x9c\xda?",
      02: secret (string) = "\a|DW\xd7\xddB\x0f\x8at>\xbe\x1b\a\xa7\xb7",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:47:02.077144 50448 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x99I\xc3\x86\x9fA\xa9\x88\xa3\xb9\x9e\xc4\x9c\xda?",
      02: secret (string) = "\a|DW\xd7\xddB\x0f\x8at>\xbe\x1b\a\xa7\xb7",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:47:02.078099 50448 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:02.102357 50448 Frontend.java:935] Analyzing query: DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`
I0825 11:47:02.117944 50448 Frontend.java:947] Analysis finished.
I0825 11:47:02.187378 50448 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xbdV\xb0WSXI\xa9\x00\x00\x00\x00Ou\xb8\xe0",
      02: secret (string) = "\xbdV\xb0WSXI\xa9\x00\x00\x00\x00Ou\xb8\xe0",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:47:02.190922 50448 impala-hs2-server.cc:683] CloseOperation(): query_id=a949585357b056bd:e0b8754f00000000
I0825 11:47:02.191339 50448 impala-server.cc:1015] UnregisterQuery(): query_id=a949585357b056bd:e0b8754f00000000
I0825 11:47:02.191696 50448 impala-server.cc:1102] Cancel(): query_id=a949585357b056bd:e0b8754f00000000
I0825 11:47:02.196259 50448 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x99I\xc3\x86\x9fA\xa9\x88\xa3\xb9\x9e\xc4\x9c\xda?",
      02: secret (string) = "\a|DW\xd7\xddB\x0f\x8at>\xbe\x1b\a\xa7\xb7",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:47:02.196884 50448 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x99I\xc3\x86\x9fA\xa9\x88\xa3\xb9\x9e\xc4\x9c\xda?",
      02: secret (string) = "\a|DW\xd7\xddB\x0f\x8at>\xbe\x1b\a\xa7\xb7",
    },
  },
  02: statement (string) = "DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`",
  04: runAsync (bool) = true,
}
I0825 11:47:02.197918 50448 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:02.210320 50448 Frontend.java:935] Analyzing query: DESCRIBE `DW04`.`APP_GSMS_HOS_CGDD`
I0825 11:47:02.212893 50448 Frontend.java:947] Analysis finished.
I0825 11:47:02.288091 50448 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "/~\x87\x16\xfd\x8aIf\x00\x00\x00\x00]\xdc\vg",
      02: secret (string) = "/~\x87\x16\xfd\x8aIf\x00\x00\x00\x00]\xdc\vg",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:47:02.293124 50448 impala-hs2-server.cc:683] CloseOperation(): query_id=66498afd16877e2f:670bdc5d00000000
I0825 11:47:02.293368 50448 impala-server.cc:1015] UnregisterQuery(): query_id=66498afd16877e2f:670bdc5d00000000
I0825 11:47:02.293762 50448 impala-server.cc:1102] Cancel(): query_id=66498afd16877e2f:670bdc5d00000000
I0825 11:47:02.302140 50448 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x99I\xc3\x86\x9fA\xa9\x88\xa3\xb9\x9e\xc4\x9c\xda?",
      02: secret (string) = "\a|DW\xd7\xddB\x0f\x8at>\xbe\x1b\a\xa7\xb7",
    },
  },
  02: statement (string) = "SELECT `temp`.`\xe9[...](2930)",
  04: runAsync (bool) = true,
}
I0825 11:47:02.303977 50448 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x99I\xc3\x86\x9fA\xa9\x88\xa3\xb9\x9e\xc4\x9c\xda?",
      02: secret (string) = "\a|DW\xd7\xddB\x0f\x8at>\xbe\x1b\a\xa7\xb7",
    },
  },
  02: statement (string) = "SELECT `temp`.`\xe9[...](2930)",
  04: runAsync (bool) = true,
}
I0825 11:47:02.305469 50448 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:02.326912 50448 Frontend.java:935] Analyzing query: SELECT `temp`.`采购订单类型`, `temp`.`采购订单日期`, `temp`.`供应商名称`, `temp`.`收货站点`, `temp`.`站点名称`, `temp`.`商品描述`, `temp`.`商品类目描述`, `temp`.`订单数量`, `temp`.`净价`, `temp`.`订单金额_不含税`, `temp`.`是否完成交货`, `temp`.`该行是否被删除`, `temp`.`该行是否退货` FROM (SELECT `temp_sub_query_table`.`采购订单类型`, `temp_sub_query_table`.`采购订单日期`, `temp_sub_query_table`.`供应商名称`, `temp_sub_query_table`.`收货站点`, `temp_sub_query_table`.`站点名称`, `temp_sub_query_table`.`商品描述`, `temp_sub_query_table`.`商品类目描述`, `temp_sub_query_table`.`订单数量`, `temp_sub_query_table`.`净价`, `temp_sub_query_table`.`订单金额_不含税`, `temp_sub_query_table`.`是否完成交货`, `temp_sub_query_table`.`该行是否被删除`, `temp_sub_query_table`.`该行是否退货` FROM (SELECT `APP_GSMS_HOS_CGDD`.`采购订单编号`, `APP_GSMS_HOS_CGDD`.`采购订单行项目`, `APP_GSMS_HOS_CGDD`.`采购订单类型`, `APP_GSMS_HOS_CGDD`.`采购订单类型描述`, `APP_GSMS_HOS_CGDD`.`采购订单日期`, `APP_GSMS_HOS_CGDD`.`供应商编码`, `APP_GSMS_HOS_CGDD`.`供应商名称`, `APP_GSMS_HOS_CGDD`.`收货站点`, `APP_GSMS_HOS_CGDD`.`站点名称`, `APP_GSMS_HOS_CGDD`.`商品编码`, `APP_GSMS_HOS_CGDD`.`商品描述`, `APP_GSMS_HOS_CGDD`.`商品类目`, `APP_GSMS_HOS_CGDD`.`商品类目描述`, `APP_GSMS_HOS_CGDD`.`订单单位`, `APP_GSMS_HOS_CGDD`.`订单数量`, `APP_GSMS_HOS_CGDD`.`净价`, `APP_GSMS_HOS_CGDD`.`订单金额_不含税`, `APP_GSMS_HOS_CGDD`.`订单金额_含税`, `APP_GSMS_HOS_CGDD`.`税率`, `APP_GSMS_HOS_CGDD`.`税额`, `APP_GSMS_HOS_CGDD`.`是否完成交货`, `APP_GSMS_HOS_CGDD`.`是否开具发票`, `APP_GSMS_HOS_CGDD`.`该行是否被删除`, `APP_GSMS_HOS_CGDD`.`该行是否退货`, `APP_GSMS_HOS_CGDD`.`所属`, `APP_GSMS_HOS_CGDD`.`单位名称` FROM `DW04`.`APP_GSMS_HOS_CGDD`) AS temp_sub_query_table WHERE (( `temp_sub_query_table`.`单位名称` IN ('乌鲁木齐石化分公司', '独山子石化分公司', '中国石油集团西部钻探工程有限公司', '中国石油运输有限公司', '西部管道分公司', '新疆油田分公司', '吐哈油田分公司', '塔里木油田分公司', '中石油新疆销售有限公司', '中石油克拉玛依石化有限责任公司', '中国石油集团工程有限公司北京项目管理分公司') ) AND ((`temp_sub_query_table`.`订单金额_不含税` < 10000000) AND (( `temp_sub_query_table`.`采购订单类型` IN ('Z003', 'Z005') ) AND (( `temp_sub_query_table`.`该行是否被删除` IN (' ') ) AND (( `temp_sub_query_table`.`该行是否退货` IN ('否') ) AND (( `temp_sub_query_table`.`是否完成交货` IN ('是') ) AND ((`temp_sub_query_table`.`商品类目描述` = '白酒') AND (`temp_sub_query_table`.`商品描述` = '贵州迎宾酒 点酱 1*4'))))))))) AS temp
I0825 11:47:02.489364 50448 Frontend.java:947] Analysis finished.
I0825 11:47:02.507166 50448 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:47:02.508142 50448 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:47:02.515015 50448 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:47:02.515870 50448 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:47:02.516561 50448 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:47:02.518013 50448 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:47:02.519809 50448 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:47:02.520047 50448 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:47:02.520313 50448 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:47:02.521497 50448 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:47:02.522411 50448 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:47:02.524394 50448 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:47:02.525221 50448 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:47:02.525713 50448 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:47:02.526321 50448 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:47:02.527256 50448 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:47:02.547032 50448 admission-controller.cc:508] Schedule for id=624e79009a7bc60a:a73c218100000000 in pool_name=root.default cluster_mem_needed=40.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
I0825 11:47:02.557137 50448 admission-controller.cc:513] Stats: agg_num_running=9, agg_num_queued=0, agg_mem_reserved=336.00 GB,  local_host(local_mem_admitted=160.00 GB, num_admitted_running=4, num_queued=0, backend_mem_reserved=72.00 GB)
I0825 11:47:02.561234 50448 admission-controller.cc:529] Admitted query id=624e79009a7bc60a:a73c218100000000
I0825 11:47:02.561537 50448 coordinator.cc:93] Exec() query_id=624e79009a7bc60a:a73c218100000000 stmt=SELECT `temp`.`采购订单类型`, `temp`.`采购订单日期`, `temp`.`供应商名称`, `temp`.`收货站点`, `temp`.`站点名称`, `temp`.`商品描述`, `temp`.`商品类目描述`, `temp`.`订单数量`, `temp`.`净价`, `temp`.`订单金额_不含税`, `temp`.`是否完成交货`, `temp`.`该行是否被删除`, `temp`.`该行是否退货` FROM (SELECT `temp_sub_query_table`.`采购订单类型`, `temp_sub_query_table`.`采购订单日期`, `temp_sub_query_table`.`供应商名称`, `temp_sub_query_table`.`收货站点`, `temp_sub_query_table`.`站点名称`, `temp_sub_query_table`.`商品描述`, `temp_sub_query_table`.`商品类目描述`, `temp_sub_query_table`.`订单数量`, `temp_sub_query_table`.`净价`, `temp_sub_query_table`.`订单金额_不含税`, `temp_sub_query_table`.`是否完成交货`, `temp_sub_query_table`.`该行是否被删除`, `temp_sub_query_table`.`该行是否退货` FROM (SELECT `APP_GSMS_HOS_CGDD`.`采购订单编号`, `APP_GSMS_HOS_CGDD`.`采购订单行项目`, `APP_GSMS_HOS_CGDD`.`采购订单类型`, `APP_GSMS_HOS_CGDD`.`采购订单类型描述`, `APP_GSMS_HOS_CGDD`.`采购订单日期`, `APP_GSMS_HOS_CGDD`.`供应商编码`, `APP_GSMS_HOS_CGDD`.`供应商名称`, `APP_GSMS_HOS_CGDD`.`收货站点`, `APP_GSMS_HOS_CGDD`.`站点名称`, `APP_GSMS_HOS_CGDD`.`商品编码`, `APP_GSMS_HOS_CGDD`.`商品描述`, `APP_GSMS_HOS_CGDD`.`商品类目`, `APP_GSMS_HOS_CGDD`.`商品类目描述`, `APP_GSMS_HOS_CGDD`.`订单单位`, `APP_GSMS_HOS_CGDD`.`订单数量`, `APP_GSMS_HOS_CGDD`.`净价`, `APP_GSMS_HOS_CGDD`.`订单金额_不含税`, `APP_GSMS_HOS_CGDD`.`订单金额_含税`, `APP_GSMS_HOS_CGDD`.`税率`, `APP_GSMS_HOS_CGDD`.`税额`, `APP_GSMS_HOS_CGDD`.`是否完成交货`, `APP_GSMS_HOS_CGDD`.`是否开具发票`, `APP_GSMS_HOS_CGDD`.`该行是否被删除`, `APP_GSMS_HOS_CGDD`.`该行是否退货`, `APP_GSMS_HOS_CGDD`.`所属`, `APP_GSMS_HOS_CGDD`.`单位名称` FROM `DW04`.`APP_GSMS_HOS_CGDD`) AS temp_sub_query_table WHERE (( `temp_sub_query_table`.`单位名称` IN ('乌鲁木齐石化分公司', '独山子石化分公司', '中国石油集团西部钻探工程有限公司', '中国石油运输有限公司', '西部管道分公司', '新疆油田分公司', '吐哈油田分公司', '塔里木油田分公司', '中石油新疆销售有限公司', '中石油克拉玛依石化有限责任公司', '中国石油集团工程有限公司北京项目管理分公司') ) AND ((`temp_sub_query_table`.`订单金额_不含税` < 10000000) AND (( `temp_sub_query_table`.`采购订单类型` IN ('Z003', 'Z005') ) AND (( `temp_sub_query_table`.`该行是否被删除` IN (' ') ) AND (( `temp_sub_query_table`.`该行是否退货` IN ('否') ) AND (( `temp_sub_query_table`.`是否完成交货` IN ('是') ) AND ((`temp_sub_query_table`.`商品类目描述` = '白酒') AND (`temp_sub_query_table`.`商品描述` = '贵州迎宾酒 点酱 1*4'))))))))) AS temp
I0825 11:47:02.566483 50448 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:47:02.567080 50448 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:47:02.570394 50448 coordinator.cc:349] starting execution on 5 backends for query_id=624e79009a7bc60a:a73c218100000000
I0825 11:47:02.578845 44904 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=624e79009a7bc60a:a73c218100000000
I0825 11:47:02.579496 44904 query-exec-mgr.cc:46] StartQueryFInstances() query_id=624e79009a7bc60a:a73c218100000000 coord=e4bdhpp025:22000
I0825 11:47:02.580034 44904 query-state.cc:178] Buffer pool limit for 624e79009a7bc60a:a73c218100000000: 6871947673
I0825 11:47:02.580927 44904 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 624e79009a7bc60a:a73c218100000000
I0825 11:47:02.597124 51307 query-state.cc:300] StartFInstances(): query_id=624e79009a7bc60a:a73c218100000000 #instances=2
I0825 11:47:02.598659 51307 query-state.cc:313] descriptor table for query=624e79009a7bc60a:a73c218100000000
tuples:
Tuple(id=3 size=234 slots=[Slot(id=65 type=STRING col_path=[20] offset=0 null=(offset=232 mask=1) slot_idx=0 field_idx=-1), Slot(id=66 type=STRING col_path=[20] offset=16 null=(offset=232 mask=2) slot_idx=1 field_idx=-1), Slot(id=67 type=DECIMAL(16,2) col_path=[16] offset=224 null=(offset=233 mask=40) slot_idx=14 field_idx=-1), Slot(id=68 type=STRING col_path=[22] offset=32 null=(offset=232 mask=4) slot_idx=2 field_idx=-1), Slot(id=69 type=STRING col_path=[22] offset=48 null=(offset=232 mask=8) slot_idx=3 field_idx=-1), Slot(id=70 type=STRING col_path=[23] offset=64 null=(offset=232 mask=10) slot_idx=4 field_idx=-1), Slot(id=71 type=STRING col_path=[23] offset=80 null=(offset=232 mask=20) slot_idx=5 field_idx=-1), Slot(id=72 type=STRING col_path=[2] offset=96 null=(offset=232 mask=40) slot_idx=6 field_idx=-1), Slot(id=73 type=STRING col_path=[2] offset=112 null=(offset=232 mask=80) slot_idx=7 field_idx=-1), Slot(id=74 type=STRING col_path=[12] offset=128 null=(offset=233 mask=1) slot_idx=8 field_idx=-1), Slot(id=75 type=STRING col_path=[12] offset=144 null=(offset=233 mask=2) slot_idx=9 field_idx=-1), Slot(id=76 type=STRING col_path=[10] offset=160 null=(offset=233 mask=4) slot_idx=10 field_idx=-1), Slot(id=77 type=STRING col_path=[10] offset=176 null=(offset=233 mask=8) slot_idx=11 field_idx=-1), Slot(id=78 type=STRING col_path=[25] offset=192 null=(offset=233 mask=10) slot_idx=12 field_idx=-1), Slot(id=79 type=STRING col_path=[25] offset=208 null=(offset=233 mask=20) slot_idx=13 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=202 slots=[Slot(id=2 type=STRING col_path=[2] offset=0 null=(offset=200 mask=1) slot_idx=0 field_idx=-1), Slot(id=4 type=TIMESTAMP col_path=[4] offset=16 null=(offset=200 mask=2) slot_idx=1 field_idx=-1), Slot(id=6 type=STRING col_path=[6] offset=32 null=(offset=200 mask=4) slot_idx=2 field_idx=-1), Slot(id=7 type=STRING col_path=[7] offset=48 null=(offset=200 mask=8) slot_idx=3 field_idx=-1), Slot(id=8 type=STRING col_path=[8] offset=64 null=(offset=200 mask=10) slot_idx=4 field_idx=-1), Slot(id=10 type=STRING col_path=[10] offset=80 null=(offset=200 mask=20) slot_idx=5 field_idx=-1), Slot(id=12 type=STRING col_path=[12] offset=96 null=(offset=200 mask=40) slot_idx=6 field_idx=-1), Slot(id=14 type=DECIMAL(16,3) col_path=[14] offset=176 null=(offset=201 mask=8) slot_idx=11 field_idx=-1), Slot(id=15 type=DECIMAL(16,2) col_path=[15] offset=184 null=(offset=201 mask=10) slot_idx=12 field_idx=-1), Slot(id=16 type=DECIMAL(16,2) col_path=[16] offset=192 null=(offset=201 mask=20) slot_idx=13 field_idx=-1), Slot(id=20 type=STRING col_path=[20] offset=112 null=(offset=200 mask=80) slot_idx=7 field_idx=-1), Slot(id=22 type=STRING col_path=[22] offset=128 null=(offset=201 mask=1) slot_idx=8 field_idx=-1), Slot(id=23 type=STRING col_path=[23] offset=144 null=(offset=201 mask=2) slot_idx=9 field_idx=-1), Slot(id=25 type=STRING col_path=[25] offset=160 null=(offset=201 mask=4) slot_idx=10 field_idx=-1)] tuple_path=[])
I0825 11:47:02.597667 50448 coordinator.cc:362] started execution on 5 backends for query_id=624e79009a7bc60a:a73c218100000000
I0825 11:47:02.609452 51309 query-state.cc:395] Executing instance. instance_id=624e79009a7bc60a:a73c218100000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=4 #in-flight=16
I0825 11:47:02.622872 51310 query-state.cc:395] Executing instance. instance_id=624e79009a7bc60a:a73c218100000002 fragment_idx=1 per_fragment_instance_idx=1 coord_state_idx=4 #in-flight=17
I0825 11:47:02.625422 51310 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '624e79009a7bc60a:a73c218100000002': 190
I0825 11:47:02.637892 51307 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:02.650418 50448 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\n\xc6{\x9a\x00yNb\x00\x00\x00\x00\x81!<\xa7",
      02: secret (string) = "\n\xc6{\x9a\x00yNb\x00\x00\x00\x00\x81!<\xa7",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
W0825 11:47:03.223881 43832 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:47:03.225666 43832 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064614_BP-1820042964-11.11.206.232-1548063025113
W0825 11:47:03.230149 43827 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:47:03.231745 43827 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064589_BP-1820042964-11.11.206.232-1548063025113
W0825 11:47:03.233301 43831 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:47:03.234661 43831 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064873_BP-1820042964-11.11.206.232-1548063025113
W0825 11:47:03.238431 43834 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:47:03.239640 43834 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064427_BP-1820042964-11.11.206.232-1548063025113
W0825 11:47:03.242699 43828 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:47:03.245229 43828 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064312_BP-1820042964-11.11.206.232-1548063025113
W0825 11:47:03.248378 43833 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:47:03.249080 43833 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064223_BP-1820042964-11.11.206.232-1548063025113
W0825 11:47:03.249953 43830 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:47:03.250849 43830 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064597_BP-1820042964-11.11.206.232-1548063025113
I0825 11:47:03.490829 50417 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=cd4c8d2a10c6a92f:533303c600000000
I0825 11:47:03.492591 50417 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[7] {
      [0] = TColumnDesc {
        01: columnName (string) = "\xe9\x87\x87\xe8\xb4\xad\xe8\xae\xa2\xe5\x8d\x95\xe7\xb1\xbb\xe5\x9e\x8b",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "\xe9\x87\x87\xe8\xb4\xad\xe8\xae\xa2\xe5\x8d\x95\xe6\x97\xa5\xe6\x9c\x9f",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "\xe6\x94\xb6\xe8\xb4\xa7\xe7\xab\x99\xe7\x82\xb9",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "\xe8\xae\xa2\xe5\x8d\x95\xe9\x87\x91\xe9\xa2\x9d_\xe4\xb8\x8d\xe5\x90\xab\xe7\xa8\x8e",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 16,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "\xe6\x98\xaf\xe5\x90\xa6\xe5\xae\x8c\xe6\x88\x90\xe4\xba\xa4\xe8\xb4\xa7",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "\xe8\xaf\xa5\xe8\xa1\x8c\xe6\x98\xaf\xe5\x90\xa6\xe8\xa2\xab\xe5\x88\xa0\xe9\x99\xa4",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "\xe8\xaf\xa5\xe8\xa1\x8c\xe6\x98\xaf\xe5\x90\xa6\xe9\x80\x80\xe8\xb4\xa7",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 6,
      },
    },
  },
}
I0825 11:47:03.715041 44439 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=cd48b8c9bb5c6ee3:fdb9f14d00000000
I0825 11:47:03.715734 44439 query-exec-mgr.cc:46] StartQueryFInstances() query_id=cd48b8c9bb5c6ee3:fdb9f14d00000000 coord=e4bdhpp023:22000
I0825 11:47:03.716723 44439 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:47:03.719787 44439 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:47:03.720786 44439 query-state.cc:178] Buffer pool limit for cd48b8c9bb5c6ee3:fdb9f14d00000000: 6871947673
I0825 11:47:03.725522 44439 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query cd48b8c9bb5c6ee3:fdb9f14d00000000
I0825 11:47:03.741624 51439 query-state.cc:300] StartFInstances(): query_id=cd48b8c9bb5c6ee3:fdb9f14d00000000 #instances=1
I0825 11:47:03.744693 51439 query-state.cc:313] descriptor table for query=cd48b8c9bb5c6ee3:fdb9f14d00000000
tuples:
Tuple(id=3 size=202 slots=[Slot(id=60 type=STRING col_path=[20] offset=0 null=(offset=200 mask=1) slot_idx=0 field_idx=-1), Slot(id=61 type=STRING col_path=[20] offset=16 null=(offset=200 mask=2) slot_idx=1 field_idx=-1), Slot(id=62 type=DECIMAL(16,2) col_path=[16] offset=192 null=(offset=201 mask=10) slot_idx=12 field_idx=-1), Slot(id=63 type=STRING col_path=[22] offset=32 null=(offset=200 mask=4) slot_idx=2 field_idx=-1), Slot(id=64 type=STRING col_path=[22] offset=48 null=(offset=200 mask=8) slot_idx=3 field_idx=-1), Slot(id=65 type=STRING col_path=[23] offset=64 null=(offset=200 mask=10) slot_idx=4 field_idx=-1), Slot(id=66 type=STRING col_path=[23] offset=80 null=(offset=200 mask=20) slot_idx=5 field_idx=-1), Slot(id=67 type=STRING col_path=[2] offset=96 null=(offset=200 mask=40) slot_idx=6 field_idx=-1), Slot(id=68 type=STRING col_path=[2] offset=112 null=(offset=200 mask=80) slot_idx=7 field_idx=-1), Slot(id=69 type=STRING col_path=[12] offset=128 null=(offset=201 mask=1) slot_idx=8 field_idx=-1), Slot(id=70 type=STRING col_path=[12] offset=144 null=(offset=201 mask=2) slot_idx=9 field_idx=-1), Slot(id=71 type=STRING col_path=[25] offset=160 null=(offset=201 mask=4) slot_idx=10 field_idx=-1), Slot(id=72 type=STRING col_path=[25] offset=176 null=(offset=201 mask=8) slot_idx=11 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=138 slots=[Slot(id=2 type=STRING col_path=[2] offset=0 null=(offset=136 mask=1) slot_idx=0 field_idx=-1), Slot(id=4 type=TIMESTAMP col_path=[4] offset=16 null=(offset=136 mask=2) slot_idx=1 field_idx=-1), Slot(id=10 type=STRING col_path=[10] offset=32 null=(offset=136 mask=4) slot_idx=2 field_idx=-1), Slot(id=12 type=STRING col_path=[12] offset=48 null=(offset=136 mask=8) slot_idx=3 field_idx=-1), Slot(id=16 type=DECIMAL(16,2) col_path=[16] offset=128 null=(offset=137 mask=1) slot_idx=8 field_idx=-1), Slot(id=20 type=STRING col_path=[20] offset=64 null=(offset=136 mask=10) slot_idx=4 field_idx=-1), Slot(id=22 type=STRING col_path=[22] offset=80 null=(offset=136 mask=20) slot_idx=5 field_idx=-1), Slot(id=23 type=STRING col_path=[23] offset=96 null=(offset=136 mask=40) slot_idx=6 field_idx=-1), Slot(id=25 type=STRING col_path=[25] offset=112 null=(offset=136 mask=80) slot_idx=7 field_idx=-1)] tuple_path=[])
I0825 11:47:03.751955 51442 query-state.cc:395] Executing instance. instance_id=cd48b8c9bb5c6ee3:fdb9f14d00000002 fragment_idx=1 per_fragment_instance_idx=1 coord_state_idx=4 #in-flight=18
I0825 11:47:03.754774 51442 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance 'cd48b8c9bb5c6ee3:fdb9f14d00000002': 190
I0825 11:47:03.785187 51439 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd48b8c9bb5c6ee3:fdb9f14d00000000 refcnt=2
W0825 11:47:04.375656 43831 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:47:04.378015 43830 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:47:04.379813 43828 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:47:04.381810 43827 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:47:04.382802 43832 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:47:04.383992 43833 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:47:04.386597 43834 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:47:04.388811 43831 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064873_BP-1820042964-11.11.206.232-1548063025113
W0825 11:47:04.392742 43830 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064597_BP-1820042964-11.11.206.232-1548063025113
W0825 11:47:04.396000 43828 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064312_BP-1820042964-11.11.206.232-1548063025113
W0825 11:47:04.396972 43827 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064589_BP-1820042964-11.11.206.232-1548063025113
W0825 11:47:04.402799 43832 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064614_BP-1820042964-11.11.206.232-1548063025113
W0825 11:47:04.407904 43833 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064223_BP-1820042964-11.11.206.232-1548063025113
W0825 11:47:04.410629 43834 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064427_BP-1820042964-11.11.206.232-1548063025113
I0825 11:47:04.499783 51262 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:04.500571 51262 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:04.526420 51496 query-exec-mgr.cc:95] QueryState: query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:04.529727 51496 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:04.544337 51496 query-exec-mgr.cc:95] QueryState: query_id=e54db18c4c127046:4f5d18aa00000000 refcnt=3
I0825 11:47:04.551538 51496 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e54db18c4c127046:4f5d18aa00000000 refcnt=3
I0825 11:47:04.560245 51494 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:04.561097 51494 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:04.577656 51502 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:04.581118 51502 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:04.593999 51496 query-exec-mgr.cc:95] QueryState: query_id=fc4f8c7db929bb7d:9d4b8ef300000000 refcnt=3
I0825 11:47:04.597563 51496 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fc4f8c7db929bb7d:9d4b8ef300000000 refcnt=3
I0825 11:47:04.606454 51262 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:04.608541 51262 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:06.389863 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:47:06.567382 51573 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:47:06.598891 51573 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "Ti\xd1\xa9\xd8,B\n\xb8\xbdP\xe9\xcc\x8d)\xfc",
      02: secret (string) = "\x0e\xaa\x91\x12\x1c\xf2E\xdb\xbca1z\x03\xebb\xcf",
    },
  },
  02: statement (string) = "use dw20",
  04: runAsync (bool) = true,
}
I0825 11:47:06.599851 51573 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "Ti\xd1\xa9\xd8,B\n\xb8\xbdP\xe9\xcc\x8d)\xfc",
      02: secret (string) = "\x0e\xaa\x91\x12\x1c\xf2E\xdb\xbca1z\x03\xebb\xcf",
    },
  },
  02: statement (string) = "use dw20",
  04: runAsync (bool) = true,
}
I0825 11:47:06.612294 51573 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:06.661340 51573 Frontend.java:935] Analyzing query: use dw20
I0825 11:47:06.662604 51573 Frontend.java:947] Analysis finished.
I0825 11:47:06.784668 51573 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x96\x02\xf9'\x9ayL\x8c\x00\x00\x00\x00\xd6\xcdq\xe0",
      02: secret (string) = "\x96\x02\xf9'\x9ayL\x8c\x00\x00\x00\x00\xd6\xcdq\xe0",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:47:06.793664 51573 impala-hs2-server.cc:683] CloseOperation(): query_id=8c4c799a27f90296:e071cdd600000000
I0825 11:47:06.803855 51573 impala-server.cc:1015] UnregisterQuery(): query_id=8c4c799a27f90296:e071cdd600000000
I0825 11:47:06.804234 51573 impala-server.cc:1102] Cancel(): query_id=8c4c799a27f90296:e071cdd600000000
I0825 11:47:06.835147 51573 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "Ti\xd1\xa9\xd8,B\n\xb8\xbdP\xe9\xcc\x8d)\xfc",
      02: secret (string) = "\x0e\xaa\x91\x12\x1c\xf2E\xdb\xbca1z\x03\xebb\xcf",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:47:06.844843 51573 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "Ti\xd1\xa9\xd8,B\n\xb8\xbdP\xe9\xcc\x8d)\xfc",
      02: secret (string) = "\x0e\xaa\x91\x12\x1c\xf2E\xdb\xbca1z\x03\xebb\xcf",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:47:06.846323 51573 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:06.878679 51573 Frontend.java:935] Analyzing query: set mem_limit='8g'
I0825 11:47:06.879870 51573 Frontend.java:947] Analysis finished.
I0825 11:47:06.899049 51573 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\r\x04\xb76!\xe5I\x03\x00\x00\x00\x00\x8f\xb6\xb1\x18",
      02: secret (string) = "\r\x04\xb76!\xe5I\x03\x00\x00\x00\x00\x8f\xb6\xb1\x18",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:47:06.906409 51573 impala-hs2-server.cc:683] CloseOperation(): query_id=349e52136b7040d:18b1b68f00000000
I0825 11:47:06.906865 51573 impala-server.cc:1015] UnregisterQuery(): query_id=349e52136b7040d:18b1b68f00000000
I0825 11:47:06.907083 51573 impala-server.cc:1102] Cancel(): query_id=349e52136b7040d:18b1b68f00000000
I0825 11:47:06.917279 51573 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "Ti\xd1\xa9\xd8,B\n\xb8\xbdP\xe9\xcc\x8d)\xfc",
      02: secret (string) = "\x0e\xaa\x91\x12\x1c\xf2E\xdb\xbca1z\x03\xebb\xcf",
    },
  },
  02: statement (string) = "DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`",
  04: runAsync (bool) = true,
}
I0825 11:47:06.917814 51573 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "Ti\xd1\xa9\xd8,B\n\xb8\xbdP\xe9\xcc\x8d)\xfc",
      02: secret (string) = "\x0e\xaa\x91\x12\x1c\xf2E\xdb\xbca1z\x03\xebb\xcf",
    },
  },
  02: statement (string) = "DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`",
  04: runAsync (bool) = true,
}
I0825 11:47:06.919252 51573 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:06.937356 51573 Frontend.java:935] Analyzing query: DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`
I0825 11:47:06.946619 51573 Frontend.java:947] Analysis finished.
I0825 11:47:07.004679 51573 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x1cY\xe4\x05\x02\x13De\x00\x00\x00\x00\x1bL\xb0\xde",
      02: secret (string) = "\x1cY\xe4\x05\x02\x13De\x00\x00\x00\x00\x1bL\xb0\xde",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:47:07.008950 51573 impala-hs2-server.cc:683] CloseOperation(): query_id=6544130205e4591c:deb04c1b00000000
I0825 11:47:07.009392 51573 impala-server.cc:1015] UnregisterQuery(): query_id=6544130205e4591c:deb04c1b00000000
I0825 11:47:07.009702 51573 impala-server.cc:1102] Cancel(): query_id=6544130205e4591c:deb04c1b00000000
I0825 11:47:07.024626 51573 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "Ti\xd1\xa9\xd8,B\n\xb8\xbdP\xe9\xcc\x8d)\xfc",
      02: secret (string) = "\x0e\xaa\x91\x12\x1c\xf2E\xdb\xbca1z\x03\xebb\xcf",
    },
  },
  02: statement (string) = "SELECT `cnpc_vie[...](18389)",
  04: runAsync (bool) = true,
}
I0825 11:47:07.025279 51573 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "Ti\xd1\xa9\xd8,B\n\xb8\xbdP\xe9\xcc\x8d)\xfc",
      02: secret (string) = "\x0e\xaa\x91\x12\x1c\xf2E\xdb\xbca1z\x03\xebb\xcf",
    },
  },
  02: statement (string) = "SELECT `cnpc_vie[...](18389)",
  04: runAsync (bool) = true,
}
I0825 11:47:07.026314 51573 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:07.037531 51573 Frontend.java:935] Analyzing query: SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey` AS `bi_16209772373942822610` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator` AS `bi_7173110153481771205` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`created` AS `bi_13491404487973529010` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor` AS `bi_16709338949652660965` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited` AS `bi_7778611651735101528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`id` AS `bi_14306997686607670121` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel` AS `bi_14501539644612575132` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ouname` AS `bi_4746155211965198907` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t` AS `bi_5365439428354097443` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode` AS `bi_17739814079848908328` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`code` AS `bi_2232887874484344045` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode` AS `bi_369040516142209005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetype` AS `bi_1740799749612446421` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename` AS `bi_6559770015537514515` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameprotocol` AS `bi_9889475954848287171` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`name` AS `bi_15189533194949851777` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectsflag` AS `bi_13231105150099224340` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssum` AS `bi_17211859388080424960` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtype` AS `bi_18212787982254017333` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename` AS `bi_7541878364736470844` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`type` AS `bi_7009582161161962629` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename` AS `bi_5792701378059420076` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtype` AS `bi_8397122565340895029` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename` AS `bi_3349638123191173855` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtype` AS `bi_17231762347014911121` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename` AS `bi_15445715632339295217` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatus` AS `bi_12472218524279170739` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname` AS `bi_9114563080665146699` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcontract` AS `bi_221030768505386166` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`foreigninterestinvolved` AS `bi_7769959159290483840` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactions` AS `bi_12538280534418618029` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditch` AS `bi_8874241118748090656` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname` AS `bi_13865388329565152770` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditch` AS `bi_12020212433864986146` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname` AS `bi_12093476229320587287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocation` AS `bi_16675125230853471997` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname` AS `bi_5623662814544693635` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptid` AS `bi_637607595999269167` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname` AS `bi_13683947135958082930` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw` AS `bi_11924957536007553338` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate` AS `bi_614967852965536978` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate` AS `bi_5003822878387321743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate` AS `bi_6413940051808780525` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment` AS `bi_11216260561419591329` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark` AS `bi_15719283721382345906` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertaker` AS `bi_11240345001390265760` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone` AS `bi_2135828979746422287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername` AS `bi_8234557137695700893` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion` AS `bi_5133013160763149225` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedept` AS `bi_17983062736628275974` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname` AS `bi_2661014466711632970` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptcharger` AS `bi_14227120684205422351` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername` AS `bi_13689588754024198241` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate` AS `bi_11029029363983356005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate` AS `bi_6920746512342794880` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate` AS `bi_1980803134228074743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`stage` AS `bi_14864370397929992779` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`status` AS `bi_8546227886955607403` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode` AS `bi_16284813439853843418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`thirdfundditch` AS `bi_8240392853651162418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`supplypaytype` AS `bi_16971073333655604621` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`pricetype` AS `bi_7696488040904043695` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`paymentsupply` AS `bi_11474226421585588418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`istax` AS `bi_15889015133263562243` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectid` AS `bi_15223331806579081282` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`secondobjectid` AS `bi_4248969569151347242` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isunderframework` AS `bi_17576126933562249528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkid` AS `bi_16329074359970793714` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname` AS `bi_4893616353618505239` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreason` AS `bi_3903104604239561382` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail` AS `bi_7824035878402166299` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname` AS `bi_17834913520635724437` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`closedsettlement` AS `bi_4063566549861858298` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`innercontractid` AS `bi_3338788862406713265` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid` AS `bi_1963530120962417240` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname` AS `bi_5127572173810565873` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype` AS `bi_2440282083506678752` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey` AS `bi_5524861625849511082` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isstamped` AS `bi_10802066210367618989` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsid` AS `bi_16755292640996306616` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isonlinesign` AS `bi_7327920818219899768` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid` AS `bi_13360343267273546668` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isdeleted` AS `bi_1467213175407054496` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode` AS `bi_13600932575276159557` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname` AS `bi_10699817008190601050` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short` AS `bi_15916860084426853186` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode` AS `bi_4007708937737028237` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname` AS `bi_7467729968303243062` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short` AS `bi_16247278283018779660` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` AS `bi_14123165879102550317`  FROM (SELECT `temp_sql_wrapper_table`.`rowkey` AS `rowkey` , `temp_sql_wrapper_table`.`creator` AS `creator` , `temp_sql_wrapper_table`.`created` AS `created` , `temp_sql_wrapper_table`.`editor` AS `editor` , `temp_sql_wrapper_table`.`edited` AS `edited` , `temp_sql_wrapper_table`.`id` AS `id` , `temp_sql_wrapper_table`.`oulabel` AS `oulabel` , `temp_sql_wrapper_table`.`ouname` AS `ouname` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`declarecode` AS `declarecode` , `temp_sql_wrapper_table`.`code` AS `code` , `temp_sql_wrapper_table`.`interiorcode` AS `interiorcode` , `temp_sql_wrapper_table`.`choicetype` AS `choicetype` , `temp_sql_wrapper_table`.`choicetypename` AS `choicetypename` , `temp_sql_wrapper_table`.`frameprotocol` AS `frameprotocol` , `temp_sql_wrapper_table`.`name` AS `name` , `temp_sql_wrapper_table`.`objectsflag` AS `objectsflag` , `temp_sql_wrapper_table`.`objectssum` AS `objectssum` , `temp_sql_wrapper_table`.`objectssumtype` AS `objectssumtype` , `temp_sql_wrapper_table`.`objectssumtypename` AS `objectssumtypename` , `temp_sql_wrapper_table`.`type` AS `type` , `temp_sql_wrapper_table`.`typename` AS `typename` , `temp_sql_wrapper_table`.`subtype` AS `subtype` , `temp_sql_wrapper_table`.`subtypename` AS `subtypename` , `temp_sql_wrapper_table`.`endtype` AS `endtype` , `temp_sql_wrapper_table`.`endtypename` AS `endtypename` , `temp_sql_wrapper_table`.`ourstatus` AS `ourstatus` , `temp_sql_wrapper_table`.`ourstatusname` AS `ourstatusname` , `temp_sql_wrapper_table`.`interiorcontract` AS `interiorcontract` , `temp_sql_wrapper_table`.`foreigninterestinvolved` AS `foreigninterestinvolved` , `temp_sql_wrapper_table`.`connectedtransactions` AS `connectedtransactions` , `temp_sql_wrapper_table`.`fundditch` AS `fundditch` , `temp_sql_wrapper_table`.`fundditchname` AS `fundditchname` , `temp_sql_wrapper_table`.`subfundditch` AS `subfundditch` , `temp_sql_wrapper_table`.`subfundditchname` AS `subfundditchname` , `temp_sql_wrapper_table`.`fundallocation` AS `fundallocation` , `temp_sql_wrapper_table`.`fundallocationname` AS `fundallocationname` , `temp_sql_wrapper_table`.`deptid` AS `deptid` , `temp_sql_wrapper_table`.`deptidname` AS `deptidname` , `temp_sql_wrapper_table`.`dependlaw` AS `dependlaw` , `temp_sql_wrapper_table`.`startperformingdate` AS `startperformingdate` , `temp_sql_wrapper_table`.`endperformingdate` AS `endperformingdate` , `temp_sql_wrapper_table`.`performfinishdate` AS `performfinishdate` , `temp_sql_wrapper_table`.`performfinishcomment` AS `performfinishcomment` , `temp_sql_wrapper_table`.`remark` AS `remark` , `temp_sql_wrapper_table`.`undertaker` AS `undertaker` , `temp_sql_wrapper_table`.`undertakerphone` AS `undertakerphone` , `temp_sql_wrapper_table`.`undertakername` AS `undertakername` , `temp_sql_wrapper_table`.`undertakeropinion` AS `undertakeropinion` , `temp_sql_wrapper_table`.`undertakedept` AS `undertakedept` , `temp_sql_wrapper_table`.`undertakedeptname` AS `undertakedeptname` , `temp_sql_wrapper_table`.`deptcharger` AS `deptcharger` , `temp_sql_wrapper_table`.`deptchargername` AS `deptchargername` , `temp_sql_wrapper_table`.`submitteddate` AS `submitteddate` , `temp_sql_wrapper_table`.`createdate` AS `createdate` , `temp_sql_wrapper_table`.`modifydate` AS `modifydate` , `temp_sql_wrapper_table`.`stage` AS `stage` , `temp_sql_wrapper_table`.`status` AS `status` , `temp_sql_wrapper_table`.`localcode` AS `localcode` , `temp_sql_wrapper_table`.`thirdfundditch` AS `thirdfundditch` , `temp_sql_wrapper_table`.`supplypaytype` AS `supplypaytype` , `temp_sql_wrapper_table`.`pricetype` AS `pricetype` , `temp_sql_wrapper_table`.`paymentsupply` AS `paymentsupply` , `temp_sql_wrapper_table`.`istax` AS `istax` , `temp_sql_wrapper_table`.`objectid` AS `objectid` , `temp_sql_wrapper_table`.`secondobjectid` AS `secondobjectid` , `temp_sql_wrapper_table`.`isunderframework` AS `isunderframework` , `temp_sql_wrapper_table`.`frameworkid` AS `frameworkid` , `temp_sql_wrapper_table`.`frameworkname` AS `frameworkname` , `temp_sql_wrapper_table`.`notbiddingreason` AS `notbiddingreason` , `temp_sql_wrapper_table`.`notbiddingreasondetail` AS `notbiddingreasondetail` , `temp_sql_wrapper_table`.`connectedtransactionsname` AS `connectedtransactionsname` , `temp_sql_wrapper_table`.`closedsettlement` AS `closedsettlement` , `temp_sql_wrapper_table`.`innercontractid` AS `innercontractid` , `temp_sql_wrapper_table`.`performanceid` AS `performanceid` , `temp_sql_wrapper_table`.`relatormodel_counterpartyname` AS `relatormodel_counterpartyname` , `temp_sql_wrapper_table`.`relatormodel_orgtype` AS `relatormodel_orgtype` , `temp_sql_wrapper_table`.`relatormodel_rowkey` AS `relatormodel_rowkey` , `temp_sql_wrapper_table`.`isstamped` AS `isstamped` , `temp_sql_wrapper_table`.`connectedtransactionsid` AS `connectedtransactionsid` , `temp_sql_wrapper_table`.`isonlinesign` AS `isonlinesign` , `temp_sql_wrapper_table`.`signexaminationfileid` AS `signexaminationfileid` , `temp_sql_wrapper_table`.`isdeleted` AS `isdeleted` , `temp_sql_wrapper_table`.`groupcode` AS `groupcode` , `temp_sql_wrapper_table`.`groupname` AS `groupname` , `temp_sql_wrapper_table`.`groupname_short` AS `groupname_short` , `temp_sql_wrapper_table`.`regcode` AS `regcode` , `temp_sql_wrapper_table`.`regname` AS `regname` , `temp_sql_wrapper_table`.`regname_short` AS `regname_short` , `temp_sql_wrapper_table`.`etl_date` AS `etl_date`  FROM (SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`created`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`id`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ouname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`code`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameprotocol`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`name`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectsflag`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssum`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`type`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatus`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcontract`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`foreigninterestinvolved`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactions`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocation`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertaker`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedept`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptcharger`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`stage`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`status`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`thirdfundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`supplypaytype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`pricetype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`paymentsupply`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`istax`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`secondobjectid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isunderframework`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreason`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`closedsettlement`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`innercontractid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isstamped`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isonlinesign`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isdeleted`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` FROM `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120` `cnpc_view_ctms_v2_b_contractinfo_c120`  LIMIT 100 ) `temp_sql_wrapper_table`) `cnpc_view_ctms_v2_b_contractinfo_c120` LIMIT 1200001 
I0825 11:47:07.056185 51573 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:47:07.056479 51573 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:47:07.057343 51573 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:47:07.057952 51573 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:47:07.086585 51573 Frontend.java:947] Analysis finished.
I0825 11:47:07.111572 51573 admission-controller.cc:508] Schedule for id=d47b204e8371989:69364fe000000000 in pool_name=root.default cluster_mem_needed=16.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
I0825 11:47:07.111932 51573 admission-controller.cc:513] Stats: agg_num_running=11, agg_num_queued=0, agg_mem_reserved=416.00 GB,  local_host(local_mem_admitted=200.00 GB, num_admitted_running=5, num_queued=0, backend_mem_reserved=88.00 GB)
I0825 11:47:07.115175 51573 admission-controller.cc:529] Admitted query id=d47b204e8371989:69364fe000000000
I0825 11:47:07.116364 51573 coordinator.cc:93] Exec() query_id=d47b204e8371989:69364fe000000000 stmt=SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey` AS `bi_16209772373942822610` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator` AS `bi_7173110153481771205` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`created` AS `bi_13491404487973529010` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor` AS `bi_16709338949652660965` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited` AS `bi_7778611651735101528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`id` AS `bi_14306997686607670121` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel` AS `bi_14501539644612575132` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ouname` AS `bi_4746155211965198907` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t` AS `bi_5365439428354097443` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode` AS `bi_17739814079848908328` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`code` AS `bi_2232887874484344045` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode` AS `bi_369040516142209005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetype` AS `bi_1740799749612446421` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename` AS `bi_6559770015537514515` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameprotocol` AS `bi_9889475954848287171` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`name` AS `bi_15189533194949851777` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectsflag` AS `bi_13231105150099224340` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssum` AS `bi_17211859388080424960` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtype` AS `bi_18212787982254017333` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename` AS `bi_7541878364736470844` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`type` AS `bi_7009582161161962629` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename` AS `bi_5792701378059420076` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtype` AS `bi_8397122565340895029` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename` AS `bi_3349638123191173855` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtype` AS `bi_17231762347014911121` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename` AS `bi_15445715632339295217` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatus` AS `bi_12472218524279170739` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname` AS `bi_9114563080665146699` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcontract` AS `bi_221030768505386166` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`foreigninterestinvolved` AS `bi_7769959159290483840` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactions` AS `bi_12538280534418618029` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditch` AS `bi_8874241118748090656` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname` AS `bi_13865388329565152770` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditch` AS `bi_12020212433864986146` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname` AS `bi_12093476229320587287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocation` AS `bi_16675125230853471997` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname` AS `bi_5623662814544693635` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptid` AS `bi_637607595999269167` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname` AS `bi_13683947135958082930` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw` AS `bi_11924957536007553338` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate` AS `bi_614967852965536978` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate` AS `bi_5003822878387321743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate` AS `bi_6413940051808780525` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment` AS `bi_11216260561419591329` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark` AS `bi_15719283721382345906` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertaker` AS `bi_11240345001390265760` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone` AS `bi_2135828979746422287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername` AS `bi_8234557137695700893` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion` AS `bi_5133013160763149225` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedept` AS `bi_17983062736628275974` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname` AS `bi_2661014466711632970` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptcharger` AS `bi_14227120684205422351` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername` AS `bi_13689588754024198241` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate` AS `bi_11029029363983356005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate` AS `bi_6920746512342794880` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate` AS `bi_1980803134228074743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`stage` AS `bi_14864370397929992779` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`status` AS `bi_8546227886955607403` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode` AS `bi_16284813439853843418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`thirdfundditch` AS `bi_8240392853651162418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`supplypaytype` AS `bi_16971073333655604621` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`pricetype` AS `bi_7696488040904043695` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`paymentsupply` AS `bi_11474226421585588418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`istax` AS `bi_15889015133263562243` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectid` AS `bi_15223331806579081282` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`secondobjectid` AS `bi_4248969569151347242` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isunderframework` AS `bi_17576126933562249528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkid` AS `bi_16329074359970793714` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname` AS `bi_4893616353618505239` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreason` AS `bi_3903104604239561382` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail` AS `bi_7824035878402166299` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname` AS `bi_17834913520635724437` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`closedsettlement` AS `bi_4063566549861858298` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`innercontractid` AS `bi_3338788862406713265` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid` AS `bi_1963530120962417240` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname` AS `bi_5127572173810565873` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype` AS `bi_2440282083506678752` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey` AS `bi_5524861625849511082` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isstamped` AS `bi_10802066210367618989` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsid` AS `bi_16755292640996306616` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isonlinesign` AS `bi_7327920818219899768` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid` AS `bi_13360343267273546668` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isdeleted` AS `bi_1467213175407054496` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode` AS `bi_13600932575276159557` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname` AS `bi_10699817008190601050` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short` AS `bi_15916860084426853186` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode` AS `bi_4007708937737028237` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname` AS `bi_7467729968303243062` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short` AS `bi_16247278283018779660` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` AS `bi_14123165879102550317`  FROM (SELECT `temp_sql_wrapper_table`.`rowkey` AS `rowkey` , `temp_sql_wrapper_table`.`creator` AS `creator` , `temp_sql_wrapper_table`.`created` AS `created` , `temp_sql_wrapper_table`.`editor` AS `editor` , `temp_sql_wrapper_table`.`edited` AS `edited` , `temp_sql_wrapper_table`.`id` AS `id` , `temp_sql_wrapper_table`.`oulabel` AS `oulabel` , `temp_sql_wrapper_table`.`ouname` AS `ouname` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`declarecode` AS `declarecode` , `temp_sql_wrapper_table`.`code` AS `code` , `temp_sql_wrapper_table`.`interiorcode` AS `interiorcode` , `temp_sql_wrapper_table`.`choicetype` AS `choicetype` , `temp_sql_wrapper_table`.`choicetypename` AS `choicetypename` , `temp_sql_wrapper_table`.`frameprotocol` AS `frameprotocol` , `temp_sql_wrapper_table`.`name` AS `name` , `temp_sql_wrapper_table`.`objectsflag` AS `objectsflag` , `temp_sql_wrapper_table`.`objectssum` AS `objectssum` , `temp_sql_wrapper_table`.`objectssumtype` AS `objectssumtype` , `temp_sql_wrapper_table`.`objectssumtypename` AS `objectssumtypename` , `temp_sql_wrapper_table`.`type` AS `type` , `temp_sql_wrapper_table`.`typename` AS `typename` , `temp_sql_wrapper_table`.`subtype` AS `subtype` , `temp_sql_wrapper_table`.`subtypename` AS `subtypename` , `temp_sql_wrapper_table`.`endtype` AS `endtype` , `temp_sql_wrapper_table`.`endtypename` AS `endtypename` , `temp_sql_wrapper_table`.`ourstatus` AS `ourstatus` , `temp_sql_wrapper_table`.`ourstatusname` AS `ourstatusname` , `temp_sql_wrapper_table`.`interiorcontract` AS `interiorcontract` , `temp_sql_wrapper_table`.`foreigninterestinvolved` AS `foreigninterestinvolved` , `temp_sql_wrapper_table`.`connectedtransactions` AS `connectedtransactions` , `temp_sql_wrapper_table`.`fundditch` AS `fundditch` , `temp_sql_wrapper_table`.`fundditchname` AS `fundditchname` , `temp_sql_wrapper_table`.`subfundditch` AS `subfundditch` , `temp_sql_wrapper_table`.`subfundditchname` AS `subfundditchname` , `temp_sql_wrapper_table`.`fundallocation` AS `fundallocation` , `temp_sql_wrapper_table`.`fundallocationname` AS `fundallocationname` , `temp_sql_wrapper_table`.`deptid` AS `deptid` , `temp_sql_wrapper_table`.`deptidname` AS `deptidname` , `temp_sql_wrapper_table`.`dependlaw` AS `dependlaw` , `temp_sql_wrapper_table`.`startperformingdate` AS `startperformingdate` , `temp_sql_wrapper_table`.`endperformingdate` AS `endperformingdate` , `temp_sql_wrapper_table`.`performfinishdate` AS `performfinishdate` , `temp_sql_wrapper_table`.`performfinishcomment` AS `performfinishcomment` , `temp_sql_wrapper_table`.`remark` AS `remark` , `temp_sql_wrapper_table`.`undertaker` AS `undertaker` , `temp_sql_wrapper_table`.`undertakerphone` AS `undertakerphone` , `temp_sql_wrapper_table`.`undertakername` AS `undertakername` , `temp_sql_wrapper_table`.`undertakeropinion` AS `undertakeropinion` , `temp_sql_wrapper_table`.`undertakedept` AS `undertakedept` , `temp_sql_wrapper_table`.`undertakedeptname` AS `undertakedeptname` , `temp_sql_wrapper_table`.`deptcharger` AS `deptcharger` , `temp_sql_wrapper_table`.`deptchargername` AS `deptchargername` , `temp_sql_wrapper_table`.`submitteddate` AS `submitteddate` , `temp_sql_wrapper_table`.`createdate` AS `createdate` , `temp_sql_wrapper_table`.`modifydate` AS `modifydate` , `temp_sql_wrapper_table`.`stage` AS `stage` , `temp_sql_wrapper_table`.`status` AS `status` , `temp_sql_wrapper_table`.`localcode` AS `localcode` , `temp_sql_wrapper_table`.`thirdfundditch` AS `thirdfundditch` , `temp_sql_wrapper_table`.`supplypaytype` AS `supplypaytype` , `temp_sql_wrapper_table`.`pricetype` AS `pricetype` , `temp_sql_wrapper_table`.`paymentsupply` AS `paymentsupply` , `temp_sql_wrapper_table`.`istax` AS `istax` , `temp_sql_wrapper_table`.`objectid` AS `objectid` , `temp_sql_wrapper_table`.`secondobjectid` AS `secondobjectid` , `temp_sql_wrapper_table`.`isunderframework` AS `isunderframework` , `temp_sql_wrapper_table`.`frameworkid` AS `frameworkid` , `temp_sql_wrapper_table`.`frameworkname` AS `frameworkname` , `temp_sql_wrapper_table`.`notbiddingreason` AS `notbiddingreason` , `temp_sql_wrapper_table`.`notbiddingreasondetail` AS `notbiddingreasondetail` , `temp_sql_wrapper_table`.`connectedtransactionsname` AS `connectedtransactionsname` , `temp_sql_wrapper_table`.`closedsettlement` AS `closedsettlement` , `temp_sql_wrapper_table`.`innercontractid` AS `innercontractid` , `temp_sql_wrapper_table`.`performanceid` AS `performanceid` , `temp_sql_wrapper_table`.`relatormodel_counterpartyname` AS `relatormodel_counterpartyname` , `temp_sql_wrapper_table`.`relatormodel_orgtype` AS `relatormodel_orgtype` , `temp_sql_wrapper_table`.`relatormodel_rowkey` AS `relatormodel_rowkey` , `temp_sql_wrapper_table`.`isstamped` AS `isstamped` , `temp_sql_wrapper_table`.`connectedtransactionsid` AS `connectedtransactionsid` , `temp_sql_wrapper_table`.`isonlinesign` AS `isonlinesign` , `temp_sql_wrapper_table`.`signexaminationfileid` AS `signexaminationfileid` , `temp_sql_wrapper_table`.`isdeleted` AS `isdeleted` , `temp_sql_wrapper_table`.`groupcode` AS `groupcode` , `temp_sql_wrapper_table`.`groupname` AS `groupname` , `temp_sql_wrapper_table`.`groupname_short` AS `groupname_short` , `temp_sql_wrapper_table`.`regcode` AS `regcode` , `temp_sql_wrapper_table`.`regname` AS `regname` , `temp_sql_wrapper_table`.`regname_short` AS `regname_short` , `temp_sql_wrapper_table`.`etl_date` AS `etl_date`  FROM (SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`created`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`id`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ouname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`code`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameprotocol`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`name`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectsflag`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssum`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`type`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatus`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcontract`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`foreigninterestinvolved`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactions`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocation`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertaker`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedept`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptcharger`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`stage`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`status`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`thirdfundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`supplypaytype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`pricetype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`paymentsupply`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`istax`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`secondobjectid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isunderframework`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreason`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`closedsettlement`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`innercontractid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isstamped`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isonlinesign`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isdeleted`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` FROM `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120` `cnpc_view_ctms_v2_b_contractinfo_c120`  LIMIT 100 ) `temp_sql_wrapper_table`) `cnpc_view_ctms_v2_b_contractinfo_c120` LIMIT 1200001 
I0825 11:47:07.116885 51573 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:47:07.117094 51573 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:47:07.118000 51573 coordinator.cc:349] starting execution on 2 backends for query_id=d47b204e8371989:69364fe000000000
I0825 11:47:07.122409 44904 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=d47b204e8371989:69364fe000000000
I0825 11:47:07.122699 44904 query-exec-mgr.cc:46] StartQueryFInstances() query_id=d47b204e8371989:69364fe000000000 coord=e4bdhpp025:22000
I0825 11:47:07.122741 44904 query-state.cc:178] Buffer pool limit for d47b204e8371989:69364fe000000000: 6871947673
I0825 11:47:07.122961 44904 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query d47b204e8371989:69364fe000000000
I0825 11:47:07.142872 51577 query-state.cc:300] StartFInstances(): query_id=d47b204e8371989:69364fe000000000 #instances=1
I0825 11:47:07.143087 51573 coordinator.cc:362] started execution on 2 backends for query_id=d47b204e8371989:69364fe000000000
I0825 11:47:07.144039 51577 query-state.cc:313] descriptor table for query=d47b204e8371989:69364fe000000000
tuples:
Tuple(id=0 size=1452 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=1440 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=1440 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=TIMESTAMP col_path=[2] offset=32 null=(offset=1440 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[3] offset=48 null=(offset=1440 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=TIMESTAMP col_path=[4] offset=64 null=(offset=1440 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=DECIMAL(38,0) col_path=[5] offset=80 null=(offset=1440 mask=20) slot_idx=5 field_idx=-1), Slot(id=6 type=DECIMAL(38,0) col_path=[6] offset=96 null=(offset=1440 mask=40) slot_idx=6 field_idx=-1), Slot(id=7 type=STRING col_path=[7] offset=112 null=(offset=1440 mask=80) slot_idx=7 field_idx=-1), Slot(id=8 type=STRING col_path=[8] offset=128 null=(offset=1441 mask=1) slot_idx=8 field_idx=-1), Slot(id=9 type=STRING col_path=[9] offset=144 null=(offset=1441 mask=2) slot_idx=9 field_idx=-1), Slot(id=10 type=STRING col_path=[10] offset=160 null=(offset=1441 mask=4) slot_idx=10 field_idx=-1), Slot(id=11 type=STRING col_path=[11] offset=176 null=(offset=1441 mask=8) slot_idx=11 field_idx=-1), Slot(id=12 type=DECIMAL(38,0) col_path=[12] offset=192 null=(offset=1441 mask=10) slot_idx=12 field_idx=-1), Slot(id=13 type=STRING col_path=[13] offset=208 null=(offset=1441 mask=20) slot_idx=13 field_idx=-1), Slot(id=14 type=DECIMAL(38,0) col_path=[14] offset=224 null=(offset=1441 mask=40) slot_idx=14 field_idx=-1), Slot(id=15 type=STRING col_path=[15] offset=240 null=(offset=1441 mask=80) slot_idx=15 field_idx=-1), Slot(id=16 type=DECIMAL(38,0) col_path=[16] offset=256 null=(offset=1442 mask=1) slot_idx=16 field_idx=-1), Slot(id=17 type=DECIMAL(20,2) col_path=[17] offset=272 null=(offset=1442 mask=2) slot_idx=17 field_idx=-1), Slot(id=18 type=DECIMAL(38,0) col_path=[18] offset=288 null=(offset=1442 mask=4) slot_idx=18 field_idx=-1), Slot(id=19 type=STRING col_path=[19] offset=304 null=(offset=1442 mask=8) slot_idx=19 field_idx=-1), Slot(id=20 type=DECIMAL(38,0) col_path=[20] offset=320 null=(offset=1442 mask=10) slot_idx=20 field_idx=-1), Slot(id=21 type=STRING col_path=[21] offset=336 null=(offset=1442 mask=20) slot_idx=21 field_idx=-1), Slot(id=22 type=DECIMAL(38,0) col_path=[22] offset=352 null=(offset=1442 mask=40) slot_idx=22 field_idx=-1), Slot(id=23 type=STRING col_path=[23] offset=368 null=(offset=1442 mask=80) slot_idx=23 field_idx=-1), Slot(id=24 type=DECIMAL(38,0) col_path=[24] offset=384 null=(offset=1443 mask=1) slot_idx=24 field_idx=-1), Slot(id=25 type=STRING col_path=[25] offset=400 null=(offset=1443 mask=2) slot_idx=25 field_idx=-1), Slot(id=26 type=DECIMAL(38,0) col_path=[26] offset=416 null=(offset=1443 mask=4) slot_idx=26 field_idx=-1), Slot(id=27 type=STRING col_path=[27] offset=432 null=(offset=1443 mask=8) slot_idx=27 field_idx=-1), Slot(id=28 type=DECIMAL(38,0) col_path=[28] offset=448 null=(offset=1443 mask=10) slot_idx=28 field_idx=-1), Slot(id=29 type=DECIMAL(38,0) col_path=[29] offset=464 null=(offset=1443 mask=20) slot_idx=29 field_idx=-1), Slot(id=30 type=DECIMAL(38,0) col_path=[30] offset=480 null=(offset=1443 mask=40) slot_idx=30 field_idx=-1), Slot(id=31 type=DECIMAL(38,0) col_path=[31] offset=496 null=(offset=1443 mask=80) slot_idx=31 field_idx=-1), Slot(id=32 type=STRING col_path=[32] offset=512 null=(offset=1444 mask=1) slot_idx=32 field_idx=-1), Slot(id=33 type=DECIMAL(38,0) col_path=[33] offset=528 null=(offset=1444 mask=2) slot_idx=33 field_idx=-1), Slot(id=34 type=STRING col_path=[34] offset=544 null=(offset=1444 mask=4) slot_idx=34 field_idx=-1), Slot(id=35 type=DECIMAL(38,0) col_path=[35] offset=560 null=(offset=1444 mask=8) slot_idx=35 field_idx=-1), Slot(id=36 type=STRING col_path=[36] offset=576 null=(offset=1444 mask=10) slot_idx=36 field_idx=-1), Slot(id=37 type=DECIMAL(38,0) col_path=[37] offset=592 null=(offset=1444 mask=20) slot_idx=37 field_idx=-1), Slot(id=38 type=STRING col_path=[38] offset=608 null=(offset=1444 mask=40) slot_idx=38 field_idx=-1), Slot(id=39 type=STRING col_path=[39] offset=624 null=(offset=1444 mask=80) slot_idx=39 field_idx=-1), Slot(id=40 type=TIMESTAMP col_path=[40] offset=640 null=(offset=1445 mask=1) slot_idx=40 field_idx=-1), Slot(id=41 type=TIMESTAMP col_path=[41] offset=656 null=(offset=1445 mask=2) slot_idx=41 field_idx=-1), Slot(id=42 type=TIMESTAMP col_path=[42] offset=672 null=(offset=1445 mask=4) slot_idx=42 field_idx=-1), Slot(id=43 type=STRING col_path=[43] offset=688 null=(offset=1445 mask=8) slot_idx=43 field_idx=-1), Slot(id=44 type=STRING col_path=[44] offset=704 null=(offset=1445 mask=10) slot_idx=44 field_idx=-1), Slot(id=45 type=DECIMAL(38,0) col_path=[45] offset=720 null=(offset=1445 mask=20) slot_idx=45 field_idx=-1), Slot(id=46 type=STRING col_path=[46] offset=736 null=(offset=1445 mask=40) slot_idx=46 field_idx=-1), Slot(id=47 type=STRING col_path=[47] offset=752 null=(offset=1445 mask=80) slot_idx=47 field_idx=-1), Slot(id=48 type=STRING col_path=[48] offset=768 null=(offset=1446 mask=1) slot_idx=48 field_idx=-1), Slot(id=49 type=DECIMAL(38,0) col_path=[49] offset=784 null=(offset=1446 mask=2) slot_idx=49 field_idx=-1), Slot(id=50 type=STRING col_path=[50] offset=800 null=(offset=1446 mask=4) slot_idx=50 field_idx=-1), Slot(id=51 type=DECIMAL(38,0) col_path=[51] offset=816 null=(offset=1446 mask=8) slot_idx=51 field_idx=-1), Slot(id=52 type=STRING col_path=[52] offset=832 null=(offset=1446 mask=10) slot_idx=52 field_idx=-1), Slot(id=53 type=TIMESTAMP col_path=[53] offset=848 null=(offset=1446 mask=20) slot_idx=53 field_idx=-1), Slot(id=54 type=TIMESTAMP col_path=[54] offset=864 null=(offset=1446 mask=40) slot_idx=54 field_idx=-1), Slot(id=55 type=TIMESTAMP col_path=[55] offset=880 null=(offset=1446 mask=80) slot_idx=55 field_idx=-1), Slot(id=56 type=DECIMAL(38,0) col_path=[56] offset=896 null=(offset=1447 mask=1) slot_idx=56 field_idx=-1), Slot(id=57 type=DECIMAL(38,0) col_path=[57] offset=912 null=(offset=1447 mask=2) slot_idx=57 field_idx=-1), Slot(id=58 type=STRING col_path=[58] offset=928 null=(offset=1447 mask=4) slot_idx=58 field_idx=-1), Slot(id=59 type=DECIMAL(38,0) col_path=[59] offset=944 null=(offset=1447 mask=8) slot_idx=59 field_idx=-1), Slot(id=60 type=DECIMAL(38,0) col_path=[60] offset=960 null=(offset=1447 mask=10) slot_idx=60 field_idx=-1), Slot(id=61 type=DECIMAL(38,0) col_path=[61] offset=976 null=(offset=1447 mask=20) slot_idx=61 field_idx=-1), Slot(id=62 type=DECIMAL(20,2) col_path=[62] offset=992 null=(offset=1447 mask=40) slot_idx=62 field_idx=-1), Slot(id=63 type=DECIMAL(38,0) col_path=[63] offset=1008 null=(offset=1447 mask=80) slot_idx=63 field_idx=-1), Slot(id=64 type=DECIMAL(38,0) col_path=[64] offset=1024 null=(offset=1448 mask=1) slot_idx=64 field_idx=-1), Slot(id=65 type=DECIMAL(38,0) col_path=[65] offset=1040 null=(offset=1448 mask=2) slot_idx=65 field_idx=-1), Slot(id=66 type=DECIMAL(38,0) col_path=[66] offset=1056 null=(offset=1448 mask=4) slot_idx=66 field_idx=-1), Slot(id=67 type=DECIMAL(38,0) col_path=[67] offset=1072 null=(offset=1448 mask=8) slot_idx=67 field_idx=-1), Slot(id=68 type=STRING col_path=[68] offset=1088 null=(offset=1448 mask=10) slot_idx=68 field_idx=-1), Slot(id=69 type=DECIMAL(38,0) col_path=[69] offset=1104 null=(offset=1448 mask=20) slot_idx=69 field_idx=-1), Slot(id=70 type=STRING col_path=[70] offset=1120 null=(offset=1448 mask=40) slot_idx=70 field_idx=-1), Slot(id=71 type=STRING col_path=[71] offset=1136 null=(offset=1448 mask=80) slot_idx=71 field_idx=-1), Slot(id=72 type=DECIMAL(38,0) col_path=[72] offset=1152 null=(offset=1449 mask=1) slot_idx=72 field_idx=-1), Slot(id=73 type=DECIMAL(38,0) col_path=[73] offset=1168 null=(offset=1449 mask=2) slot_idx=73 field_idx=-1), Slot(id=74 type=STRING col_path=[74] offset=1184 null=(offset=1449 mask=4) slot_idx=74 field_idx=-1), Slot(id=75 type=STRING col_path=[75] offset=1200 null=(offset=1449 mask=8) slot_idx=75 field_idx=-1), Slot(id=76 type=STRING col_path=[76] offset=1216 null=(offset=1449 mask=10) slot_idx=76 field_idx=-1), Slot(id=77 type=STRING col_path=[77] offset=1232 null=(offset=1449 mask=20) slot_idx=77 field_idx=-1), Slot(id=78 type=DECIMAL(38,0) col_path=[78] offset=1248 null=(offset=1449 mask=40) slot_idx=78 field_idx=-1), Slot(id=79 type=DECIMAL(38,0) col_path=[79] offset=1264 null=(offset=1449 mask=80) slot_idx=79 field_idx=-1), Slot(id=80 type=DECIMAL(38,0) col_path=[80] offset=1280 null=(offset=1450 mask=1) slot_idx=80 field_idx=-1), Slot(id=81 type=STRING col_path=[81] offset=1296 null=(offset=1450 mask=2) slot_idx=81 field_idx=-1), Slot(id=82 type=DECIMAL(38,0) col_path=[82] offset=1312 null=(offset=1450 mask=4) slot_idx=82 field_idx=-1), Slot(id=83 type=STRING col_path=[83] offset=1328 null=(offset=1450 mask=8) slot_idx=83 field_idx=-1), Slot(id=84 type=STRING col_path=[84] offset=1344 null=(offset=1450 mask=10) slot_idx=84 field_idx=-1), Slot(id=85 type=STRING col_path=[85] offset=1360 null=(offset=1450 mask=20) slot_idx=85 field_idx=-1), Slot(id=86 type=STRING col_path=[86] offset=1376 null=(offset=1450 mask=40) slot_idx=86 field_idx=-1), Slot(id=87 type=STRING col_path=[87] offset=1392 null=(offset=1450 mask=80) slot_idx=87 field_idx=-1), Slot(id=88 type=STRING col_path=[88] offset=1408 null=(offset=1451 mask=1) slot_idx=88 field_idx=-1), Slot(id=89 type=TIMESTAMP col_path=[89] offset=1424 null=(offset=1451 mask=2) slot_idx=89 field_idx=-1)] tuple_path=[])
I0825 11:47:07.159308 51578 query-state.cc:395] Executing instance. instance_id=d47b204e8371989:69364fe000000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=1 #in-flight=19
I0825 11:47:07.176625 51577 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d47b204e8371989:69364fe000000000 refcnt=3
I0825 11:47:07.189679 51573 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x89\x197\xe8\x04\xb2G\r\x00\x00\x00\x00\xe0O6i",
      02: secret (string) = "\x89\x197\xe8\x04\xb2G\r\x00\x00\x00\x00\xe0O6i",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:47:07.366060 48603 coordinator.cc:689] Backend completed:  host=e4bdhpp018:22000 remaining=1 query_id=e54db18c4c127046:4f5d18aa00000000
I0825 11:47:07.367480 48603 coordinator-backend-state.cc:226] query_id=e54db18c4c127046:4f5d18aa00000000: first in-progress backend: e4bdhpp025:22000
I0825 11:47:07.434547 50431 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=e54db18c4c127046:4f5d18aa00000000, node=1
I0825 11:47:07.434216 50406 coordinator.cc:527] All backends finished successfully. query_id=e54db18c4c127046:4f5d18aa00000000
I0825 11:47:07.435943 50431 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=e54db18c4c127046:4f5d18aa00000000 node_id=1
I0825 11:47:07.436233 50406 coordinator.cc:783] Release admission control resources for query_id=e54db18c4c127046:4f5d18aa00000000
I0825 11:47:07.438967 50431 query-state.cc:403] Instance completed. instance_id=e54db18c4c127046:4f5d18aa00000000 #in-flight=18 status=OK
I0825 11:47:07.440274 50431 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e54db18c4c127046:4f5d18aa00000000 refcnt=2
I0825 11:47:07.478255 50406 impala-hs2-server.cc:683] CloseOperation(): query_id=e54db18c4c127046:4f5d18aa00000000
I0825 11:47:07.479609 50406 impala-server.cc:1015] UnregisterQuery(): query_id=e54db18c4c127046:4f5d18aa00000000
I0825 11:47:07.480376 50406 impala-server.cc:1102] Cancel(): query_id=e54db18c4c127046:4f5d18aa00000000
I0825 11:47:07.480813 50406 coordinator.cc:629] Cancel() query_id=e54db18c4c127046:4f5d18aa00000000
I0825 11:47:07.481047 50406 coordinator.cc:639] CancelBackends() query_id=e54db18c4c127046:4f5d18aa00000000, tried to cancel 0 backends
I0825 11:47:07.493515 50406 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e54db18c4c127046:4f5d18aa00000000 refcnt=1
I0825 11:47:07.687988 51581 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:07.690220 51581 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:07.712458 51502 query-exec-mgr.cc:95] QueryState: query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:07.713121 51502 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:07.722875 51502 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:07.723520 51502 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:07.732703 51502 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:07.733765 51502 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:07.743007 51502 query-exec-mgr.cc:95] QueryState: query_id=fc4f8c7db929bb7d:9d4b8ef300000000 refcnt=3
I0825 11:47:07.744041 51502 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fc4f8c7db929bb7d:9d4b8ef300000000 refcnt=3
I0825 11:47:07.754101 51581 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:07.754722 51581 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:07.765165 51502 query-exec-mgr.cc:95] QueryState: query_id=d47b204e8371989:69364fe000000000 refcnt=3
I0825 11:47:07.765991 51502 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d47b204e8371989:69364fe000000000 refcnt=3
I0825 11:47:10.881901 51597 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:10.883186 51597 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:10.898126 51584 query-exec-mgr.cc:95] QueryState: query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:10.899276 51584 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:10.908582 51584 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:10.911033 51584 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:10.919335 51584 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:10.920127 51584 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:10.927996 51599 query-exec-mgr.cc:95] QueryState: query_id=fc4f8c7db929bb7d:9d4b8ef300000000 refcnt=3
I0825 11:47:10.928694 51599 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fc4f8c7db929bb7d:9d4b8ef300000000 refcnt=3
I0825 11:47:10.938872 51600 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:10.940363 51600 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:10.952816 51597 query-exec-mgr.cc:95] QueryState: query_id=d47b204e8371989:69364fe000000000 refcnt=3
I0825 11:47:10.953402 51597 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d47b204e8371989:69364fe000000000 refcnt=3
I0825 11:47:14.039537 51608 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:14.044337 51608 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:14.053634 51608 query-exec-mgr.cc:95] QueryState: query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:14.062781 51608 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:14.072696 51610 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:14.078505 51610 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:14.088861 51599 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:14.089658 51599 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:14.098919 51599 query-exec-mgr.cc:95] QueryState: query_id=fc4f8c7db929bb7d:9d4b8ef300000000 refcnt=3
I0825 11:47:14.102905 51599 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fc4f8c7db929bb7d:9d4b8ef300000000 refcnt=3
I0825 11:47:14.112468 51612 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:14.114008 51612 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:14.121642 51599 query-exec-mgr.cc:95] QueryState: query_id=d47b204e8371989:69364fe000000000 refcnt=3
I0825 11:47:14.122248 51599 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d47b204e8371989:69364fe000000000 refcnt=3
I0825 11:47:14.489867 51573 impala-hs2-server.cc:661] CancelOperation(): query_id=d47b204e8371989:69364fe000000000
I0825 11:47:14.492676 51573 impala-server.cc:1102] Cancel(): query_id=d47b204e8371989:69364fe000000000
I0825 11:47:14.493283 51573 coordinator.cc:629] Cancel() query_id=d47b204e8371989:69364fe000000000
I0825 11:47:14.493937 51573 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=d47b204e8371989:69364fe000000000 backend=e4bdhpp018:22000
I0825 11:47:14.498256 51573 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=d47b204e8371989:69364fe000000000 backend=e4bdhpp025:22000
I0825 11:47:14.499295 44904 impala-internal-service.cc:63] CancelQueryFInstances(): query_id=d47b204e8371989:69364fe000000000
I0825 11:47:14.499975 44904 query-exec-mgr.cc:95] QueryState: query_id=d47b204e8371989:69364fe000000000 refcnt=3
I0825 11:47:14.500265 44904 query-state.cc:416] Cancel: query_id=d47b204e8371989:69364fe000000000
I0825 11:47:14.500895 44904 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=d47b204e8371989:69364fe000000000
I0825 11:47:14.501397 44904 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=d47b204e8371989:69364fe000000000 node_id=1
I0825 11:47:14.501847 44904 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d47b204e8371989:69364fe000000000 refcnt=3
I0825 11:47:14.502928 51578 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=d47b204e8371989:69364fe000000000, node=1
I0825 11:47:14.503500 51578 query-state.cc:403] Instance completed. instance_id=d47b204e8371989:69364fe000000000 #in-flight=17 status=CANCELLED: Cancelled
I0825 11:47:14.502746 51573 coordinator.cc:639] CancelBackends() query_id=d47b204e8371989:69364fe000000000, tried to cancel 2 backends
I0825 11:47:14.504398 51573 coordinator.cc:783] Release admission control resources for query_id=d47b204e8371989:69364fe000000000
I0825 11:47:14.504088 51578 query-state.cc:416] Cancel: query_id=d47b204e8371989:69364fe000000000
I0825 11:47:14.506100 51578 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d47b204e8371989:69364fe000000000 refcnt=2
I0825 11:47:14.507493 51573 impala-hs2-server.cc:683] CloseOperation(): query_id=d47b204e8371989:69364fe000000000
I0825 11:47:14.507963 51573 impala-server.cc:1015] UnregisterQuery(): query_id=d47b204e8371989:69364fe000000000
I0825 11:47:14.508299 51573 impala-server.cc:1102] Cancel(): query_id=d47b204e8371989:69364fe000000000
I0825 11:47:14.511399 51573 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d47b204e8371989:69364fe000000000 refcnt=1
I0825 11:47:14.525924 51573 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "Ti\xd1\xa9\xd8,B\n\xb8\xbdP\xe9\xcc\x8d)\xfc",
      02: secret (string) = "\x0e\xaa\x91\x12\x1c\xf2E\xdb\xbca1z\x03\xebb\xcf",
    },
  },
}
I0825 11:47:14.528532 51573 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:58906 closed, closing 1 associated session(s)
I0825 11:47:15.187876 48242 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): d47b204e8371989:69364fe000000000
I0825 11:47:17.220705 51650 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:17.229175 51650 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:17.252657 51611 query-exec-mgr.cc:95] QueryState: query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:17.253309 51611 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:17.264628 51611 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:17.265419 51611 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:17.275676 51650 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:17.276481 51650 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:17.295516 51652 query-exec-mgr.cc:95] QueryState: query_id=fc4f8c7db929bb7d:9d4b8ef300000000 refcnt=3
I0825 11:47:17.296345 51652 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fc4f8c7db929bb7d:9d4b8ef300000000 refcnt=3
I0825 11:47:17.305423 51650 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:17.306036 51650 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:20.191592 48682 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): d47b204e8371989:69364fe000000000
I0825 11:47:20.391644 51670 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:20.394698 51670 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:20.421586 51611 query-exec-mgr.cc:95] QueryState: query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:20.422169 51611 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:20.436440 51673 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:20.441838 51673 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:20.452232 51674 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:20.453281 51674 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:20.459304 51671 query-exec-mgr.cc:95] QueryState: query_id=fc4f8c7db929bb7d:9d4b8ef300000000 refcnt=3
I0825 11:47:20.460491 51671 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fc4f8c7db929bb7d:9d4b8ef300000000 refcnt=3
I0825 11:47:20.470001 51672 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:20.470847 51672 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:22.479992 45342 coordinator.cc:689] Backend completed:  host=e4bdhpp018:22000 remaining=1 query_id=fc4f8c7db929bb7d:9d4b8ef300000000
I0825 11:47:22.481597 45342 coordinator-backend-state.cc:226] query_id=fc4f8c7db929bb7d:9d4b8ef300000000: first in-progress backend: e4bdhpp025:22000
I0825 11:47:22.538251 50864 coordinator.cc:527] All backends finished successfully. query_id=fc4f8c7db929bb7d:9d4b8ef300000000
I0825 11:47:22.538560 50864 coordinator.cc:783] Release admission control resources for query_id=fc4f8c7db929bb7d:9d4b8ef300000000
I0825 11:47:22.539669 51167 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=fc4f8c7db929bb7d:9d4b8ef300000000, node=1
I0825 11:47:22.540038 51167 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=fc4f8c7db929bb7d:9d4b8ef300000000 node_id=1
I0825 11:47:22.565385 51167 query-state.cc:403] Instance completed. instance_id=fc4f8c7db929bb7d:9d4b8ef300000000 #in-flight=16 status=OK
I0825 11:47:22.565780 51167 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fc4f8c7db929bb7d:9d4b8ef300000000 refcnt=2
I0825 11:47:22.580375 50864 impala-hs2-server.cc:683] CloseOperation(): query_id=fc4f8c7db929bb7d:9d4b8ef300000000
I0825 11:47:22.581560 50864 impala-server.cc:1015] UnregisterQuery(): query_id=fc4f8c7db929bb7d:9d4b8ef300000000
I0825 11:47:22.582013 50864 impala-server.cc:1102] Cancel(): query_id=fc4f8c7db929bb7d:9d4b8ef300000000
I0825 11:47:22.582381 50864 coordinator.cc:629] Cancel() query_id=fc4f8c7db929bb7d:9d4b8ef300000000
I0825 11:47:22.582741 50864 coordinator.cc:639] CancelBackends() query_id=fc4f8c7db929bb7d:9d4b8ef300000000, tried to cancel 0 backends
I0825 11:47:22.590440 50864 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fc4f8c7db929bb7d:9d4b8ef300000000 refcnt=1
I0825 11:47:23.538049 51695 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:23.541779 51695 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:23.567837 51697 query-exec-mgr.cc:95] QueryState: query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:23.568439 51697 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:23.584679 51698 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:23.587556 51698 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:23.594364 51695 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:23.595291 51695 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:23.601778 51695 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:23.602243 51695 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:25.195407 47386 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): d47b204e8371989:69364fe000000000
I0825 11:47:26.642834 51695 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:26.643630 51695 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:26.659852 51727 query-exec-mgr.cc:95] QueryState: query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:26.665915 51727 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:26.682075 51697 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:26.682719 51697 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:26.700151 51697 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:26.700793 51697 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:26.708201 51729 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:26.708842 51729 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:29.765576 51259 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:29.766836 51259 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:29.790459 51756 query-exec-mgr.cc:95] QueryState: query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:29.796177 51756 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:29.804054 51729 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:29.804612 51729 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:29.811412 51729 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:29.812191 51729 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:29.820937 51758 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:29.821780 51758 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:30.198987 48525 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): d47b204e8371989:69364fe000000000
I0825 11:47:32.861035 51259 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:32.861884 51259 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:32.868327 51259 query-exec-mgr.cc:95] QueryState: query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:32.869338 51259 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:32.876114 51259 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:32.876474 51259 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:32.889631 51775 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:32.890164 51775 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:32.902598 51756 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:32.903100 51756 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:33.040639 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:47:33.053776 51777 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:47:33.059185 51777 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x19\xf7ag\xb3\xbfO\xeb\x95C\x1b_\xe3j\xaa\xda",
      02: secret (string) = "\x90n\xd5~\x91\x84ML\x9fH\x87K\x13\xd3_\xd1",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:47:33.086047 51777 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x19\xf7ag\xb3\xbfO\xeb\x95C\x1b_\xe3j\xaa\xda",
      02: secret (string) = "\x90n\xd5~\x91\x84ML\x9fH\x87K\x13\xd3_\xd1",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:47:33.087095 51777 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x19\xf7ag\xb3\xbfO\xeb\x95C\x1b_\xe3j\xaa\xda",
      02: secret (string) = "\x90n\xd5~\x91\x84ML\x9fH\x87K\x13\xd3_\xd1",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:47:33.090600 51777 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:33.121341 51777 Frontend.java:935] Analyzing query: use `dw04_sjfx`;
I0825 11:47:33.129717 51777 Frontend.java:947] Analysis finished.
I0825 11:47:33.184098 51777 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xef\xae`pM\xb4E~\x00\x00\x00\x00\xf9/}\xbd",
      02: secret (string) = "\xef\xae`pM\xb4E~\x00\x00\x00\x00\xf9/}\xbd",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:47:33.191498 51777 impala-hs2-server.cc:683] CloseOperation(): query_id=7e45b44d7060aeef:bd7d2ff900000000
I0825 11:47:33.192878 51777 impala-server.cc:1015] UnregisterQuery(): query_id=7e45b44d7060aeef:bd7d2ff900000000
I0825 11:47:33.193784 51777 impala-server.cc:1102] Cancel(): query_id=7e45b44d7060aeef:bd7d2ff900000000
I0825 11:47:33.217980 51777 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x19\xf7ag\xb3\xbfO\xeb\x95C\x1b_\xe3j\xaa\xda",
      02: secret (string) = "\x90n\xd5~\x91\x84ML\x9fH\x87K\x13\xd3_\xd1",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:47:33.218618 51777 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x19\xf7ag\xb3\xbfO\xeb\x95C\x1b_\xe3j\xaa\xda",
      02: secret (string) = "\x90n\xd5~\x91\x84ML\x9fH\x87K\x13\xd3_\xd1",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:47:33.220456 51777 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:33.248827 51777 Frontend.java:935] Analyzing query: set REQUEST_POOL = 'agilebi';
I0825 11:47:33.259281 51777 Frontend.java:947] Analysis finished.
I0825 11:47:33.270476 51777 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x1d\x9f\xda\x12j\xc3D\x1c\x00\x00\x00\x00\xceU\x87>",
      02: secret (string) = "\x1d\x9f\xda\x12j\xc3D\x1c\x00\x00\x00\x00\xceU\x87>",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:47:33.280827 51777 impala-hs2-server.cc:683] CloseOperation(): query_id=1c44c36a12da9f1d:3e8755ce00000000
I0825 11:47:33.282101 51777 impala-server.cc:1015] UnregisterQuery(): query_id=1c44c36a12da9f1d:3e8755ce00000000
I0825 11:47:33.283510 51777 impala-server.cc:1102] Cancel(): query_id=1c44c36a12da9f1d:3e8755ce00000000
I0825 11:47:33.310705 51777 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x19\xf7ag\xb3\xbfO\xeb\x95C\x1b_\xe3j\xaa\xda",
      02: secret (string) = "\x90n\xd5~\x91\x84ML\x9fH\x87K\x13\xd3_\xd1",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:47:33.311177 51777 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x19\xf7ag\xb3\xbfO\xeb\x95C\x1b_\xe3j\xaa\xda",
      02: secret (string) = "\x90n\xd5~\x91\x84ML\x9fH\x87K\x13\xd3_\xd1",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:47:33.312229 51777 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:33.328572 51777 Frontend.java:935] Analyzing query: set MEM_LIMIT = 1024000000;
I0825 11:47:33.329372 51777 Frontend.java:947] Analysis finished.
I0825 11:47:33.342909 51777 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xcd\x03,\x9c\xcd\x1aD%\x00\x00\x00\x00\x1d\xcdn/",
      02: secret (string) = "\xcd\x03,\x9c\xcd\x1aD%\x00\x00\x00\x00\x1d\xcdn/",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:47:33.349715 51777 impala-hs2-server.cc:683] CloseOperation(): query_id=25441acd9c2c03cd:2f6ecd1d00000000
I0825 11:47:33.350389 51777 impala-server.cc:1015] UnregisterQuery(): query_id=25441acd9c2c03cd:2f6ecd1d00000000
I0825 11:47:33.350997 51777 impala-server.cc:1102] Cancel(): query_id=25441acd9c2c03cd:2f6ecd1d00000000
I0825 11:47:33.361436 51777 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x19\xf7ag\xb3\xbfO\xeb\x95C\x1b_\xe3j\xaa\xda",
      02: secret (string) = "\x90n\xd5~\x91\x84ML\x9fH\x87K\x13\xd3_\xd1",
    },
  },
  02: statement (string) = "DESCRIBE `default`.`APP_AUAP_YK_ORG`",
  04: runAsync (bool) = true,
}
I0825 11:47:33.361701 51777 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x19\xf7ag\xb3\xbfO\xeb\x95C\x1b_\xe3j\xaa\xda",
      02: secret (string) = "\x90n\xd5~\x91\x84ML\x9fH\x87K\x13\xd3_\xd1",
    },
  },
  02: statement (string) = "DESCRIBE `default`.`APP_AUAP_YK_ORG`",
  04: runAsync (bool) = true,
}
I0825 11:47:33.362532 51777 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:33.373361 51777 Frontend.java:935] Analyzing query: DESCRIBE `default`.`APP_AUAP_YK_ORG`
I0825 11:47:33.374472 51777 jni-util.cc:230] org.apache.impala.common.AnalysisException: Could not resolve path: 'default.app_auap_yk_org'
	at org.apache.impala.analysis.Analyzer.resolvePath(Analyzer.java:791)
	at org.apache.impala.analysis.Analyzer.resolvePath(Analyzer.java:746)
	at org.apache.impala.analysis.DescribeTableStmt.analyze(DescribeTableStmt.java:112)
	at org.apache.impala.analysis.AnalysisContext.analyze(AnalysisContext.java:424)
	at org.apache.impala.analysis.AnalysisContext.analyzeAndAuthorize(AnalysisContext.java:393)
	at org.apache.impala.service.Frontend.createExecRequest(Frontend.java:946)
	at org.apache.impala.service.JniFrontend.createExecRequest(JniFrontend.java:156)
I0825 11:47:35.202786 45244 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): d47b204e8371989:69364fe000000000
I0825 11:47:35.546792 51777 status.cc:125] AnalysisException: Could not resolve path: 'default.app_auap_yk_org'
    @           0x9e215a  impala::Status::Status()
    @           0xd7568d  impala::JniUtil::GetJniExceptionMsg()
    @           0xc685b0  impala::Frontend::GetExecRequest()
    @           0xc87712  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:47:35.548205 51777 impala-server.cc:1015] UnregisterQuery(): query_id=1d4571052a2243da:2b33211100000000
I0825 11:47:35.548295 51777 impala-server.cc:1102] Cancel(): query_id=1d4571052a2243da:2b33211100000000
I0825 11:47:35.622087 51777 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x19\xf7ag\xb3\xbfO\xeb\x95C\x1b_\xe3j\xaa\xda",
      02: secret (string) = "\x90n\xd5~\x91\x84ML\x9fH\x87K\x13\xd3_\xd1",
    },
  },
  02: statement (string) = "DESCRIBE `default`.`APP_AUAP_YK_ORG`",
  04: runAsync (bool) = true,
}
I0825 11:47:35.622522 51777 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x19\xf7ag\xb3\xbfO\xeb\x95C\x1b_\xe3j\xaa\xda",
      02: secret (string) = "\x90n\xd5~\x91\x84ML\x9fH\x87K\x13\xd3_\xd1",
    },
  },
  02: statement (string) = "DESCRIBE `default`.`APP_AUAP_YK_ORG`",
  04: runAsync (bool) = true,
}
I0825 11:47:35.623427 51777 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:35.634706 51777 Frontend.java:935] Analyzing query: DESCRIBE `default`.`APP_AUAP_YK_ORG`
I0825 11:47:35.636175 51777 jni-util.cc:230] org.apache.impala.common.AnalysisException: Could not resolve path: 'default.app_auap_yk_org'
	at org.apache.impala.analysis.Analyzer.resolvePath(Analyzer.java:791)
	at org.apache.impala.analysis.Analyzer.resolvePath(Analyzer.java:746)
	at org.apache.impala.analysis.DescribeTableStmt.analyze(DescribeTableStmt.java:112)
	at org.apache.impala.analysis.AnalysisContext.analyze(AnalysisContext.java:424)
	at org.apache.impala.analysis.AnalysisContext.analyzeAndAuthorize(AnalysisContext.java:393)
	at org.apache.impala.service.Frontend.createExecRequest(Frontend.java:946)
	at org.apache.impala.service.JniFrontend.createExecRequest(JniFrontend.java:156)
I0825 11:47:35.960889 51809 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:35.966686 51809 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:35.982177 51810 query-exec-mgr.cc:95] QueryState: query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:35.987290 51810 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:36.002444 51811 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:36.005990 51811 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:36.027371 51812 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:36.028198 51812 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:36.081635 51755 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:36.082469 51755 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:37.192217 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:47:37.423815 51814 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:47:37.459522 51814 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x94\xd2\\c\x89\xd8OX\x93\x02\x04\x8c\xfb\xb2\xe1\x1d",
      02: secret (string) = "ju\xa9:\xe8\x88L\xec\x8d=\x1a\x11)I\x03\x92",
    },
  },
  02: statement (string) = "use dw20",
  04: runAsync (bool) = true,
}
I0825 11:47:37.460131 51814 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x94\xd2\\c\x89\xd8OX\x93\x02\x04\x8c\xfb\xb2\xe1\x1d",
      02: secret (string) = "ju\xa9:\xe8\x88L\xec\x8d=\x1a\x11)I\x03\x92",
    },
  },
  02: statement (string) = "use dw20",
  04: runAsync (bool) = true,
}
I0825 11:47:37.464252 51814 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:37.497284 51814 Frontend.java:935] Analyzing query: use dw20
I0825 11:47:37.498737 51814 Frontend.java:947] Analysis finished.
I0825 11:47:37.592057 51814 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xcd\xd9\x9b\xdb\xbafK\x15\x00\x00\x00\x00\xf1@h\x89",
      02: secret (string) = "\xcd\xd9\x9b\xdb\xbafK\x15\x00\x00\x00\x00\xf1@h\x89",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:47:37.607043 51814 impala-hs2-server.cc:683] CloseOperation(): query_id=154b66badb9bd9cd:896840f100000000
I0825 11:47:37.607450 51814 impala-server.cc:1015] UnregisterQuery(): query_id=154b66badb9bd9cd:896840f100000000
I0825 11:47:37.607759 51814 impala-server.cc:1102] Cancel(): query_id=154b66badb9bd9cd:896840f100000000
I0825 11:47:37.637405 51814 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x94\xd2\\c\x89\xd8OX\x93\x02\x04\x8c\xfb\xb2\xe1\x1d",
      02: secret (string) = "ju\xa9:\xe8\x88L\xec\x8d=\x1a\x11)I\x03\x92",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:47:37.638518 51814 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x94\xd2\\c\x89\xd8OX\x93\x02\x04\x8c\xfb\xb2\xe1\x1d",
      02: secret (string) = "ju\xa9:\xe8\x88L\xec\x8d=\x1a\x11)I\x03\x92",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:47:37.639565 51814 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:37.652225 51814 Frontend.java:935] Analyzing query: set mem_limit='8g'
I0825 11:47:37.662528 51814 Frontend.java:947] Analysis finished.
I0825 11:47:37.671298 51814 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x05\x13\xa3\xba\"\xbaF\xe5\x00\x00\x00\x00\x9d\x8f\x13\xe9",
      02: secret (string) = "\x05\x13\xa3\xba\"\xbaF\xe5\x00\x00\x00\x00\x9d\x8f\x13\xe9",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:47:37.677094 51814 impala-hs2-server.cc:683] CloseOperation(): query_id=e546ba22baa31305:e9138f9d00000000
I0825 11:47:37.677595 51814 impala-server.cc:1015] UnregisterQuery(): query_id=e546ba22baa31305:e9138f9d00000000
I0825 11:47:37.680200 51814 impala-server.cc:1102] Cancel(): query_id=e546ba22baa31305:e9138f9d00000000
I0825 11:47:37.686738 51814 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x94\xd2\\c\x89\xd8OX\x93\x02\x04\x8c\xfb\xb2\xe1\x1d",
      02: secret (string) = "ju\xa9:\xe8\x88L\xec\x8d=\x1a\x11)I\x03\x92",
    },
  },
  02: statement (string) = "DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`",
  04: runAsync (bool) = true,
}
I0825 11:47:37.687430 51814 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x94\xd2\\c\x89\xd8OX\x93\x02\x04\x8c\xfb\xb2\xe1\x1d",
      02: secret (string) = "ju\xa9:\xe8\x88L\xec\x8d=\x1a\x11)I\x03\x92",
    },
  },
  02: statement (string) = "DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`",
  04: runAsync (bool) = true,
}
I0825 11:47:37.688107 51814 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:37.699200 51814 Frontend.java:935] Analyzing query: DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`
I0825 11:47:37.702046 51814 Frontend.java:947] Analysis finished.
I0825 11:47:37.855188 51814 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x8f\xf5>L\x1d\xd9J.\x00\x00\x00\x00y\xfd/=",
      02: secret (string) = "\x8f\xf5>L\x1d\xd9J.\x00\x00\x00\x00y\xfd/=",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:47:37.863405 51814 impala-hs2-server.cc:683] CloseOperation(): query_id=2e4ad91d4c3ef58f:3d2ffd7900000000
I0825 11:47:37.863641 51814 impala-server.cc:1015] UnregisterQuery(): query_id=2e4ad91d4c3ef58f:3d2ffd7900000000
I0825 11:47:37.864003 51814 impala-server.cc:1102] Cancel(): query_id=2e4ad91d4c3ef58f:3d2ffd7900000000
I0825 11:47:37.873513 51814 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x94\xd2\\c\x89\xd8OX\x93\x02\x04\x8c\xfb\xb2\xe1\x1d",
      02: secret (string) = "ju\xa9:\xe8\x88L\xec\x8d=\x1a\x11)I\x03\x92",
    },
  },
  02: statement (string) = "SELECT `cnpc_vie[...](10454)",
  04: runAsync (bool) = true,
}
I0825 11:47:37.874202 51814 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x94\xd2\\c\x89\xd8OX\x93\x02\x04\x8c\xfb\xb2\xe1\x1d",
      02: secret (string) = "ju\xa9:\xe8\x88L\xec\x8d=\x1a\x11)I\x03\x92",
    },
  },
  02: statement (string) = "SELECT `cnpc_vie[...](10454)",
  04: runAsync (bool) = true,
}
I0825 11:47:37.875173 51814 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:37.887228 51814 Frontend.java:935] Analyzing query: SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey` AS `bi_16209772373942822610` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator` AS `bi_7173110153481771205` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`created` AS `bi_13491404487973529010` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor` AS `bi_16709338949652660965` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited` AS `bi_7778611651735101528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t` AS `bi_5365439428354097443` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode` AS `bi_17739814079848908328` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`code` AS `bi_2232887874484344045` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode` AS `bi_369040516142209005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename` AS `bi_6559770015537514515` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`name` AS `bi_15189533194949851777` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename` AS `bi_7541878364736470844` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename` AS `bi_5792701378059420076` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename` AS `bi_3349638123191173855` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename` AS `bi_15445715632339295217` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname` AS `bi_9114563080665146699` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname` AS `bi_13865388329565152770` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname` AS `bi_12093476229320587287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname` AS `bi_5623662814544693635` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname` AS `bi_13683947135958082930` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw` AS `bi_11924957536007553338` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate` AS `bi_614967852965536978` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate` AS `bi_5003822878387321743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate` AS `bi_6413940051808780525` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment` AS `bi_11216260561419591329` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark` AS `bi_15719283721382345906` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone` AS `bi_2135828979746422287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername` AS `bi_8234557137695700893` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion` AS `bi_5133013160763149225` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname` AS `bi_2661014466711632970` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername` AS `bi_13689588754024198241` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate` AS `bi_11029029363983356005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate` AS `bi_6920746512342794880` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate` AS `bi_1980803134228074743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode` AS `bi_16284813439853843418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname` AS `bi_4893616353618505239` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail` AS `bi_7824035878402166299` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname` AS `bi_17834913520635724437` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid` AS `bi_1963530120962417240` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname` AS `bi_5127572173810565873` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype` AS `bi_2440282083506678752` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey` AS `bi_5524861625849511082` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid` AS `bi_13360343267273546668` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode` AS `bi_13600932575276159557` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname` AS `bi_10699817008190601050` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short` AS `bi_15916860084426853186` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode` AS `bi_4007708937737028237` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname` AS `bi_7467729968303243062` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short` AS `bi_16247278283018779660` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` AS `bi_14123165879102550317`  FROM (SELECT `temp_sql_wrapper_table`.`rowkey` AS `rowkey` , `temp_sql_wrapper_table`.`creator` AS `creator` , `temp_sql_wrapper_table`.`created` AS `created` , `temp_sql_wrapper_table`.`editor` AS `editor` , `temp_sql_wrapper_table`.`edited` AS `edited` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`declarecode` AS `declarecode` , `temp_sql_wrapper_table`.`code` AS `code` , `temp_sql_wrapper_table`.`interiorcode` AS `interiorcode` , `temp_sql_wrapper_table`.`choicetypename` AS `choicetypename` , `temp_sql_wrapper_table`.`name` AS `name` , `temp_sql_wrapper_table`.`objectssumtypename` AS `objectssumtypename` , `temp_sql_wrapper_table`.`typename` AS `typename` , `temp_sql_wrapper_table`.`subtypename` AS `subtypename` , `temp_sql_wrapper_table`.`endtypename` AS `endtypename` , `temp_sql_wrapper_table`.`ourstatusname` AS `ourstatusname` , `temp_sql_wrapper_table`.`fundditchname` AS `fundditchname` , `temp_sql_wrapper_table`.`subfundditchname` AS `subfundditchname` , `temp_sql_wrapper_table`.`fundallocationname` AS `fundallocationname` , `temp_sql_wrapper_table`.`deptidname` AS `deptidname` , `temp_sql_wrapper_table`.`dependlaw` AS `dependlaw` , `temp_sql_wrapper_table`.`startperformingdate` AS `startperformingdate` , `temp_sql_wrapper_table`.`endperformingdate` AS `endperformingdate` , `temp_sql_wrapper_table`.`performfinishdate` AS `performfinishdate` , `temp_sql_wrapper_table`.`performfinishcomment` AS `performfinishcomment` , `temp_sql_wrapper_table`.`remark` AS `remark` , `temp_sql_wrapper_table`.`undertakerphone` AS `undertakerphone` , `temp_sql_wrapper_table`.`undertakername` AS `undertakername` , `temp_sql_wrapper_table`.`undertakeropinion` AS `undertakeropinion` , `temp_sql_wrapper_table`.`undertakedeptname` AS `undertakedeptname` , `temp_sql_wrapper_table`.`deptchargername` AS `deptchargername` , `temp_sql_wrapper_table`.`submitteddate` AS `submitteddate` , `temp_sql_wrapper_table`.`createdate` AS `createdate` , `temp_sql_wrapper_table`.`modifydate` AS `modifydate` , `temp_sql_wrapper_table`.`localcode` AS `localcode` , `temp_sql_wrapper_table`.`frameworkname` AS `frameworkname` , `temp_sql_wrapper_table`.`notbiddingreasondetail` AS `notbiddingreasondetail` , `temp_sql_wrapper_table`.`connectedtransactionsname` AS `connectedtransactionsname` , `temp_sql_wrapper_table`.`performanceid` AS `performanceid` , `temp_sql_wrapper_table`.`relatormodel_counterpartyname` AS `relatormodel_counterpartyname` , `temp_sql_wrapper_table`.`relatormodel_orgtype` AS `relatormodel_orgtype` , `temp_sql_wrapper_table`.`relatormodel_rowkey` AS `relatormodel_rowkey` , `temp_sql_wrapper_table`.`signexaminationfileid` AS `signexaminationfileid` , `temp_sql_wrapper_table`.`groupcode` AS `groupcode` , `temp_sql_wrapper_table`.`groupname` AS `groupname` , `temp_sql_wrapper_table`.`groupname_short` AS `groupname_short` , `temp_sql_wrapper_table`.`regcode` AS `regcode` , `temp_sql_wrapper_table`.`regname` AS `regname` , `temp_sql_wrapper_table`.`regname_short` AS `regname_short` , `temp_sql_wrapper_table`.`etl_date` AS `etl_date`  FROM (SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`created`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`code`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`name`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` FROM `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120` `cnpc_view_ctms_v2_b_contractinfo_c120`  LIMIT 1000 ) `temp_sql_wrapper_table`) `cnpc_view_ctms_v2_b_contractinfo_c120` LIMIT 1200001 
I0825 11:47:37.892802 51814 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:47:37.893694 51814 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:47:37.897562 51814 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:47:37.901024 51814 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:47:37.937748 51814 Frontend.java:947] Analysis finished.
I0825 11:47:37.953737 51814 admission-controller.cc:508] Schedule for id=5b4e0f046842283b:c959b8c500000000 in pool_name=root.default cluster_mem_needed=16.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
I0825 11:47:37.955044 51814 admission-controller.cc:513] Stats: agg_num_running=11, agg_num_queued=0, agg_mem_reserved=424.00 GB,  local_host(local_mem_admitted=200.00 GB, num_admitted_running=5, num_queued=0, backend_mem_reserved=88.00 GB)
I0825 11:47:37.958734 51814 admission-controller.cc:529] Admitted query id=5b4e0f046842283b:c959b8c500000000
I0825 11:47:37.959467 51814 coordinator.cc:93] Exec() query_id=5b4e0f046842283b:c959b8c500000000 stmt=SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey` AS `bi_16209772373942822610` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator` AS `bi_7173110153481771205` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`created` AS `bi_13491404487973529010` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor` AS `bi_16709338949652660965` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited` AS `bi_7778611651735101528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t` AS `bi_5365439428354097443` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode` AS `bi_17739814079848908328` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`code` AS `bi_2232887874484344045` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode` AS `bi_369040516142209005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename` AS `bi_6559770015537514515` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`name` AS `bi_15189533194949851777` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename` AS `bi_7541878364736470844` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename` AS `bi_5792701378059420076` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename` AS `bi_3349638123191173855` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename` AS `bi_15445715632339295217` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname` AS `bi_9114563080665146699` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname` AS `bi_13865388329565152770` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname` AS `bi_12093476229320587287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname` AS `bi_5623662814544693635` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname` AS `bi_13683947135958082930` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw` AS `bi_11924957536007553338` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate` AS `bi_614967852965536978` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate` AS `bi_5003822878387321743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate` AS `bi_6413940051808780525` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment` AS `bi_11216260561419591329` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark` AS `bi_15719283721382345906` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone` AS `bi_2135828979746422287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername` AS `bi_8234557137695700893` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion` AS `bi_5133013160763149225` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname` AS `bi_2661014466711632970` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername` AS `bi_13689588754024198241` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate` AS `bi_11029029363983356005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate` AS `bi_6920746512342794880` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate` AS `bi_1980803134228074743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode` AS `bi_16284813439853843418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname` AS `bi_4893616353618505239` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail` AS `bi_7824035878402166299` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname` AS `bi_17834913520635724437` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid` AS `bi_1963530120962417240` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname` AS `bi_5127572173810565873` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype` AS `bi_2440282083506678752` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey` AS `bi_5524861625849511082` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid` AS `bi_13360343267273546668` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode` AS `bi_13600932575276159557` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname` AS `bi_10699817008190601050` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short` AS `bi_15916860084426853186` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode` AS `bi_4007708937737028237` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname` AS `bi_7467729968303243062` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short` AS `bi_16247278283018779660` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` AS `bi_14123165879102550317`  FROM (SELECT `temp_sql_wrapper_table`.`rowkey` AS `rowkey` , `temp_sql_wrapper_table`.`creator` AS `creator` , `temp_sql_wrapper_table`.`created` AS `created` , `temp_sql_wrapper_table`.`editor` AS `editor` , `temp_sql_wrapper_table`.`edited` AS `edited` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`declarecode` AS `declarecode` , `temp_sql_wrapper_table`.`code` AS `code` , `temp_sql_wrapper_table`.`interiorcode` AS `interiorcode` , `temp_sql_wrapper_table`.`choicetypename` AS `choicetypename` , `temp_sql_wrapper_table`.`name` AS `name` , `temp_sql_wrapper_table`.`objectssumtypename` AS `objectssumtypename` , `temp_sql_wrapper_table`.`typename` AS `typename` , `temp_sql_wrapper_table`.`subtypename` AS `subtypename` , `temp_sql_wrapper_table`.`endtypename` AS `endtypename` , `temp_sql_wrapper_table`.`ourstatusname` AS `ourstatusname` , `temp_sql_wrapper_table`.`fundditchname` AS `fundditchname` , `temp_sql_wrapper_table`.`subfundditchname` AS `subfundditchname` , `temp_sql_wrapper_table`.`fundallocationname` AS `fundallocationname` , `temp_sql_wrapper_table`.`deptidname` AS `deptidname` , `temp_sql_wrapper_table`.`dependlaw` AS `dependlaw` , `temp_sql_wrapper_table`.`startperformingdate` AS `startperformingdate` , `temp_sql_wrapper_table`.`endperformingdate` AS `endperformingdate` , `temp_sql_wrapper_table`.`performfinishdate` AS `performfinishdate` , `temp_sql_wrapper_table`.`performfinishcomment` AS `performfinishcomment` , `temp_sql_wrapper_table`.`remark` AS `remark` , `temp_sql_wrapper_table`.`undertakerphone` AS `undertakerphone` , `temp_sql_wrapper_table`.`undertakername` AS `undertakername` , `temp_sql_wrapper_table`.`undertakeropinion` AS `undertakeropinion` , `temp_sql_wrapper_table`.`undertakedeptname` AS `undertakedeptname` , `temp_sql_wrapper_table`.`deptchargername` AS `deptchargername` , `temp_sql_wrapper_table`.`submitteddate` AS `submitteddate` , `temp_sql_wrapper_table`.`createdate` AS `createdate` , `temp_sql_wrapper_table`.`modifydate` AS `modifydate` , `temp_sql_wrapper_table`.`localcode` AS `localcode` , `temp_sql_wrapper_table`.`frameworkname` AS `frameworkname` , `temp_sql_wrapper_table`.`notbiddingreasondetail` AS `notbiddingreasondetail` , `temp_sql_wrapper_table`.`connectedtransactionsname` AS `connectedtransactionsname` , `temp_sql_wrapper_table`.`performanceid` AS `performanceid` , `temp_sql_wrapper_table`.`relatormodel_counterpartyname` AS `relatormodel_counterpartyname` , `temp_sql_wrapper_table`.`relatormodel_orgtype` AS `relatormodel_orgtype` , `temp_sql_wrapper_table`.`relatormodel_rowkey` AS `relatormodel_rowkey` , `temp_sql_wrapper_table`.`signexaminationfileid` AS `signexaminationfileid` , `temp_sql_wrapper_table`.`groupcode` AS `groupcode` , `temp_sql_wrapper_table`.`groupname` AS `groupname` , `temp_sql_wrapper_table`.`groupname_short` AS `groupname_short` , `temp_sql_wrapper_table`.`regcode` AS `regcode` , `temp_sql_wrapper_table`.`regname` AS `regname` , `temp_sql_wrapper_table`.`regname_short` AS `regname_short` , `temp_sql_wrapper_table`.`etl_date` AS `etl_date`  FROM (SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`created`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`code`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`name`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` FROM `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120` `cnpc_view_ctms_v2_b_contractinfo_c120`  LIMIT 1000 ) `temp_sql_wrapper_table`) `cnpc_view_ctms_v2_b_contractinfo_c120` LIMIT 1200001 
I0825 11:47:37.963053 51814 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:47:37.964053 51814 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:47:37.966127 51814 coordinator.cc:349] starting execution on 2 backends for query_id=5b4e0f046842283b:c959b8c500000000
I0825 11:47:37.970928 45240 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=5b4e0f046842283b:c959b8c500000000
I0825 11:47:37.971369 45240 query-exec-mgr.cc:46] StartQueryFInstances() query_id=5b4e0f046842283b:c959b8c500000000 coord=e4bdhpp025:22000
I0825 11:47:37.971683 45240 query-state.cc:178] Buffer pool limit for 5b4e0f046842283b:c959b8c500000000: 6871947673
I0825 11:47:37.972391 45240 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 5b4e0f046842283b:c959b8c500000000
I0825 11:47:37.974649 51821 query-state.cc:300] StartFInstances(): query_id=5b4e0f046842283b:c959b8c500000000 #instances=1
I0825 11:47:37.978693 51821 query-state.cc:313] descriptor table for query=5b4e0f046842283b:c959b8c500000000
tuples:
Tuple(id=0 size=807 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=800 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=800 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=TIMESTAMP col_path=[2] offset=32 null=(offset=800 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[3] offset=48 null=(offset=800 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=TIMESTAMP col_path=[4] offset=64 null=(offset=800 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=STRING col_path=[8] offset=80 null=(offset=800 mask=20) slot_idx=5 field_idx=-1), Slot(id=6 type=STRING col_path=[9] offset=96 null=(offset=800 mask=40) slot_idx=6 field_idx=-1), Slot(id=7 type=STRING col_path=[10] offset=112 null=(offset=800 mask=80) slot_idx=7 field_idx=-1), Slot(id=8 type=STRING col_path=[11] offset=128 null=(offset=801 mask=1) slot_idx=8 field_idx=-1), Slot(id=9 type=STRING col_path=[13] offset=144 null=(offset=801 mask=2) slot_idx=9 field_idx=-1), Slot(id=10 type=STRING col_path=[15] offset=160 null=(offset=801 mask=4) slot_idx=10 field_idx=-1), Slot(id=11 type=STRING col_path=[19] offset=176 null=(offset=801 mask=8) slot_idx=11 field_idx=-1), Slot(id=12 type=STRING col_path=[21] offset=192 null=(offset=801 mask=10) slot_idx=12 field_idx=-1), Slot(id=13 type=STRING col_path=[23] offset=208 null=(offset=801 mask=20) slot_idx=13 field_idx=-1), Slot(id=14 type=STRING col_path=[25] offset=224 null=(offset=801 mask=40) slot_idx=14 field_idx=-1), Slot(id=15 type=STRING col_path=[27] offset=240 null=(offset=801 mask=80) slot_idx=15 field_idx=-1), Slot(id=16 type=STRING col_path=[32] offset=256 null=(offset=802 mask=1) slot_idx=16 field_idx=-1), Slot(id=17 type=STRING col_path=[34] offset=272 null=(offset=802 mask=2) slot_idx=17 field_idx=-1), Slot(id=18 type=STRING col_path=[36] offset=288 null=(offset=802 mask=4) slot_idx=18 field_idx=-1), Slot(id=19 type=STRING col_path=[38] offset=304 null=(offset=802 mask=8) slot_idx=19 field_idx=-1), Slot(id=20 type=STRING col_path=[39] offset=320 null=(offset=802 mask=10) slot_idx=20 field_idx=-1), Slot(id=21 type=TIMESTAMP col_path=[40] offset=336 null=(offset=802 mask=20) slot_idx=21 field_idx=-1), Slot(id=22 type=TIMESTAMP col_path=[41] offset=352 null=(offset=802 mask=40) slot_idx=22 field_idx=-1), Slot(id=23 type=TIMESTAMP col_path=[42] offset=368 null=(offset=802 mask=80) slot_idx=23 field_idx=-1), Slot(id=24 type=STRING col_path=[43] offset=384 null=(offset=803 mask=1) slot_idx=24 field_idx=-1), Slot(id=25 type=STRING col_path=[44] offset=400 null=(offset=803 mask=2) slot_idx=25 field_idx=-1), Slot(id=26 type=STRING col_path=[46] offset=416 null=(offset=803 mask=4) slot_idx=26 field_idx=-1), Slot(id=27 type=STRING col_path=[47] offset=432 null=(offset=803 mask=8) slot_idx=27 field_idx=-1), Slot(id=28 type=STRING col_path=[48] offset=448 null=(offset=803 mask=10) slot_idx=28 field_idx=-1), Slot(id=29 type=STRING col_path=[50] offset=464 null=(offset=803 mask=20) slot_idx=29 field_idx=-1), Slot(id=30 type=STRING col_path=[52] offset=480 null=(offset=803 mask=40) slot_idx=30 field_idx=-1), Slot(id=31 type=TIMESTAMP col_path=[53] offset=496 null=(offset=803 mask=80) slot_idx=31 field_idx=-1), Slot(id=32 type=TIMESTAMP col_path=[54] offset=512 null=(offset=804 mask=1) slot_idx=32 field_idx=-1), Slot(id=33 type=TIMESTAMP col_path=[55] offset=528 null=(offset=804 mask=2) slot_idx=33 field_idx=-1), Slot(id=34 type=STRING col_path=[58] offset=544 null=(offset=804 mask=4) slot_idx=34 field_idx=-1), Slot(id=35 type=STRING col_path=[68] offset=560 null=(offset=804 mask=8) slot_idx=35 field_idx=-1), Slot(id=36 type=STRING col_path=[70] offset=576 null=(offset=804 mask=10) slot_idx=36 field_idx=-1), Slot(id=37 type=STRING col_path=[71] offset=592 null=(offset=804 mask=20) slot_idx=37 field_idx=-1), Slot(id=38 type=STRING col_path=[74] offset=608 null=(offset=804 mask=40) slot_idx=38 field_idx=-1), Slot(id=39 type=STRING col_path=[75] offset=624 null=(offset=804 mask=80) slot_idx=39 field_idx=-1), Slot(id=40 type=STRING col_path=[76] offset=640 null=(offset=805 mask=1) slot_idx=40 field_idx=-1), Slot(id=41 type=STRING col_path=[77] offset=656 null=(offset=805 mask=2) slot_idx=41 field_idx=-1), Slot(id=42 type=STRING col_path=[81] offset=672 null=(offset=805 mask=4) slot_idx=42 field_idx=-1), Slot(id=43 type=STRING col_path=[83] offset=688 null=(offset=805 mask=8) slot_idx=43 field_idx=-1), Slot(id=44 type=STRING col_path=[84] offset=704 null=(offset=805 mask=10) slot_idx=44 field_idx=-1), Slot(id=45 type=STRING col_path=[85] offset=720 null=(offset=805 mask=20) slot_idx=45 field_idx=-1), Slot(id=46 type=STRING col_path=[86] offset=736 null=(offset=805 mask=40) slot_idx=46 field_idx=-1), Slot(id=47 type=STRING col_path=[87] offset=752 null=(offset=805 mask=80) slot_idx=47 field_idx=-1), Slot(id=48 type=STRING col_path=[88] offset=768 null=(offset=806 mask=1) slot_idx=48 field_idx=-1), Slot(id=49 type=TIMESTAMP col_path=[89] offset=784 null=(offset=806 mask=2) slot_idx=49 field_idx=-1)] tuple_path=[])
I0825 11:47:37.983693 51814 coordinator.cc:362] started execution on 2 backends for query_id=5b4e0f046842283b:c959b8c500000000
I0825 11:47:37.993793 51822 query-state.cc:395] Executing instance. instance_id=5b4e0f046842283b:c959b8c500000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=1 #in-flight=17
I0825 11:47:38.013239 51821 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5b4e0f046842283b:c959b8c500000000 refcnt=3
I0825 11:47:38.020215 51814 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = ";(Bh\x04\x0fN[\x00\x00\x00\x00\xc5\xb8Y\xc9",
      02: secret (string) = ";(Bh\x04\x0fN[\x00\x00\x00\x00\xc5\xb8Y\xc9",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:47:38.178396 51777 status.cc:125] AnalysisException: Could not resolve path: 'default.app_auap_yk_org'
    @           0x9e215a  impala::Status::Status()
    @           0xd7568d  impala::JniUtil::GetJniExceptionMsg()
    @           0xc685b0  impala::Frontend::GetExecRequest()
    @           0xc87712  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:47:38.188941 51777 impala-server.cc:1015] UnregisterQuery(): query_id=9d412bb9a9656a24:fdc0ad1b00000000
I0825 11:47:38.190701 51777 impala-server.cc:1102] Cancel(): query_id=9d412bb9a9656a24:fdc0ad1b00000000
I0825 11:47:38.267092 51777 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x19\xf7ag\xb3\xbfO\xeb\x95C\x1b_\xe3j\xaa\xda",
      02: secret (string) = "\x90n\xd5~\x91\x84ML\x9fH\x87K\x13\xd3_\xd1",
    },
  },
  02: statement (string) = "select   `bi_498[...](16042)",
  04: runAsync (bool) = true,
}
I0825 11:47:38.268332 51777 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x19\xf7ag\xb3\xbfO\xeb\x95C\x1b_\xe3j\xaa\xda",
      02: secret (string) = "\x90n\xd5~\x91\x84ML\x9fH\x87K\x13\xd3_\xd1",
    },
  },
  02: statement (string) = "select   `bi_498[...](16042)",
  04: runAsync (bool) = true,
}
I0825 11:47:38.270357 51777 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:38.293673 51777 Frontend.java:935] Analyzing query: select   `bi_49891432609270195`.`帐号` as `bi_9833225738464556179` , `bi_49891432609270195`.`卡号` as `bi_16765984159333439402` , `bi_49891432609270195`.`卡类型描述` as `bi_5452346849819763092` , `bi_49891432609270195`.`是否为副卡` as `bi_1127891584836197264` , `bi_49891432609270195`.`交易主要站点` as `bi_2545751338491490025` , `bi_49891432609270195`.`单位卡消费过加油站站点数量` as `bi_6441433733300507817` , `bi_49891432609270195`.`交易类型描述` as `bi_15038768847591068675` , `bi_49891432609270195`.`商品类型` as `bi_16492520468207201732` , `bi_49891432609270195`.`商品类型描述` as `bi_9376550538423824506` , `bi_49891432609270195`.`发卡单位` as `bi_8100659610193253660` , `bi_49891432609270195`.`发卡单位与销售单位是否一致` as `bi_18185366717104475339` , `bi_49891432609270195`.`首次交易日期` as `bi_16889103124287189574` , `bi_49891432609270195`.`最近交易日期` as `bi_2106395510405947614` , `bi_49891432609270195`.`平均油量升数` as `bi_12628198587542179019` , `bi_49891432609270195`.`平均消费金额` as `bi_1219558422880111543` , `bi_49891432609270195`.`平均折扣金额` as `bi_17915682550306328330` , `bi_49891432609270195`.`平均余额` as `bi_17675574034401517679` , `bi_49891432609270195`.`日均消费笔数` as `bi_1754130456570268440` , `bi_49891432609270195`.`日均消费金额` as `bi_15657812531500627407` , `bi_49891432609270195`.`单日消费次数过多次数` as `bi_17612086331363954540` , `bi_49891432609270195`.`日均夜间消费笔数` as `bi_17855986537495503686` , `bi_49891432609270195`.`日均夜间消费金额` as `bi_1043443510903046104` , `bi_49891432609270195`.`单日夜间消费次数过多次数` as `bi_4937558613390431945` , `bi_49891432609270195`.`睡眠次数` as `bi_7363935285664891950` , `bi_49891432609270195`.`是否仍在睡眠` as `bi_404517206247691038` , `bi_49891432609270195`.`单位卡累计消费金额` as `bi_13443197606867190735` , `bi_49891432609270195`.`单位卡消费金额方差` as `bi_4769556060708606987` , `bi_49891432609270195`.`单位卡累计消费次数` as `bi_3862957503352231103` , `bi_49891432609270195`.`单位卡消费金额为小数次数` as `bi_606582381051428439` , `bi_49891432609270195`.`单位卡汽油累计消费次数` as `bi_13160325095360504327` , `bi_49891432609270195`.`单位卡汽油累计消费金额` as `bi_8939036342664054168` , `bi_49891432609270195`.`单位卡消费过油品类型数量` as `bi_14603363494981556751` , `bi_49891432609270195`.`单位卡汽油消费次数占比` as `bi_5797665317184532235` , `bi_49891432609270195`.`单位卡柴油消费次数占比` as `bi_4405090079101472574` , `bi_49891432609270195`.`单位卡天然气消费次数占比` as `bi_10381659451279799103` , `bi_49891432609270195`.`累计消费金额是否过高475660453` as `bi_1539169295680080914` , `bi_49891432609270195`.`累计消费次数是否过多_1109338698` as `bi_14041556194125867668` , `bi_49891432609270195`.`非油累计消费金额` as `bi_7960903924678445128` , `bi_49891432609270195`.`非油与成品油消费金额比例` as `bi_17099085683607676327` , `bi_49891432609270195`.`单位卡累计充值金额` as `bi_8123294280144136192` , `bi_49891432609270195`.`单位卡银行卡充值次数` as `bi_880472205521468105` , `bi_49891432609270195`.`单位卡现金充值次数` as `bi_14776239947036545134` , `bi_49891432609270195`.`单日充值次数过多次数` as `bi_16074686502897337552` , `bi_49891432609270195`.`单位卡余额充足时充钱的次数` as `bi_7961857330449238144` , `bi_49891432609270195`.`ic卡大额非油消费次数` as `bi_5943549542113195618` , `bi_49891432609270195`.`单位卡柴油累计消费是否过高` as `bi_9444148203116406053` , `bi_49891432609270195`.`即消费且余额低的次数831743621` as `bi_12667250280629613856` , `bi_49891432609270195`.`同一班次消费的次数` as `bi_12375103238287348826` , `bi_49891432609270195`.`密码重置次数` as `bi_16654652680354768327` , `bi_49891432609270195`.`笔折扣额的消费的次数_2085032453` as `bi_17265400455728416625` , `bi_49891432609270195`.`是否曾频繁转账` as `bi_16101984035252136833` , `bi_49891432609270195`.`是否异常加油卡` as `bi_8173657367271516742` , `bi_49891432609270195`.`单位名称` as `bi_13896315529143866076` , `bi_49891432609270195`.`所属` as `bi_4248350677332311184` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_49891432609270195`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_6022750446866842230` , TRIM(`bi_49891432609270195`.`交易主要站点`) as `bi_14940694802980442301`   from (select   `app_auap_yk_org`.`帐号` as `帐号` , `app_auap_yk_org`.`卡号` as `卡号` , `app_auap_yk_org`.`卡类型描述` as `卡类型描述` , `app_auap_yk_org`.`是否为副卡` as `是否为副卡` , `app_auap_yk_org`.`交易主要站点` as `交易主要站点` , `app_auap_yk_org`.`单位卡消费过加油站站点数量` as `单位卡消费过加油站站点数量` , `app_auap_yk_org`.`交易类型描述` as `交易类型描述` , `app_auap_yk_org`.`商品类型` as `商品类型` , `app_auap_yk_org`.`商品类型描述` as `商品类型描述` , `app_auap_yk_org`.`发卡单位` as `发卡单位` , `app_auap_yk_org`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `app_auap_yk_org`.`首次交易日期` as `首次交易日期` , `app_auap_yk_org`.`最近交易日期` as `最近交易日期` , `app_auap_yk_org`.`平均油量升数` as `平均油量升数` , `app_auap_yk_org`.`平均消费金额` as `平均消费金额` , `app_auap_yk_org`.`平均折扣金额` as `平均折扣金额` , `app_auap_yk_org`.`平均余额` as `平均余额` , `app_auap_yk_org`.`日均消费笔数` as `日均消费笔数` , `app_auap_yk_org`.`日均消费金额` as `日均消费金额` , `app_auap_yk_org`.`单日消费次数过多次数` as `单日消费次数过多次数` , `app_auap_yk_org`.`日均夜间消费笔数` as `日均夜间消费笔数` , `app_auap_yk_org`.`日均夜间消费金额` as `日均夜间消费金额` , `app_auap_yk_org`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `app_auap_yk_org`.`睡眠次数` as `睡眠次数` , `app_auap_yk_org`.`是否仍在睡眠` as `是否仍在睡眠` , `app_auap_yk_org`.`单位卡累计消费金额` as `单位卡累计消费金额` , `app_auap_yk_org`.`单位卡消费金额方差` as `单位卡消费金额方差` , `app_auap_yk_org`.`单位卡累计消费次数` as `单位卡累计消费次数` , `app_auap_yk_org`.`单位卡消费金额为小数次数` as `单位卡消费金额为小数次数` , `app_auap_yk_org`.`单位卡汽油累计消费次数` as `单位卡汽油累计消费次数` , `app_auap_yk_org`.`单位卡汽油累计消费金额` as `单位卡汽油累计消费金额` , `app_auap_yk_org`.`单位卡消费过油品类型数量` as `单位卡消费过油品类型数量` , `app_auap_yk_org`.`单位卡汽油消费次数占比` as `单位卡汽油消费次数占比` , `app_auap_yk_org`.`单位卡柴油消费次数占比` as `单位卡柴油消费次数占比` , `app_auap_yk_org`.`单位卡天然气消费次数占比` as `单位卡天然气消费次数占比` , `app_auap_yk_org`.`单位卡非油累计消费金额是否过高` as `累计消费金额是否过高475660453` , `app_auap_yk_org`.`单位卡非油累计消费次数是否过多` as `累计消费次数是否过多_1109338698` , `app_auap_yk_org`.`非油累计消费金额` as `非油累计消费金额` , `app_auap_yk_org`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `app_auap_yk_org`.`单位卡累计充值金额` as `单位卡累计充值金额` , `app_auap_yk_org`.`单位卡银行卡充值次数` as `单位卡银行卡充值次数` , `app_auap_yk_org`.`单位卡现金充值次数` as `单位卡现金充值次数` , `app_auap_yk_org`.`单日充值次数过多次数` as `单日充值次数过多次数` , `app_auap_yk_org`.`单位卡余额充足时充钱的次数` as `单位卡余额充足时充钱的次数` , `app_auap_yk_org`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `app_auap_yk_org`.`单位卡柴油累计消费是否过高` as `单位卡柴油累计消费是否过高` , `app_auap_yk_org`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `app_auap_yk_org`.`同一班次消费的次数` as `同一班次消费的次数` , `app_auap_yk_org`.`密码重置次数` as `密码重置次数` , `app_auap_yk_org`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `app_auap_yk_org`.`是否曾频繁转账` as `是否曾频繁转账` , `app_auap_yk_org`.`是否异常加油卡` as `是否异常加油卡` , `app_auap_yk_org`.`单位名称` as `单位名称` , `app_auap_yk_org`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`单位卡消费过加油站站点数量` as `单位卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`单位卡累计消费金额` as `单位卡累计消费金额`,`单位卡消费金额方差` as `单位卡消费金额方差`,`单位卡累计消费次数` as `单位卡累计消费次数`,`单位卡消费金额为小数次数` as `单位卡消费金额为小数次数`,`单位卡汽油累计消费次数` as `单位卡汽油累计消费次数`,`单位卡汽油累计消费金额` as `单位卡汽油累计消费金额`,`单位卡消费过油品类型数量` as `单位卡消费过油品类型数量`,`单位卡汽油消费次数占比` as `单位卡汽油消费次数占比`,`单位卡柴油消费次数占比` as `单位卡柴油消费次数占比`,`单位卡天然气消费次数占比` as `单位卡天然气消费次数占比`,`单位卡非油累计消费金额是否过高` as `单位卡非油累计消费金额是否过高`,`单位卡非油累计消费次数是否过多` as `单位卡非油累计消费次数是否过多`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`单位卡累计充值金额` as `单位卡累计充值金额`,`单位卡银行卡充值次数` as `单位卡银行卡充值次数`,`单位卡现金充值次数` as `单位卡现金充值次数`,`单日充值次数过多次数` as `单日充值次数过多次数`,`单位卡余额充足时充钱的次数` as `单位卡余额充足时充钱的次数`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`单位卡柴油累计消费是否过高` as `单位卡柴油累计消费是否过高`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`单位卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`单位卡累计消费金额`,`单位卡消费金额方差`,`单位卡累计消费次数`,`单位卡消费金额为小数次数`,`单位卡汽油累计消费次数`,`单位卡汽油累计消费金额`,`单位卡消费过油品类型数量`,`单位卡汽油消费次数占比`,`单位卡柴油消费次数占比`,`单位卡天然气消费次数占比`,`单位卡非油累计消费金额是否过高`,`单位卡非油累计消费次数是否过多`,`非油累计消费金额`,`非油与成品油消费金额比例`,`单位卡累计充值金额`,`单位卡银行卡充值次数`,`单位卡现金充值次数`,`单日充值次数过多次数`,`单位卡余额充足时充钱的次数`,`ic卡大额非油消费次数`,`单位卡柴油累计消费是否过高`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `单位卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`,
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`,
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`, 
       `单日消费次数过多次数`, 
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`,
       `睡眠次数`,
       `是否仍在睡眠`,
       `单位卡累计消费金额`, 
       `加油卡消费金额方差` `单位卡消费金额方差`,
       `单位卡累计消费次数`, 
       `加油卡消费金额为小数次数` `单位卡消费金额为小数次数`,
       `单位卡汽油累计消费次数`, 
       `单位卡汽油累计消费金额`, 
       `单位卡消费过油品类型数量`,
       `单位卡汽油消费次数占比`, 
       `单位卡柴油消费次数占比`,
       `单位卡天然气消费次数占比`, 
       `单位卡非油累计消费金额是否过高`, 
       `单位卡非油累计消费次数是否过多`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `单位卡累计充值金额`,
       `银行卡充值次数` `单位卡银行卡充值次数`,
       `现金充值次数` `单位卡现金充值次数`,
       `单日充值次数过多次数`,
       `单位卡余额充足时充钱的次数`,
       `IC卡大额非油消费次数`,
       `单位卡柴油累计消费是否过高`,
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM APP_AUAP_YK_ORG) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `app_auap_yk_org`  
     ) `bi_49891432609270195`
      limit 1200001 
I0825 11:47:38.824417 51777 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:47:38.826090 51777 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:47:39.155437 51852 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:39.155987 51852 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:39.183923 51854 query-exec-mgr.cc:95] QueryState: query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:39.185156 51854 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:39.199456 51852 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:39.200543 51852 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:39.208446 51852 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:39.209048 51852 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:39.216136 51852 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:39.217211 51852 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:39.224839 51856 query-exec-mgr.cc:95] QueryState: query_id=5b4e0f046842283b:c959b8c500000000 refcnt=3
I0825 11:47:39.225805 51856 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5b4e0f046842283b:c959b8c500000000 refcnt=3
I0825 11:47:39.779356 51777 Frontend.java:947] Analysis finished.
I0825 11:47:39.790099 51777 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:47:39.791723 51777 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:47:39.828963 51777 admission-controller.cc:508] Schedule for id=e141542bad9ca589:160fc79100000000 in pool_name=root.agilebi cluster_mem_needed=4.77 GB PoolConfig: max_requests=500 max_queued=200 max_mem=800.00 GB
I0825 11:47:39.839278 51777 admission-controller.cc:513] Stats: agg_num_running=0, agg_num_queued=0, agg_mem_reserved=0,  local_host(local_mem_admitted=0, num_admitted_running=0, num_queued=0, backend_mem_reserved=0)
I0825 11:47:39.841917 51777 admission-controller.cc:529] Admitted query id=e141542bad9ca589:160fc79100000000
I0825 11:47:39.844321 51777 coordinator.cc:93] Exec() query_id=e141542bad9ca589:160fc79100000000 stmt=select   `bi_49891432609270195`.`帐号` as `bi_9833225738464556179` , `bi_49891432609270195`.`卡号` as `bi_16765984159333439402` , `bi_49891432609270195`.`卡类型描述` as `bi_5452346849819763092` , `bi_49891432609270195`.`是否为副卡` as `bi_1127891584836197264` , `bi_49891432609270195`.`交易主要站点` as `bi_2545751338491490025` , `bi_49891432609270195`.`单位卡消费过加油站站点数量` as `bi_6441433733300507817` , `bi_49891432609270195`.`交易类型描述` as `bi_15038768847591068675` , `bi_49891432609270195`.`商品类型` as `bi_16492520468207201732` , `bi_49891432609270195`.`商品类型描述` as `bi_9376550538423824506` , `bi_49891432609270195`.`发卡单位` as `bi_8100659610193253660` , `bi_49891432609270195`.`发卡单位与销售单位是否一致` as `bi_18185366717104475339` , `bi_49891432609270195`.`首次交易日期` as `bi_16889103124287189574` , `bi_49891432609270195`.`最近交易日期` as `bi_2106395510405947614` , `bi_49891432609270195`.`平均油量升数` as `bi_12628198587542179019` , `bi_49891432609270195`.`平均消费金额` as `bi_1219558422880111543` , `bi_49891432609270195`.`平均折扣金额` as `bi_17915682550306328330` , `bi_49891432609270195`.`平均余额` as `bi_17675574034401517679` , `bi_49891432609270195`.`日均消费笔数` as `bi_1754130456570268440` , `bi_49891432609270195`.`日均消费金额` as `bi_15657812531500627407` , `bi_49891432609270195`.`单日消费次数过多次数` as `bi_17612086331363954540` , `bi_49891432609270195`.`日均夜间消费笔数` as `bi_17855986537495503686` , `bi_49891432609270195`.`日均夜间消费金额` as `bi_1043443510903046104` , `bi_49891432609270195`.`单日夜间消费次数过多次数` as `bi_4937558613390431945` , `bi_49891432609270195`.`睡眠次数` as `bi_7363935285664891950` , `bi_49891432609270195`.`是否仍在睡眠` as `bi_404517206247691038` , `bi_49891432609270195`.`单位卡累计消费金额` as `bi_13443197606867190735` , `bi_49891432609270195`.`单位卡消费金额方差` as `bi_4769556060708606987` , `bi_49891432609270195`.`单位卡累计消费次数` as `bi_3862957503352231103` , `bi_49891432609270195`.`单位卡消费金额为小数次数` as `bi_606582381051428439` , `bi_49891432609270195`.`单位卡汽油累计消费次数` as `bi_13160325095360504327` , `bi_49891432609270195`.`单位卡汽油累计消费金额` as `bi_8939036342664054168` , `bi_49891432609270195`.`单位卡消费过油品类型数量` as `bi_14603363494981556751` , `bi_49891432609270195`.`单位卡汽油消费次数占比` as `bi_5797665317184532235` , `bi_49891432609270195`.`单位卡柴油消费次数占比` as `bi_4405090079101472574` , `bi_49891432609270195`.`单位卡天然气消费次数占比` as `bi_10381659451279799103` , `bi_49891432609270195`.`累计消费金额是否过高475660453` as `bi_1539169295680080914` , `bi_49891432609270195`.`累计消费次数是否过多_1109338698` as `bi_14041556194125867668` , `bi_49891432609270195`.`非油累计消费金额` as `bi_7960903924678445128` , `bi_49891432609270195`.`非油与成品油消费金额比例` as `bi_17099085683607676327` , `bi_49891432609270195`.`单位卡累计充值金额` as `bi_8123294280144136192` , `bi_49891432609270195`.`单位卡银行卡充值次数` as `bi_880472205521468105` , `bi_49891432609270195`.`单位卡现金充值次数` as `bi_14776239947036545134` , `bi_49891432609270195`.`单日充值次数过多次数` as `bi_16074686502897337552` , `bi_49891432609270195`.`单位卡余额充足时充钱的次数` as `bi_7961857330449238144` , `bi_49891432609270195`.`ic卡大额非油消费次数` as `bi_5943549542113195618` , `bi_49891432609270195`.`单位卡柴油累计消费是否过高` as `bi_9444148203116406053` , `bi_49891432609270195`.`即消费且余额低的次数831743621` as `bi_12667250280629613856` , `bi_49891432609270195`.`同一班次消费的次数` as `bi_12375103238287348826` , `bi_49891432609270195`.`密码重置次数` as `bi_16654652680354768327` , `bi_49891432609270195`.`笔折扣额的消费的次数_2085032453` as `bi_17265400455728416625` , `bi_49891432609270195`.`是否曾频繁转账` as `bi_16101984035252136833` , `bi_49891432609270195`.`是否异常加油卡` as `bi_8173657367271516742` , `bi_49891432609270195`.`单位名称` as `bi_13896315529143866076` , `bi_49891432609270195`.`所属` as `bi_4248350677332311184` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_49891432609270195`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_6022750446866842230` , TRIM(`bi_49891432609270195`.`交易主要站点`) as `bi_14940694802980442301`   from (select   `app_auap_yk_org`.`帐号` as `帐号` , `app_auap_yk_org`.`卡号` as `卡号` , `app_auap_yk_org`.`卡类型描述` as `卡类型描述` , `app_auap_yk_org`.`是否为副卡` as `是否为副卡` , `app_auap_yk_org`.`交易主要站点` as `交易主要站点` , `app_auap_yk_org`.`单位卡消费过加油站站点数量` as `单位卡消费过加油站站点数量` , `app_auap_yk_org`.`交易类型描述` as `交易类型描述` , `app_auap_yk_org`.`商品类型` as `商品类型` , `app_auap_yk_org`.`商品类型描述` as `商品类型描述` , `app_auap_yk_org`.`发卡单位` as `发卡单位` , `app_auap_yk_org`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `app_auap_yk_org`.`首次交易日期` as `首次交易日期` , `app_auap_yk_org`.`最近交易日期` as `最近交易日期` , `app_auap_yk_org`.`平均油量升数` as `平均油量升数` , `app_auap_yk_org`.`平均消费金额` as `平均消费金额` , `app_auap_yk_org`.`平均折扣金额` as `平均折扣金额` , `app_auap_yk_org`.`平均余额` as `平均余额` , `app_auap_yk_org`.`日均消费笔数` as `日均消费笔数` , `app_auap_yk_org`.`日均消费金额` as `日均消费金额` , `app_auap_yk_org`.`单日消费次数过多次数` as `单日消费次数过多次数` , `app_auap_yk_org`.`日均夜间消费笔数` as `日均夜间消费笔数` , `app_auap_yk_org`.`日均夜间消费金额` as `日均夜间消费金额` , `app_auap_yk_org`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `app_auap_yk_org`.`睡眠次数` as `睡眠次数` , `app_auap_yk_org`.`是否仍在睡眠` as `是否仍在睡眠` , `app_auap_yk_org`.`单位卡累计消费金额` as `单位卡累计消费金额` , `app_auap_yk_org`.`单位卡消费金额方差` as `单位卡消费金额方差` , `app_auap_yk_org`.`单位卡累计消费次数` as `单位卡累计消费次数` , `app_auap_yk_org`.`单位卡消费金额为小数次数` as `单位卡消费金额为小数次数` , `app_auap_yk_org`.`单位卡汽油累计消费次数` as `单位卡汽油累计消费次数` , `app_auap_yk_org`.`单位卡汽油累计消费金额` as `单位卡汽油累计消费金额` , `app_auap_yk_org`.`单位卡消费过油品类型数量` as `单位卡消费过油品类型数量` , `app_auap_yk_org`.`单位卡汽油消费次数占比` as `单位卡汽油消费次数占比` , `app_auap_yk_org`.`单位卡柴油消费次数占比` as `单位卡柴油消费次数占比` , `app_auap_yk_org`.`单位卡天然气消费次数占比` as `单位卡天然气消费次数占比` , `app_auap_yk_org`.`单位卡非油累计消费金额是否过高` as `累计消费金额是否过高475660453` , `app_auap_yk_org`.`单位卡非油累计消费次数是否过多` as `累计消费次数是否过多_1109338698` , `app_auap_yk_org`.`非油累计消费金额` as `非油累计消费金额` , `app_auap_yk_org`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `app_auap_yk_org`.`单位卡累计充值金额` as `单位卡累计充值金额` , `app_auap_yk_org`.`单位卡银行卡充值次数` as `单位卡银行卡充值次数` , `app_auap_yk_org`.`单位卡现金充值次数` as `单位卡现金充值次数` , `app_auap_yk_org`.`单日充值次数过多次数` as `单日充值次数过多次数` , `app_auap_yk_org`.`单位卡余额充足时充钱的次数` as `单位卡余额充足时充钱的次数` , `app_auap_yk_org`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `app_auap_yk_org`.`单位卡柴油累计消费是否过高` as `单位卡柴油累计消费是否过高` , `app_auap_yk_org`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `app_auap_yk_org`.`同一班次消费的次数` as `同一班次消费的次数` , `app_auap_yk_org`.`密码重置次数` as `密码重置次数` , `app_auap_yk_org`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `app_auap_yk_org`.`是否曾频繁转账` as `是否曾频繁转账` , `app_auap_yk_org`.`是否异常加油卡` as `是否异常加油卡` , `app_auap_yk_org`.`单位名称` as `单位名称` , `app_auap_yk_org`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`单位卡消费过加油站站点数量` as `单位卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`单位卡累计消费金额` as `单位卡累计消费金额`,`单位卡消费金额方差` as `单位卡消费金额方差`,`单位卡累计消费次数` as `单位卡累计消费次数`,`单位卡消费金额为小数次数` as `单位卡消费金额为小数次数`,`单位卡汽油累计消费次数` as `单位卡汽油累计消费次数`,`单位卡汽油累计消费金额` as `单位卡汽油累计消费金额`,`单位卡消费过油品类型数量` as `单位卡消费过油品类型数量`,`单位卡汽油消费次数占比` as `单位卡汽油消费次数占比`,`单位卡柴油消费次数占比` as `单位卡柴油消费次数占比`,`单位卡天然气消费次数占比` as `单位卡天然气消费次数占比`,`单位卡非油累计消费金额是否过高` as `单位卡非油累计消费金额是否过高`,`单位卡非油累计消费次数是否过多` as `单位卡非油累计消费次数是否过多`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`单位卡累计充值金额` as `单位卡累计充值金额`,`单位卡银行卡充值次数` as `单位卡银行卡充值次数`,`单位卡现金充值次数` as `单位卡现金充值次数`,`单日充值次数过多次数` as `单日充值次数过多次数`,`单位卡余额充足时充钱的次数` as `单位卡余额充足时充钱的次数`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`单位卡柴油累计消费是否过高` as `单位卡柴油累计消费是否过高`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`单位卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`单位卡累计消费金额`,`单位卡消费金额方差`,`单位卡累计消费次数`,`单位卡消费金额为小数次数`,`单位卡汽油累计消费次数`,`单位卡汽油累计消费金额`,`单位卡消费过油品类型数量`,`单位卡汽油消费次数占比`,`单位卡柴油消费次数占比`,`单位卡天然气消费次数占比`,`单位卡非油累计消费金额是否过高`,`单位卡非油累计消费次数是否过多`,`非油累计消费金额`,`非油与成品油消费金额比例`,`单位卡累计充值金额`,`单位卡银行卡充值次数`,`单位卡现金充值次数`,`单日充值次数过多次数`,`单位卡余额充足时充钱的次数`,`ic卡大额非油消费次数`,`单位卡柴油累计消费是否过高`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `单位卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`,
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`,
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`, 
       `单日消费次数过多次数`, 
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`,
       `睡眠次数`,
       `是否仍在睡眠`,
       `单位卡累计消费金额`, 
       `加油卡消费金额方差` `单位卡消费金额方差`,
       `单位卡累计消费次数`, 
       `加油卡消费金额为小数次数` `单位卡消费金额为小数次数`,
       `单位卡汽油累计消费次数`, 
       `单位卡汽油累计消费金额`, 
       `单位卡消费过油品类型数量`,
       `单位卡汽油消费次数占比`, 
       `单位卡柴油消费次数占比`,
       `单位卡天然气消费次数占比`, 
       `单位卡非油累计消费金额是否过高`, 
       `单位卡非油累计消费次数是否过多`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `单位卡累计充值金额`,
       `银行卡充值次数` `单位卡银行卡充值次数`,
       `现金充值次数` `单位卡现金充值次数`,
       `单日充值次数过多次数`,
       `单位卡余额充足时充钱的次数`,
       `IC卡大额非油消费次数`,
       `单位卡柴油累计消费是否过高`,
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM APP_AUAP_YK_ORG) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `app_auap_yk_org`  
     ) `bi_49891432609270195`
      limit 1200001 
I0825 11:47:39.847503 51777 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:47:39.849848 51777 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:47:39.852344 51777 coordinator.cc:349] starting execution on 5 backends for query_id=e141542bad9ca589:160fc79100000000
I0825 11:47:39.857793 44904 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=e141542bad9ca589:160fc79100000000
I0825 11:47:39.858158 44904 query-exec-mgr.cc:46] StartQueryFInstances() query_id=e141542bad9ca589:160fc79100000000 coord=e4bdhpp025:22000
I0825 11:47:39.858498 44904 query-state.cc:178] Buffer pool limit for e141542bad9ca589:160fc79100000000: 819200000
I0825 11:47:39.858880 44904 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query e141542bad9ca589:160fc79100000000
I0825 11:47:39.874222 51861 query-state.cc:300] StartFInstances(): query_id=e141542bad9ca589:160fc79100000000 #instances=2
I0825 11:47:39.876968 51861 query-state.cc:313] descriptor table for query=e141542bad9ca589:160fc79100000000
tuples:
Tuple(id=0 size=595 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=588 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=588 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=STRING col_path=[10] offset=32 null=(offset=588 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[50] offset=48 null=(offset=588 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=STRING col_path=[44] offset=64 null=(offset=588 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=BIGINT col_path=[48] offset=352 null=(offset=590 mask=40) slot_idx=22 field_idx=-1), Slot(id=6 type=STRING col_path=[11] offset=80 null=(offset=588 mask=20) slot_idx=5 field_idx=-1), Slot(id=7 type=STRING col_path=[12] offset=96 null=(offset=588 mask=40) slot_idx=6 field_idx=-1), Slot(id=8 type=STRING col_path=[13] offset=112 null=(offset=588 mask=80) slot_idx=7 field_idx=-1), Slot(id=9 type=STRING col_path=[43] offset=128 null=(offset=589 mask=1) slot_idx=8 field_idx=-1), Slot(id=10 type=STRING col_path=[47] offset=144 null=(offset=589 mask=2) slot_idx=9 field_idx=-1), Slot(id=11 type=TIMESTAMP col_path=[15] offset=160 null=(offset=589 mask=4) slot_idx=10 field_idx=-1), Slot(id=12 type=TIMESTAMP col_path=[16] offset=176 null=(offset=589 mask=8) slot_idx=11 field_idx=-1), Slot(id=13 type=DECIMAL(16,2) col_path=[2] offset=360 null=(offset=590 mask=80) slot_idx=23 field_idx=-1), Slot(id=14 type=DECIMAL(17,2) col_path=[3] offset=368 null=(offset=591 mask=1) slot_idx=24 field_idx=-1), Slot(id=15 type=DECIMAL(17,2) col_path=[4] offset=376 null=(offset=591 mask=2) slot_idx=25 field_idx=-1), Slot(id=16 type=DECIMAL(17,2) col_path=[5] offset=384 null=(offset=591 mask=4) slot_idx=26 field_idx=-1), Slot(id=17 type=DOUBLE col_path=[6] offset=392 null=(offset=591 mask=8) slot_idx=27 field_idx=-1), Slot(id=18 type=DECIMAL(27,2) col_path=[7] offset=192 null=(offset=589 mask=10) slot_idx=12 field_idx=-1), Slot(id=19 type=BIGINT col_path=[28] offset=400 null=(offset=591 mask=10) slot_idx=28 field_idx=-1), Slot(id=20 type=DOUBLE col_path=[8] offset=408 null=(offset=591 mask=20) slot_idx=29 field_idx=-1), Slot(id=21 type=DECIMAL(27,2) col_path=[9] offset=208 null=(offset=589 mask=20) slot_idx=13 field_idx=-1), Slot(id=22 type=BIGINT col_path=[31] offset=416 null=(offset=591 mask=40) slot_idx=30 field_idx=-1), Slot(id=23 type=BIGINT col_path=[17] offset=424 null=(offset=591 mask=80) slot_idx=31 field_idx=-1), Slot(id=24 type=INT col_path=[18] offset=568 null=(offset=594 mask=2) slot_idx=49 field_idx=-1), Slot(id=25 type=DECIMAL(26,2) col_path=[23] offset=224 null=(offset=589 mask=40) slot_idx=14 field_idx=-1), Slot(id=26 type=DOUBLE col_path=[51] offset=432 null=(offset=592 mask=1) slot_idx=32 field_idx=-1), Slot(id=27 type=BIGINT col_path=[22] offset=440 null=(offset=592 mask=2) slot_idx=33 field_idx=-1), Slot(id=28 type=BIGINT col_path=[49] offset=448 null=(offset=592 mask=4) slot_idx=34 field_idx=-1), Slot(id=29 type=BIGINT col_path=[29] offset=456 null=(offset=592 mask=8) slot_idx=35 field_idx=-1), Slot(id=30 type=DECIMAL(26,2) col_path=[30] offset=240 null=(offset=589 mask=80) slot_idx=15 field_idx=-1), Slot(id=31 type=BIGINT col_path=[52] offset=464 null=(offset=592 mask=10) slot_idx=36 field_idx=-1), Slot(id=32 type=DOUBLE col_path=[25] offset=472 null=(offset=592 mask=20) slot_idx=37 field_idx=-1), Slot(id=33 type=DOUBLE col_path=[26] offset=480 null=(offset=592 mask=40) slot_idx=38 field_idx=-1), Slot(id=34 type=DOUBLE col_path=[27] offset=488 null=(offset=592 mask=80) slot_idx=39 field_idx=-1), Slot(id=35 type=INT col_path=[20] offset=572 null=(offset=594 mask=4) slot_idx=50 field_idx=-1), Slot(id=36 type=INT col_path=[21] offset=576 null=(offset=594 mask=8) slot_idx=51 field_idx=-1), Slot(id=37 type=DECIMAL(26,2) col_path=[32] offset=256 null=(offset=590 mask=1) slot_idx=16 field_idx=-1), Slot(id=38 type=DECIMAL(31,4) col_path=[33] offset=272 null=(offset=590 mask=2) slot_idx=17 field_idx=-1), Slot(id=39 type=DECIMAL(26,2) col_path=[46] offset=288 null=(offset=590 mask=4) slot_idx=18 field_idx=-1), Slot(id=40 type=BIGINT col_path=[41] offset=496 null=(offset=593 mask=1) slot_idx=40 field_idx=-1), Slot(id=41 type=BIGINT col_path=[40] offset=504 null=(offset=593 mask=2) slot_idx=41 field_idx=-1), Slot(id=42 type=BIGINT col_path=[24] offset=512 null=(offset=593 mask=4) slot_idx=42 field_idx=-1), Slot(id=43 type=BIGINT col_path=[38] offset=520 null=(offset=593 mask=8) slot_idx=43 field_idx=-1), Slot(id=44 type=BIGINT col_path=[19] offset=528 null=(offset=593 mask=10) slot_idx=44 field_idx=-1), Slot(id=45 type=INT col_path=[34] offset=580 null=(offset=594 mask=10) slot_idx=52 field_idx=-1), Slot(id=46 type=BIGINT col_path=[35] offset=536 null=(offset=593 mask=20) slot_idx=45 field_idx=-1), Slot(id=47 type=BIGINT col_path=[36] offset=544 null=(offset=593 mask=40) slot_idx=46 field_idx=-1), Slot(id=48 type=BIGINT col_path=[45] offset=552 null=(offset=593 mask=80) slot_idx=47 field_idx=-1), Slot(id=49 type=BIGINT col_path=[37] offset=560 null=(offset=594 mask=1) slot_idx=48 field_idx=-1), Slot(id=50 type=INT col_path=[39] offset=584 null=(offset=594 mask=20) slot_idx=53 field_idx=-1), Slot(id=51 type=STRING col_path=[53] offset=304 null=(offset=590 mask=8) slot_idx=19 field_idx=-1), Slot(id=52 type=STRING col_path=[14] offset=320 null=(offset=590 mask=10) slot_idx=20 field_idx=-1), Slot(id=53 type=STRING col_path=[42] offset=336 null=(offset=590 mask=20) slot_idx=21 field_idx=-1)] tuple_path=[])
I0825 11:47:39.879036 51777 coordinator.cc:362] started execution on 5 backends for query_id=e141542bad9ca589:160fc79100000000
I0825 11:47:39.888784 51863 query-state.cc:395] Executing instance. instance_id=e141542bad9ca589:160fc79100000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=4 #in-flight=18
I0825 11:47:39.898057 51864 query-state.cc:395] Executing instance. instance_id=e141542bad9ca589:160fc79100000001 fragment_idx=1 per_fragment_instance_idx=0 coord_state_idx=4 #in-flight=19
I0825 11:47:39.907727 51864 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance 'e141542bad9ca589:160fc79100000001': 190
I0825 11:47:39.917101 51777 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x89\xa5\x9c\xad+TA\xe1\x00\x00\x00\x00\x91\xc7\x0f\x16",
      02: secret (string) = "\x89\xa5\x9c\xad+TA\xe1\x00\x00\x00\x00\x91\xc7\x0f\x16",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:47:39.916357 51861 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e141542bad9ca589:160fc79100000000 refcnt=4
I0825 11:47:40.206120 47869 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): d47b204e8371989:69364fe000000000
I0825 11:47:40.985565 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:47:40.989912 51878 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:47:40.998522 51878 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xac\xaa%\xc0\xbf\xbaI\xde\xa9\x9c?^O\xa7]\xeb",
      02: secret (string) = "\xf7\xf2\xb3q\x96\xb6LX\x91-\x9c\xa1f\xbb\x1d\xfa",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:47:41.038695 51878 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xac\xaa%\xc0\xbf\xbaI\xde\xa9\x9c?^O\xa7]\xeb",
      02: secret (string) = "\xf7\xf2\xb3q\x96\xb6LX\x91-\x9c\xa1f\xbb\x1d\xfa",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:47:41.039438 51878 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xac\xaa%\xc0\xbf\xbaI\xde\xa9\x9c?^O\xa7]\xeb",
      02: secret (string) = "\xf7\xf2\xb3q\x96\xb6LX\x91-\x9c\xa1f\xbb\x1d\xfa",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:47:41.041352 51878 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:41.055863 51878 Frontend.java:935] Analyzing query: use `dw04_sjfx`;
I0825 11:47:41.059334 51878 Frontend.java:947] Analysis finished.
I0825 11:47:41.172621 51878 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xa8\xbd\xe5\xb2\x86xA\xdc\x00\x00\x00\x00y8\x89\x12",
      02: secret (string) = "\xa8\xbd\xe5\xb2\x86xA\xdc\x00\x00\x00\x00y8\x89\x12",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:47:41.173578 51777 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=e141542bad9ca589:160fc79100000000
I0825 11:47:41.175168 51777 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[56] {
      [0] = TColumnDesc {
        01: columnName (string) = "bi_9833225738464556179",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "bi_16765984159333439402",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "bi_5452346849819763092",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "bi_1127891584836197264",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "bi_2545751338491490025",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "bi_6441433733300507817",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "bi_15038768847591068675",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 6,
      },
      [7] = TColumnDesc {
        01: columnName (string) = "bi_16492520468207201732",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 7,
      },
      [8] = TColumnDesc {
        01: columnName (string) = "bi_9376550538423824506",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 8,
      },
      [9] = TColumnDesc {
        01: columnName (string) = "bi_8100659610193253660",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 9,
      },
      [10] = TColumnDesc {
        01: columnName (string) = "bi_18185366717104475339",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 10,
      },
      [11] = TColumnDesc {
        01: columnName (string) = "bi_16889103124287189574",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 11,
      },
      [12] = TColumnDesc {
        01: columnName (string) = "bi_2106395510405947614",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 12,
      },
      [13] = TColumnDesc {
        01: columnName (string) = "bi_12628198587542179019",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 16,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 13,
      },
      [14] = TColumnDesc {
        01: columnName (string) = "bi_1219558422880111543",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 14,
      },
      [15] = TColumnDesc {
        01: columnName (string) = "bi_17915682550306328330",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 15,
      },
      [16] = TColumnDesc {
        01: columnName (string) = "bi_17675574034401517679",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 16,
      },
      [17] = TColumnDesc {
        01: columnName (string) = "bi_1754130456570268440",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 17,
      },
      [18] = TColumnDesc {
        01: columnName (string) = "bi_15657812531500627407",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 27,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 18,
      },
      [19] = TColumnDesc {
        01: columnName (string) = "bi_17612086331363954540",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 19,
      },
      [20] = TColumnDesc {
        01: columnName (string) = "bi_17855986537495503686",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 20,
      },
      [21] = TColumnDesc {
        01: columnName (string) = "bi_1043443510903046104",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 27,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 21,
      },
      [22] = TColumnDesc {
        01: columnName (string) = "bi_4937558613390431945",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 22,
      },
      [23] = TColumnDesc {
        01: columnName (string) = "bi_7363935285664891950",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 23,
      },
      [24] = TColumnDesc {
        01: columnName (string) = "bi_404517206247691038",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 24,
      },
      [25] = TColumnDesc {
        01: columnName (string) = "bi_13443197606867190735",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 25,
      },
      [26] = TColumnDesc {
        01: columnName (string) = "bi_4769556060708606987",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 26,
      },
      [27] = TColumnDesc {
        01: columnName (string) = "bi_3862957503352231103",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 27,
      },
      [28] = TColumnDesc {
        01: columnName (string) = "bi_606582381051428439",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 28,
      },
      [29] = TColumnDesc {
        01: columnName (string) = "bi_13160325095360504327",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 29,
      },
      [30] = TColumnDesc {
        01: columnName (string) = "bi_8939036342664054168",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 30,
      },
      [31] = TColumnDesc {
        01: columnName (string) = "bi_14603363494981556751",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 31,
      },
      [32] = TColumnDesc {
        01: columnName (string) = "bi_5797665317184532235",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 32,
      },
      [33] = TColumnDesc {
        01: columnName (string) = "bi_4405090079101472574",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 33,
      },
      [34] = TColumnDesc {
        01: columnName (string) = "bi_10381659451279799103",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 34,
      },
      [35] = TColumnDesc {
        01: columnName (string) = "bi_1539169295680080914",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 35,
      },
      [36] = TColumnDesc {
        01: columnName (string) = "bi_14041556194125867668",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 36,
      },
      [37] = TColumnDesc {
        01: columnName (string) = "bi_7960903924678445128",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 37,
      },
      [38] = TColumnDesc {
        01: columnName (string) = "bi_17099085683607676327",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 31,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 4,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 38,
      },
      [39] = TColumnDesc {
        01: columnName (string) = "bi_8123294280144136192",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 39,
      },
      [40] = TColumnDesc {
        01: columnName (string) = "bi_880472205521468105",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 40,
      },
      [41] = TColumnDesc {
        01: columnName (string) = "bi_14776239947036545134",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 41,
      },
      [42] = TColumnDesc {
        01: columnName (string) = "bi_16074686502897337552",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 42,
      },
      [43] = TColumnDesc {
        01: columnName (string) = "bi_7961857330449238144",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 43,
      },
      [44] = TColumnDesc {
        01: columnName (string) = "bi_5943549542113195618",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 44,
      },
      [45] = TColumnDesc {
        01: columnName (string) = "bi_9444148203116406053",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 45,
      },
      [46] = TColumnDesc {
        01: columnName (string) = "bi_12667250280629613856",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 46,
      },
      [47] = TColumnDesc {
        01: columnName (string) = "bi_12375103238287348826",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 47,
      },
      [48] = TColumnDesc {
        01: columnName (string) = "bi_16654652680354768327",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 48,
      },
      [49] = TColumnDesc {
        01: columnName (string) = "bi_17265400455728416625",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 49,
      },
      [50] = TColumnDesc {
        01: columnName (string) = "bi_16101984035252136833",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 50,
      },
      [51] = TColumnDesc {
        01: columnName (string) = "bi_8173657367271516742",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 51,
      },
      [52] = TColumnDesc {
        01: columnName (string) = "bi_13896315529143866076",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 52,
      },
      [53] = TColumnDesc {
        01: columnName (string) = "bi_4248350677332311184",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 53,
      },
      [54] = TColumnDesc {
        01: columnName (string) = "bi_6022750446866842230",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 54,
      },
      [55] = TColumnDesc {
        01: columnName (string) = "bi_14940694802980442301",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 55,
      },
    },
  },
}
I0825 11:47:41.178781 51878 impala-hs2-server.cc:683] CloseOperation(): query_id=dc417886b2e5bda8:1289387900000000
I0825 11:47:41.178946 51878 impala-server.cc:1015] UnregisterQuery(): query_id=dc417886b2e5bda8:1289387900000000
I0825 11:47:41.183161 51878 impala-server.cc:1102] Cancel(): query_id=dc417886b2e5bda8:1289387900000000
I0825 11:47:41.213394 51878 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xac\xaa%\xc0\xbf\xbaI\xde\xa9\x9c?^O\xa7]\xeb",
      02: secret (string) = "\xf7\xf2\xb3q\x96\xb6LX\x91-\x9c\xa1f\xbb\x1d\xfa",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:47:41.213903 51878 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xac\xaa%\xc0\xbf\xbaI\xde\xa9\x9c?^O\xa7]\xeb",
      02: secret (string) = "\xf7\xf2\xb3q\x96\xb6LX\x91-\x9c\xa1f\xbb\x1d\xfa",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:47:41.215243 51878 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:41.232195 51878 Frontend.java:935] Analyzing query: set REQUEST_POOL = 'agilebi';
I0825 11:47:41.233645 51878 Frontend.java:947] Analysis finished.
I0825 11:47:41.244967 51878 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "K\x1a\xca\x1f\xf77F?\x00\x00\x00\x00K\xd9\xff!",
      02: secret (string) = "K\x1a\xca\x1f\xf77F?\x00\x00\x00\x00K\xd9\xff!",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:47:41.251415 51878 impala-hs2-server.cc:683] CloseOperation(): query_id=3f4637f71fca1a4b:21ffd94b00000000
I0825 11:47:41.251828 51878 impala-server.cc:1015] UnregisterQuery(): query_id=3f4637f71fca1a4b:21ffd94b00000000
I0825 11:47:41.252228 51878 impala-server.cc:1102] Cancel(): query_id=3f4637f71fca1a4b:21ffd94b00000000
I0825 11:47:41.276239 51878 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xac\xaa%\xc0\xbf\xbaI\xde\xa9\x9c?^O\xa7]\xeb",
      02: secret (string) = "\xf7\xf2\xb3q\x96\xb6LX\x91-\x9c\xa1f\xbb\x1d\xfa",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:47:41.276850 51878 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xac\xaa%\xc0\xbf\xbaI\xde\xa9\x9c?^O\xa7]\xeb",
      02: secret (string) = "\xf7\xf2\xb3q\x96\xb6LX\x91-\x9c\xa1f\xbb\x1d\xfa",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:47:41.277796 51878 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:41.288537 51878 Frontend.java:935] Analyzing query: set MEM_LIMIT = 1024000000;
I0825 11:47:41.292748 51878 Frontend.java:947] Analysis finished.
I0825 11:47:41.312872 51878 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "N\xc4\xc7\fE9M\xb3\x00\x00\x00\x00\x93\xd8\x9a*",
      02: secret (string) = "N\xc4\xc7\fE9M\xb3\x00\x00\x00\x00\x93\xd8\x9a*",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:47:41.319175 51878 impala-hs2-server.cc:683] CloseOperation(): query_id=b34d39450cc7c44e:2a9ad89300000000
I0825 11:47:41.319759 51878 impala-server.cc:1015] UnregisterQuery(): query_id=b34d39450cc7c44e:2a9ad89300000000
I0825 11:47:41.319936 51878 impala-server.cc:1102] Cancel(): query_id=b34d39450cc7c44e:2a9ad89300000000
I0825 11:47:41.324865 51878 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xac\xaa%\xc0\xbf\xbaI\xde\xa9\x9c?^O\xa7]\xeb",
      02: secret (string) = "\xf7\xf2\xb3q\x96\xb6LX\x91-\x9c\xa1f\xbb\x1d\xfa",
    },
  },
  02: statement (string) = "DESCRIBE `default`.`APP_AUAP_YK_ORG`",
  04: runAsync (bool) = true,
}
I0825 11:47:41.325302 51878 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xac\xaa%\xc0\xbf\xbaI\xde\xa9\x9c?^O\xa7]\xeb",
      02: secret (string) = "\xf7\xf2\xb3q\x96\xb6LX\x91-\x9c\xa1f\xbb\x1d\xfa",
    },
  },
  02: statement (string) = "DESCRIBE `default`.`APP_AUAP_YK_ORG`",
  04: runAsync (bool) = true,
}
I0825 11:47:41.326475 51878 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:41.335487 51878 Frontend.java:935] Analyzing query: DESCRIBE `default`.`APP_AUAP_YK_ORG`
I0825 11:47:41.337132 51878 jni-util.cc:230] org.apache.impala.common.AnalysisException: Could not resolve path: 'default.app_auap_yk_org'
	at org.apache.impala.analysis.Analyzer.resolvePath(Analyzer.java:791)
	at org.apache.impala.analysis.Analyzer.resolvePath(Analyzer.java:746)
	at org.apache.impala.analysis.DescribeTableStmt.analyze(DescribeTableStmt.java:112)
	at org.apache.impala.analysis.AnalysisContext.analyze(AnalysisContext.java:424)
	at org.apache.impala.analysis.AnalysisContext.analyzeAndAuthorize(AnalysisContext.java:393)
	at org.apache.impala.service.Frontend.createExecRequest(Frontend.java:946)
	at org.apache.impala.service.JniFrontend.createExecRequest(JniFrontend.java:156)
I0825 11:47:42.327260 51887 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:42.335521 51887 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:42.355892 51853 query-exec-mgr.cc:95] QueryState: query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:42.359163 51853 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:42.367911 51853 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:42.368695 51853 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:42.378140 51887 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:42.378901 51887 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:42.388409 51889 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:42.389138 51889 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:42.402076 51892 query-exec-mgr.cc:95] QueryState: query_id=5b4e0f046842283b:c959b8c500000000 refcnt=3
I0825 11:47:42.402917 51892 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5b4e0f046842283b:c959b8c500000000 refcnt=3
I0825 11:47:42.414847 51853 query-exec-mgr.cc:95] QueryState: query_id=e141542bad9ca589:160fc79100000000 refcnt=4
I0825 11:47:42.415766 51853 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e141542bad9ca589:160fc79100000000 refcnt=4
I0825 11:47:43.122599 44439 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=574a5a92b69c4625:3638e36f00000000
I0825 11:47:43.123212 44439 query-exec-mgr.cc:46] StartQueryFInstances() query_id=574a5a92b69c4625:3638e36f00000000 coord=e4bdhpp023:22000
I0825 11:47:43.123916 44439 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:47:43.124388 44439 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:47:43.124954 44439 query-state.cc:178] Buffer pool limit for 574a5a92b69c4625:3638e36f00000000: 819200000
I0825 11:47:43.126313 44439 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 574a5a92b69c4625:3638e36f00000000
I0825 11:47:43.138058 51896 query-state.cc:300] StartFInstances(): query_id=574a5a92b69c4625:3638e36f00000000 #instances=1
I0825 11:47:43.147136 51896 query-state.cc:313] descriptor table for query=574a5a92b69c4625:3638e36f00000000
tuples:
Tuple(id=0 size=595 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=588 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=588 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=STRING col_path=[10] offset=32 null=(offset=588 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[50] offset=48 null=(offset=588 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=STRING col_path=[44] offset=64 null=(offset=588 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=BIGINT col_path=[48] offset=352 null=(offset=590 mask=40) slot_idx=22 field_idx=-1), Slot(id=6 type=STRING col_path=[11] offset=80 null=(offset=588 mask=20) slot_idx=5 field_idx=-1), Slot(id=7 type=STRING col_path=[12] offset=96 null=(offset=588 mask=40) slot_idx=6 field_idx=-1), Slot(id=8 type=STRING col_path=[13] offset=112 null=(offset=588 mask=80) slot_idx=7 field_idx=-1), Slot(id=9 type=STRING col_path=[43] offset=128 null=(offset=589 mask=1) slot_idx=8 field_idx=-1), Slot(id=10 type=STRING col_path=[47] offset=144 null=(offset=589 mask=2) slot_idx=9 field_idx=-1), Slot(id=11 type=TIMESTAMP col_path=[15] offset=160 null=(offset=589 mask=4) slot_idx=10 field_idx=-1), Slot(id=12 type=TIMESTAMP col_path=[16] offset=176 null=(offset=589 mask=8) slot_idx=11 field_idx=-1), Slot(id=13 type=DECIMAL(16,2) col_path=[2] offset=360 null=(offset=590 mask=80) slot_idx=23 field_idx=-1), Slot(id=14 type=DECIMAL(17,2) col_path=[3] offset=368 null=(offset=591 mask=1) slot_idx=24 field_idx=-1), Slot(id=15 type=DECIMAL(17,2) col_path=[4] offset=376 null=(offset=591 mask=2) slot_idx=25 field_idx=-1), Slot(id=16 type=DECIMAL(17,2) col_path=[5] offset=384 null=(offset=591 mask=4) slot_idx=26 field_idx=-1), Slot(id=17 type=DOUBLE col_path=[6] offset=392 null=(offset=591 mask=8) slot_idx=27 field_idx=-1), Slot(id=18 type=DECIMAL(27,2) col_path=[7] offset=192 null=(offset=589 mask=10) slot_idx=12 field_idx=-1), Slot(id=19 type=BIGINT col_path=[28] offset=400 null=(offset=591 mask=10) slot_idx=28 field_idx=-1), Slot(id=20 type=DOUBLE col_path=[8] offset=408 null=(offset=591 mask=20) slot_idx=29 field_idx=-1), Slot(id=21 type=DECIMAL(27,2) col_path=[9] offset=208 null=(offset=589 mask=20) slot_idx=13 field_idx=-1), Slot(id=22 type=BIGINT col_path=[31] offset=416 null=(offset=591 mask=40) slot_idx=30 field_idx=-1), Slot(id=23 type=BIGINT col_path=[17] offset=424 null=(offset=591 mask=80) slot_idx=31 field_idx=-1), Slot(id=24 type=INT col_path=[18] offset=568 null=(offset=594 mask=2) slot_idx=49 field_idx=-1), Slot(id=25 type=DECIMAL(26,2) col_path=[23] offset=224 null=(offset=589 mask=40) slot_idx=14 field_idx=-1), Slot(id=26 type=DOUBLE col_path=[51] offset=432 null=(offset=592 mask=1) slot_idx=32 field_idx=-1), Slot(id=27 type=BIGINT col_path=[22] offset=440 null=(offset=592 mask=2) slot_idx=33 field_idx=-1), Slot(id=28 type=BIGINT col_path=[49] offset=448 null=(offset=592 mask=4) slot_idx=34 field_idx=-1), Slot(id=29 type=BIGINT col_path=[29] offset=456 null=(offset=592 mask=8) slot_idx=35 field_idx=-1), Slot(id=30 type=DECIMAL(26,2) col_path=[30] offset=240 null=(offset=589 mask=80) slot_idx=15 field_idx=-1), Slot(id=31 type=BIGINT col_path=[52] offset=464 null=(offset=592 mask=10) slot_idx=36 field_idx=-1), Slot(id=32 type=DOUBLE col_path=[25] offset=472 null=(offset=592 mask=20) slot_idx=37 field_idx=-1), Slot(id=33 type=DOUBLE col_path=[26] offset=480 null=(offset=592 mask=40) slot_idx=38 field_idx=-1), Slot(id=34 type=DOUBLE col_path=[27] offset=488 null=(offset=592 mask=80) slot_idx=39 field_idx=-1), Slot(id=35 type=INT col_path=[20] offset=572 null=(offset=594 mask=4) slot_idx=50 field_idx=-1), Slot(id=36 type=INT col_path=[21] offset=576 null=(offset=594 mask=8) slot_idx=51 field_idx=-1), Slot(id=37 type=DECIMAL(26,2) col_path=[32] offset=256 null=(offset=590 mask=1) slot_idx=16 field_idx=-1), Slot(id=38 type=DECIMAL(31,4) col_path=[33] offset=272 null=(offset=590 mask=2) slot_idx=17 field_idx=-1), Slot(id=39 type=DECIMAL(26,2) col_path=[46] offset=288 null=(offset=590 mask=4) slot_idx=18 field_idx=-1), Slot(id=40 type=BIGINT col_path=[41] offset=496 null=(offset=593 mask=1) slot_idx=40 field_idx=-1), Slot(id=41 type=BIGINT col_path=[40] offset=504 null=(offset=593 mask=2) slot_idx=41 field_idx=-1), Slot(id=42 type=BIGINT col_path=[24] offset=512 null=(offset=593 mask=4) slot_idx=42 field_idx=-1), Slot(id=43 type=BIGINT col_path=[38] offset=520 null=(offset=593 mask=8) slot_idx=43 field_idx=-1), Slot(id=44 type=BIGINT col_path=[19] offset=528 null=(offset=593 mask=10) slot_idx=44 field_idx=-1), Slot(id=45 type=INT col_path=[34] offset=580 null=(offset=594 mask=10) slot_idx=52 field_idx=-1), Slot(id=46 type=BIGINT col_path=[35] offset=536 null=(offset=593 mask=20) slot_idx=45 field_idx=-1), Slot(id=47 type=BIGINT col_path=[36] offset=544 null=(offset=593 mask=40) slot_idx=46 field_idx=-1), Slot(id=48 type=BIGINT col_path=[45] offset=552 null=(offset=593 mask=80) slot_idx=47 field_idx=-1), Slot(id=49 type=BIGINT col_path=[37] offset=560 null=(offset=594 mask=1) slot_idx=48 field_idx=-1), Slot(id=50 type=INT col_path=[39] offset=584 null=(offset=594 mask=20) slot_idx=53 field_idx=-1), Slot(id=51 type=STRING col_path=[53] offset=304 null=(offset=590 mask=8) slot_idx=19 field_idx=-1), Slot(id=52 type=STRING col_path=[14] offset=320 null=(offset=590 mask=10) slot_idx=20 field_idx=-1), Slot(id=53 type=STRING col_path=[42] offset=336 null=(offset=590 mask=20) slot_idx=21 field_idx=-1)] tuple_path=[])
I0825 11:47:43.160279 51897 query-state.cc:395] Executing instance. instance_id=574a5a92b69c4625:3638e36f00000002 fragment_idx=1 per_fragment_instance_idx=1 coord_state_idx=5 #in-flight=20
I0825 11:47:43.163903 51897 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '574a5a92b69c4625:3638e36f00000002': 190
I0825 11:47:43.183708 51896 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=574a5a92b69c4625:3638e36f00000000 refcnt=2
I0825 11:47:43.206709 51814 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=5b4e0f046842283b:c959b8c500000000
I0825 11:47:43.208076 51814 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[50] {
      [0] = TColumnDesc {
        01: columnName (string) = "bi_16209772373942822610",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "bi_7173110153481771205",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "bi_13491404487973529010",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "bi_16709338949652660965",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "bi_7778611651735101528",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "bi_5365439428354097443",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "bi_17739814079848908328",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 6,
      },
      [7] = TColumnDesc {
        01: columnName (string) = "bi_2232887874484344045",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 7,
      },
      [8] = TColumnDesc {
        01: columnName (string) = "bi_369040516142209005",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 8,
      },
      [9] = TColumnDesc {
        01: columnName (string) = "bi_6559770015537514515",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 9,
      },
      [10] = TColumnDesc {
        01: columnName (string) = "bi_15189533194949851777",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 10,
      },
      [11] = TColumnDesc {
        01: columnName (string) = "bi_7541878364736470844",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 11,
      },
      [12] = TColumnDesc {
        01: columnName (string) = "bi_5792701378059420076",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 12,
      },
      [13] = TColumnDesc {
        01: columnName (string) = "bi_3349638123191173855",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 13,
      },
      [14] = TColumnDesc {
        01: columnName (string) = "bi_15445715632339295217",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 14,
      },
      [15] = TColumnDesc {
        01: columnName (string) = "bi_9114563080665146699",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 15,
      },
      [16] = TColumnDesc {
        01: columnName (string) = "bi_13865388329565152770",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 16,
      },
      [17] = TColumnDesc {
        01: columnName (string) = "bi_12093476229320587287",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 17,
      },
      [18] = TColumnDesc {
        01: columnName (string) = "bi_5623662814544693635",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 18,
      },
      [19] = TColumnDesc {
        01: columnName (string) = "bi_13683947135958082930",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 19,
      },
      [20] = TColumnDesc {
        01: columnName (string) = "bi_11924957536007553338",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 20,
      },
      [21] = TColumnDesc {
        01: columnName (string) = "bi_614967852965536978",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 21,
      },
      [22] = TColumnDesc {
        01: columnName (string) = "bi_5003822878387321743",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 22,
      },
      [23] = TColumnDesc {
        01: columnName (string) = "bi_6413940051808780525",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 23,
      },
      [24] = TColumnDesc {
        01: columnName (string) = "bi_11216260561419591329",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 24,
      },
      [25] = TColumnDesc {
        01: columnName (string) = "bi_15719283721382345906",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 25,
      },
      [26] = TColumnDesc {
        01: columnName (string) = "bi_2135828979746422287",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 26,
      },
      [27] = TColumnDesc {
        01: columnName (string) = "bi_8234557137695700893",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 27,
      },
      [28] = TColumnDesc {
        01: columnName (string) = "bi_5133013160763149225",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 28,
      },
      [29] = TColumnDesc {
        01: columnName (string) = "bi_2661014466711632970",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 29,
      },
      [30] = TColumnDesc {
        01: columnName (string) = "bi_13689588754024198241",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 30,
      },
      [31] = TColumnDesc {
        01: columnName (string) = "bi_11029029363983356005",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 31,
      },
      [32] = TColumnDesc {
        01: columnName (string) = "bi_6920746512342794880",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 32,
      },
      [33] = TColumnDesc {
        01: columnName (string) = "bi_1980803134228074743",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 33,
      },
      [34] = TColumnDesc {
        01: columnName (string) = "bi_16284813439853843418",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 34,
      },
      [35] = TColumnDesc {
        01: columnName (string) = "bi_4893616353618505239",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 35,
      },
      [36] = TColumnDesc {
        01: columnName (string) = "bi_7824035878402166299",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 36,
      },
      [37] = TColumnDesc {
        01: columnName (string) = "bi_17834913520635724437",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 37,
      },
      [38] = TColumnDesc {
        01: columnName (string) = "bi_1963530120962417240",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 38,
      },
      [39] = TColumnDesc {
        01: columnName (string) = "bi_5127572173810565873",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 39,
      },
      [40] = TColumnDesc {
        01: columnName (string) = "bi_2440282083506678752",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 40,
      },
      [41] = TColumnDesc {
        01: columnName (string) = "bi_5524861625849511082",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 41,
      },
      [42] = TColumnDesc {
        01: columnName (string) = "bi_13360343267273546668",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 42,
      },
      [43] = TColumnDesc {
        01: columnName (string) = "bi_13600932575276159557",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 43,
      },
      [44] = TColumnDesc {
        01: columnName (string) = "bi_10699817008190601050",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 44,
      },
      [45] = TColumnDesc {
        01: columnName (string) = "bi_15916860084426853186",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 45,
      },
      [46] = TColumnDesc {
        01: columnName (string) = "bi_4007708937737028237",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 46,
      },
      [47] = TColumnDesc {
        01: columnName (string) = "bi_7467729968303243062",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 47,
      },
      [48] = TColumnDesc {
        01: columnName (string) = "bi_16247278283018779660",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 48,
      },
      [49] = TColumnDesc {
        01: columnName (string) = "bi_14123165879102550317",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 49,
      },
    },
  },
}
I0825 11:47:43.210670 48525 coordinator.cc:689] Backend completed:  host=e4bdhpp018:22000 remaining=1 query_id=5b4e0f046842283b:c959b8c500000000
I0825 11:47:43.211414 48525 coordinator-backend-state.cc:226] query_id=5b4e0f046842283b:c959b8c500000000: first in-progress backend: e4bdhpp025:22000
I0825 11:47:43.446035 51822 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=5b4e0f046842283b:c959b8c500000000, node=1
I0825 11:47:43.446545 51814 coordinator.cc:527] All backends finished successfully. query_id=5b4e0f046842283b:c959b8c500000000
I0825 11:47:43.448161 51822 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=5b4e0f046842283b:c959b8c500000000 node_id=1
I0825 11:47:43.448299 51814 coordinator.cc:783] Release admission control resources for query_id=5b4e0f046842283b:c959b8c500000000
I0825 11:47:43.448454 51822 query-state.cc:403] Instance completed. instance_id=5b4e0f046842283b:c959b8c500000000 #in-flight=19 status=OK
I0825 11:47:43.448827 51822 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5b4e0f046842283b:c959b8c500000000 refcnt=2
I0825 11:47:43.504107 51814 impala-hs2-server.cc:683] CloseOperation(): query_id=5b4e0f046842283b:c959b8c500000000
I0825 11:47:43.505455 51814 impala-server.cc:1015] UnregisterQuery(): query_id=5b4e0f046842283b:c959b8c500000000
I0825 11:47:43.505679 51814 impala-server.cc:1102] Cancel(): query_id=5b4e0f046842283b:c959b8c500000000
I0825 11:47:43.505939 51814 coordinator.cc:629] Cancel() query_id=5b4e0f046842283b:c959b8c500000000
I0825 11:47:43.506284 51814 coordinator.cc:639] CancelBackends() query_id=5b4e0f046842283b:c959b8c500000000, tried to cancel 0 backends
I0825 11:47:43.514078 51814 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5b4e0f046842283b:c959b8c500000000 refcnt=1
I0825 11:47:43.521349 51814 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x94\xd2\\c\x89\xd8OX\x93\x02\x04\x8c\xfb\xb2\xe1\x1d",
      02: secret (string) = "ju\xa9:\xe8\x88L\xec\x8d=\x1a\x11)I\x03\x92",
    },
  },
}
I0825 11:47:43.527019 51814 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:37798 closed, closing 1 associated session(s)
I0825 11:47:43.850337 51878 status.cc:125] AnalysisException: Could not resolve path: 'default.app_auap_yk_org'
    @           0x9e215a  impala::Status::Status()
    @           0xd7568d  impala::JniUtil::GetJniExceptionMsg()
    @           0xc685b0  impala::Frontend::GetExecRequest()
    @           0xc87712  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:47:43.857565 51878 impala-server.cc:1015] UnregisterQuery(): query_id=414f5fc080d1f064:4224938400000000
I0825 11:47:43.858701 51878 impala-server.cc:1102] Cancel(): query_id=414f5fc080d1f064:4224938400000000
I0825 11:47:43.922178 51878 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xac\xaa%\xc0\xbf\xbaI\xde\xa9\x9c?^O\xa7]\xeb",
      02: secret (string) = "\xf7\xf2\xb3q\x96\xb6LX\x91-\x9c\xa1f\xbb\x1d\xfa",
    },
  },
  02: statement (string) = "DESCRIBE `default`.`APP_AUAP_YK_ORG`",
  04: runAsync (bool) = true,
}
I0825 11:47:43.924567 51878 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xac\xaa%\xc0\xbf\xbaI\xde\xa9\x9c?^O\xa7]\xeb",
      02: secret (string) = "\xf7\xf2\xb3q\x96\xb6LX\x91-\x9c\xa1f\xbb\x1d\xfa",
    },
  },
  02: statement (string) = "DESCRIBE `default`.`APP_AUAP_YK_ORG`",
  04: runAsync (bool) = true,
}
I0825 11:47:43.925422 51878 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:43.936614 51878 Frontend.java:935] Analyzing query: DESCRIBE `default`.`APP_AUAP_YK_ORG`
I0825 11:47:43.942050 51878 jni-util.cc:230] org.apache.impala.common.AnalysisException: Could not resolve path: 'default.app_auap_yk_org'
	at org.apache.impala.analysis.Analyzer.resolvePath(Analyzer.java:791)
	at org.apache.impala.analysis.Analyzer.resolvePath(Analyzer.java:746)
	at org.apache.impala.analysis.DescribeTableStmt.analyze(DescribeTableStmt.java:112)
	at org.apache.impala.analysis.AnalysisContext.analyze(AnalysisContext.java:424)
	at org.apache.impala.analysis.AnalysisContext.analyzeAndAuthorize(AnalysisContext.java:393)
	at org.apache.impala.service.Frontend.createExecRequest(Frontend.java:946)
	at org.apache.impala.service.JniFrontend.createExecRequest(JniFrontend.java:156)
I0825 11:47:44.781584 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:47:44.802183 51923 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:47:44.832319 51923 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x80\xf4\x9d\x88\xcd6BM\x8f\xf5\t\x15L\xf8\xaa8",
      02: secret (string) = "T\x8a)\xa1\x8b\x9dON\x98|\x9e3,G\xf3\x1a",
    },
  },
  02: statement (string) = "use dw20",
  04: runAsync (bool) = true,
}
I0825 11:47:44.832857 51923 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x80\xf4\x9d\x88\xcd6BM\x8f\xf5\t\x15L\xf8\xaa8",
      02: secret (string) = "T\x8a)\xa1\x8b\x9dON\x98|\x9e3,G\xf3\x1a",
    },
  },
  02: statement (string) = "use dw20",
  04: runAsync (bool) = true,
}
I0825 11:47:44.834424 51923 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:44.865459 51923 Frontend.java:935] Analyzing query: use dw20
I0825 11:47:44.875532 51923 Frontend.java:947] Analysis finished.
I0825 11:47:45.049294 51923 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xc8ls\xa3\xb7FO\x19\x00\x00\x00\x00\xd2|\xf0\xc6",
      02: secret (string) = "\xc8ls\xa3\xb7FO\x19\x00\x00\x00\x00\xd2|\xf0\xc6",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:47:45.059957 51923 impala-hs2-server.cc:683] CloseOperation(): query_id=194f46b7a3736cc8:c6f07cd200000000
I0825 11:47:45.060307 51923 impala-server.cc:1015] UnregisterQuery(): query_id=194f46b7a3736cc8:c6f07cd200000000
I0825 11:47:45.069644 51923 impala-server.cc:1102] Cancel(): query_id=194f46b7a3736cc8:c6f07cd200000000
I0825 11:47:45.126039 51923 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x80\xf4\x9d\x88\xcd6BM\x8f\xf5\t\x15L\xf8\xaa8",
      02: secret (string) = "T\x8a)\xa1\x8b\x9dON\x98|\x9e3,G\xf3\x1a",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:47:45.128422 51923 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x80\xf4\x9d\x88\xcd6BM\x8f\xf5\t\x15L\xf8\xaa8",
      02: secret (string) = "T\x8a)\xa1\x8b\x9dON\x98|\x9e3,G\xf3\x1a",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:47:45.129616 51923 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:45.154706 51923 Frontend.java:935] Analyzing query: set mem_limit='8g'
I0825 11:47:45.155550 51923 Frontend.java:947] Analysis finished.
I0825 11:47:45.169222 51923 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x10\x9c;X\xe9X@B\x00\x00\x00\x001Q\xd2\xbf",
      02: secret (string) = "\x10\x9c;X\xe9X@B\x00\x00\x00\x001Q\xd2\xbf",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:47:45.173702 51923 impala-hs2-server.cc:683] CloseOperation(): query_id=424058e9583b9c10:bfd2513100000000
I0825 11:47:45.174433 51923 impala-server.cc:1015] UnregisterQuery(): query_id=424058e9583b9c10:bfd2513100000000
I0825 11:47:45.175132 51923 impala-server.cc:1102] Cancel(): query_id=424058e9583b9c10:bfd2513100000000
I0825 11:47:45.179821 51923 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x80\xf4\x9d\x88\xcd6BM\x8f\xf5\t\x15L\xf8\xaa8",
      02: secret (string) = "T\x8a)\xa1\x8b\x9dON\x98|\x9e3,G\xf3\x1a",
    },
  },
  02: statement (string) = "DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`",
  04: runAsync (bool) = true,
}
I0825 11:47:45.180199 51923 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x80\xf4\x9d\x88\xcd6BM\x8f\xf5\t\x15L\xf8\xaa8",
      02: secret (string) = "T\x8a)\xa1\x8b\x9dON\x98|\x9e3,G\xf3\x1a",
    },
  },
  02: statement (string) = "DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`",
  04: runAsync (bool) = true,
}
I0825 11:47:45.181144 51923 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:45.210328 48682 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): d47b204e8371989:69364fe000000000
I0825 11:47:45.217833 51923 Frontend.java:935] Analyzing query: DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`
I0825 11:47:45.227175 51923 Frontend.java:947] Analysis finished.
I0825 11:47:45.305016 51923 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "m0}\xae\x866E\xdc\x00\x00\x00\x00\xffO\xd0\xca",
      02: secret (string) = "m0}\xae\x866E\xdc\x00\x00\x00\x00\xffO\xd0\xca",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:47:45.310091 51923 impala-hs2-server.cc:683] CloseOperation(): query_id=dc453686ae7d306d:cad04fff00000000
I0825 11:47:45.310657 51923 impala-server.cc:1015] UnregisterQuery(): query_id=dc453686ae7d306d:cad04fff00000000
I0825 11:47:45.311208 51923 impala-server.cc:1102] Cancel(): query_id=dc453686ae7d306d:cad04fff00000000
I0825 11:47:45.324285 51923 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x80\xf4\x9d\x88\xcd6BM\x8f\xf5\t\x15L\xf8\xaa8",
      02: secret (string) = "T\x8a)\xa1\x8b\x9dON\x98|\x9e3,G\xf3\x1a",
    },
  },
  02: statement (string) = "SELECT COUNT(1) [...](10497)",
  04: runAsync (bool) = true,
}
I0825 11:47:45.324875 51923 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x80\xf4\x9d\x88\xcd6BM\x8f\xf5\t\x15L\xf8\xaa8",
      02: secret (string) = "T\x8a)\xa1\x8b\x9dON\x98|\x9e3,G\xf3\x1a",
    },
  },
  02: statement (string) = "SELECT COUNT(1) [...](10497)",
  04: runAsync (bool) = true,
}
I0825 11:47:45.327751 51923 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:45.345118 51923 Frontend.java:935] Analyzing query: SELECT COUNT(1) AS `EXPR_1`  FROM (SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey` AS `bi_16209772373942822610` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator` AS `bi_7173110153481771205` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`created` AS `bi_13491404487973529010` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor` AS `bi_16709338949652660965` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited` AS `bi_7778611651735101528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t` AS `bi_5365439428354097443` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode` AS `bi_17739814079848908328` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`code` AS `bi_2232887874484344045` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode` AS `bi_369040516142209005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename` AS `bi_6559770015537514515` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`name` AS `bi_15189533194949851777` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename` AS `bi_7541878364736470844` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename` AS `bi_5792701378059420076` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename` AS `bi_3349638123191173855` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename` AS `bi_15445715632339295217` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname` AS `bi_9114563080665146699` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname` AS `bi_13865388329565152770` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname` AS `bi_12093476229320587287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname` AS `bi_5623662814544693635` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname` AS `bi_13683947135958082930` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw` AS `bi_11924957536007553338` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate` AS `bi_614967852965536978` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate` AS `bi_5003822878387321743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate` AS `bi_6413940051808780525` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment` AS `bi_11216260561419591329` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark` AS `bi_15719283721382345906` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone` AS `bi_2135828979746422287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername` AS `bi_8234557137695700893` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion` AS `bi_5133013160763149225` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname` AS `bi_2661014466711632970` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername` AS `bi_13689588754024198241` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate` AS `bi_11029029363983356005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate` AS `bi_6920746512342794880` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate` AS `bi_1980803134228074743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode` AS `bi_16284813439853843418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname` AS `bi_4893616353618505239` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail` AS `bi_7824035878402166299` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname` AS `bi_17834913520635724437` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid` AS `bi_1963530120962417240` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname` AS `bi_5127572173810565873` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype` AS `bi_2440282083506678752` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey` AS `bi_5524861625849511082` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid` AS `bi_13360343267273546668` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode` AS `bi_13600932575276159557` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname` AS `bi_10699817008190601050` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short` AS `bi_15916860084426853186` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode` AS `bi_4007708937737028237` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname` AS `bi_7467729968303243062` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short` AS `bi_16247278283018779660` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` AS `bi_14123165879102550317`  FROM (SELECT `temp_sql_wrapper_table`.`rowkey` AS `rowkey` , `temp_sql_wrapper_table`.`creator` AS `creator` , `temp_sql_wrapper_table`.`created` AS `created` , `temp_sql_wrapper_table`.`editor` AS `editor` , `temp_sql_wrapper_table`.`edited` AS `edited` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`declarecode` AS `declarecode` , `temp_sql_wrapper_table`.`code` AS `code` , `temp_sql_wrapper_table`.`interiorcode` AS `interiorcode` , `temp_sql_wrapper_table`.`choicetypename` AS `choicetypename` , `temp_sql_wrapper_table`.`name` AS `name` , `temp_sql_wrapper_table`.`objectssumtypename` AS `objectssumtypename` , `temp_sql_wrapper_table`.`typename` AS `typename` , `temp_sql_wrapper_table`.`subtypename` AS `subtypename` , `temp_sql_wrapper_table`.`endtypename` AS `endtypename` , `temp_sql_wrapper_table`.`ourstatusname` AS `ourstatusname` , `temp_sql_wrapper_table`.`fundditchname` AS `fundditchname` , `temp_sql_wrapper_table`.`subfundditchname` AS `subfundditchname` , `temp_sql_wrapper_table`.`fundallocationname` AS `fundallocationname` , `temp_sql_wrapper_table`.`deptidname` AS `deptidname` , `temp_sql_wrapper_table`.`dependlaw` AS `dependlaw` , `temp_sql_wrapper_table`.`startperformingdate` AS `startperformingdate` , `temp_sql_wrapper_table`.`endperformingdate` AS `endperformingdate` , `temp_sql_wrapper_table`.`performfinishdate` AS `performfinishdate` , `temp_sql_wrapper_table`.`performfinishcomment` AS `performfinishcomment` , `temp_sql_wrapper_table`.`remark` AS `remark` , `temp_sql_wrapper_table`.`undertakerphone` AS `undertakerphone` , `temp_sql_wrapper_table`.`undertakername` AS `undertakername` , `temp_sql_wrapper_table`.`undertakeropinion` AS `undertakeropinion` , `temp_sql_wrapper_table`.`undertakedeptname` AS `undertakedeptname` , `temp_sql_wrapper_table`.`deptchargername` AS `deptchargername` , `temp_sql_wrapper_table`.`submitteddate` AS `submitteddate` , `temp_sql_wrapper_table`.`createdate` AS `createdate` , `temp_sql_wrapper_table`.`modifydate` AS `modifydate` , `temp_sql_wrapper_table`.`localcode` AS `localcode` , `temp_sql_wrapper_table`.`frameworkname` AS `frameworkname` , `temp_sql_wrapper_table`.`notbiddingreasondetail` AS `notbiddingreasondetail` , `temp_sql_wrapper_table`.`connectedtransactionsname` AS `connectedtransactionsname` , `temp_sql_wrapper_table`.`performanceid` AS `performanceid` , `temp_sql_wrapper_table`.`relatormodel_counterpartyname` AS `relatormodel_counterpartyname` , `temp_sql_wrapper_table`.`relatormodel_orgtype` AS `relatormodel_orgtype` , `temp_sql_wrapper_table`.`relatormodel_rowkey` AS `relatormodel_rowkey` , `temp_sql_wrapper_table`.`signexaminationfileid` AS `signexaminationfileid` , `temp_sql_wrapper_table`.`groupcode` AS `groupcode` , `temp_sql_wrapper_table`.`groupname` AS `groupname` , `temp_sql_wrapper_table`.`groupname_short` AS `groupname_short` , `temp_sql_wrapper_table`.`regcode` AS `regcode` , `temp_sql_wrapper_table`.`regname` AS `regname` , `temp_sql_wrapper_table`.`regname_short` AS `regname_short` , `temp_sql_wrapper_table`.`etl_date` AS `etl_date`  FROM (SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`created`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`code`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`name`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` FROM `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120` `cnpc_view_ctms_v2_b_contractinfo_c120`  LIMIT 1000 ) `temp_sql_wrapper_table`) `cnpc_view_ctms_v2_b_contractinfo_c120`) `tableWithoutPaging` 
I0825 11:47:45.352319 51923 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:47:45.358973 51923 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:47:45.373680 51923 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:47:45.374897 51923 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:47:45.383893 51923 Frontend.java:947] Analysis finished.
I0825 11:47:45.411901 51923 admission-controller.cc:508] Schedule for id=9f44c8cc69ab7b5e:16ecc9fe00000000 in pool_name=root.default cluster_mem_needed=16.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
I0825 11:47:45.414270 51923 admission-controller.cc:513] Stats: agg_num_running=11, agg_num_queued=0, agg_mem_reserved=424.00 GB,  local_host(local_mem_admitted=200.00 GB, num_admitted_running=5, num_queued=0, backend_mem_reserved=88.00 GB)
I0825 11:47:45.416961 51923 admission-controller.cc:529] Admitted query id=9f44c8cc69ab7b5e:16ecc9fe00000000
I0825 11:47:45.418993 51923 coordinator.cc:93] Exec() query_id=9f44c8cc69ab7b5e:16ecc9fe00000000 stmt=SELECT COUNT(1) AS `EXPR_1`  FROM (SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey` AS `bi_16209772373942822610` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator` AS `bi_7173110153481771205` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`created` AS `bi_13491404487973529010` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor` AS `bi_16709338949652660965` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited` AS `bi_7778611651735101528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t` AS `bi_5365439428354097443` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode` AS `bi_17739814079848908328` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`code` AS `bi_2232887874484344045` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode` AS `bi_369040516142209005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename` AS `bi_6559770015537514515` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`name` AS `bi_15189533194949851777` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename` AS `bi_7541878364736470844` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename` AS `bi_5792701378059420076` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename` AS `bi_3349638123191173855` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename` AS `bi_15445715632339295217` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname` AS `bi_9114563080665146699` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname` AS `bi_13865388329565152770` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname` AS `bi_12093476229320587287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname` AS `bi_5623662814544693635` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname` AS `bi_13683947135958082930` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw` AS `bi_11924957536007553338` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate` AS `bi_614967852965536978` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate` AS `bi_5003822878387321743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate` AS `bi_6413940051808780525` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment` AS `bi_11216260561419591329` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark` AS `bi_15719283721382345906` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone` AS `bi_2135828979746422287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername` AS `bi_8234557137695700893` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion` AS `bi_5133013160763149225` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname` AS `bi_2661014466711632970` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername` AS `bi_13689588754024198241` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate` AS `bi_11029029363983356005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate` AS `bi_6920746512342794880` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate` AS `bi_1980803134228074743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode` AS `bi_16284813439853843418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname` AS `bi_4893616353618505239` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail` AS `bi_7824035878402166299` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname` AS `bi_17834913520635724437` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid` AS `bi_1963530120962417240` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname` AS `bi_5127572173810565873` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype` AS `bi_2440282083506678752` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey` AS `bi_5524861625849511082` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid` AS `bi_13360343267273546668` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode` AS `bi_13600932575276159557` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname` AS `bi_10699817008190601050` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short` AS `bi_15916860084426853186` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode` AS `bi_4007708937737028237` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname` AS `bi_7467729968303243062` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short` AS `bi_16247278283018779660` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` AS `bi_14123165879102550317`  FROM (SELECT `temp_sql_wrapper_table`.`rowkey` AS `rowkey` , `temp_sql_wrapper_table`.`creator` AS `creator` , `temp_sql_wrapper_table`.`created` AS `created` , `temp_sql_wrapper_table`.`editor` AS `editor` , `temp_sql_wrapper_table`.`edited` AS `edited` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`declarecode` AS `declarecode` , `temp_sql_wrapper_table`.`code` AS `code` , `temp_sql_wrapper_table`.`interiorcode` AS `interiorcode` , `temp_sql_wrapper_table`.`choicetypename` AS `choicetypename` , `temp_sql_wrapper_table`.`name` AS `name` , `temp_sql_wrapper_table`.`objectssumtypename` AS `objectssumtypename` , `temp_sql_wrapper_table`.`typename` AS `typename` , `temp_sql_wrapper_table`.`subtypename` AS `subtypename` , `temp_sql_wrapper_table`.`endtypename` AS `endtypename` , `temp_sql_wrapper_table`.`ourstatusname` AS `ourstatusname` , `temp_sql_wrapper_table`.`fundditchname` AS `fundditchname` , `temp_sql_wrapper_table`.`subfundditchname` AS `subfundditchname` , `temp_sql_wrapper_table`.`fundallocationname` AS `fundallocationname` , `temp_sql_wrapper_table`.`deptidname` AS `deptidname` , `temp_sql_wrapper_table`.`dependlaw` AS `dependlaw` , `temp_sql_wrapper_table`.`startperformingdate` AS `startperformingdate` , `temp_sql_wrapper_table`.`endperformingdate` AS `endperformingdate` , `temp_sql_wrapper_table`.`performfinishdate` AS `performfinishdate` , `temp_sql_wrapper_table`.`performfinishcomment` AS `performfinishcomment` , `temp_sql_wrapper_table`.`remark` AS `remark` , `temp_sql_wrapper_table`.`undertakerphone` AS `undertakerphone` , `temp_sql_wrapper_table`.`undertakername` AS `undertakername` , `temp_sql_wrapper_table`.`undertakeropinion` AS `undertakeropinion` , `temp_sql_wrapper_table`.`undertakedeptname` AS `undertakedeptname` , `temp_sql_wrapper_table`.`deptchargername` AS `deptchargername` , `temp_sql_wrapper_table`.`submitteddate` AS `submitteddate` , `temp_sql_wrapper_table`.`createdate` AS `createdate` , `temp_sql_wrapper_table`.`modifydate` AS `modifydate` , `temp_sql_wrapper_table`.`localcode` AS `localcode` , `temp_sql_wrapper_table`.`frameworkname` AS `frameworkname` , `temp_sql_wrapper_table`.`notbiddingreasondetail` AS `notbiddingreasondetail` , `temp_sql_wrapper_table`.`connectedtransactionsname` AS `connectedtransactionsname` , `temp_sql_wrapper_table`.`performanceid` AS `performanceid` , `temp_sql_wrapper_table`.`relatormodel_counterpartyname` AS `relatormodel_counterpartyname` , `temp_sql_wrapper_table`.`relatormodel_orgtype` AS `relatormodel_orgtype` , `temp_sql_wrapper_table`.`relatormodel_rowkey` AS `relatormodel_rowkey` , `temp_sql_wrapper_table`.`signexaminationfileid` AS `signexaminationfileid` , `temp_sql_wrapper_table`.`groupcode` AS `groupcode` , `temp_sql_wrapper_table`.`groupname` AS `groupname` , `temp_sql_wrapper_table`.`groupname_short` AS `groupname_short` , `temp_sql_wrapper_table`.`regcode` AS `regcode` , `temp_sql_wrapper_table`.`regname` AS `regname` , `temp_sql_wrapper_table`.`regname_short` AS `regname_short` , `temp_sql_wrapper_table`.`etl_date` AS `etl_date`  FROM (SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`created`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`code`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`name`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` FROM `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120` `cnpc_view_ctms_v2_b_contractinfo_c120`  LIMIT 1000 ) `temp_sql_wrapper_table`) `cnpc_view_ctms_v2_b_contractinfo_c120`) `tableWithoutPaging` 
I0825 11:47:45.423583 51923 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:47:45.424115 51923 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:47:45.424577 51923 coordinator.cc:349] starting execution on 2 backends for query_id=9f44c8cc69ab7b5e:16ecc9fe00000000
I0825 11:47:45.427528 44904 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=9f44c8cc69ab7b5e:16ecc9fe00000000
I0825 11:47:45.427984 44904 query-exec-mgr.cc:46] StartQueryFInstances() query_id=9f44c8cc69ab7b5e:16ecc9fe00000000 coord=e4bdhpp025:22000
I0825 11:47:45.428454 44904 query-state.cc:178] Buffer pool limit for 9f44c8cc69ab7b5e:16ecc9fe00000000: 6871947673
I0825 11:47:45.428812 44904 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 9f44c8cc69ab7b5e:16ecc9fe00000000
I0825 11:47:45.438371 51930 query-state.cc:300] StartFInstances(): query_id=9f44c8cc69ab7b5e:16ecc9fe00000000 #instances=1
I0825 11:47:45.448891 51930 query-state.cc:313] descriptor table for query=9f44c8cc69ab7b5e:16ecc9fe00000000
tuples:
Tuple(id=4 size=8 slots=[Slot(id=200 type=BIGINT col_path=[] offset=0 null=(offset=0 mask=0) slot_idx=0 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=0 slots=[] tuple_path=[])
I0825 11:47:45.454640 51931 query-state.cc:395] Executing instance. instance_id=9f44c8cc69ab7b5e:16ecc9fe00000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=1 #in-flight=20
I0825 11:47:45.466260 51930 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=9f44c8cc69ab7b5e:16ecc9fe00000000 refcnt=3
I0825 11:47:45.501998 51923 coordinator.cc:362] started execution on 2 backends for query_id=9f44c8cc69ab7b5e:16ecc9fe00000000
I0825 11:47:45.520834 51935 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:45.521668 51923 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "^{\xabi\xcc\xc8D\x9f\x00\x00\x00\x00\xfe\xc9\xec\x16",
      02: secret (string) = "^{\xabi\xcc\xc8D\x9f\x00\x00\x00\x00\xfe\xc9\xec\x16",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:47:45.522584 51935 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:45.553617 51892 query-exec-mgr.cc:95] QueryState: query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:45.562220 51892 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:45.574292 51937 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:45.575249 51937 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:45.591744 51937 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:45.592344 51937 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:45.600966 51939 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:45.601712 51939 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:45.610710 51892 query-exec-mgr.cc:95] QueryState: query_id=e141542bad9ca589:160fc79100000000 refcnt=4
I0825 11:47:45.611526 51892 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e141542bad9ca589:160fc79100000000 refcnt=4
I0825 11:47:45.626029 51937 query-exec-mgr.cc:95] QueryState: query_id=9f44c8cc69ab7b5e:16ecc9fe00000000 refcnt=3
I0825 11:47:45.626317 51937 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=9f44c8cc69ab7b5e:16ecc9fe00000000 refcnt=3
I0825 11:47:45.952244 51878 status.cc:125] AnalysisException: Could not resolve path: 'default.app_auap_yk_org'
    @           0x9e215a  impala::Status::Status()
    @           0xd7568d  impala::JniUtil::GetJniExceptionMsg()
    @           0xc685b0  impala::Frontend::GetExecRequest()
    @           0xc87712  impala::ImpalaServer::ExecuteInternal()
    @           0xc8e4b9  impala::ImpalaServer::Execute()
    @           0xced796  impala::ImpalaServer::ExecuteStatement()
    @          0x11a6a7a  apache::hive::service::cli::thrift::TCLIServiceProcessor::process_ExecuteStatement()
    @          0x11a099d  apache::hive::service::cli::thrift::TCLIServiceProcessor::dispatchCall()
    @           0x9aff4a  apache::thrift::TDispatchProcessor::process()
    @           0xb9b379  apache::thrift::server::TAcceptQueueServer::Task::run()
    @           0xb93af9  impala::ThriftThread::RunRunnable()
    @           0xb948f2  boost::detail::function::void_function_obj_invoker0<>::invoke()
    @           0xde83cf  impala::Thread::SuperviseThread()
    @           0xde8bca  boost::detail::thread_data<>::run()
    @          0x136d81a  thread_proxy
    @       0x3491407aa1  (unknown)
    @       0x34910e8c4d  (unknown)
I0825 11:47:45.953837 51878 impala-server.cc:1015] UnregisterQuery(): query_id=a341fb4fcedb7d44:e2599eb500000000
I0825 11:47:45.959075 51878 impala-server.cc:1102] Cancel(): query_id=a341fb4fcedb7d44:e2599eb500000000
I0825 11:47:45.974171 51931 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=9f44c8cc69ab7b5e:16ecc9fe00000000, node=2
I0825 11:47:45.976158 51931 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=9f44c8cc69ab7b5e:16ecc9fe00000000 node_id=2
I0825 11:47:45.981386 51923 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=9f44c8cc69ab7b5e:16ecc9fe00000000
I0825 11:47:45.982167 51923 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[1] {
      [0] = TColumnDesc {
        01: columnName (string) = "expr_1",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
    },
  },
}
I0825 11:47:45.984567 51923 coordinator.cc:522] Coordinator waiting for backends to finish, 2 remaining. query_id=9f44c8cc69ab7b5e:16ecc9fe00000000
I0825 11:47:45.985900 45240 coordinator.cc:689] Backend completed:  host=e4bdhpp025:22000 remaining=1 query_id=9f44c8cc69ab7b5e:16ecc9fe00000000
I0825 11:47:45.986366 45240 coordinator-backend-state.cc:226] query_id=9f44c8cc69ab7b5e:16ecc9fe00000000: first in-progress backend: e4bdhpp021:22000
I0825 11:47:45.986965 51931 query-state.cc:403] Instance completed. instance_id=9f44c8cc69ab7b5e:16ecc9fe00000000 #in-flight=19 status=OK
I0825 11:47:45.987663 51931 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=9f44c8cc69ab7b5e:16ecc9fe00000000 refcnt=2
I0825 11:47:46.044077 51878 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xac\xaa%\xc0\xbf\xbaI\xde\xa9\x9c?^O\xa7]\xeb",
      02: secret (string) = "\xf7\xf2\xb3q\x96\xb6LX\x91-\x9c\xa1f\xbb\x1d\xfa",
    },
  },
  02: statement (string) = "select   `bi_498[...](16042)",
  04: runAsync (bool) = true,
}
I0825 11:47:46.044739 51878 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xac\xaa%\xc0\xbf\xbaI\xde\xa9\x9c?^O\xa7]\xeb",
      02: secret (string) = "\xf7\xf2\xb3q\x96\xb6LX\x91-\x9c\xa1f\xbb\x1d\xfa",
    },
  },
  02: statement (string) = "select   `bi_498[...](16042)",
  04: runAsync (bool) = true,
}
I0825 11:47:46.045737 51878 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:47:46.069624 51878 Frontend.java:935] Analyzing query: select   `bi_49891432609270195`.`帐号` as `bi_9833225738464556179` , `bi_49891432609270195`.`卡号` as `bi_16765984159333439402` , `bi_49891432609270195`.`卡类型描述` as `bi_5452346849819763092` , `bi_49891432609270195`.`是否为副卡` as `bi_1127891584836197264` , `bi_49891432609270195`.`交易主要站点` as `bi_2545751338491490025` , `bi_49891432609270195`.`单位卡消费过加油站站点数量` as `bi_6441433733300507817` , `bi_49891432609270195`.`交易类型描述` as `bi_15038768847591068675` , `bi_49891432609270195`.`商品类型` as `bi_16492520468207201732` , `bi_49891432609270195`.`商品类型描述` as `bi_9376550538423824506` , `bi_49891432609270195`.`发卡单位` as `bi_8100659610193253660` , `bi_49891432609270195`.`发卡单位与销售单位是否一致` as `bi_18185366717104475339` , `bi_49891432609270195`.`首次交易日期` as `bi_16889103124287189574` , `bi_49891432609270195`.`最近交易日期` as `bi_2106395510405947614` , `bi_49891432609270195`.`平均油量升数` as `bi_12628198587542179019` , `bi_49891432609270195`.`平均消费金额` as `bi_1219558422880111543` , `bi_49891432609270195`.`平均折扣金额` as `bi_17915682550306328330` , `bi_49891432609270195`.`平均余额` as `bi_17675574034401517679` , `bi_49891432609270195`.`日均消费笔数` as `bi_1754130456570268440` , `bi_49891432609270195`.`日均消费金额` as `bi_15657812531500627407` , `bi_49891432609270195`.`单日消费次数过多次数` as `bi_17612086331363954540` , `bi_49891432609270195`.`日均夜间消费笔数` as `bi_17855986537495503686` , `bi_49891432609270195`.`日均夜间消费金额` as `bi_1043443510903046104` , `bi_49891432609270195`.`单日夜间消费次数过多次数` as `bi_4937558613390431945` , `bi_49891432609270195`.`睡眠次数` as `bi_7363935285664891950` , `bi_49891432609270195`.`是否仍在睡眠` as `bi_404517206247691038` , `bi_49891432609270195`.`单位卡累计消费金额` as `bi_13443197606867190735` , `bi_49891432609270195`.`单位卡消费金额方差` as `bi_4769556060708606987` , `bi_49891432609270195`.`单位卡累计消费次数` as `bi_3862957503352231103` , `bi_49891432609270195`.`单位卡消费金额为小数次数` as `bi_606582381051428439` , `bi_49891432609270195`.`单位卡汽油累计消费次数` as `bi_13160325095360504327` , `bi_49891432609270195`.`单位卡汽油累计消费金额` as `bi_8939036342664054168` , `bi_49891432609270195`.`单位卡消费过油品类型数量` as `bi_14603363494981556751` , `bi_49891432609270195`.`单位卡汽油消费次数占比` as `bi_5797665317184532235` , `bi_49891432609270195`.`单位卡柴油消费次数占比` as `bi_4405090079101472574` , `bi_49891432609270195`.`单位卡天然气消费次数占比` as `bi_10381659451279799103` , `bi_49891432609270195`.`累计消费金额是否过高475660453` as `bi_1539169295680080914` , `bi_49891432609270195`.`累计消费次数是否过多_1109338698` as `bi_14041556194125867668` , `bi_49891432609270195`.`非油累计消费金额` as `bi_7960903924678445128` , `bi_49891432609270195`.`非油与成品油消费金额比例` as `bi_17099085683607676327` , `bi_49891432609270195`.`单位卡累计充值金额` as `bi_8123294280144136192` , `bi_49891432609270195`.`单位卡银行卡充值次数` as `bi_880472205521468105` , `bi_49891432609270195`.`单位卡现金充值次数` as `bi_14776239947036545134` , `bi_49891432609270195`.`单日充值次数过多次数` as `bi_16074686502897337552` , `bi_49891432609270195`.`单位卡余额充足时充钱的次数` as `bi_7961857330449238144` , `bi_49891432609270195`.`ic卡大额非油消费次数` as `bi_5943549542113195618` , `bi_49891432609270195`.`单位卡柴油累计消费是否过高` as `bi_9444148203116406053` , `bi_49891432609270195`.`即消费且余额低的次数831743621` as `bi_12667250280629613856` , `bi_49891432609270195`.`同一班次消费的次数` as `bi_12375103238287348826` , `bi_49891432609270195`.`密码重置次数` as `bi_16654652680354768327` , `bi_49891432609270195`.`笔折扣额的消费的次数_2085032453` as `bi_17265400455728416625` , `bi_49891432609270195`.`是否曾频繁转账` as `bi_16101984035252136833` , `bi_49891432609270195`.`是否异常加油卡` as `bi_8173657367271516742` , `bi_49891432609270195`.`单位名称` as `bi_13896315529143866076` , `bi_49891432609270195`.`所属` as `bi_4248350677332311184` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_49891432609270195`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_6022750446866842230` , TRIM(`bi_49891432609270195`.`交易主要站点`) as `bi_14940694802980442301`   from (select   `app_auap_yk_org`.`帐号` as `帐号` , `app_auap_yk_org`.`卡号` as `卡号` , `app_auap_yk_org`.`卡类型描述` as `卡类型描述` , `app_auap_yk_org`.`是否为副卡` as `是否为副卡` , `app_auap_yk_org`.`交易主要站点` as `交易主要站点` , `app_auap_yk_org`.`单位卡消费过加油站站点数量` as `单位卡消费过加油站站点数量` , `app_auap_yk_org`.`交易类型描述` as `交易类型描述` , `app_auap_yk_org`.`商品类型` as `商品类型` , `app_auap_yk_org`.`商品类型描述` as `商品类型描述` , `app_auap_yk_org`.`发卡单位` as `发卡单位` , `app_auap_yk_org`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `app_auap_yk_org`.`首次交易日期` as `首次交易日期` , `app_auap_yk_org`.`最近交易日期` as `最近交易日期` , `app_auap_yk_org`.`平均油量升数` as `平均油量升数` , `app_auap_yk_org`.`平均消费金额` as `平均消费金额` , `app_auap_yk_org`.`平均折扣金额` as `平均折扣金额` , `app_auap_yk_org`.`平均余额` as `平均余额` , `app_auap_yk_org`.`日均消费笔数` as `日均消费笔数` , `app_auap_yk_org`.`日均消费金额` as `日均消费金额` , `app_auap_yk_org`.`单日消费次数过多次数` as `单日消费次数过多次数` , `app_auap_yk_org`.`日均夜间消费笔数` as `日均夜间消费笔数` , `app_auap_yk_org`.`日均夜间消费金额` as `日均夜间消费金额` , `app_auap_yk_org`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `app_auap_yk_org`.`睡眠次数` as `睡眠次数` , `app_auap_yk_org`.`是否仍在睡眠` as `是否仍在睡眠` , `app_auap_yk_org`.`单位卡累计消费金额` as `单位卡累计消费金额` , `app_auap_yk_org`.`单位卡消费金额方差` as `单位卡消费金额方差` , `app_auap_yk_org`.`单位卡累计消费次数` as `单位卡累计消费次数` , `app_auap_yk_org`.`单位卡消费金额为小数次数` as `单位卡消费金额为小数次数` , `app_auap_yk_org`.`单位卡汽油累计消费次数` as `单位卡汽油累计消费次数` , `app_auap_yk_org`.`单位卡汽油累计消费金额` as `单位卡汽油累计消费金额` , `app_auap_yk_org`.`单位卡消费过油品类型数量` as `单位卡消费过油品类型数量` , `app_auap_yk_org`.`单位卡汽油消费次数占比` as `单位卡汽油消费次数占比` , `app_auap_yk_org`.`单位卡柴油消费次数占比` as `单位卡柴油消费次数占比` , `app_auap_yk_org`.`单位卡天然气消费次数占比` as `单位卡天然气消费次数占比` , `app_auap_yk_org`.`单位卡非油累计消费金额是否过高` as `累计消费金额是否过高475660453` , `app_auap_yk_org`.`单位卡非油累计消费次数是否过多` as `累计消费次数是否过多_1109338698` , `app_auap_yk_org`.`非油累计消费金额` as `非油累计消费金额` , `app_auap_yk_org`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `app_auap_yk_org`.`单位卡累计充值金额` as `单位卡累计充值金额` , `app_auap_yk_org`.`单位卡银行卡充值次数` as `单位卡银行卡充值次数` , `app_auap_yk_org`.`单位卡现金充值次数` as `单位卡现金充值次数` , `app_auap_yk_org`.`单日充值次数过多次数` as `单日充值次数过多次数` , `app_auap_yk_org`.`单位卡余额充足时充钱的次数` as `单位卡余额充足时充钱的次数` , `app_auap_yk_org`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `app_auap_yk_org`.`单位卡柴油累计消费是否过高` as `单位卡柴油累计消费是否过高` , `app_auap_yk_org`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `app_auap_yk_org`.`同一班次消费的次数` as `同一班次消费的次数` , `app_auap_yk_org`.`密码重置次数` as `密码重置次数` , `app_auap_yk_org`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `app_auap_yk_org`.`是否曾频繁转账` as `是否曾频繁转账` , `app_auap_yk_org`.`是否异常加油卡` as `是否异常加油卡` , `app_auap_yk_org`.`单位名称` as `单位名称` , `app_auap_yk_org`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`单位卡消费过加油站站点数量` as `单位卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`单位卡累计消费金额` as `单位卡累计消费金额`,`单位卡消费金额方差` as `单位卡消费金额方差`,`单位卡累计消费次数` as `单位卡累计消费次数`,`单位卡消费金额为小数次数` as `单位卡消费金额为小数次数`,`单位卡汽油累计消费次数` as `单位卡汽油累计消费次数`,`单位卡汽油累计消费金额` as `单位卡汽油累计消费金额`,`单位卡消费过油品类型数量` as `单位卡消费过油品类型数量`,`单位卡汽油消费次数占比` as `单位卡汽油消费次数占比`,`单位卡柴油消费次数占比` as `单位卡柴油消费次数占比`,`单位卡天然气消费次数占比` as `单位卡天然气消费次数占比`,`单位卡非油累计消费金额是否过高` as `单位卡非油累计消费金额是否过高`,`单位卡非油累计消费次数是否过多` as `单位卡非油累计消费次数是否过多`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`单位卡累计充值金额` as `单位卡累计充值金额`,`单位卡银行卡充值次数` as `单位卡银行卡充值次数`,`单位卡现金充值次数` as `单位卡现金充值次数`,`单日充值次数过多次数` as `单日充值次数过多次数`,`单位卡余额充足时充钱的次数` as `单位卡余额充足时充钱的次数`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`单位卡柴油累计消费是否过高` as `单位卡柴油累计消费是否过高`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`单位卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`单位卡累计消费金额`,`单位卡消费金额方差`,`单位卡累计消费次数`,`单位卡消费金额为小数次数`,`单位卡汽油累计消费次数`,`单位卡汽油累计消费金额`,`单位卡消费过油品类型数量`,`单位卡汽油消费次数占比`,`单位卡柴油消费次数占比`,`单位卡天然气消费次数占比`,`单位卡非油累计消费金额是否过高`,`单位卡非油累计消费次数是否过多`,`非油累计消费金额`,`非油与成品油消费金额比例`,`单位卡累计充值金额`,`单位卡银行卡充值次数`,`单位卡现金充值次数`,`单日充值次数过多次数`,`单位卡余额充足时充钱的次数`,`ic卡大额非油消费次数`,`单位卡柴油累计消费是否过高`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `单位卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`,
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`,
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`, 
       `单日消费次数过多次数`, 
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`,
       `睡眠次数`,
       `是否仍在睡眠`,
       `单位卡累计消费金额`, 
       `加油卡消费金额方差` `单位卡消费金额方差`,
       `单位卡累计消费次数`, 
       `加油卡消费金额为小数次数` `单位卡消费金额为小数次数`,
       `单位卡汽油累计消费次数`, 
       `单位卡汽油累计消费金额`, 
       `单位卡消费过油品类型数量`,
       `单位卡汽油消费次数占比`, 
       `单位卡柴油消费次数占比`,
       `单位卡天然气消费次数占比`, 
       `单位卡非油累计消费金额是否过高`, 
       `单位卡非油累计消费次数是否过多`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `单位卡累计充值金额`,
       `银行卡充值次数` `单位卡银行卡充值次数`,
       `现金充值次数` `单位卡现金充值次数`,
       `单日充值次数过多次数`,
       `单位卡余额充足时充钱的次数`,
       `IC卡大额非油消费次数`,
       `单位卡柴油累计消费是否过高`,
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM APP_AUAP_YK_ORG) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `app_auap_yk_org`  
     ) `bi_49891432609270195`
      limit 1200001 
I0825 11:47:46.470774 44128 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp021@PANEL.COM" on an internal connection
I0825 11:47:46.477242 51923 coordinator.cc:527] All backends finished successfully. query_id=9f44c8cc69ab7b5e:16ecc9fe00000000
I0825 11:47:46.477728 51923 coordinator.cc:783] Release admission control resources for query_id=9f44c8cc69ab7b5e:16ecc9fe00000000
I0825 11:47:46.481626 51923 impala-hs2-server.cc:683] CloseOperation(): query_id=9f44c8cc69ab7b5e:16ecc9fe00000000
I0825 11:47:46.482802 51923 impala-server.cc:1015] UnregisterQuery(): query_id=9f44c8cc69ab7b5e:16ecc9fe00000000
I0825 11:47:46.483326 51923 impala-server.cc:1102] Cancel(): query_id=9f44c8cc69ab7b5e:16ecc9fe00000000
I0825 11:47:46.483739 51923 coordinator.cc:629] Cancel() query_id=9f44c8cc69ab7b5e:16ecc9fe00000000
I0825 11:47:46.484262 51923 coordinator.cc:639] CancelBackends() query_id=9f44c8cc69ab7b5e:16ecc9fe00000000, tried to cancel 0 backends
I0825 11:47:46.500401 51923 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=9f44c8cc69ab7b5e:16ecc9fe00000000 refcnt=1
I0825 11:47:46.510329 51923 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x80\xf4\x9d\x88\xcd6BM\x8f\xf5\t\x15L\xf8\xaa8",
      02: secret (string) = "T\x8a)\xa1\x8b\x9dON\x98|\x9e3,G\xf3\x1a",
    },
  },
}
I0825 11:47:46.512470 51923 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:39528 closed, closing 1 associated session(s)
I0825 11:47:46.692903 51878 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:47:46.697353 51878 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:47:47.145634 51878 Frontend.java:947] Analysis finished.
I0825 11:47:47.163323 51878 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:47:47.168725 51878 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:47:47.194787 51878 admission-controller.cc:508] Schedule for id=71450f5e23c87cbc:63892bf00000000 in pool_name=root.agilebi cluster_mem_needed=5.72 GB PoolConfig: max_requests=500 max_queued=200 max_mem=800.00 GB
I0825 11:47:47.198890 51878 admission-controller.cc:513] Stats: agg_num_running=2, agg_num_queued=0, agg_mem_reserved=10.49 GB,  local_host(local_mem_admitted=4.77 GB, num_admitted_running=1, num_queued=0, backend_mem_reserved=1.91 GB)
I0825 11:47:47.201615 51878 admission-controller.cc:529] Admitted query id=71450f5e23c87cbc:63892bf00000000
I0825 11:47:47.202333 51878 coordinator.cc:93] Exec() query_id=71450f5e23c87cbc:63892bf00000000 stmt=select   `bi_49891432609270195`.`帐号` as `bi_9833225738464556179` , `bi_49891432609270195`.`卡号` as `bi_16765984159333439402` , `bi_49891432609270195`.`卡类型描述` as `bi_5452346849819763092` , `bi_49891432609270195`.`是否为副卡` as `bi_1127891584836197264` , `bi_49891432609270195`.`交易主要站点` as `bi_2545751338491490025` , `bi_49891432609270195`.`单位卡消费过加油站站点数量` as `bi_6441433733300507817` , `bi_49891432609270195`.`交易类型描述` as `bi_15038768847591068675` , `bi_49891432609270195`.`商品类型` as `bi_16492520468207201732` , `bi_49891432609270195`.`商品类型描述` as `bi_9376550538423824506` , `bi_49891432609270195`.`发卡单位` as `bi_8100659610193253660` , `bi_49891432609270195`.`发卡单位与销售单位是否一致` as `bi_18185366717104475339` , `bi_49891432609270195`.`首次交易日期` as `bi_16889103124287189574` , `bi_49891432609270195`.`最近交易日期` as `bi_2106395510405947614` , `bi_49891432609270195`.`平均油量升数` as `bi_12628198587542179019` , `bi_49891432609270195`.`平均消费金额` as `bi_1219558422880111543` , `bi_49891432609270195`.`平均折扣金额` as `bi_17915682550306328330` , `bi_49891432609270195`.`平均余额` as `bi_17675574034401517679` , `bi_49891432609270195`.`日均消费笔数` as `bi_1754130456570268440` , `bi_49891432609270195`.`日均消费金额` as `bi_15657812531500627407` , `bi_49891432609270195`.`单日消费次数过多次数` as `bi_17612086331363954540` , `bi_49891432609270195`.`日均夜间消费笔数` as `bi_17855986537495503686` , `bi_49891432609270195`.`日均夜间消费金额` as `bi_1043443510903046104` , `bi_49891432609270195`.`单日夜间消费次数过多次数` as `bi_4937558613390431945` , `bi_49891432609270195`.`睡眠次数` as `bi_7363935285664891950` , `bi_49891432609270195`.`是否仍在睡眠` as `bi_404517206247691038` , `bi_49891432609270195`.`单位卡累计消费金额` as `bi_13443197606867190735` , `bi_49891432609270195`.`单位卡消费金额方差` as `bi_4769556060708606987` , `bi_49891432609270195`.`单位卡累计消费次数` as `bi_3862957503352231103` , `bi_49891432609270195`.`单位卡消费金额为小数次数` as `bi_606582381051428439` , `bi_49891432609270195`.`单位卡汽油累计消费次数` as `bi_13160325095360504327` , `bi_49891432609270195`.`单位卡汽油累计消费金额` as `bi_8939036342664054168` , `bi_49891432609270195`.`单位卡消费过油品类型数量` as `bi_14603363494981556751` , `bi_49891432609270195`.`单位卡汽油消费次数占比` as `bi_5797665317184532235` , `bi_49891432609270195`.`单位卡柴油消费次数占比` as `bi_4405090079101472574` , `bi_49891432609270195`.`单位卡天然气消费次数占比` as `bi_10381659451279799103` , `bi_49891432609270195`.`累计消费金额是否过高475660453` as `bi_1539169295680080914` , `bi_49891432609270195`.`累计消费次数是否过多_1109338698` as `bi_14041556194125867668` , `bi_49891432609270195`.`非油累计消费金额` as `bi_7960903924678445128` , `bi_49891432609270195`.`非油与成品油消费金额比例` as `bi_17099085683607676327` , `bi_49891432609270195`.`单位卡累计充值金额` as `bi_8123294280144136192` , `bi_49891432609270195`.`单位卡银行卡充值次数` as `bi_880472205521468105` , `bi_49891432609270195`.`单位卡现金充值次数` as `bi_14776239947036545134` , `bi_49891432609270195`.`单日充值次数过多次数` as `bi_16074686502897337552` , `bi_49891432609270195`.`单位卡余额充足时充钱的次数` as `bi_7961857330449238144` , `bi_49891432609270195`.`ic卡大额非油消费次数` as `bi_5943549542113195618` , `bi_49891432609270195`.`单位卡柴油累计消费是否过高` as `bi_9444148203116406053` , `bi_49891432609270195`.`即消费且余额低的次数831743621` as `bi_12667250280629613856` , `bi_49891432609270195`.`同一班次消费的次数` as `bi_12375103238287348826` , `bi_49891432609270195`.`密码重置次数` as `bi_16654652680354768327` , `bi_49891432609270195`.`笔折扣额的消费的次数_2085032453` as `bi_17265400455728416625` , `bi_49891432609270195`.`是否曾频繁转账` as `bi_16101984035252136833` , `bi_49891432609270195`.`是否异常加油卡` as `bi_8173657367271516742` , `bi_49891432609270195`.`单位名称` as `bi_13896315529143866076` , `bi_49891432609270195`.`所属` as `bi_4248350677332311184` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_49891432609270195`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_6022750446866842230` , TRIM(`bi_49891432609270195`.`交易主要站点`) as `bi_14940694802980442301`   from (select   `app_auap_yk_org`.`帐号` as `帐号` , `app_auap_yk_org`.`卡号` as `卡号` , `app_auap_yk_org`.`卡类型描述` as `卡类型描述` , `app_auap_yk_org`.`是否为副卡` as `是否为副卡` , `app_auap_yk_org`.`交易主要站点` as `交易主要站点` , `app_auap_yk_org`.`单位卡消费过加油站站点数量` as `单位卡消费过加油站站点数量` , `app_auap_yk_org`.`交易类型描述` as `交易类型描述` , `app_auap_yk_org`.`商品类型` as `商品类型` , `app_auap_yk_org`.`商品类型描述` as `商品类型描述` , `app_auap_yk_org`.`发卡单位` as `发卡单位` , `app_auap_yk_org`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `app_auap_yk_org`.`首次交易日期` as `首次交易日期` , `app_auap_yk_org`.`最近交易日期` as `最近交易日期` , `app_auap_yk_org`.`平均油量升数` as `平均油量升数` , `app_auap_yk_org`.`平均消费金额` as `平均消费金额` , `app_auap_yk_org`.`平均折扣金额` as `平均折扣金额` , `app_auap_yk_org`.`平均余额` as `平均余额` , `app_auap_yk_org`.`日均消费笔数` as `日均消费笔数` , `app_auap_yk_org`.`日均消费金额` as `日均消费金额` , `app_auap_yk_org`.`单日消费次数过多次数` as `单日消费次数过多次数` , `app_auap_yk_org`.`日均夜间消费笔数` as `日均夜间消费笔数` , `app_auap_yk_org`.`日均夜间消费金额` as `日均夜间消费金额` , `app_auap_yk_org`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `app_auap_yk_org`.`睡眠次数` as `睡眠次数` , `app_auap_yk_org`.`是否仍在睡眠` as `是否仍在睡眠` , `app_auap_yk_org`.`单位卡累计消费金额` as `单位卡累计消费金额` , `app_auap_yk_org`.`单位卡消费金额方差` as `单位卡消费金额方差` , `app_auap_yk_org`.`单位卡累计消费次数` as `单位卡累计消费次数` , `app_auap_yk_org`.`单位卡消费金额为小数次数` as `单位卡消费金额为小数次数` , `app_auap_yk_org`.`单位卡汽油累计消费次数` as `单位卡汽油累计消费次数` , `app_auap_yk_org`.`单位卡汽油累计消费金额` as `单位卡汽油累计消费金额` , `app_auap_yk_org`.`单位卡消费过油品类型数量` as `单位卡消费过油品类型数量` , `app_auap_yk_org`.`单位卡汽油消费次数占比` as `单位卡汽油消费次数占比` , `app_auap_yk_org`.`单位卡柴油消费次数占比` as `单位卡柴油消费次数占比` , `app_auap_yk_org`.`单位卡天然气消费次数占比` as `单位卡天然气消费次数占比` , `app_auap_yk_org`.`单位卡非油累计消费金额是否过高` as `累计消费金额是否过高475660453` , `app_auap_yk_org`.`单位卡非油累计消费次数是否过多` as `累计消费次数是否过多_1109338698` , `app_auap_yk_org`.`非油累计消费金额` as `非油累计消费金额` , `app_auap_yk_org`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `app_auap_yk_org`.`单位卡累计充值金额` as `单位卡累计充值金额` , `app_auap_yk_org`.`单位卡银行卡充值次数` as `单位卡银行卡充值次数` , `app_auap_yk_org`.`单位卡现金充值次数` as `单位卡现金充值次数` , `app_auap_yk_org`.`单日充值次数过多次数` as `单日充值次数过多次数` , `app_auap_yk_org`.`单位卡余额充足时充钱的次数` as `单位卡余额充足时充钱的次数` , `app_auap_yk_org`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `app_auap_yk_org`.`单位卡柴油累计消费是否过高` as `单位卡柴油累计消费是否过高` , `app_auap_yk_org`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `app_auap_yk_org`.`同一班次消费的次数` as `同一班次消费的次数` , `app_auap_yk_org`.`密码重置次数` as `密码重置次数` , `app_auap_yk_org`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `app_auap_yk_org`.`是否曾频繁转账` as `是否曾频繁转账` , `app_auap_yk_org`.`是否异常加油卡` as `是否异常加油卡` , `app_auap_yk_org`.`单位名称` as `单位名称` , `app_auap_yk_org`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`单位卡消费过加油站站点数量` as `单位卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`单位卡累计消费金额` as `单位卡累计消费金额`,`单位卡消费金额方差` as `单位卡消费金额方差`,`单位卡累计消费次数` as `单位卡累计消费次数`,`单位卡消费金额为小数次数` as `单位卡消费金额为小数次数`,`单位卡汽油累计消费次数` as `单位卡汽油累计消费次数`,`单位卡汽油累计消费金额` as `单位卡汽油累计消费金额`,`单位卡消费过油品类型数量` as `单位卡消费过油品类型数量`,`单位卡汽油消费次数占比` as `单位卡汽油消费次数占比`,`单位卡柴油消费次数占比` as `单位卡柴油消费次数占比`,`单位卡天然气消费次数占比` as `单位卡天然气消费次数占比`,`单位卡非油累计消费金额是否过高` as `单位卡非油累计消费金额是否过高`,`单位卡非油累计消费次数是否过多` as `单位卡非油累计消费次数是否过多`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`单位卡累计充值金额` as `单位卡累计充值金额`,`单位卡银行卡充值次数` as `单位卡银行卡充值次数`,`单位卡现金充值次数` as `单位卡现金充值次数`,`单日充值次数过多次数` as `单日充值次数过多次数`,`单位卡余额充足时充钱的次数` as `单位卡余额充足时充钱的次数`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`单位卡柴油累计消费是否过高` as `单位卡柴油累计消费是否过高`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`单位卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`单位卡累计消费金额`,`单位卡消费金额方差`,`单位卡累计消费次数`,`单位卡消费金额为小数次数`,`单位卡汽油累计消费次数`,`单位卡汽油累计消费金额`,`单位卡消费过油品类型数量`,`单位卡汽油消费次数占比`,`单位卡柴油消费次数占比`,`单位卡天然气消费次数占比`,`单位卡非油累计消费金额是否过高`,`单位卡非油累计消费次数是否过多`,`非油累计消费金额`,`非油与成品油消费金额比例`,`单位卡累计充值金额`,`单位卡银行卡充值次数`,`单位卡现金充值次数`,`单日充值次数过多次数`,`单位卡余额充足时充钱的次数`,`ic卡大额非油消费次数`,`单位卡柴油累计消费是否过高`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `单位卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`,
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`,
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`, 
       `单日消费次数过多次数`, 
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`,
       `睡眠次数`,
       `是否仍在睡眠`,
       `单位卡累计消费金额`, 
       `加油卡消费金额方差` `单位卡消费金额方差`,
       `单位卡累计消费次数`, 
       `加油卡消费金额为小数次数` `单位卡消费金额为小数次数`,
       `单位卡汽油累计消费次数`, 
       `单位卡汽油累计消费金额`, 
       `单位卡消费过油品类型数量`,
       `单位卡汽油消费次数占比`, 
       `单位卡柴油消费次数占比`,
       `单位卡天然气消费次数占比`, 
       `单位卡非油累计消费金额是否过高`, 
       `单位卡非油累计消费次数是否过多`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `单位卡累计充值金额`,
       `银行卡充值次数` `单位卡银行卡充值次数`,
       `现金充值次数` `单位卡现金充值次数`,
       `单日充值次数过多次数`,
       `单位卡余额充足时充钱的次数`,
       `IC卡大额非油消费次数`,
       `单位卡柴油累计消费是否过高`,
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM APP_AUAP_YK_ORG) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `app_auap_yk_org`  
     ) `bi_49891432609270195`
      limit 1200001 
I0825 11:47:47.202757 51878 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:47:47.202977 51878 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:47:47.204596 51878 coordinator.cc:349] starting execution on 6 backends for query_id=71450f5e23c87cbc:63892bf00000000
I0825 11:47:47.207406 44904 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=71450f5e23c87cbc:63892bf00000000
I0825 11:47:47.208452 44904 query-exec-mgr.cc:46] StartQueryFInstances() query_id=71450f5e23c87cbc:63892bf00000000 coord=e4bdhpp025:22000
I0825 11:47:47.209187 44904 query-state.cc:178] Buffer pool limit for 71450f5e23c87cbc:63892bf00000000: 819200000
I0825 11:47:47.209561 44904 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 71450f5e23c87cbc:63892bf00000000
I0825 11:47:47.226954 51878 coordinator.cc:362] started execution on 6 backends for query_id=71450f5e23c87cbc:63892bf00000000
I0825 11:47:47.226668 51962 query-state.cc:300] StartFInstances(): query_id=71450f5e23c87cbc:63892bf00000000 #instances=2
I0825 11:47:47.233261 51962 query-state.cc:313] descriptor table for query=71450f5e23c87cbc:63892bf00000000
tuples:
Tuple(id=0 size=595 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=588 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=588 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=STRING col_path=[10] offset=32 null=(offset=588 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[50] offset=48 null=(offset=588 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=STRING col_path=[44] offset=64 null=(offset=588 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=BIGINT col_path=[48] offset=352 null=(offset=590 mask=40) slot_idx=22 field_idx=-1), Slot(id=6 type=STRING col_path=[11] offset=80 null=(offset=588 mask=20) slot_idx=5 field_idx=-1), Slot(id=7 type=STRING col_path=[12] offset=96 null=(offset=588 mask=40) slot_idx=6 field_idx=-1), Slot(id=8 type=STRING col_path=[13] offset=112 null=(offset=588 mask=80) slot_idx=7 field_idx=-1), Slot(id=9 type=STRING col_path=[43] offset=128 null=(offset=589 mask=1) slot_idx=8 field_idx=-1), Slot(id=10 type=STRING col_path=[47] offset=144 null=(offset=589 mask=2) slot_idx=9 field_idx=-1), Slot(id=11 type=TIMESTAMP col_path=[15] offset=160 null=(offset=589 mask=4) slot_idx=10 field_idx=-1), Slot(id=12 type=TIMESTAMP col_path=[16] offset=176 null=(offset=589 mask=8) slot_idx=11 field_idx=-1), Slot(id=13 type=DECIMAL(16,2) col_path=[2] offset=360 null=(offset=590 mask=80) slot_idx=23 field_idx=-1), Slot(id=14 type=DECIMAL(17,2) col_path=[3] offset=368 null=(offset=591 mask=1) slot_idx=24 field_idx=-1), Slot(id=15 type=DECIMAL(17,2) col_path=[4] offset=376 null=(offset=591 mask=2) slot_idx=25 field_idx=-1), Slot(id=16 type=DECIMAL(17,2) col_path=[5] offset=384 null=(offset=591 mask=4) slot_idx=26 field_idx=-1), Slot(id=17 type=DOUBLE col_path=[6] offset=392 null=(offset=591 mask=8) slot_idx=27 field_idx=-1), Slot(id=18 type=DECIMAL(27,2) col_path=[7] offset=192 null=(offset=589 mask=10) slot_idx=12 field_idx=-1), Slot(id=19 type=BIGINT col_path=[28] offset=400 null=(offset=591 mask=10) slot_idx=28 field_idx=-1), Slot(id=20 type=DOUBLE col_path=[8] offset=408 null=(offset=591 mask=20) slot_idx=29 field_idx=-1), Slot(id=21 type=DECIMAL(27,2) col_path=[9] offset=208 null=(offset=589 mask=20) slot_idx=13 field_idx=-1), Slot(id=22 type=BIGINT col_path=[31] offset=416 null=(offset=591 mask=40) slot_idx=30 field_idx=-1), Slot(id=23 type=BIGINT col_path=[17] offset=424 null=(offset=591 mask=80) slot_idx=31 field_idx=-1), Slot(id=24 type=INT col_path=[18] offset=568 null=(offset=594 mask=2) slot_idx=49 field_idx=-1), Slot(id=25 type=DECIMAL(26,2) col_path=[23] offset=224 null=(offset=589 mask=40) slot_idx=14 field_idx=-1), Slot(id=26 type=DOUBLE col_path=[51] offset=432 null=(offset=592 mask=1) slot_idx=32 field_idx=-1), Slot(id=27 type=BIGINT col_path=[22] offset=440 null=(offset=592 mask=2) slot_idx=33 field_idx=-1), Slot(id=28 type=BIGINT col_path=[49] offset=448 null=(offset=592 mask=4) slot_idx=34 field_idx=-1), Slot(id=29 type=BIGINT col_path=[29] offset=456 null=(offset=592 mask=8) slot_idx=35 field_idx=-1), Slot(id=30 type=DECIMAL(26,2) col_path=[30] offset=240 null=(offset=589 mask=80) slot_idx=15 field_idx=-1), Slot(id=31 type=BIGINT col_path=[52] offset=464 null=(offset=592 mask=10) slot_idx=36 field_idx=-1), Slot(id=32 type=DOUBLE col_path=[25] offset=472 null=(offset=592 mask=20) slot_idx=37 field_idx=-1), Slot(id=33 type=DOUBLE col_path=[26] offset=480 null=(offset=592 mask=40) slot_idx=38 field_idx=-1), Slot(id=34 type=DOUBLE col_path=[27] offset=488 null=(offset=592 mask=80) slot_idx=39 field_idx=-1), Slot(id=35 type=INT col_path=[20] offset=572 null=(offset=594 mask=4) slot_idx=50 field_idx=-1), Slot(id=36 type=INT col_path=[21] offset=576 null=(offset=594 mask=8) slot_idx=51 field_idx=-1), Slot(id=37 type=DECIMAL(26,2) col_path=[32] offset=256 null=(offset=590 mask=1) slot_idx=16 field_idx=-1), Slot(id=38 type=DECIMAL(31,4) col_path=[33] offset=272 null=(offset=590 mask=2) slot_idx=17 field_idx=-1), Slot(id=39 type=DECIMAL(26,2) col_path=[46] offset=288 null=(offset=590 mask=4) slot_idx=18 field_idx=-1), Slot(id=40 type=BIGINT col_path=[41] offset=496 null=(offset=593 mask=1) slot_idx=40 field_idx=-1), Slot(id=41 type=BIGINT col_path=[40] offset=504 null=(offset=593 mask=2) slot_idx=41 field_idx=-1), Slot(id=42 type=BIGINT col_path=[24] offset=512 null=(offset=593 mask=4) slot_idx=42 field_idx=-1), Slot(id=43 type=BIGINT col_path=[38] offset=520 null=(offset=593 mask=8) slot_idx=43 field_idx=-1), Slot(id=44 type=BIGINT col_path=[19] offset=528 null=(offset=593 mask=10) slot_idx=44 field_idx=-1), Slot(id=45 type=INT col_path=[34] offset=580 null=(offset=594 mask=10) slot_idx=52 field_idx=-1), Slot(id=46 type=BIGINT col_path=[35] offset=536 null=(offset=593 mask=20) slot_idx=45 field_idx=-1), Slot(id=47 type=BIGINT col_path=[36] offset=544 null=(offset=593 mask=40) slot_idx=46 field_idx=-1), Slot(id=48 type=BIGINT col_path=[45] offset=552 null=(offset=593 mask=80) slot_idx=47 field_idx=-1), Slot(id=49 type=BIGINT col_path=[37] offset=560 null=(offset=594 mask=1) slot_idx=48 field_idx=-1), Slot(id=50 type=INT col_path=[39] offset=584 null=(offset=594 mask=20) slot_idx=53 field_idx=-1), Slot(id=51 type=STRING col_path=[53] offset=304 null=(offset=590 mask=8) slot_idx=19 field_idx=-1), Slot(id=52 type=STRING col_path=[14] offset=320 null=(offset=590 mask=10) slot_idx=20 field_idx=-1), Slot(id=53 type=STRING col_path=[42] offset=336 null=(offset=590 mask=20) slot_idx=21 field_idx=-1)] tuple_path=[])
I0825 11:47:47.248997 51963 query-state.cc:395] Executing instance. instance_id=71450f5e23c87cbc:63892bf00000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=5 #in-flight=20
I0825 11:47:47.260929 51964 query-state.cc:395] Executing instance. instance_id=71450f5e23c87cbc:63892bf00000001 fragment_idx=1 per_fragment_instance_idx=0 coord_state_idx=5 #in-flight=21
I0825 11:47:47.264693 51964 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '71450f5e23c87cbc:63892bf00000001': 190
I0825 11:47:47.304437 51962 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=71450f5e23c87cbc:63892bf00000000 refcnt=4
I0825 11:47:47.315454 51878 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xbc|\xc8#^\x0fEq\x00\x00\x00\x00\xbf\x928\x06",
      02: secret (string) = "\xbc|\xc8#^\x0fEq\x00\x00\x00\x00\xbf\x928\x06",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:47:48.057823 51878 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=71450f5e23c87cbc:63892bf00000000
I0825 11:47:48.059912 51878 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[56] {
      [0] = TColumnDesc {
        01: columnName (string) = "bi_9833225738464556179",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "bi_16765984159333439402",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "bi_5452346849819763092",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "bi_1127891584836197264",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "bi_2545751338491490025",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "bi_6441433733300507817",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "bi_15038768847591068675",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 6,
      },
      [7] = TColumnDesc {
        01: columnName (string) = "bi_16492520468207201732",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 7,
      },
      [8] = TColumnDesc {
        01: columnName (string) = "bi_9376550538423824506",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 8,
      },
      [9] = TColumnDesc {
        01: columnName (string) = "bi_8100659610193253660",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 9,
      },
      [10] = TColumnDesc {
        01: columnName (string) = "bi_18185366717104475339",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 10,
      },
      [11] = TColumnDesc {
        01: columnName (string) = "bi_16889103124287189574",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 11,
      },
      [12] = TColumnDesc {
        01: columnName (string) = "bi_2106395510405947614",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 12,
      },
      [13] = TColumnDesc {
        01: columnName (string) = "bi_12628198587542179019",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 16,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 13,
      },
      [14] = TColumnDesc {
        01: columnName (string) = "bi_1219558422880111543",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 14,
      },
      [15] = TColumnDesc {
        01: columnName (string) = "bi_17915682550306328330",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 15,
      },
      [16] = TColumnDesc {
        01: columnName (string) = "bi_17675574034401517679",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 16,
      },
      [17] = TColumnDesc {
        01: columnName (string) = "bi_1754130456570268440",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 17,
      },
      [18] = TColumnDesc {
        01: columnName (string) = "bi_15657812531500627407",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 27,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 18,
      },
      [19] = TColumnDesc {
        01: columnName (string) = "bi_17612086331363954540",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 19,
      },
      [20] = TColumnDesc {
        01: columnName (string) = "bi_17855986537495503686",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 20,
      },
      [21] = TColumnDesc {
        01: columnName (string) = "bi_1043443510903046104",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 27,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 21,
      },
      [22] = TColumnDesc {
        01: columnName (string) = "bi_4937558613390431945",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 22,
      },
      [23] = TColumnDesc {
        01: columnName (string) = "bi_7363935285664891950",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 23,
      },
      [24] = TColumnDesc {
        01: columnName (string) = "bi_404517206247691038",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 24,
      },
      [25] = TColumnDesc {
        01: columnName (string) = "bi_13443197606867190735",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 25,
      },
      [26] = TColumnDesc {
        01: columnName (string) = "bi_4769556060708606987",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 26,
      },
      [27] = TColumnDesc {
        01: columnName (string) = "bi_3862957503352231103",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 27,
      },
      [28] = TColumnDesc {
        01: columnName (string) = "bi_606582381051428439",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 28,
      },
      [29] = TColumnDesc {
        01: columnName (string) = "bi_13160325095360504327",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 29,
      },
      [30] = TColumnDesc {
        01: columnName (string) = "bi_8939036342664054168",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 30,
      },
      [31] = TColumnDesc {
        01: columnName (string) = "bi_14603363494981556751",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 31,
      },
      [32] = TColumnDesc {
        01: columnName (string) = "bi_5797665317184532235",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 32,
      },
      [33] = TColumnDesc {
        01: columnName (string) = "bi_4405090079101472574",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 33,
      },
      [34] = TColumnDesc {
        01: columnName (string) = "bi_10381659451279799103",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 34,
      },
      [35] = TColumnDesc {
        01: columnName (string) = "bi_1539169295680080914",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 35,
      },
      [36] = TColumnDesc {
        01: columnName (string) = "bi_14041556194125867668",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 36,
      },
      [37] = TColumnDesc {
        01: columnName (string) = "bi_7960903924678445128",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 37,
      },
      [38] = TColumnDesc {
        01: columnName (string) = "bi_17099085683607676327",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 31,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 4,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 38,
      },
      [39] = TColumnDesc {
        01: columnName (string) = "bi_8123294280144136192",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 39,
      },
      [40] = TColumnDesc {
        01: columnName (string) = "bi_880472205521468105",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 40,
      },
      [41] = TColumnDesc {
        01: columnName (string) = "bi_14776239947036545134",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 41,
      },
      [42] = TColumnDesc {
        01: columnName (string) = "bi_16074686502897337552",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 42,
      },
      [43] = TColumnDesc {
        01: columnName (string) = "bi_7961857330449238144",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 43,
      },
      [44] = TColumnDesc {
        01: columnName (string) = "bi_5943549542113195618",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 44,
      },
      [45] = TColumnDesc {
        01: columnName (string) = "bi_9444148203116406053",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 45,
      },
      [46] = TColumnDesc {
        01: columnName (string) = "bi_12667250280629613856",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 46,
      },
      [47] = TColumnDesc {
        01: columnName (string) = "bi_12375103238287348826",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 47,
      },
      [48] = TColumnDesc {
        01: columnName (string) = "bi_16654652680354768327",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 48,
      },
      [49] = TColumnDesc {
        01: columnName (string) = "bi_17265400455728416625",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 49,
      },
      [50] = TColumnDesc {
        01: columnName (string) = "bi_16101984035252136833",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 50,
      },
      [51] = TColumnDesc {
        01: columnName (string) = "bi_8173657367271516742",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 51,
      },
      [52] = TColumnDesc {
        01: columnName (string) = "bi_13896315529143866076",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 52,
      },
      [53] = TColumnDesc {
        01: columnName (string) = "bi_4248350677332311184",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 53,
      },
      [54] = TColumnDesc {
        01: columnName (string) = "bi_6022750446866842230",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 54,
      },
      [55] = TColumnDesc {
        01: columnName (string) = "bi_14940694802980442301",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 55,
      },
    },
  },
}
I0825 11:47:48.729607 51970 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:48.737926 51970 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:48.768090 51936 query-exec-mgr.cc:95] QueryState: query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:48.769968 51936 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:48.788458 51970 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:48.789853 51970 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:48.803365 51972 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:48.804872 51972 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:48.816813 51936 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:48.817832 51936 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:48.826694 51973 query-exec-mgr.cc:95] QueryState: query_id=e141542bad9ca589:160fc79100000000 refcnt=4
I0825 11:47:48.827689 51973 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e141542bad9ca589:160fc79100000000 refcnt=4
I0825 11:47:48.838656 51973 query-exec-mgr.cc:95] QueryState: query_id=71450f5e23c87cbc:63892bf00000000 refcnt=4
I0825 11:47:48.841992 51973 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=71450f5e23c87cbc:63892bf00000000 refcnt=4
I0825 11:47:49.658717 44439 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=324cb9ea9c54f0de:8de6579600000000
I0825 11:47:49.659536 44439 query-exec-mgr.cc:46] StartQueryFInstances() query_id=324cb9ea9c54f0de:8de6579600000000 coord=e4bdhpp023:22000
I0825 11:47:49.659758 44439 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:47:49.660518 44439 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:47:49.661191 44439 query-state.cc:178] Buffer pool limit for 324cb9ea9c54f0de:8de6579600000000: 6871947673
I0825 11:47:49.661434 44439 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 324cb9ea9c54f0de:8de6579600000000
I0825 11:47:49.669250 51979 query-state.cc:300] StartFInstances(): query_id=324cb9ea9c54f0de:8de6579600000000 #instances=1
I0825 11:47:49.673640 51979 query-state.cc:313] descriptor table for query=324cb9ea9c54f0de:8de6579600000000
tuples:
Tuple(id=0 size=65 slots=[Slot(id=3 type=STRING col_path=[3] offset=0 null=(offset=64 mask=1) slot_idx=0 field_idx=-1), Slot(id=5 type=STRING col_path=[5] offset=16 null=(offset=64 mask=2) slot_idx=1 field_idx=-1), Slot(id=6 type=STRING col_path=[6] offset=32 null=(offset=64 mask=4) slot_idx=2 field_idx=-1), Slot(id=7 type=STRING col_path=[7] offset=48 null=(offset=64 mask=8) slot_idx=3 field_idx=-1)] tuple_path=[])
I0825 11:47:49.675354 51980 query-state.cc:395] Executing instance. instance_id=324cb9ea9c54f0de:8de6579600000001 fragment_idx=1 per_fragment_instance_idx=0 coord_state_idx=1 #in-flight=22
I0825 11:47:49.679702 51980 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '324cb9ea9c54f0de:8de6579600000001': 190
I0825 11:47:49.681360 51979 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=324cb9ea9c54f0de:8de6579600000000 refcnt=2
W0825 11:47:49.825405 43836 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:47:49.828732 43836 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1324210723_BP-1820042964-11.11.206.232-1548063025113
W0825 11:47:49.829573 43857 ShortCircuitCache.java:773] ShortCircuitCache(0x45360bf1): failed to get 1324210723_BP-1820042964-11.11.206.232-1548063025113
I0825 11:47:50.215592 47386 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): d47b204e8371989:69364fe000000000
I0825 11:47:50.549718 51980 query-state.cc:403] Instance completed. instance_id=324cb9ea9c54f0de:8de6579600000001 #in-flight=21 status=OK
I0825 11:47:50.553393 51980 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=324cb9ea9c54f0de:8de6579600000000 refcnt=1
I0825 11:47:51.031755 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:47:51.047713 52022 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:47:51.053103 52022 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xc6Q\xd8\xbfR\xc3D\x94\xaa\x87\xaeO\a\x1fJ\xc3",
      02: secret (string) = "\xf6\x9f1\xa8\x16gA\xad\x971#\xb1\xf1\x18\xf0\xb5",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:47:51.526197 45241 coordinator.cc:689] Backend completed:  host=e4bdhpp014:22000 remaining=1 query_id=fb422d3e84a054e6:cb70527e00000000
I0825 11:47:51.530849 45241 coordinator-backend-state.cc:226] query_id=fb422d3e84a054e6:cb70527e00000000: first in-progress backend: e4bdhpp025:22000
I0825 11:47:51.687355 44439 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=6545c8bf314e81f5:2f71f61500000000
I0825 11:47:51.688349 44439 query-exec-mgr.cc:46] StartQueryFInstances() query_id=6545c8bf314e81f5:2f71f61500000000 coord=e4bdhpp023:22000
I0825 11:47:51.689062 44439 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:47:51.689491 44439 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:47:51.689841 44439 query-state.cc:178] Buffer pool limit for 6545c8bf314e81f5:2f71f61500000000: 819200000
I0825 11:47:51.690093 44439 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 6545c8bf314e81f5:2f71f61500000000
I0825 11:47:51.695571 52023 query-state.cc:300] StartFInstances(): query_id=6545c8bf314e81f5:2f71f61500000000 #instances=1
I0825 11:47:51.707753 52023 query-state.cc:313] descriptor table for query=6545c8bf314e81f5:2f71f61500000000
tuples:
Tuple(id=0 size=595 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=588 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=588 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=STRING col_path=[10] offset=32 null=(offset=588 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[50] offset=48 null=(offset=588 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=STRING col_path=[44] offset=64 null=(offset=588 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=BIGINT col_path=[48] offset=352 null=(offset=590 mask=40) slot_idx=22 field_idx=-1), Slot(id=6 type=STRING col_path=[11] offset=80 null=(offset=588 mask=20) slot_idx=5 field_idx=-1), Slot(id=7 type=STRING col_path=[12] offset=96 null=(offset=588 mask=40) slot_idx=6 field_idx=-1), Slot(id=8 type=STRING col_path=[13] offset=112 null=(offset=588 mask=80) slot_idx=7 field_idx=-1), Slot(id=9 type=STRING col_path=[43] offset=128 null=(offset=589 mask=1) slot_idx=8 field_idx=-1), Slot(id=10 type=STRING col_path=[47] offset=144 null=(offset=589 mask=2) slot_idx=9 field_idx=-1), Slot(id=11 type=TIMESTAMP col_path=[15] offset=160 null=(offset=589 mask=4) slot_idx=10 field_idx=-1), Slot(id=12 type=TIMESTAMP col_path=[16] offset=176 null=(offset=589 mask=8) slot_idx=11 field_idx=-1), Slot(id=13 type=DECIMAL(16,2) col_path=[2] offset=360 null=(offset=590 mask=80) slot_idx=23 field_idx=-1), Slot(id=14 type=DECIMAL(17,2) col_path=[3] offset=368 null=(offset=591 mask=1) slot_idx=24 field_idx=-1), Slot(id=15 type=DECIMAL(17,2) col_path=[4] offset=376 null=(offset=591 mask=2) slot_idx=25 field_idx=-1), Slot(id=16 type=DECIMAL(17,2) col_path=[5] offset=384 null=(offset=591 mask=4) slot_idx=26 field_idx=-1), Slot(id=17 type=DOUBLE col_path=[6] offset=392 null=(offset=591 mask=8) slot_idx=27 field_idx=-1), Slot(id=18 type=DECIMAL(27,2) col_path=[7] offset=192 null=(offset=589 mask=10) slot_idx=12 field_idx=-1), Slot(id=19 type=BIGINT col_path=[28] offset=400 null=(offset=591 mask=10) slot_idx=28 field_idx=-1), Slot(id=20 type=DOUBLE col_path=[8] offset=408 null=(offset=591 mask=20) slot_idx=29 field_idx=-1), Slot(id=21 type=DECIMAL(27,2) col_path=[9] offset=208 null=(offset=589 mask=20) slot_idx=13 field_idx=-1), Slot(id=22 type=BIGINT col_path=[31] offset=416 null=(offset=591 mask=40) slot_idx=30 field_idx=-1), Slot(id=23 type=BIGINT col_path=[17] offset=424 null=(offset=591 mask=80) slot_idx=31 field_idx=-1), Slot(id=24 type=INT col_path=[18] offset=568 null=(offset=594 mask=2) slot_idx=49 field_idx=-1), Slot(id=25 type=DECIMAL(26,2) col_path=[23] offset=224 null=(offset=589 mask=40) slot_idx=14 field_idx=-1), Slot(id=26 type=DOUBLE col_path=[51] offset=432 null=(offset=592 mask=1) slot_idx=32 field_idx=-1), Slot(id=27 type=BIGINT col_path=[22] offset=440 null=(offset=592 mask=2) slot_idx=33 field_idx=-1), Slot(id=28 type=BIGINT col_path=[49] offset=448 null=(offset=592 mask=4) slot_idx=34 field_idx=-1), Slot(id=29 type=BIGINT col_path=[29] offset=456 null=(offset=592 mask=8) slot_idx=35 field_idx=-1), Slot(id=30 type=DECIMAL(26,2) col_path=[30] offset=240 null=(offset=589 mask=80) slot_idx=15 field_idx=-1), Slot(id=31 type=BIGINT col_path=[52] offset=464 null=(offset=592 mask=10) slot_idx=36 field_idx=-1), Slot(id=32 type=DOUBLE col_path=[25] offset=472 null=(offset=592 mask=20) slot_idx=37 field_idx=-1), Slot(id=33 type=DOUBLE col_path=[26] offset=480 null=(offset=592 mask=40) slot_idx=38 field_idx=-1), Slot(id=34 type=DOUBLE col_path=[27] offset=488 null=(offset=592 mask=80) slot_idx=39 field_idx=-1), Slot(id=35 type=INT col_path=[20] offset=572 null=(offset=594 mask=4) slot_idx=50 field_idx=-1), Slot(id=36 type=INT col_path=[21] offset=576 null=(offset=594 mask=8) slot_idx=51 field_idx=-1), Slot(id=37 type=DECIMAL(26,2) col_path=[32] offset=256 null=(offset=590 mask=1) slot_idx=16 field_idx=-1), Slot(id=38 type=DECIMAL(31,4) col_path=[33] offset=272 null=(offset=590 mask=2) slot_idx=17 field_idx=-1), Slot(id=39 type=DECIMAL(26,2) col_path=[46] offset=288 null=(offset=590 mask=4) slot_idx=18 field_idx=-1), Slot(id=40 type=BIGINT col_path=[41] offset=496 null=(offset=593 mask=1) slot_idx=40 field_idx=-1), Slot(id=41 type=BIGINT col_path=[40] offset=504 null=(offset=593 mask=2) slot_idx=41 field_idx=-1), Slot(id=42 type=BIGINT col_path=[24] offset=512 null=(offset=593 mask=4) slot_idx=42 field_idx=-1), Slot(id=43 type=BIGINT col_path=[38] offset=520 null=(offset=593 mask=8) slot_idx=43 field_idx=-1), Slot(id=44 type=BIGINT col_path=[19] offset=528 null=(offset=593 mask=10) slot_idx=44 field_idx=-1), Slot(id=45 type=INT col_path=[34] offset=580 null=(offset=594 mask=10) slot_idx=52 field_idx=-1), Slot(id=46 type=BIGINT col_path=[35] offset=536 null=(offset=593 mask=20) slot_idx=45 field_idx=-1), Slot(id=47 type=BIGINT col_path=[36] offset=544 null=(offset=593 mask=40) slot_idx=46 field_idx=-1), Slot(id=48 type=BIGINT col_path=[45] offset=552 null=(offset=593 mask=80) slot_idx=47 field_idx=-1), Slot(id=49 type=BIGINT col_path=[37] offset=560 null=(offset=594 mask=1) slot_idx=48 field_idx=-1), Slot(id=50 type=INT col_path=[39] offset=584 null=(offset=594 mask=20) slot_idx=53 field_idx=-1), Slot(id=51 type=STRING col_path=[53] offset=304 null=(offset=590 mask=8) slot_idx=19 field_idx=-1), Slot(id=52 type=STRING col_path=[14] offset=320 null=(offset=590 mask=10) slot_idx=20 field_idx=-1), Slot(id=53 type=STRING col_path=[42] offset=336 null=(offset=590 mask=20) slot_idx=21 field_idx=-1)] tuple_path=[])
I0825 11:47:51.719744 52024 query-state.cc:395] Executing instance. instance_id=6545c8bf314e81f5:2f71f61500000001 fragment_idx=1 per_fragment_instance_idx=0 coord_state_idx=5 #in-flight=22
I0825 11:47:51.720517 52024 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '6545c8bf314e81f5:2f71f61500000001': 190
I0825 11:47:51.733623 52022 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xc6Q\xd8\xbfR\xc3D\x94\xaa\x87\xaeO\a\x1fJ\xc3",
      02: secret (string) = "\xf6\x9f1\xa8\x16gA\xad\x971#\xb1\xf1\x18\xf0\xb5",
    },
  },
}
I0825 11:47:51.735090 52022 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:40976 closed, closing 1 associated session(s)
I0825 11:47:51.745998 52023 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=6545c8bf314e81f5:2f71f61500000000 refcnt=2
I0825 11:47:51.927526 52028 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:51.929105 52028 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:51.957760 51975 query-exec-mgr.cc:95] QueryState: query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:51.960366 51975 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=4
I0825 11:47:51.979575 51975 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:51.980177 51975 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:51.989496 52030 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:51.992478 52030 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:52.000715 52030 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:52.001332 52030 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:52.010234 52030 query-exec-mgr.cc:95] QueryState: query_id=e141542bad9ca589:160fc79100000000 refcnt=4
I0825 11:47:52.016372 52030 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e141542bad9ca589:160fc79100000000 refcnt=4
I0825 11:47:52.028605 51975 query-exec-mgr.cc:95] QueryState: query_id=71450f5e23c87cbc:63892bf00000000 refcnt=4
I0825 11:47:52.036818 51975 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=71450f5e23c87cbc:63892bf00000000 refcnt=4
I0825 11:47:52.447830 44439 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=9d4bb08770fea997:144370f100000000
I0825 11:47:52.449290 44439 query-exec-mgr.cc:46] StartQueryFInstances() query_id=9d4bb08770fea997:144370f100000000 coord=e4bdhpp023:22000
I0825 11:47:52.452618 44439 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:47:52.453657 44439 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:47:52.454169 44439 query-state.cc:178] Buffer pool limit for 9d4bb08770fea997:144370f100000000: 6871947673
I0825 11:47:52.458386 44439 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 9d4bb08770fea997:144370f100000000
I0825 11:47:52.473610 52032 query-state.cc:300] StartFInstances(): query_id=9d4bb08770fea997:144370f100000000 #instances=1
I0825 11:47:52.474812 52032 query-state.cc:313] descriptor table for query=9d4bb08770fea997:144370f100000000
tuples:
Tuple(id=6 size=8 slots=[Slot(id=56 type=BIGINT col_path=[] offset=0 null=(offset=0 mask=0) slot_idx=0 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=17 slots=[Slot(id=3 type=STRING col_path=[3] offset=0 null=(offset=16 mask=1) slot_idx=0 field_idx=-1)] tuple_path=[])
I0825 11:47:52.486318 52033 query-state.cc:395] Executing instance. instance_id=9d4bb08770fea997:144370f100000001 fragment_idx=1 per_fragment_instance_idx=0 coord_state_idx=1 #in-flight=23
I0825 11:47:52.486824 52033 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '9d4bb08770fea997:144370f100000001': 190
I0825 11:47:52.510414 52032 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=9d4bb08770fea997:144370f100000000 refcnt=2
W0825 11:47:52.639094 43836 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:47:52.641768 43836 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1324210723_BP-1820042964-11.11.206.232-1548063025113
W0825 11:47:52.644229 43857 ShortCircuitCache.java:773] ShortCircuitCache(0x45360bf1): failed to get 1324210723_BP-1820042964-11.11.206.232-1548063025113
I0825 11:47:52.779036 52033 query-state.cc:403] Instance completed. instance_id=9d4bb08770fea997:144370f100000001 #in-flight=22 status=OK
I0825 11:47:52.781860 52033 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=9d4bb08770fea997:144370f100000000 refcnt=1
W0825 11:47:53.644536 43864 BlockReaderFactory.java:787] I/O error constructing remote block reader.
Java exception follows:
org.apache.hadoop.net.ConnectTimeoutException: 60000 millis timeout while waiting for channel to be ready for connect. ch : java.nio.channels.SocketChannel[connection-pending remote=/11.11.6.151:1019]
	at org.apache.hadoop.net.NetUtils.connect(NetUtils.java:533)
	at org.apache.hadoop.hdfs.DFSClient.newConnectedPeer(DFSClient.java:3590)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextTcpPeer(BlockReaderFactory.java:849)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getRemoteBlockReaderFromTcp(BlockReaderFactory.java:764)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:377)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:47:53.648402 43864 DFSInputStream.java:704] Failed to connect to /11.11.6.151:1019 for block, add to deadNodes and continue. org.apache.hadoop.net.ConnectTimeoutException: 60000 millis timeout while waiting for channel to be ready for connect. ch : java.nio.channels.SocketChannel[connection-pending remote=/11.11.6.151:1019]
Java exception follows:
org.apache.hadoop.net.ConnectTimeoutException: 60000 millis timeout while waiting for channel to be ready for connect. ch : java.nio.channels.SocketChannel[connection-pending remote=/11.11.6.151:1019]
	at org.apache.hadoop.net.NetUtils.connect(NetUtils.java:533)
	at org.apache.hadoop.hdfs.DFSClient.newConnectedPeer(DFSClient.java:3590)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextTcpPeer(BlockReaderFactory.java:849)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getRemoteBlockReaderFromTcp(BlockReaderFactory.java:764)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:377)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
I0825 11:47:53.652230 43864 DFSInputStream.java:686] Successfully connected to /11.11.6.158:1019 for BP-1820042964-11.11.206.232-1548063025113:blk_1297104525_223941343
I0825 11:47:53.776142 50341 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=fb422d3e84a054e6:cb70527e00000000, node=2
I0825 11:47:53.778141 50341 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=fb422d3e84a054e6:cb70527e00000000 node_id=2
I0825 11:47:53.778064 50342 query-state.cc:403] Instance completed. instance_id=fb422d3e84a054e6:cb70527e00000001 #in-flight=21 status=OK
I0825 11:47:53.782824 50342 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=3
I0825 11:47:53.785566 50306 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=fb422d3e84a054e6:cb70527e00000000
I0825 11:47:53.786074 50306 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[1] {
      [0] = TColumnDesc {
        01: columnName (string) = "expr_1",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
    },
  },
}
I0825 11:47:53.789264 50306 coordinator.cc:522] Coordinator waiting for backends to finish, 1 remaining. query_id=fb422d3e84a054e6:cb70527e00000000
I0825 11:47:53.795290 50306 coordinator.cc:527] All backends finished successfully. query_id=fb422d3e84a054e6:cb70527e00000000
I0825 11:47:53.795708 50306 coordinator.cc:783] Release admission control resources for query_id=fb422d3e84a054e6:cb70527e00000000
I0825 11:47:53.795318 50341 query-state.cc:403] Instance completed. instance_id=fb422d3e84a054e6:cb70527e00000000 #in-flight=20 status=OK
I0825 11:47:53.797828 50341 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=2
I0825 11:47:53.798388 50306 impala-hs2-server.cc:683] CloseOperation(): query_id=fb422d3e84a054e6:cb70527e00000000
I0825 11:47:53.799278 50306 impala-server.cc:1015] UnregisterQuery(): query_id=fb422d3e84a054e6:cb70527e00000000
I0825 11:47:53.800010 50306 impala-server.cc:1102] Cancel(): query_id=fb422d3e84a054e6:cb70527e00000000
I0825 11:47:53.800344 50306 coordinator.cc:629] Cancel() query_id=fb422d3e84a054e6:cb70527e00000000
I0825 11:47:53.800633 50306 coordinator.cc:639] CancelBackends() query_id=fb422d3e84a054e6:cb70527e00000000, tried to cancel 0 backends
I0825 11:47:53.868017 50306 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=fb422d3e84a054e6:cb70527e00000000 refcnt=1
I0825 11:47:53.977495 50306 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xc3\xa6\x1aT3\xfdFZ\xb6\xa3\xa8L\xde\x04(\xf8",
      02: secret (string) = "\x17\x1aF\xe0\xf1\x9dG\xed\xbd\xc5\xb4xr\xa0o\xf4",
    },
  },
}
I0825 11:47:53.988035 50306 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:53190 closed, closing 1 associated session(s)
I0825 11:47:55.138293 52068 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:55.164839 52068 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:55.182379 52030 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:55.183532 52030 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:55.206894 52069 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:55.208213 52069 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:55.221675 48585 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): d47b204e8371989:69364fe000000000
I0825 11:47:55.225972 52030 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:55.226771 52030 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:55.235517 52070 query-exec-mgr.cc:95] QueryState: query_id=e141542bad9ca589:160fc79100000000 refcnt=4
I0825 11:47:55.236245 52070 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e141542bad9ca589:160fc79100000000 refcnt=4
I0825 11:47:55.247931 52070 query-exec-mgr.cc:95] QueryState: query_id=71450f5e23c87cbc:63892bf00000000 refcnt=4
I0825 11:47:55.248490 52070 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=71450f5e23c87cbc:63892bf00000000 refcnt=4
I0825 11:47:56.885504 45241 coordinator.cc:689] Backend completed:  host=e4bdhpp014:22000 remaining=4 query_id=e141542bad9ca589:160fc79100000000
I0825 11:47:56.886931 45241 coordinator-backend-state.cc:226] query_id=e141542bad9ca589:160fc79100000000: first in-progress backend: e4bdhpp015:22000
I0825 11:47:57.890990 44439 coordinator.cc:689] Backend completed:  host=e4bdhpp023:22000 remaining=3 query_id=e141542bad9ca589:160fc79100000000
I0825 11:47:57.897812 44439 coordinator-backend-state.cc:226] query_id=e141542bad9ca589:160fc79100000000: first in-progress backend: e4bdhpp015:22000
W0825 11:47:58.184092 43831 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:47:58.189455 43831 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297065000_BP-1820042964-11.11.206.232-1548063025113
I0825 11:47:58.327430 52133 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:58.331140 52133 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:47:58.358232 52139 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:58.369400 52139 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:47:58.383575 52133 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:58.384667 52133 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:47:58.394512 52137 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:58.395917 52137 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:47:58.410718 52137 query-exec-mgr.cc:95] QueryState: query_id=e141542bad9ca589:160fc79100000000 refcnt=4
I0825 11:47:58.414610 52137 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e141542bad9ca589:160fc79100000000 refcnt=4
I0825 11:47:58.428604 51727 webserver.cc:361] Webserver: error reading: Resource temporarily unavailable
I0825 11:47:58.429977 52139 query-exec-mgr.cc:95] QueryState: query_id=71450f5e23c87cbc:63892bf00000000 refcnt=4
I0825 11:47:58.434971 52139 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=71450f5e23c87cbc:63892bf00000000 refcnt=4
I0825 11:48:00.229964 45435 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): d47b204e8371989:69364fe000000000
I0825 11:48:01.552889 52175 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:01.556912 52175 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:01.574131 52176 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:01.575178 52176 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:01.594089 52178 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:01.596408 52178 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:01.605162 52175 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:01.605832 52175 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:01.616869 52176 query-exec-mgr.cc:95] QueryState: query_id=e141542bad9ca589:160fc79100000000 refcnt=4
I0825 11:48:01.617520 52176 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e141542bad9ca589:160fc79100000000 refcnt=4
I0825 11:48:01.626471 52177 query-exec-mgr.cc:95] QueryState: query_id=71450f5e23c87cbc:63892bf00000000 refcnt=4
I0825 11:48:01.628147 52177 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=71450f5e23c87cbc:63892bf00000000 refcnt=4
I0825 11:48:01.851994 44132 thrift-util.cc:123] TAcceptQueueServer: Caught TException: No more data to read.
I0825 11:48:02.162544 51940 coordinator.cc:689] Backend completed:  host=e4bdhpp021:22000 remaining=5 query_id=71450f5e23c87cbc:63892bf00000000
I0825 11:48:02.165508 51940 coordinator-backend-state.cc:226] query_id=71450f5e23c87cbc:63892bf00000000: first in-progress backend: e4bdhpp014:22000
I0825 11:48:04.711473 52230 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:04.720042 52230 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:04.726764 52230 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:04.727281 52230 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:04.733952 52230 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:04.737583 52230 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:04.744112 52178 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:04.744910 52178 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:04.749794 52230 query-exec-mgr.cc:95] QueryState: query_id=e141542bad9ca589:160fc79100000000 refcnt=4
I0825 11:48:04.750239 52230 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e141542bad9ca589:160fc79100000000 refcnt=4
I0825 11:48:04.757741 52230 query-exec-mgr.cc:95] QueryState: query_id=71450f5e23c87cbc:63892bf00000000 refcnt=4
I0825 11:48:04.758263 52230 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=71450f5e23c87cbc:63892bf00000000 refcnt=4
I0825 11:48:04.906845 52026 runtime-state.cc:170] Error from query 6545c8bf314e81f5:2f71f61500000000: Memory limit exceeded: Could not allocate string buffer of 128 bytes for ORC file 'hdfs://cluster1/apps/hive/warehouse/dw04_sjfx.db/app_auap_yk_org/000004_0'.
HDFS_SCAN_NODE (id=0) could not allocate 128.00 B without exceeding limit.
Error occurred on backend e4bdhpp025:22000 by fragment 6545c8bf314e81f5:2f71f61500000001
Memory left in process limit: 285.13 GB
Memory left in query limit: 891.18 KB
Query(6545c8bf314e81f5:2f71f61500000000): Limit=976.56 MB Reservation=0 ReservationLimit=781.25 MB OtherMemory=975.69 MB Total=975.69 MB Peak=975.69 MB
  Fragment 6545c8bf314e81f5:2f71f61500000001: Reservation=0 OtherMemory=975.69 MB Total=975.69 MB Peak=975.69 MB
    HDFS_SCAN_NODE (id=0): Total=967.10 MB Peak=967.10 MB
      Exprs: Total=4.00 KB Peak=4.00 KB
    KrpcDataStreamSender (dst_id=1): Total=216.00 B Peak=216.00 B
    CodeGen: Total=211.00 B Peak=128.00 KB
I0825 11:48:04.915184 52026 hdfs-scan-node.cc:541] Scan node (id=0) ran into a parse error for scan range hdfs://cluster1/apps/hive/warehouse/dw04_sjfx.db/app_auap_yk_org/000004_0(49493320:102400). Processed 0 bytes.
I0825 11:48:05.233760 48585 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): d47b204e8371989:69364fe000000000
I0825 11:48:06.551259 50047 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=f24d8195a19648d2:a704969300000000
I0825 11:48:06.552136 50047 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[7] {
      [0] = TColumnDesc {
        01: columnName (string) = "\xe9\x87\x87\xe8\xb4\xad\xe8\xae\xa2\xe5\x8d\x95\xe7\xb1\xbb\xe5\x9e\x8b",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "\xe9\x87\x87\xe8\xb4\xad\xe8\xae\xa2\xe5\x8d\x95\xe6\x97\xa5\xe6\x9c\x9f",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "\xe5\x95\x86\xe5\x93\x81\xe7\xb1\xbb\xe7\x9b\xae\xe6\x8f\x8f\xe8\xbf\xb0",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "\xe8\xae\xa2\xe5\x8d\x95\xe9\x87\x91\xe9\xa2\x9d_\xe4\xb8\x8d\xe5\x90\xab\xe7\xa8\x8e",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 16,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "\xe6\x98\xaf\xe5\x90\xa6\xe5\xae\x8c\xe6\x88\x90\xe4\xba\xa4\xe8\xb4\xa7",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "\xe8\xaf\xa5\xe8\xa1\x8c\xe6\x98\xaf\xe5\x90\xa6\xe8\xa2\xab\xe5\x88\xa0\xe9\x99\xa4",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "\xe8\xaf\xa5\xe8\xa1\x8c\xe6\x98\xaf\xe5\x90\xa6\xe9\x80\x80\xe8\xb4\xa7",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 6,
      },
    },
  },
}
I0825 11:48:07.838423 52318 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:07.841681 52318 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:07.863266 52320 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:07.865536 52320 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:07.872660 52231 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:07.873263 52231 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:07.880471 52231 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:07.881626 52231 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:07.889068 52318 query-exec-mgr.cc:95] QueryState: query_id=e141542bad9ca589:160fc79100000000 refcnt=4
I0825 11:48:07.889708 52318 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e141542bad9ca589:160fc79100000000 refcnt=4
I0825 11:48:07.912047 52231 query-exec-mgr.cc:95] QueryState: query_id=71450f5e23c87cbc:63892bf00000000 refcnt=4
I0825 11:48:07.912798 52231 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=71450f5e23c87cbc:63892bf00000000 refcnt=4
I0825 11:48:10.176970 51864 query-state.cc:403] Instance completed. instance_id=e141542bad9ca589:160fc79100000001 #in-flight=19 status=OK
I0825 11:48:10.177799 51864 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e141542bad9ca589:160fc79100000000 refcnt=3
I0825 11:48:10.253085 45435 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): d47b204e8371989:69364fe000000000
I0825 11:48:10.971632 52354 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:10.973201 52354 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:10.997099 52321 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:11.005846 52321 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:11.050925 52354 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:11.051476 52354 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:11.058207 52354 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:11.058843 52354 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:11.064997 52357 query-exec-mgr.cc:95] QueryState: query_id=e141542bad9ca589:160fc79100000000 refcnt=3
I0825 11:48:11.066797 52357 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e141542bad9ca589:160fc79100000000 refcnt=3
I0825 11:48:11.080268 52358 query-exec-mgr.cc:95] QueryState: query_id=71450f5e23c87cbc:63892bf00000000 refcnt=4
I0825 11:48:11.084142 52358 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=71450f5e23c87cbc:63892bf00000000 refcnt=4
I0825 11:48:14.149202 52367 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:14.152035 52367 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:14.173589 52355 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:14.174619 52355 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:14.196687 52367 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:14.197708 52367 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:14.215435 52370 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:14.216537 52370 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:14.230283 52371 query-exec-mgr.cc:95] QueryState: query_id=e141542bad9ca589:160fc79100000000 refcnt=3
I0825 11:48:14.231206 52371 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e141542bad9ca589:160fc79100000000 refcnt=3
I0825 11:48:14.242625 52367 query-exec-mgr.cc:95] QueryState: query_id=71450f5e23c87cbc:63892bf00000000 refcnt=4
I0825 11:48:14.243268 52367 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=71450f5e23c87cbc:63892bf00000000 refcnt=4
I0825 11:48:14.644281 51897 query-state.cc:403] Instance completed. instance_id=574a5a92b69c4625:3638e36f00000002 #in-flight=18 status=OK
I0825 11:48:14.645252 51897 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=574a5a92b69c4625:3638e36f00000000 refcnt=1
I0825 11:48:15.161803 48585 coordinator.cc:689] Backend completed:  host=e4bdhpp018:22000 remaining=2 query_id=e141542bad9ca589:160fc79100000000
I0825 11:48:15.162520 48585 coordinator-backend-state.cc:226] query_id=e141542bad9ca589:160fc79100000000: first in-progress backend: e4bdhpp015:22000
I0825 11:48:15.256297 48603 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): d47b204e8371989:69364fe000000000
I0825 11:48:15.421826 45243 coordinator.cc:689] Backend completed:  host=e4bdhpp015:22000 remaining=1 query_id=e141542bad9ca589:160fc79100000000
I0825 11:48:15.422295 45243 coordinator-backend-state.cc:226] query_id=e141542bad9ca589:160fc79100000000: first in-progress backend: e4bdhpp025:22000
I0825 11:48:15.552914 48682 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): d47b204e8371989:69364fe000000000
I0825 11:48:17.327407 52405 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:17.328017 52405 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:17.357769 52407 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:17.360410 52407 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:17.371116 52405 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:17.372110 52405 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:17.392503 52405 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:17.393152 52405 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:17.400777 52407 query-exec-mgr.cc:95] QueryState: query_id=e141542bad9ca589:160fc79100000000 refcnt=3
I0825 11:48:17.401450 52407 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e141542bad9ca589:160fc79100000000 refcnt=3
I0825 11:48:17.409802 52408 query-exec-mgr.cc:95] QueryState: query_id=71450f5e23c87cbc:63892bf00000000 refcnt=4
I0825 11:48:17.410789 52408 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=71450f5e23c87cbc:63892bf00000000 refcnt=4
I0825 11:48:18.226274 51777 coordinator.cc:522] Coordinator waiting for backends to finish, 1 remaining. query_id=e141542bad9ca589:160fc79100000000
I0825 11:48:18.227888 51777 coordinator.cc:527] All backends finished successfully. query_id=e141542bad9ca589:160fc79100000000
I0825 11:48:18.228416 51777 coordinator.cc:783] Release admission control resources for query_id=e141542bad9ca589:160fc79100000000
I0825 11:48:18.229342 51863 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=e141542bad9ca589:160fc79100000000, node=1
I0825 11:48:18.229887 51863 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=e141542bad9ca589:160fc79100000000 node_id=1
I0825 11:48:18.232717 51863 query-state.cc:403] Instance completed. instance_id=e141542bad9ca589:160fc79100000000 #in-flight=17 status=OK
I0825 11:48:18.235505 51863 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e141542bad9ca589:160fc79100000000 refcnt=2
I0825 11:48:18.501212 51777 impala-hs2-server.cc:683] CloseOperation(): query_id=e141542bad9ca589:160fc79100000000
I0825 11:48:18.502032 51777 impala-server.cc:1015] UnregisterQuery(): query_id=e141542bad9ca589:160fc79100000000
I0825 11:48:18.502204 51777 impala-server.cc:1102] Cancel(): query_id=e141542bad9ca589:160fc79100000000
I0825 11:48:18.502390 51777 coordinator.cc:629] Cancel() query_id=e141542bad9ca589:160fc79100000000
I0825 11:48:18.502668 51777 coordinator.cc:639] CancelBackends() query_id=e141542bad9ca589:160fc79100000000, tried to cancel 0 backends
I0825 11:48:18.524783 51777 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e141542bad9ca589:160fc79100000000 refcnt=1
I0825 11:48:19.696363 45241 coordinator.cc:689] Backend completed:  host=e4bdhpp014:22000 remaining=4 query_id=71450f5e23c87cbc:63892bf00000000
I0825 11:48:19.697067 45241 coordinator-backend-state.cc:226] query_id=71450f5e23c87cbc:63892bf00000000: first in-progress backend: e4bdhpp015:22000
I0825 11:48:19.720508 51964 query-state.cc:403] Instance completed. instance_id=71450f5e23c87cbc:63892bf00000001 #in-flight=16 status=OK
I0825 11:48:19.721658 51964 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=71450f5e23c87cbc:63892bf00000000 refcnt=3
I0825 11:48:20.479143 52439 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:20.490356 52439 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:20.507043 52405 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:20.508322 52405 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:20.532641 52439 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:20.533571 52439 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:20.544514 52440 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:20.545989 52440 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:20.561239 52446 query-exec-mgr.cc:95] QueryState: query_id=71450f5e23c87cbc:63892bf00000000 refcnt=3
I0825 11:48:20.562553 52446 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=71450f5e23c87cbc:63892bf00000000 refcnt=3
I0825 11:48:21.271533 44439 coordinator.cc:689] Backend completed:  host=e4bdhpp023:22000 remaining=3 query_id=71450f5e23c87cbc:63892bf00000000
I0825 11:48:21.272179 44439 coordinator-backend-state.cc:226] query_id=71450f5e23c87cbc:63892bf00000000: first in-progress backend: e4bdhpp015:22000
I0825 11:48:23.623667 52470 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:23.625434 52470 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:23.648020 52472 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:23.651048 52472 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:23.667663 52439 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:23.668634 52439 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:23.676983 52439 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:23.677834 52439 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:23.686226 52473 query-exec-mgr.cc:95] QueryState: query_id=71450f5e23c87cbc:63892bf00000000 refcnt=3
I0825 11:48:23.688035 52473 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=71450f5e23c87cbc:63892bf00000000 refcnt=3
I0825 11:48:26.762101 52533 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:26.770048 52533 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:26.787497 52472 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:26.789256 52472 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:26.798653 52472 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:26.799438 52472 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:26.817387 52534 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:26.818172 52534 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:26.842025 52536 query-exec-mgr.cc:95] QueryState: query_id=71450f5e23c87cbc:63892bf00000000 refcnt=3
I0825 11:48:26.842628 52536 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=71450f5e23c87cbc:63892bf00000000 refcnt=3
I0825 11:48:27.905212 48690 coordinator.cc:689] Backend completed:  host=e4bdhpp018:22000 remaining=2 query_id=71450f5e23c87cbc:63892bf00000000
I0825 11:48:27.906230 48690 coordinator-backend-state.cc:226] query_id=71450f5e23c87cbc:63892bf00000000: first in-progress backend: e4bdhpp015:22000
I0825 11:48:28.921078 45243 coordinator.cc:689] Backend completed:  host=e4bdhpp015:22000 remaining=1 query_id=71450f5e23c87cbc:63892bf00000000
I0825 11:48:28.922514 45243 coordinator-backend-state.cc:226] query_id=71450f5e23c87cbc:63892bf00000000: first in-progress backend: e4bdhpp025:22000
I0825 11:48:28.929669 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:48:28.943538 52542 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:48:28.945904 52542 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x7f3\xb6\xb5\xff\x86ED\xa4\xa3\aQ\xf4:\x021",
      02: secret (string) = "\xcf>\xb5Z\x9f\x1dA\x00\x97\x05\x97\xe8e=\xde\xb6",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:48:29.426879 52542 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x7f3\xb6\xb5\xff\x86ED\xa4\xa3\aQ\xf4:\x021",
      02: secret (string) = "\xcf>\xb5Z\x9f\x1dA\x00\x97\x05\x97\xe8e=\xde\xb6",
    },
  },
}
I0825 11:48:29.428241 52542 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:49770 closed, closing 1 associated session(s)
I0825 11:48:29.468751 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:48:29.481345 52544 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:48:29.484890 52544 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xd0\x8b\xbc\xa6AoL\x8a\xb2\xe2H`\xc2\xa7\x86\xf1",
      02: secret (string) = "\xd9a\xd5\x9dx\xb7C\xa7\x8eeW9\xa2\t\x98\xdd",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:48:29.749560 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:48:29.762979 52545 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:48:29.770952 52544 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xd0\x8b\xbc\xa6AoL\x8a\xb2\xe2H`\xc2\xa7\x86\xf1",
      02: secret (string) = "\xd9a\xd5\x9dx\xb7C\xa7\x8eeW9\xa2\t\x98\xdd",
    },
  },
}
I0825 11:48:29.772179 52544 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:49864 closed, closing 1 associated session(s)
I0825 11:48:29.798592 52545 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x98&mWB\x93JO\x89\x13k=\"\xa2\x01\xbd",
      02: secret (string) = "\xd3>\x8d\xfb\x83sK\xd2\x84:C)\xec\x1db\x1f",
    },
  },
  02: statement (string) = "use dw18_la",
  04: runAsync (bool) = true,
}
I0825 11:48:29.800607 52545 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x98&mWB\x93JO\x89\x13k=\"\xa2\x01\xbd",
      02: secret (string) = "\xd3>\x8d\xfb\x83sK\xd2\x84:C)\xec\x1db\x1f",
    },
  },
  02: statement (string) = "use dw18_la",
  04: runAsync (bool) = true,
}
I0825 11:48:29.802567 52545 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:48:29.819312 52545 Frontend.java:935] Analyzing query: use dw18_la
I0825 11:48:29.824607 52545 Frontend.java:947] Analysis finished.
I0825 11:48:29.907052 52473 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:29.907939 52473 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:29.919203 52473 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:29.919821 52473 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:29.938975 52546 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:29.947562 52546 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:29.961773 52547 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:29.965777 52547 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:29.973161 52545 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xc2n\x80E\x1f\x8eJ\x8f\x00\x00\x00\x00\xf2?\xed\xde",
      02: secret (string) = "\xc2n\x80E\x1f\x8eJ\x8f\x00\x00\x00\x00\xf2?\xed\xde",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:48:29.977531 52545 impala-hs2-server.cc:683] CloseOperation(): query_id=8f4a8e1f45806ec2:deed3ff200000000
I0825 11:48:29.977841 52545 impala-server.cc:1015] UnregisterQuery(): query_id=8f4a8e1f45806ec2:deed3ff200000000
I0825 11:48:29.978050 52545 impala-server.cc:1102] Cancel(): query_id=8f4a8e1f45806ec2:deed3ff200000000
I0825 11:48:29.985558 52549 query-exec-mgr.cc:95] QueryState: query_id=71450f5e23c87cbc:63892bf00000000 refcnt=3
I0825 11:48:29.986418 52549 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=71450f5e23c87cbc:63892bf00000000 refcnt=3
I0825 11:48:30.004717 52545 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x98&mWB\x93JO\x89\x13k=\"\xa2\x01\xbd",
      02: secret (string) = "\xd3>\x8d\xfb\x83sK\xd2\x84:C)\xec\x1db\x1f",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:48:30.005949 52545 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x98&mWB\x93JO\x89\x13k=\"\xa2\x01\xbd",
      02: secret (string) = "\xd3>\x8d\xfb\x83sK\xd2\x84:C)\xec\x1db\x1f",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:48:30.008658 52545 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:48:30.019512 52545 Frontend.java:935] Analyzing query: set mem_limit='8g'
I0825 11:48:30.026948 52545 Frontend.java:947] Analysis finished.
I0825 11:48:30.037814 52545 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x02j\xf8\x97\xf5\xd9C5\x00\x00\x00\x00\xa9O\xba\xfd",
      02: secret (string) = "\x02j\xf8\x97\xf5\xd9C5\x00\x00\x00\x00\xa9O\xba\xfd",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:48:30.041870 52545 impala-hs2-server.cc:683] CloseOperation(): query_id=3543d9f597f86a02:fdba4fa900000000
I0825 11:48:30.042171 52545 impala-server.cc:1015] UnregisterQuery(): query_id=3543d9f597f86a02:fdba4fa900000000
I0825 11:48:30.042421 52545 impala-server.cc:1102] Cancel(): query_id=3543d9f597f86a02:fdba4fa900000000
I0825 11:48:30.048146 52545 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x98&mWB\x93JO\x89\x13k=\"\xa2\x01\xbd",
      02: secret (string) = "\xd3>\x8d\xfb\x83sK\xd2\x84:C)\xec\x1db\x1f",
    },
  },
  02: statement (string) = "DESCRIBE `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120`",
  04: runAsync (bool) = true,
}
I0825 11:48:30.048378 52545 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x98&mWB\x93JO\x89\x13k=\"\xa2\x01\xbd",
      02: secret (string) = "\xd3>\x8d\xfb\x83sK\xd2\x84:C)\xec\x1db\x1f",
    },
  },
  02: statement (string) = "DESCRIBE `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120`",
  04: runAsync (bool) = true,
}
I0825 11:48:30.049607 52545 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:48:30.070334 52545 Frontend.java:935] Analyzing query: DESCRIBE `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120`
I0825 11:48:30.071717 52545 Frontend.java:947] Analysis finished.
I0825 11:48:30.218652 52545 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "%m\xde\xd6\xcaSL\x83\x00\x00\x00\x00\x0e\x01h\xf9",
      02: secret (string) = "%m\xde\xd6\xcaSL\x83\x00\x00\x00\x00\x0e\x01h\xf9",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:48:30.223637 52545 impala-hs2-server.cc:683] CloseOperation(): query_id=834c53cad6de6d25:f968010e00000000
I0825 11:48:30.223959 52545 impala-server.cc:1015] UnregisterQuery(): query_id=834c53cad6de6d25:f968010e00000000
I0825 11:48:30.224298 52545 impala-server.cc:1102] Cancel(): query_id=834c53cad6de6d25:f968010e00000000
I0825 11:48:30.228320 52545 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x98&mWB\x93JO\x89\x13k=\"\xa2\x01\xbd",
      02: secret (string) = "\xd3>\x8d\xfb\x83sK\xd2\x84:C)\xec\x1db\x1f",
    },
  },
  02: statement (string) = "SELECT COUNT(1) [...](3427)",
  04: runAsync (bool) = true,
}
I0825 11:48:30.228871 52545 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x98&mWB\x93JO\x89\x13k=\"\xa2\x01\xbd",
      02: secret (string) = "\xd3>\x8d\xfb\x83sK\xd2\x84:C)\xec\x1db\x1f",
    },
  },
  02: statement (string) = "SELECT COUNT(1) [...](3427)",
  04: runAsync (bool) = true,
}
I0825 11:48:30.229624 52545 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:48:30.242148 52545 Frontend.java:935] Analyzing query: SELECT COUNT(1) AS `EXPR_1`  FROM (SELECT `bi_16518359572041906452`.`bi_15518877374181664639` AS `bi_3553687481121517161` , `bi_16518359572041906452`.`bi_10491841080111616035` AS `bi_1801344474855471949` , `bi_16518359572041906452`.`bi_16048134125873699212` AS `bi_11114444472631880056` , `bi_16518359572041906452`.`bi_11047500209402619491` AS `bi_4584329074808174062` , `bi_16518359572041906452`.`bi_8739345836465617530` AS `bi_813660579643793135` , `bi_16518359572041906452`.`bi_6439070652440084537` AS `bi_2671125010966300805`  FROM (SELECT `b_la_v_foreign_counterparty_c120`.`oulabel` AS `bi_15518877374181664639` , `b_la_v_foreign_counterparty_c120`.`oulabel_t` AS `bi_10491841080111616035` , `b_la_v_foreign_counterparty_c120`.`contractid` AS `bi_16048134125873699212` , `b_la_v_foreign_counterparty_c120`.`relativorrelationid` AS `bi_11047500209402619491` , `b_la_v_foreign_counterparty_c120`.`counterpartyname` AS `bi_8739345836465617530` , `b_la_v_foreign_counterparty_c120`.`counterpartyname_key` AS `bi_6439070652440084537`  FROM (SELECT `temp_sql_wrapper_table`.`oulabel` AS `oulabel` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`contractid` AS `contractid` , `temp_sql_wrapper_table`.`relativorrelationid` AS `relativorrelationid` , `temp_sql_wrapper_table`.`counterpartyname` AS `counterpartyname` , `temp_sql_wrapper_table`.`counterpartyname_key` AS `counterpartyname_key`  FROM (SELECT `temp_sub_query_table`.`oulabel`, `temp_sub_query_table`.`oulabel_t`, `temp_sub_query_table`.`contractid`, `temp_sub_query_table`.`relativorrelationid`, `temp_sub_query_table`.`counterpartyname`, `temp_sub_query_table`.`counterpartyname_key` FROM (SELECT `b_la_v_foreign_contractrelativorrelation_c120`.`rowkey`, `b_la_v_foreign_contractrelativorrelation_c120`.`id`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`contractid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativorrelationid`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname_key`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_name`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_relativeid`, `b_la_v_foreign_contractrelativorrelation_c120`.`regionsign`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgname`, `b_la_v_foreign_contractrelativorrelation_c120`.`mdmcode`, `b_la_v_foreign_contractrelativorrelation_c120`.`creator`, `b_la_v_foreign_contractrelativorrelation_c120`.`created`, `b_la_v_foreign_contractrelativorrelation_c120`.`editor`, `b_la_v_foreign_contractrelativorrelation_c120`.`edited`, `b_la_v_foreign_contractrelativorrelation_c120`.`isdeleted`, `b_la_v_foreign_contractrelativorrelation_c120`.`etl_date` FROM `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120` `b_la_v_foreign_contractrelativorrelation_c120` ) `temp_sub_query_table` WHERE (`temp_sub_query_table`.`oulabel_t` LIKE '%辽河油田%') ) `temp_sql_wrapper_table`) `b_la_v_foreign_counterparty_c120`) `bi_16518359572041906452`) `tableWithoutPaging` 
I0825 11:48:30.261538 52545 Frontend.java:947] Analysis finished.
I0825 11:48:30.272351 52545 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:48:30.272706 52545 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:48:30.279768 52545 admission-controller.cc:508] Schedule for id=6242499dd979b2e0:91cc789a00000000 in pool_name=root.default cluster_mem_needed=8.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
I0825 11:48:30.287040 52545 admission-controller.cc:513] Stats: agg_num_running=10, agg_num_queued=0, agg_mem_reserved=400.00 GB,  local_host(local_mem_admitted=160.00 GB, num_admitted_running=4, num_queued=0, backend_mem_reserved=80.00 GB)
I0825 11:48:30.287874 52545 admission-controller.cc:529] Admitted query id=6242499dd979b2e0:91cc789a00000000
I0825 11:48:30.288714 52545 coordinator.cc:93] Exec() query_id=6242499dd979b2e0:91cc789a00000000 stmt=SELECT COUNT(1) AS `EXPR_1`  FROM (SELECT `bi_16518359572041906452`.`bi_15518877374181664639` AS `bi_3553687481121517161` , `bi_16518359572041906452`.`bi_10491841080111616035` AS `bi_1801344474855471949` , `bi_16518359572041906452`.`bi_16048134125873699212` AS `bi_11114444472631880056` , `bi_16518359572041906452`.`bi_11047500209402619491` AS `bi_4584329074808174062` , `bi_16518359572041906452`.`bi_8739345836465617530` AS `bi_813660579643793135` , `bi_16518359572041906452`.`bi_6439070652440084537` AS `bi_2671125010966300805`  FROM (SELECT `b_la_v_foreign_counterparty_c120`.`oulabel` AS `bi_15518877374181664639` , `b_la_v_foreign_counterparty_c120`.`oulabel_t` AS `bi_10491841080111616035` , `b_la_v_foreign_counterparty_c120`.`contractid` AS `bi_16048134125873699212` , `b_la_v_foreign_counterparty_c120`.`relativorrelationid` AS `bi_11047500209402619491` , `b_la_v_foreign_counterparty_c120`.`counterpartyname` AS `bi_8739345836465617530` , `b_la_v_foreign_counterparty_c120`.`counterpartyname_key` AS `bi_6439070652440084537`  FROM (SELECT `temp_sql_wrapper_table`.`oulabel` AS `oulabel` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`contractid` AS `contractid` , `temp_sql_wrapper_table`.`relativorrelationid` AS `relativorrelationid` , `temp_sql_wrapper_table`.`counterpartyname` AS `counterpartyname` , `temp_sql_wrapper_table`.`counterpartyname_key` AS `counterpartyname_key`  FROM (SELECT `temp_sub_query_table`.`oulabel`, `temp_sub_query_table`.`oulabel_t`, `temp_sub_query_table`.`contractid`, `temp_sub_query_table`.`relativorrelationid`, `temp_sub_query_table`.`counterpartyname`, `temp_sub_query_table`.`counterpartyname_key` FROM (SELECT `b_la_v_foreign_contractrelativorrelation_c120`.`rowkey`, `b_la_v_foreign_contractrelativorrelation_c120`.`id`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`contractid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativorrelationid`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname_key`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_name`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_relativeid`, `b_la_v_foreign_contractrelativorrelation_c120`.`regionsign`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgname`, `b_la_v_foreign_contractrelativorrelation_c120`.`mdmcode`, `b_la_v_foreign_contractrelativorrelation_c120`.`creator`, `b_la_v_foreign_contractrelativorrelation_c120`.`created`, `b_la_v_foreign_contractrelativorrelation_c120`.`editor`, `b_la_v_foreign_contractrelativorrelation_c120`.`edited`, `b_la_v_foreign_contractrelativorrelation_c120`.`isdeleted`, `b_la_v_foreign_contractrelativorrelation_c120`.`etl_date` FROM `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120` `b_la_v_foreign_contractrelativorrelation_c120` ) `temp_sub_query_table` WHERE (`temp_sub_query_table`.`oulabel_t` LIKE '%辽河油田%') ) `temp_sql_wrapper_table`) `b_la_v_foreign_counterparty_c120`) `bi_16518359572041906452`) `tableWithoutPaging` 
I0825 11:48:30.289572 52545 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:48:30.290634 52545 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:48:30.293576 52545 coordinator.cc:349] starting execution on 1 backends for query_id=6242499dd979b2e0:91cc789a00000000
I0825 11:48:30.295250 44904 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=6242499dd979b2e0:91cc789a00000000
I0825 11:48:30.295576 44904 query-exec-mgr.cc:46] StartQueryFInstances() query_id=6242499dd979b2e0:91cc789a00000000 coord=e4bdhpp025:22000
I0825 11:48:30.295856 44904 query-state.cc:178] Buffer pool limit for 6242499dd979b2e0:91cc789a00000000: 6871947673
I0825 11:48:30.296258 44904 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 6242499dd979b2e0:91cc789a00000000
I0825 11:48:30.307953 52557 query-state.cc:300] StartFInstances(): query_id=6242499dd979b2e0:91cc789a00000000 #instances=2
I0825 11:48:30.308492 52557 query-state.cc:313] descriptor table for query=6242499dd979b2e0:91cc789a00000000
tuples:
Tuple(id=6 size=8 slots=[Slot(id=68 type=BIGINT col_path=[] offset=0 null=(offset=0 mask=0) slot_idx=0 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=17 slots=[Slot(id=3 type=STRING col_path=[3] offset=0 null=(offset=16 mask=1) slot_idx=0 field_idx=-1)] tuple_path=[])
I0825 11:48:30.308761 52545 coordinator.cc:362] started execution on 1 backends for query_id=6242499dd979b2e0:91cc789a00000000
I0825 11:48:30.326166 52558 query-state.cc:395] Executing instance. instance_id=6242499dd979b2e0:91cc789a00000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=0 #in-flight=17
I0825 11:48:30.326849 52559 query-state.cc:395] Executing instance. instance_id=6242499dd979b2e0:91cc789a00000001 fragment_idx=1 per_fragment_instance_idx=0 coord_state_idx=0 #in-flight=18
I0825 11:48:30.333119 52559 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '6242499dd979b2e0:91cc789a00000001': 190
I0825 11:48:30.348170 52545 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xe0\xb2y\xd9\x9dIBb\x00\x00\x00\x00\x9ax\xcc\x91",
      02: secret (string) = "\xe0\xb2y\xd9\x9dIBb\x00\x00\x00\x00\x9ax\xcc\x91",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:48:30.347484 52557 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=6242499dd979b2e0:91cc789a00000000 refcnt=4
I0825 11:48:30.400893 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:48:30.407994 52563 impala-hs2-server.cc:270] OpenSession(): username=
W0825 11:48:30.436417 43836 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:48:30.439586 43836 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1324210723_BP-1820042964-11.11.206.232-1548063025113
I0825 11:48:30.444924 52563 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x17\xdc\xfaC\xff\xb8B\x99\xb2p3\x06\xfe\x1c\xbe\xa0",
      02: secret (string) = "v\xed\xber\xc7\x19@(\xac\xd0\xe4\xe9\xe5xI\xad",
    },
  },
  02: statement (string) = "use dw20",
  04: runAsync (bool) = true,
}
I0825 11:48:30.445263 52563 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x17\xdc\xfaC\xff\xb8B\x99\xb2p3\x06\xfe\x1c\xbe\xa0",
      02: secret (string) = "v\xed\xber\xc7\x19@(\xac\xd0\xe4\xe9\xe5xI\xad",
    },
  },
  02: statement (string) = "use dw20",
  04: runAsync (bool) = true,
}
I0825 11:48:30.453894 52563 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:48:30.469601 52563 Frontend.java:935] Analyzing query: use dw20
I0825 11:48:30.471238 52563 Frontend.java:947] Analysis finished.
I0825 11:48:30.619697 52563 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "id\x03^\b\xa9A\xb8\x00\x00\x00\x00L\x17\xc3~",
      02: secret (string) = "id\x03^\b\xa9A\xb8\x00\x00\x00\x00L\x17\xc3~",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:48:30.624274 52563 impala-hs2-server.cc:683] CloseOperation(): query_id=b841a9085e036469:7ec3174c00000000
I0825 11:48:30.624738 52563 impala-server.cc:1015] UnregisterQuery(): query_id=b841a9085e036469:7ec3174c00000000
I0825 11:48:30.625962 52563 impala-server.cc:1102] Cancel(): query_id=b841a9085e036469:7ec3174c00000000
I0825 11:48:30.650307 52563 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x17\xdc\xfaC\xff\xb8B\x99\xb2p3\x06\xfe\x1c\xbe\xa0",
      02: secret (string) = "v\xed\xber\xc7\x19@(\xac\xd0\xe4\xe9\xe5xI\xad",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:48:30.650931 52563 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x17\xdc\xfaC\xff\xb8B\x99\xb2p3\x06\xfe\x1c\xbe\xa0",
      02: secret (string) = "v\xed\xber\xc7\x19@(\xac\xd0\xe4\xe9\xe5xI\xad",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:48:30.652856 52563 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:48:30.679873 52563 Frontend.java:935] Analyzing query: set mem_limit='8g'
I0825 11:48:30.680850 52563 Frontend.java:947] Analysis finished.
I0825 11:48:30.694988 52563 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "Y\xb9rS\xa75B\x85\x00\x00\x00\x00~K\x92\r",
      02: secret (string) = "Y\xb9rS\xa75B\x85\x00\x00\x00\x00~K\x92\r",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:48:30.701730 52563 impala-hs2-server.cc:683] CloseOperation(): query_id=854235a75372b959:d924b7e00000000
I0825 11:48:30.702280 52563 impala-server.cc:1015] UnregisterQuery(): query_id=854235a75372b959:d924b7e00000000
I0825 11:48:30.702805 52563 impala-server.cc:1102] Cancel(): query_id=854235a75372b959:d924b7e00000000
I0825 11:48:30.713802 52563 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x17\xdc\xfaC\xff\xb8B\x99\xb2p3\x06\xfe\x1c\xbe\xa0",
      02: secret (string) = "v\xed\xber\xc7\x19@(\xac\xd0\xe4\xe9\xe5xI\xad",
    },
  },
  02: statement (string) = "DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`",
  04: runAsync (bool) = true,
}
I0825 11:48:30.715006 52563 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x17\xdc\xfaC\xff\xb8B\x99\xb2p3\x06\xfe\x1c\xbe\xa0",
      02: secret (string) = "v\xed\xber\xc7\x19@(\xac\xd0\xe4\xe9\xe5xI\xad",
    },
  },
  02: statement (string) = "DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`",
  04: runAsync (bool) = true,
}
I0825 11:48:30.718850 52563 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:48:30.754912 52563 Frontend.java:935] Analyzing query: DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`
I0825 11:48:30.758088 52563 Frontend.java:947] Analysis finished.
I0825 11:48:30.918937 52563 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xb2\x0e\xa9z0\xf2N\x17\x00\x00\x00\x00)\x97\xbe ",
      02: secret (string) = "\xb2\x0e\xa9z0\xf2N\x17\x00\x00\x00\x00)\x97\xbe ",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:48:30.924386 52563 impala-hs2-server.cc:683] CloseOperation(): query_id=174ef2307aa90eb2:20be972900000000
I0825 11:48:30.925429 52563 impala-server.cc:1015] UnregisterQuery(): query_id=174ef2307aa90eb2:20be972900000000
I0825 11:48:30.925853 52563 impala-server.cc:1102] Cancel(): query_id=174ef2307aa90eb2:20be972900000000
I0825 11:48:30.943713 52563 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x17\xdc\xfaC\xff\xb8B\x99\xb2p3\x06\xfe\x1c\xbe\xa0",
      02: secret (string) = "v\xed\xber\xc7\x19@(\xac\xd0\xe4\xe9\xe5xI\xad",
    },
  },
  02: statement (string) = "SELECT `cnpc_vie[...](18389)",
  04: runAsync (bool) = true,
}
I0825 11:48:30.944475 52563 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x17\xdc\xfaC\xff\xb8B\x99\xb2p3\x06\xfe\x1c\xbe\xa0",
      02: secret (string) = "v\xed\xber\xc7\x19@(\xac\xd0\xe4\xe9\xe5xI\xad",
    },
  },
  02: statement (string) = "SELECT `cnpc_vie[...](18389)",
  04: runAsync (bool) = true,
}
I0825 11:48:30.945528 52563 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:48:30.980679 52563 Frontend.java:935] Analyzing query: SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey` AS `bi_16209772373942822610` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator` AS `bi_7173110153481771205` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`created` AS `bi_13491404487973529010` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor` AS `bi_16709338949652660965` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited` AS `bi_7778611651735101528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`id` AS `bi_14306997686607670121` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel` AS `bi_14501539644612575132` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ouname` AS `bi_4746155211965198907` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t` AS `bi_5365439428354097443` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode` AS `bi_17739814079848908328` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`code` AS `bi_2232887874484344045` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode` AS `bi_369040516142209005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetype` AS `bi_1740799749612446421` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename` AS `bi_6559770015537514515` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameprotocol` AS `bi_9889475954848287171` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`name` AS `bi_15189533194949851777` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectsflag` AS `bi_13231105150099224340` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssum` AS `bi_17211859388080424960` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtype` AS `bi_18212787982254017333` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename` AS `bi_7541878364736470844` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`type` AS `bi_7009582161161962629` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename` AS `bi_5792701378059420076` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtype` AS `bi_8397122565340895029` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename` AS `bi_3349638123191173855` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtype` AS `bi_17231762347014911121` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename` AS `bi_15445715632339295217` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatus` AS `bi_12472218524279170739` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname` AS `bi_9114563080665146699` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcontract` AS `bi_221030768505386166` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`foreigninterestinvolved` AS `bi_7769959159290483840` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactions` AS `bi_12538280534418618029` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditch` AS `bi_8874241118748090656` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname` AS `bi_13865388329565152770` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditch` AS `bi_12020212433864986146` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname` AS `bi_12093476229320587287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocation` AS `bi_16675125230853471997` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname` AS `bi_5623662814544693635` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptid` AS `bi_637607595999269167` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname` AS `bi_13683947135958082930` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw` AS `bi_11924957536007553338` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate` AS `bi_614967852965536978` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate` AS `bi_5003822878387321743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate` AS `bi_6413940051808780525` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment` AS `bi_11216260561419591329` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark` AS `bi_15719283721382345906` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertaker` AS `bi_11240345001390265760` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone` AS `bi_2135828979746422287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername` AS `bi_8234557137695700893` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion` AS `bi_5133013160763149225` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedept` AS `bi_17983062736628275974` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname` AS `bi_2661014466711632970` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptcharger` AS `bi_14227120684205422351` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername` AS `bi_13689588754024198241` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate` AS `bi_11029029363983356005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate` AS `bi_6920746512342794880` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate` AS `bi_1980803134228074743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`stage` AS `bi_14864370397929992779` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`status` AS `bi_8546227886955607403` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode` AS `bi_16284813439853843418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`thirdfundditch` AS `bi_8240392853651162418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`supplypaytype` AS `bi_16971073333655604621` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`pricetype` AS `bi_7696488040904043695` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`paymentsupply` AS `bi_11474226421585588418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`istax` AS `bi_15889015133263562243` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectid` AS `bi_15223331806579081282` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`secondobjectid` AS `bi_4248969569151347242` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isunderframework` AS `bi_17576126933562249528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkid` AS `bi_16329074359970793714` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname` AS `bi_4893616353618505239` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreason` AS `bi_3903104604239561382` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail` AS `bi_7824035878402166299` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname` AS `bi_17834913520635724437` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`closedsettlement` AS `bi_4063566549861858298` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`innercontractid` AS `bi_3338788862406713265` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid` AS `bi_1963530120962417240` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname` AS `bi_5127572173810565873` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype` AS `bi_2440282083506678752` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey` AS `bi_5524861625849511082` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isstamped` AS `bi_10802066210367618989` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsid` AS `bi_16755292640996306616` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isonlinesign` AS `bi_7327920818219899768` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid` AS `bi_13360343267273546668` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isdeleted` AS `bi_1467213175407054496` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode` AS `bi_13600932575276159557` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname` AS `bi_10699817008190601050` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short` AS `bi_15916860084426853186` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode` AS `bi_4007708937737028237` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname` AS `bi_7467729968303243062` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short` AS `bi_16247278283018779660` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` AS `bi_14123165879102550317`  FROM (SELECT `temp_sql_wrapper_table`.`rowkey` AS `rowkey` , `temp_sql_wrapper_table`.`creator` AS `creator` , `temp_sql_wrapper_table`.`created` AS `created` , `temp_sql_wrapper_table`.`editor` AS `editor` , `temp_sql_wrapper_table`.`edited` AS `edited` , `temp_sql_wrapper_table`.`id` AS `id` , `temp_sql_wrapper_table`.`oulabel` AS `oulabel` , `temp_sql_wrapper_table`.`ouname` AS `ouname` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`declarecode` AS `declarecode` , `temp_sql_wrapper_table`.`code` AS `code` , `temp_sql_wrapper_table`.`interiorcode` AS `interiorcode` , `temp_sql_wrapper_table`.`choicetype` AS `choicetype` , `temp_sql_wrapper_table`.`choicetypename` AS `choicetypename` , `temp_sql_wrapper_table`.`frameprotocol` AS `frameprotocol` , `temp_sql_wrapper_table`.`name` AS `name` , `temp_sql_wrapper_table`.`objectsflag` AS `objectsflag` , `temp_sql_wrapper_table`.`objectssum` AS `objectssum` , `temp_sql_wrapper_table`.`objectssumtype` AS `objectssumtype` , `temp_sql_wrapper_table`.`objectssumtypename` AS `objectssumtypename` , `temp_sql_wrapper_table`.`type` AS `type` , `temp_sql_wrapper_table`.`typename` AS `typename` , `temp_sql_wrapper_table`.`subtype` AS `subtype` , `temp_sql_wrapper_table`.`subtypename` AS `subtypename` , `temp_sql_wrapper_table`.`endtype` AS `endtype` , `temp_sql_wrapper_table`.`endtypename` AS `endtypename` , `temp_sql_wrapper_table`.`ourstatus` AS `ourstatus` , `temp_sql_wrapper_table`.`ourstatusname` AS `ourstatusname` , `temp_sql_wrapper_table`.`interiorcontract` AS `interiorcontract` , `temp_sql_wrapper_table`.`foreigninterestinvolved` AS `foreigninterestinvolved` , `temp_sql_wrapper_table`.`connectedtransactions` AS `connectedtransactions` , `temp_sql_wrapper_table`.`fundditch` AS `fundditch` , `temp_sql_wrapper_table`.`fundditchname` AS `fundditchname` , `temp_sql_wrapper_table`.`subfundditch` AS `subfundditch` , `temp_sql_wrapper_table`.`subfundditchname` AS `subfundditchname` , `temp_sql_wrapper_table`.`fundallocation` AS `fundallocation` , `temp_sql_wrapper_table`.`fundallocationname` AS `fundallocationname` , `temp_sql_wrapper_table`.`deptid` AS `deptid` , `temp_sql_wrapper_table`.`deptidname` AS `deptidname` , `temp_sql_wrapper_table`.`dependlaw` AS `dependlaw` , `temp_sql_wrapper_table`.`startperformingdate` AS `startperformingdate` , `temp_sql_wrapper_table`.`endperformingdate` AS `endperformingdate` , `temp_sql_wrapper_table`.`performfinishdate` AS `performfinishdate` , `temp_sql_wrapper_table`.`performfinishcomment` AS `performfinishcomment` , `temp_sql_wrapper_table`.`remark` AS `remark` , `temp_sql_wrapper_table`.`undertaker` AS `undertaker` , `temp_sql_wrapper_table`.`undertakerphone` AS `undertakerphone` , `temp_sql_wrapper_table`.`undertakername` AS `undertakername` , `temp_sql_wrapper_table`.`undertakeropinion` AS `undertakeropinion` , `temp_sql_wrapper_table`.`undertakedept` AS `undertakedept` , `temp_sql_wrapper_table`.`undertakedeptname` AS `undertakedeptname` , `temp_sql_wrapper_table`.`deptcharger` AS `deptcharger` , `temp_sql_wrapper_table`.`deptchargername` AS `deptchargername` , `temp_sql_wrapper_table`.`submitteddate` AS `submitteddate` , `temp_sql_wrapper_table`.`createdate` AS `createdate` , `temp_sql_wrapper_table`.`modifydate` AS `modifydate` , `temp_sql_wrapper_table`.`stage` AS `stage` , `temp_sql_wrapper_table`.`status` AS `status` , `temp_sql_wrapper_table`.`localcode` AS `localcode` , `temp_sql_wrapper_table`.`thirdfundditch` AS `thirdfundditch` , `temp_sql_wrapper_table`.`supplypaytype` AS `supplypaytype` , `temp_sql_wrapper_table`.`pricetype` AS `pricetype` , `temp_sql_wrapper_table`.`paymentsupply` AS `paymentsupply` , `temp_sql_wrapper_table`.`istax` AS `istax` , `temp_sql_wrapper_table`.`objectid` AS `objectid` , `temp_sql_wrapper_table`.`secondobjectid` AS `secondobjectid` , `temp_sql_wrapper_table`.`isunderframework` AS `isunderframework` , `temp_sql_wrapper_table`.`frameworkid` AS `frameworkid` , `temp_sql_wrapper_table`.`frameworkname` AS `frameworkname` , `temp_sql_wrapper_table`.`notbiddingreason` AS `notbiddingreason` , `temp_sql_wrapper_table`.`notbiddingreasondetail` AS `notbiddingreasondetail` , `temp_sql_wrapper_table`.`connectedtransactionsname` AS `connectedtransactionsname` , `temp_sql_wrapper_table`.`closedsettlement` AS `closedsettlement` , `temp_sql_wrapper_table`.`innercontractid` AS `innercontractid` , `temp_sql_wrapper_table`.`performanceid` AS `performanceid` , `temp_sql_wrapper_table`.`relatormodel_counterpartyname` AS `relatormodel_counterpartyname` , `temp_sql_wrapper_table`.`relatormodel_orgtype` AS `relatormodel_orgtype` , `temp_sql_wrapper_table`.`relatormodel_rowkey` AS `relatormodel_rowkey` , `temp_sql_wrapper_table`.`isstamped` AS `isstamped` , `temp_sql_wrapper_table`.`connectedtransactionsid` AS `connectedtransactionsid` , `temp_sql_wrapper_table`.`isonlinesign` AS `isonlinesign` , `temp_sql_wrapper_table`.`signexaminationfileid` AS `signexaminationfileid` , `temp_sql_wrapper_table`.`isdeleted` AS `isdeleted` , `temp_sql_wrapper_table`.`groupcode` AS `groupcode` , `temp_sql_wrapper_table`.`groupname` AS `groupname` , `temp_sql_wrapper_table`.`groupname_short` AS `groupname_short` , `temp_sql_wrapper_table`.`regcode` AS `regcode` , `temp_sql_wrapper_table`.`regname` AS `regname` , `temp_sql_wrapper_table`.`regname_short` AS `regname_short` , `temp_sql_wrapper_table`.`etl_date` AS `etl_date`  FROM (SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`created`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`id`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ouname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`code`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameprotocol`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`name`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectsflag`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssum`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`type`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatus`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcontract`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`foreigninterestinvolved`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactions`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocation`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertaker`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedept`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptcharger`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`stage`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`status`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`thirdfundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`supplypaytype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`pricetype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`paymentsupply`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`istax`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`secondobjectid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isunderframework`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreason`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`closedsettlement`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`innercontractid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isstamped`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isonlinesign`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isdeleted`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` FROM `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120` `cnpc_view_ctms_v2_b_contractinfo_c120`  LIMIT 100 ) `temp_sql_wrapper_table`) `cnpc_view_ctms_v2_b_contractinfo_c120` LIMIT 1200001 
I0825 11:48:30.993176 52563 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:48:31.006935 52563 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:48:31.008046 52563 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:48:31.009088 52563 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:48:31.021656 52563 Frontend.java:947] Analysis finished.
I0825 11:48:31.040491 52563 admission-controller.cc:508] Schedule for id=634870ee20b22fa8:db6fe44d00000000 in pool_name=root.default cluster_mem_needed=16.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
I0825 11:48:31.043071 52563 admission-controller.cc:513] Stats: agg_num_running=11, agg_num_queued=0, agg_mem_reserved=408.00 GB,  local_host(local_mem_admitted=168.00 GB, num_admitted_running=5, num_queued=0, backend_mem_reserved=88.00 GB)
I0825 11:48:31.043763 52563 admission-controller.cc:529] Admitted query id=634870ee20b22fa8:db6fe44d00000000
I0825 11:48:31.045439 52563 coordinator.cc:93] Exec() query_id=634870ee20b22fa8:db6fe44d00000000 stmt=SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey` AS `bi_16209772373942822610` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator` AS `bi_7173110153481771205` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`created` AS `bi_13491404487973529010` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor` AS `bi_16709338949652660965` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited` AS `bi_7778611651735101528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`id` AS `bi_14306997686607670121` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel` AS `bi_14501539644612575132` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ouname` AS `bi_4746155211965198907` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t` AS `bi_5365439428354097443` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode` AS `bi_17739814079848908328` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`code` AS `bi_2232887874484344045` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode` AS `bi_369040516142209005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetype` AS `bi_1740799749612446421` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename` AS `bi_6559770015537514515` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameprotocol` AS `bi_9889475954848287171` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`name` AS `bi_15189533194949851777` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectsflag` AS `bi_13231105150099224340` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssum` AS `bi_17211859388080424960` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtype` AS `bi_18212787982254017333` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename` AS `bi_7541878364736470844` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`type` AS `bi_7009582161161962629` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename` AS `bi_5792701378059420076` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtype` AS `bi_8397122565340895029` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename` AS `bi_3349638123191173855` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtype` AS `bi_17231762347014911121` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename` AS `bi_15445715632339295217` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatus` AS `bi_12472218524279170739` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname` AS `bi_9114563080665146699` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcontract` AS `bi_221030768505386166` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`foreigninterestinvolved` AS `bi_7769959159290483840` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactions` AS `bi_12538280534418618029` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditch` AS `bi_8874241118748090656` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname` AS `bi_13865388329565152770` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditch` AS `bi_12020212433864986146` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname` AS `bi_12093476229320587287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocation` AS `bi_16675125230853471997` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname` AS `bi_5623662814544693635` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptid` AS `bi_637607595999269167` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname` AS `bi_13683947135958082930` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw` AS `bi_11924957536007553338` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate` AS `bi_614967852965536978` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate` AS `bi_5003822878387321743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate` AS `bi_6413940051808780525` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment` AS `bi_11216260561419591329` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark` AS `bi_15719283721382345906` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertaker` AS `bi_11240345001390265760` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone` AS `bi_2135828979746422287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername` AS `bi_8234557137695700893` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion` AS `bi_5133013160763149225` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedept` AS `bi_17983062736628275974` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname` AS `bi_2661014466711632970` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptcharger` AS `bi_14227120684205422351` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername` AS `bi_13689588754024198241` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate` AS `bi_11029029363983356005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate` AS `bi_6920746512342794880` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate` AS `bi_1980803134228074743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`stage` AS `bi_14864370397929992779` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`status` AS `bi_8546227886955607403` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode` AS `bi_16284813439853843418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`thirdfundditch` AS `bi_8240392853651162418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`supplypaytype` AS `bi_16971073333655604621` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`pricetype` AS `bi_7696488040904043695` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`paymentsupply` AS `bi_11474226421585588418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`istax` AS `bi_15889015133263562243` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectid` AS `bi_15223331806579081282` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`secondobjectid` AS `bi_4248969569151347242` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isunderframework` AS `bi_17576126933562249528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkid` AS `bi_16329074359970793714` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname` AS `bi_4893616353618505239` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreason` AS `bi_3903104604239561382` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail` AS `bi_7824035878402166299` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname` AS `bi_17834913520635724437` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`closedsettlement` AS `bi_4063566549861858298` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`innercontractid` AS `bi_3338788862406713265` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid` AS `bi_1963530120962417240` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname` AS `bi_5127572173810565873` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype` AS `bi_2440282083506678752` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey` AS `bi_5524861625849511082` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isstamped` AS `bi_10802066210367618989` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsid` AS `bi_16755292640996306616` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isonlinesign` AS `bi_7327920818219899768` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid` AS `bi_13360343267273546668` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`isdeleted` AS `bi_1467213175407054496` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode` AS `bi_13600932575276159557` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname` AS `bi_10699817008190601050` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short` AS `bi_15916860084426853186` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode` AS `bi_4007708937737028237` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname` AS `bi_7467729968303243062` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short` AS `bi_16247278283018779660` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` AS `bi_14123165879102550317`  FROM (SELECT `temp_sql_wrapper_table`.`rowkey` AS `rowkey` , `temp_sql_wrapper_table`.`creator` AS `creator` , `temp_sql_wrapper_table`.`created` AS `created` , `temp_sql_wrapper_table`.`editor` AS `editor` , `temp_sql_wrapper_table`.`edited` AS `edited` , `temp_sql_wrapper_table`.`id` AS `id` , `temp_sql_wrapper_table`.`oulabel` AS `oulabel` , `temp_sql_wrapper_table`.`ouname` AS `ouname` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`declarecode` AS `declarecode` , `temp_sql_wrapper_table`.`code` AS `code` , `temp_sql_wrapper_table`.`interiorcode` AS `interiorcode` , `temp_sql_wrapper_table`.`choicetype` AS `choicetype` , `temp_sql_wrapper_table`.`choicetypename` AS `choicetypename` , `temp_sql_wrapper_table`.`frameprotocol` AS `frameprotocol` , `temp_sql_wrapper_table`.`name` AS `name` , `temp_sql_wrapper_table`.`objectsflag` AS `objectsflag` , `temp_sql_wrapper_table`.`objectssum` AS `objectssum` , `temp_sql_wrapper_table`.`objectssumtype` AS `objectssumtype` , `temp_sql_wrapper_table`.`objectssumtypename` AS `objectssumtypename` , `temp_sql_wrapper_table`.`type` AS `type` , `temp_sql_wrapper_table`.`typename` AS `typename` , `temp_sql_wrapper_table`.`subtype` AS `subtype` , `temp_sql_wrapper_table`.`subtypename` AS `subtypename` , `temp_sql_wrapper_table`.`endtype` AS `endtype` , `temp_sql_wrapper_table`.`endtypename` AS `endtypename` , `temp_sql_wrapper_table`.`ourstatus` AS `ourstatus` , `temp_sql_wrapper_table`.`ourstatusname` AS `ourstatusname` , `temp_sql_wrapper_table`.`interiorcontract` AS `interiorcontract` , `temp_sql_wrapper_table`.`foreigninterestinvolved` AS `foreigninterestinvolved` , `temp_sql_wrapper_table`.`connectedtransactions` AS `connectedtransactions` , `temp_sql_wrapper_table`.`fundditch` AS `fundditch` , `temp_sql_wrapper_table`.`fundditchname` AS `fundditchname` , `temp_sql_wrapper_table`.`subfundditch` AS `subfundditch` , `temp_sql_wrapper_table`.`subfundditchname` AS `subfundditchname` , `temp_sql_wrapper_table`.`fundallocation` AS `fundallocation` , `temp_sql_wrapper_table`.`fundallocationname` AS `fundallocationname` , `temp_sql_wrapper_table`.`deptid` AS `deptid` , `temp_sql_wrapper_table`.`deptidname` AS `deptidname` , `temp_sql_wrapper_table`.`dependlaw` AS `dependlaw` , `temp_sql_wrapper_table`.`startperformingdate` AS `startperformingdate` , `temp_sql_wrapper_table`.`endperformingdate` AS `endperformingdate` , `temp_sql_wrapper_table`.`performfinishdate` AS `performfinishdate` , `temp_sql_wrapper_table`.`performfinishcomment` AS `performfinishcomment` , `temp_sql_wrapper_table`.`remark` AS `remark` , `temp_sql_wrapper_table`.`undertaker` AS `undertaker` , `temp_sql_wrapper_table`.`undertakerphone` AS `undertakerphone` , `temp_sql_wrapper_table`.`undertakername` AS `undertakername` , `temp_sql_wrapper_table`.`undertakeropinion` AS `undertakeropinion` , `temp_sql_wrapper_table`.`undertakedept` AS `undertakedept` , `temp_sql_wrapper_table`.`undertakedeptname` AS `undertakedeptname` , `temp_sql_wrapper_table`.`deptcharger` AS `deptcharger` , `temp_sql_wrapper_table`.`deptchargername` AS `deptchargername` , `temp_sql_wrapper_table`.`submitteddate` AS `submitteddate` , `temp_sql_wrapper_table`.`createdate` AS `createdate` , `temp_sql_wrapper_table`.`modifydate` AS `modifydate` , `temp_sql_wrapper_table`.`stage` AS `stage` , `temp_sql_wrapper_table`.`status` AS `status` , `temp_sql_wrapper_table`.`localcode` AS `localcode` , `temp_sql_wrapper_table`.`thirdfundditch` AS `thirdfundditch` , `temp_sql_wrapper_table`.`supplypaytype` AS `supplypaytype` , `temp_sql_wrapper_table`.`pricetype` AS `pricetype` , `temp_sql_wrapper_table`.`paymentsupply` AS `paymentsupply` , `temp_sql_wrapper_table`.`istax` AS `istax` , `temp_sql_wrapper_table`.`objectid` AS `objectid` , `temp_sql_wrapper_table`.`secondobjectid` AS `secondobjectid` , `temp_sql_wrapper_table`.`isunderframework` AS `isunderframework` , `temp_sql_wrapper_table`.`frameworkid` AS `frameworkid` , `temp_sql_wrapper_table`.`frameworkname` AS `frameworkname` , `temp_sql_wrapper_table`.`notbiddingreason` AS `notbiddingreason` , `temp_sql_wrapper_table`.`notbiddingreasondetail` AS `notbiddingreasondetail` , `temp_sql_wrapper_table`.`connectedtransactionsname` AS `connectedtransactionsname` , `temp_sql_wrapper_table`.`closedsettlement` AS `closedsettlement` , `temp_sql_wrapper_table`.`innercontractid` AS `innercontractid` , `temp_sql_wrapper_table`.`performanceid` AS `performanceid` , `temp_sql_wrapper_table`.`relatormodel_counterpartyname` AS `relatormodel_counterpartyname` , `temp_sql_wrapper_table`.`relatormodel_orgtype` AS `relatormodel_orgtype` , `temp_sql_wrapper_table`.`relatormodel_rowkey` AS `relatormodel_rowkey` , `temp_sql_wrapper_table`.`isstamped` AS `isstamped` , `temp_sql_wrapper_table`.`connectedtransactionsid` AS `connectedtransactionsid` , `temp_sql_wrapper_table`.`isonlinesign` AS `isonlinesign` , `temp_sql_wrapper_table`.`signexaminationfileid` AS `signexaminationfileid` , `temp_sql_wrapper_table`.`isdeleted` AS `isdeleted` , `temp_sql_wrapper_table`.`groupcode` AS `groupcode` , `temp_sql_wrapper_table`.`groupname` AS `groupname` , `temp_sql_wrapper_table`.`groupname_short` AS `groupname_short` , `temp_sql_wrapper_table`.`regcode` AS `regcode` , `temp_sql_wrapper_table`.`regname` AS `regname` , `temp_sql_wrapper_table`.`regname_short` AS `regname_short` , `temp_sql_wrapper_table`.`etl_date` AS `etl_date`  FROM (SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`created`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`id`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ouname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`code`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameprotocol`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`name`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectsflag`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssum`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`type`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatus`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcontract`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`foreigninterestinvolved`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactions`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocation`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertaker`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedept`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptcharger`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`stage`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`status`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`thirdfundditch`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`supplypaytype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`pricetype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`paymentsupply`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`istax`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`secondobjectid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isunderframework`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreason`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`closedsettlement`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`innercontractid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isstamped`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isonlinesign`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`isdeleted`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` FROM `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120` `cnpc_view_ctms_v2_b_contractinfo_c120`  LIMIT 100 ) `temp_sql_wrapper_table`) `cnpc_view_ctms_v2_b_contractinfo_c120` LIMIT 1200001 
I0825 11:48:31.046386 52563 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:48:31.051129 52563 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:48:31.052000 52563 coordinator.cc:349] starting execution on 2 backends for query_id=634870ee20b22fa8:db6fe44d00000000
I0825 11:48:31.060627 44904 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=634870ee20b22fa8:db6fe44d00000000
I0825 11:48:31.061434 44904 query-exec-mgr.cc:46] StartQueryFInstances() query_id=634870ee20b22fa8:db6fe44d00000000 coord=e4bdhpp025:22000
I0825 11:48:31.061972 44904 query-state.cc:178] Buffer pool limit for 634870ee20b22fa8:db6fe44d00000000: 6871947673
I0825 11:48:31.062222 44904 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 634870ee20b22fa8:db6fe44d00000000
I0825 11:48:31.067914 52593 query-state.cc:300] StartFInstances(): query_id=634870ee20b22fa8:db6fe44d00000000 #instances=1
I0825 11:48:31.068603 52563 coordinator.cc:362] started execution on 2 backends for query_id=634870ee20b22fa8:db6fe44d00000000
I0825 11:48:31.071907 52593 query-state.cc:313] descriptor table for query=634870ee20b22fa8:db6fe44d00000000
tuples:
Tuple(id=0 size=1452 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=1440 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=1440 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=TIMESTAMP col_path=[2] offset=32 null=(offset=1440 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[3] offset=48 null=(offset=1440 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=TIMESTAMP col_path=[4] offset=64 null=(offset=1440 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=DECIMAL(38,0) col_path=[5] offset=80 null=(offset=1440 mask=20) slot_idx=5 field_idx=-1), Slot(id=6 type=DECIMAL(38,0) col_path=[6] offset=96 null=(offset=1440 mask=40) slot_idx=6 field_idx=-1), Slot(id=7 type=STRING col_path=[7] offset=112 null=(offset=1440 mask=80) slot_idx=7 field_idx=-1), Slot(id=8 type=STRING col_path=[8] offset=128 null=(offset=1441 mask=1) slot_idx=8 field_idx=-1), Slot(id=9 type=STRING col_path=[9] offset=144 null=(offset=1441 mask=2) slot_idx=9 field_idx=-1), Slot(id=10 type=STRING col_path=[10] offset=160 null=(offset=1441 mask=4) slot_idx=10 field_idx=-1), Slot(id=11 type=STRING col_path=[11] offset=176 null=(offset=1441 mask=8) slot_idx=11 field_idx=-1), Slot(id=12 type=DECIMAL(38,0) col_path=[12] offset=192 null=(offset=1441 mask=10) slot_idx=12 field_idx=-1), Slot(id=13 type=STRING col_path=[13] offset=208 null=(offset=1441 mask=20) slot_idx=13 field_idx=-1), Slot(id=14 type=DECIMAL(38,0) col_path=[14] offset=224 null=(offset=1441 mask=40) slot_idx=14 field_idx=-1), Slot(id=15 type=STRING col_path=[15] offset=240 null=(offset=1441 mask=80) slot_idx=15 field_idx=-1), Slot(id=16 type=DECIMAL(38,0) col_path=[16] offset=256 null=(offset=1442 mask=1) slot_idx=16 field_idx=-1), Slot(id=17 type=DECIMAL(20,2) col_path=[17] offset=272 null=(offset=1442 mask=2) slot_idx=17 field_idx=-1), Slot(id=18 type=DECIMAL(38,0) col_path=[18] offset=288 null=(offset=1442 mask=4) slot_idx=18 field_idx=-1), Slot(id=19 type=STRING col_path=[19] offset=304 null=(offset=1442 mask=8) slot_idx=19 field_idx=-1), Slot(id=20 type=DECIMAL(38,0) col_path=[20] offset=320 null=(offset=1442 mask=10) slot_idx=20 field_idx=-1), Slot(id=21 type=STRING col_path=[21] offset=336 null=(offset=1442 mask=20) slot_idx=21 field_idx=-1), Slot(id=22 type=DECIMAL(38,0) col_path=[22] offset=352 null=(offset=1442 mask=40) slot_idx=22 field_idx=-1), Slot(id=23 type=STRING col_path=[23] offset=368 null=(offset=1442 mask=80) slot_idx=23 field_idx=-1), Slot(id=24 type=DECIMAL(38,0) col_path=[24] offset=384 null=(offset=1443 mask=1) slot_idx=24 field_idx=-1), Slot(id=25 type=STRING col_path=[25] offset=400 null=(offset=1443 mask=2) slot_idx=25 field_idx=-1), Slot(id=26 type=DECIMAL(38,0) col_path=[26] offset=416 null=(offset=1443 mask=4) slot_idx=26 field_idx=-1), Slot(id=27 type=STRING col_path=[27] offset=432 null=(offset=1443 mask=8) slot_idx=27 field_idx=-1), Slot(id=28 type=DECIMAL(38,0) col_path=[28] offset=448 null=(offset=1443 mask=10) slot_idx=28 field_idx=-1), Slot(id=29 type=DECIMAL(38,0) col_path=[29] offset=464 null=(offset=1443 mask=20) slot_idx=29 field_idx=-1), Slot(id=30 type=DECIMAL(38,0) col_path=[30] offset=480 null=(offset=1443 mask=40) slot_idx=30 field_idx=-1), Slot(id=31 type=DECIMAL(38,0) col_path=[31] offset=496 null=(offset=1443 mask=80) slot_idx=31 field_idx=-1), Slot(id=32 type=STRING col_path=[32] offset=512 null=(offset=1444 mask=1) slot_idx=32 field_idx=-1), Slot(id=33 type=DECIMAL(38,0) col_path=[33] offset=528 null=(offset=1444 mask=2) slot_idx=33 field_idx=-1), Slot(id=34 type=STRING col_path=[34] offset=544 null=(offset=1444 mask=4) slot_idx=34 field_idx=-1), Slot(id=35 type=DECIMAL(38,0) col_path=[35] offset=560 null=(offset=1444 mask=8) slot_idx=35 field_idx=-1), Slot(id=36 type=STRING col_path=[36] offset=576 null=(offset=1444 mask=10) slot_idx=36 field_idx=-1), Slot(id=37 type=DECIMAL(38,0) col_path=[37] offset=592 null=(offset=1444 mask=20) slot_idx=37 field_idx=-1), Slot(id=38 type=STRING col_path=[38] offset=608 null=(offset=1444 mask=40) slot_idx=38 field_idx=-1), Slot(id=39 type=STRING col_path=[39] offset=624 null=(offset=1444 mask=80) slot_idx=39 field_idx=-1), Slot(id=40 type=TIMESTAMP col_path=[40] offset=640 null=(offset=1445 mask=1) slot_idx=40 field_idx=-1), Slot(id=41 type=TIMESTAMP col_path=[41] offset=656 null=(offset=1445 mask=2) slot_idx=41 field_idx=-1), Slot(id=42 type=TIMESTAMP col_path=[42] offset=672 null=(offset=1445 mask=4) slot_idx=42 field_idx=-1), Slot(id=43 type=STRING col_path=[43] offset=688 null=(offset=1445 mask=8) slot_idx=43 field_idx=-1), Slot(id=44 type=STRING col_path=[44] offset=704 null=(offset=1445 mask=10) slot_idx=44 field_idx=-1), Slot(id=45 type=DECIMAL(38,0) col_path=[45] offset=720 null=(offset=1445 mask=20) slot_idx=45 field_idx=-1), Slot(id=46 type=STRING col_path=[46] offset=736 null=(offset=1445 mask=40) slot_idx=46 field_idx=-1), Slot(id=47 type=STRING col_path=[47] offset=752 null=(offset=1445 mask=80) slot_idx=47 field_idx=-1), Slot(id=48 type=STRING col_path=[48] offset=768 null=(offset=1446 mask=1) slot_idx=48 field_idx=-1), Slot(id=49 type=DECIMAL(38,0) col_path=[49] offset=784 null=(offset=1446 mask=2) slot_idx=49 field_idx=-1), Slot(id=50 type=STRING col_path=[50] offset=800 null=(offset=1446 mask=4) slot_idx=50 field_idx=-1), Slot(id=51 type=DECIMAL(38,0) col_path=[51] offset=816 null=(offset=1446 mask=8) slot_idx=51 field_idx=-1), Slot(id=52 type=STRING col_path=[52] offset=832 null=(offset=1446 mask=10) slot_idx=52 field_idx=-1), Slot(id=53 type=TIMESTAMP col_path=[53] offset=848 null=(offset=1446 mask=20) slot_idx=53 field_idx=-1), Slot(id=54 type=TIMESTAMP col_path=[54] offset=864 null=(offset=1446 mask=40) slot_idx=54 field_idx=-1), Slot(id=55 type=TIMESTAMP col_path=[55] offset=880 null=(offset=1446 mask=80) slot_idx=55 field_idx=-1), Slot(id=56 type=DECIMAL(38,0) col_path=[56] offset=896 null=(offset=1447 mask=1) slot_idx=56 field_idx=-1), Slot(id=57 type=DECIMAL(38,0) col_path=[57] offset=912 null=(offset=1447 mask=2) slot_idx=57 field_idx=-1), Slot(id=58 type=STRING col_path=[58] offset=928 null=(offset=1447 mask=4) slot_idx=58 field_idx=-1), Slot(id=59 type=DECIMAL(38,0) col_path=[59] offset=944 null=(offset=1447 mask=8) slot_idx=59 field_idx=-1), Slot(id=60 type=DECIMAL(38,0) col_path=[60] offset=960 null=(offset=1447 mask=10) slot_idx=60 field_idx=-1), Slot(id=61 type=DECIMAL(38,0) col_path=[61] offset=976 null=(offset=1447 mask=20) slot_idx=61 field_idx=-1), Slot(id=62 type=DECIMAL(20,2) col_path=[62] offset=992 null=(offset=1447 mask=40) slot_idx=62 field_idx=-1), Slot(id=63 type=DECIMAL(38,0) col_path=[63] offset=1008 null=(offset=1447 mask=80) slot_idx=63 field_idx=-1), Slot(id=64 type=DECIMAL(38,0) col_path=[64] offset=1024 null=(offset=1448 mask=1) slot_idx=64 field_idx=-1), Slot(id=65 type=DECIMAL(38,0) col_path=[65] offset=1040 null=(offset=1448 mask=2) slot_idx=65 field_idx=-1), Slot(id=66 type=DECIMAL(38,0) col_path=[66] offset=1056 null=(offset=1448 mask=4) slot_idx=66 field_idx=-1), Slot(id=67 type=DECIMAL(38,0) col_path=[67] offset=1072 null=(offset=1448 mask=8) slot_idx=67 field_idx=-1), Slot(id=68 type=STRING col_path=[68] offset=1088 null=(offset=1448 mask=10) slot_idx=68 field_idx=-1), Slot(id=69 type=DECIMAL(38,0) col_path=[69] offset=1104 null=(offset=1448 mask=20) slot_idx=69 field_idx=-1), Slot(id=70 type=STRING col_path=[70] offset=1120 null=(offset=1448 mask=40) slot_idx=70 field_idx=-1), Slot(id=71 type=STRING col_path=[71] offset=1136 null=(offset=1448 mask=80) slot_idx=71 field_idx=-1), Slot(id=72 type=DECIMAL(38,0) col_path=[72] offset=1152 null=(offset=1449 mask=1) slot_idx=72 field_idx=-1), Slot(id=73 type=DECIMAL(38,0) col_path=[73] offset=1168 null=(offset=1449 mask=2) slot_idx=73 field_idx=-1), Slot(id=74 type=STRING col_path=[74] offset=1184 null=(offset=1449 mask=4) slot_idx=74 field_idx=-1), Slot(id=75 type=STRING col_path=[75] offset=1200 null=(offset=1449 mask=8) slot_idx=75 field_idx=-1), Slot(id=76 type=STRING col_path=[76] offset=1216 null=(offset=1449 mask=10) slot_idx=76 field_idx=-1), Slot(id=77 type=STRING col_path=[77] offset=1232 null=(offset=1449 mask=20) slot_idx=77 field_idx=-1), Slot(id=78 type=DECIMAL(38,0) col_path=[78] offset=1248 null=(offset=1449 mask=40) slot_idx=78 field_idx=-1), Slot(id=79 type=DECIMAL(38,0) col_path=[79] offset=1264 null=(offset=1449 mask=80) slot_idx=79 field_idx=-1), Slot(id=80 type=DECIMAL(38,0) col_path=[80] offset=1280 null=(offset=1450 mask=1) slot_idx=80 field_idx=-1), Slot(id=81 type=STRING col_path=[81] offset=1296 null=(offset=1450 mask=2) slot_idx=81 field_idx=-1), Slot(id=82 type=DECIMAL(38,0) col_path=[82] offset=1312 null=(offset=1450 mask=4) slot_idx=82 field_idx=-1), Slot(id=83 type=STRING col_path=[83] offset=1328 null=(offset=1450 mask=8) slot_idx=83 field_idx=-1), Slot(id=84 type=STRING col_path=[84] offset=1344 null=(offset=1450 mask=10) slot_idx=84 field_idx=-1), Slot(id=85 type=STRING col_path=[85] offset=1360 null=(offset=1450 mask=20) slot_idx=85 field_idx=-1), Slot(id=86 type=STRING col_path=[86] offset=1376 null=(offset=1450 mask=40) slot_idx=86 field_idx=-1), Slot(id=87 type=STRING col_path=[87] offset=1392 null=(offset=1450 mask=80) slot_idx=87 field_idx=-1), Slot(id=88 type=STRING col_path=[88] offset=1408 null=(offset=1451 mask=1) slot_idx=88 field_idx=-1), Slot(id=89 type=TIMESTAMP col_path=[89] offset=1424 null=(offset=1451 mask=2) slot_idx=89 field_idx=-1)] tuple_path=[])
I0825 11:48:31.096433 52594 query-state.cc:395] Executing instance. instance_id=634870ee20b22fa8:db6fe44d00000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=1 #in-flight=19
I0825 11:48:31.119683 52593 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=634870ee20b22fa8:db6fe44d00000000 refcnt=3
I0825 11:48:31.125589 52563 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xa8/\xb2 \xeepHc\x00\x00\x00\x00M\xe4o\xdb",
      02: secret (string) = "\xa8/\xb2 \xeepHc\x00\x00\x00\x00M\xe4o\xdb",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:48:31.198417 51963 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=71450f5e23c87cbc:63892bf00000000, node=1
I0825 11:48:31.198325 51878 coordinator.cc:527] All backends finished successfully. query_id=71450f5e23c87cbc:63892bf00000000
I0825 11:48:31.199379 51963 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=71450f5e23c87cbc:63892bf00000000 node_id=1
I0825 11:48:31.199458 51878 coordinator.cc:783] Release admission control resources for query_id=71450f5e23c87cbc:63892bf00000000
I0825 11:48:31.200213 51963 query-state.cc:403] Instance completed. instance_id=71450f5e23c87cbc:63892bf00000000 #in-flight=18 status=OK
I0825 11:48:31.201864 51963 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=71450f5e23c87cbc:63892bf00000000 refcnt=2
I0825 11:48:31.216356 51878 impala-hs2-server.cc:683] CloseOperation(): query_id=71450f5e23c87cbc:63892bf00000000
I0825 11:48:31.216789 51878 impala-server.cc:1015] UnregisterQuery(): query_id=71450f5e23c87cbc:63892bf00000000
I0825 11:48:31.217221 51878 impala-server.cc:1102] Cancel(): query_id=71450f5e23c87cbc:63892bf00000000
I0825 11:48:31.217581 51878 coordinator.cc:629] Cancel() query_id=71450f5e23c87cbc:63892bf00000000
I0825 11:48:31.228754 51878 coordinator.cc:639] CancelBackends() query_id=71450f5e23c87cbc:63892bf00000000, tried to cancel 0 backends
I0825 11:48:31.245544 51878 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=71450f5e23c87cbc:63892bf00000000 refcnt=1
I0825 11:48:31.348292 52558 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=6242499dd979b2e0:91cc789a00000000, node=2
I0825 11:48:31.348912 52558 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=6242499dd979b2e0:91cc789a00000000 node_id=2
I0825 11:48:31.351377 52559 query-state.cc:403] Instance completed. instance_id=6242499dd979b2e0:91cc789a00000001 #in-flight=17 status=OK
I0825 11:48:31.351917 52559 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=6242499dd979b2e0:91cc789a00000000 refcnt=3
I0825 11:48:31.357131 52545 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=6242499dd979b2e0:91cc789a00000000
I0825 11:48:31.358126 52545 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[1] {
      [0] = TColumnDesc {
        01: columnName (string) = "expr_1",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
    },
  },
}
I0825 11:48:31.361234 52545 coordinator.cc:522] Coordinator waiting for backends to finish, 1 remaining. query_id=6242499dd979b2e0:91cc789a00000000
I0825 11:48:31.362462 52545 coordinator.cc:527] All backends finished successfully. query_id=6242499dd979b2e0:91cc789a00000000
I0825 11:48:31.362854 52558 query-state.cc:403] Instance completed. instance_id=6242499dd979b2e0:91cc789a00000000 #in-flight=16 status=OK
I0825 11:48:31.362838 52545 coordinator.cc:783] Release admission control resources for query_id=6242499dd979b2e0:91cc789a00000000
I0825 11:48:31.363118 52558 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=6242499dd979b2e0:91cc789a00000000 refcnt=2
I0825 11:48:31.365103 52545 impala-hs2-server.cc:683] CloseOperation(): query_id=6242499dd979b2e0:91cc789a00000000
I0825 11:48:31.365933 52545 impala-server.cc:1015] UnregisterQuery(): query_id=6242499dd979b2e0:91cc789a00000000
I0825 11:48:31.366456 52545 impala-server.cc:1102] Cancel(): query_id=6242499dd979b2e0:91cc789a00000000
I0825 11:48:31.368672 52545 coordinator.cc:629] Cancel() query_id=6242499dd979b2e0:91cc789a00000000
I0825 11:48:31.369516 52545 coordinator.cc:639] CancelBackends() query_id=6242499dd979b2e0:91cc789a00000000, tried to cancel 0 backends
I0825 11:48:31.378011 52545 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=6242499dd979b2e0:91cc789a00000000 refcnt=1
I0825 11:48:31.403887 52545 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x98&mWB\x93JO\x89\x13k=\"\xa2\x01\xbd",
      02: secret (string) = "\xd3>\x8d\xfb\x83sK\xd2\x84:C)\xec\x1db\x1f",
    },
  },
}
I0825 11:48:31.405140 52545 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:50036 closed, closing 1 associated session(s)
I0825 11:48:32.257457 51940 coordinator.cc:689] Backend completed:  host=e4bdhpp021:22000 remaining=1 query_id=634870ee20b22fa8:db6fe44d00000000
I0825 11:48:32.258317 51940 coordinator-backend-state.cc:226] query_id=634870ee20b22fa8:db6fe44d00000000: first in-progress backend: e4bdhpp025:22000
I0825 11:48:32.261534 52563 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=634870ee20b22fa8:db6fe44d00000000
I0825 11:48:32.264467 52563 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[90] {
      [0] = TColumnDesc {
        01: columnName (string) = "bi_16209772373942822610",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "bi_7173110153481771205",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "bi_13491404487973529010",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "bi_16709338949652660965",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "bi_7778611651735101528",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "bi_14306997686607670121",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "bi_14501539644612575132",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 6,
      },
      [7] = TColumnDesc {
        01: columnName (string) = "bi_4746155211965198907",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 7,
      },
      [8] = TColumnDesc {
        01: columnName (string) = "bi_5365439428354097443",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 8,
      },
      [9] = TColumnDesc {
        01: columnName (string) = "bi_17739814079848908328",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 9,
      },
      [10] = TColumnDesc {
        01: columnName (string) = "bi_2232887874484344045",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 10,
      },
      [11] = TColumnDesc {
        01: columnName (string) = "bi_369040516142209005",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 11,
      },
      [12] = TColumnDesc {
        01: columnName (string) = "bi_1740799749612446421",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 12,
      },
      [13] = TColumnDesc {
        01: columnName (string) = "bi_6559770015537514515",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 13,
      },
      [14] = TColumnDesc {
        01: columnName (string) = "bi_9889475954848287171",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 14,
      },
      [15] = TColumnDesc {
        01: columnName (string) = "bi_15189533194949851777",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 15,
      },
      [16] = TColumnDesc {
        01: columnName (string) = "bi_13231105150099224340",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 16,
      },
      [17] = TColumnDesc {
        01: columnName (string) = "bi_17211859388080424960",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 20,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 17,
      },
      [18] = TColumnDesc {
        01: columnName (string) = "bi_18212787982254017333",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 18,
      },
      [19] = TColumnDesc {
        01: columnName (string) = "bi_7541878364736470844",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 19,
      },
      [20] = TColumnDesc {
        01: columnName (string) = "bi_7009582161161962629",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 20,
      },
      [21] = TColumnDesc {
        01: columnName (string) = "bi_5792701378059420076",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 21,
      },
      [22] = TColumnDesc {
        01: columnName (string) = "bi_8397122565340895029",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 22,
      },
      [23] = TColumnDesc {
        01: columnName (string) = "bi_3349638123191173855",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 23,
      },
      [24] = TColumnDesc {
        01: columnName (string) = "bi_17231762347014911121",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 24,
      },
      [25] = TColumnDesc {
        01: columnName (string) = "bi_15445715632339295217",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 25,
      },
      [26] = TColumnDesc {
        01: columnName (string) = "bi_12472218524279170739",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 26,
      },
      [27] = TColumnDesc {
        01: columnName (string) = "bi_9114563080665146699",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 27,
      },
      [28] = TColumnDesc {
        01: columnName (string) = "bi_221030768505386166",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 28,
      },
      [29] = TColumnDesc {
        01: columnName (string) = "bi_7769959159290483840",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 29,
      },
      [30] = TColumnDesc {
        01: columnName (string) = "bi_12538280534418618029",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 30,
      },
      [31] = TColumnDesc {
        01: columnName (string) = "bi_8874241118748090656",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 31,
      },
      [32] = TColumnDesc {
        01: columnName (string) = "bi_13865388329565152770",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 32,
      },
      [33] = TColumnDesc {
        01: columnName (string) = "bi_12020212433864986146",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 33,
      },
      [34] = TColumnDesc {
        01: columnName (string) = "bi_12093476229320587287",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 34,
      },
      [35] = TColumnDesc {
        01: columnName (string) = "bi_16675125230853471997",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 35,
      },
      [36] = TColumnDesc {
        01: columnName (string) = "bi_5623662814544693635",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 36,
      },
      [37] = TColumnDesc {
        01: columnName (string) = "bi_637607595999269167",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 37,
      },
      [38] = TColumnDesc {
        01: columnName (string) = "bi_13683947135958082930",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 38,
      },
      [39] = TColumnDesc {
        01: columnName (string) = "bi_11924957536007553338",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 39,
      },
      [40] = TColumnDesc {
        01: columnName (string) = "bi_614967852965536978",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 40,
      },
      [41] = TColumnDesc {
        01: columnName (string) = "bi_5003822878387321743",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 41,
      },
      [42] = TColumnDesc {
        01: columnName (string) = "bi_6413940051808780525",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 42,
      },
      [43] = TColumnDesc {
        01: columnName (string) = "bi_11216260561419591329",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 43,
      },
      [44] = TColumnDesc {
        01: columnName (string) = "bi_15719283721382345906",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 44,
      },
      [45] = TColumnDesc {
        01: columnName (string) = "bi_11240345001390265760",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 45,
      },
      [46] = TColumnDesc {
        01: columnName (string) = "bi_2135828979746422287",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 46,
      },
      [47] = TColumnDesc {
        01: columnName (string) = "bi_8234557137695700893",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 47,
      },
      [48] = TColumnDesc {
        01: columnName (string) = "bi_5133013160763149225",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 48,
      },
      [49] = TColumnDesc {
        01: columnName (string) = "bi_17983062736628275974",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 38,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 0,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 49,
      },
      [50] = TColumnDesc {
        01: columnName (string) = "bi_2661014466711632970",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 50,
      },
      [51] = TColumnDesc {
        01: columnName (string) = "bi_14227120684205422351",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifie
I0825 11:48:32.280211 52563 coordinator.cc:522] Coordinator waiting for backends to finish, 1 remaining. query_id=634870ee20b22fa8:db6fe44d00000000
I0825 11:48:32.281754 52563 coordinator.cc:527] All backends finished successfully. query_id=634870ee20b22fa8:db6fe44d00000000
I0825 11:48:32.282305 52563 coordinator.cc:783] Release admission control resources for query_id=634870ee20b22fa8:db6fe44d00000000
I0825 11:48:32.285892 52594 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=634870ee20b22fa8:db6fe44d00000000, node=1
I0825 11:48:32.289213 52594 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=634870ee20b22fa8:db6fe44d00000000 node_id=1
I0825 11:48:32.304090 52563 impala-hs2-server.cc:683] CloseOperation(): query_id=634870ee20b22fa8:db6fe44d00000000
I0825 11:48:32.305543 52563 impala-server.cc:1015] UnregisterQuery(): query_id=634870ee20b22fa8:db6fe44d00000000
I0825 11:48:32.306877 52563 impala-server.cc:1102] Cancel(): query_id=634870ee20b22fa8:db6fe44d00000000
I0825 11:48:32.307864 52563 coordinator.cc:629] Cancel() query_id=634870ee20b22fa8:db6fe44d00000000
I0825 11:48:32.309007 52563 coordinator.cc:639] CancelBackends() query_id=634870ee20b22fa8:db6fe44d00000000, tried to cancel 0 backends
I0825 11:48:32.319623 52563 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=634870ee20b22fa8:db6fe44d00000000 refcnt=2
W0825 11:48:32.324282 43831 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:48:32.326804 43831 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297065000_BP-1820042964-11.11.206.232-1548063025113
I0825 11:48:32.326321 52563 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x17\xdc\xfaC\xff\xb8B\x99\xb2p3\x06\xfe\x1c\xbe\xa0",
      02: secret (string) = "v\xed\xber\xc7\x19@(\xac\xd0\xe4\xe9\xe5xI\xad",
    },
  },
}
I0825 11:48:32.332537 52563 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:50168 closed, closing 1 associated session(s)
I0825 11:48:32.338150 52594 query-state.cc:403] Instance completed. instance_id=634870ee20b22fa8:db6fe44d00000000 #in-flight=15 status=OK
I0825 11:48:32.339092 52594 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=634870ee20b22fa8:db6fe44d00000000 refcnt=1
I0825 11:48:33.050735 52659 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:33.054342 52659 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:33.085089 52661 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:33.085947 52661 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:33.095158 52550 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:33.095841 52550 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:33.105453 52550 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:33.106029 52550 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:33.495564 52024 query-state.cc:403] Instance completed. instance_id=6545c8bf314e81f5:2f71f61500000001 #in-flight=14 status=MEM_LIMIT_EXCEEDED: Memory limit exceeded: Could not allocate string buffer of 128 bytes for ORC file 'hdfs://cluster1/apps/hive/warehouse/dw04_sjfx.db/app_auap_yk_org/000004_0'.
HDFS_SCAN_NODE (id=0) could not allocate 128.00 B without exceeding limit.
Error occurred on backend e4bdhpp025:22000 by fragment 6545c8bf314e81f5:2f71f61500000001
Memory left in process limit: 285.13 GB
Memory left in query limit: 891.18 KB
Query(6545c8bf314e81f5:2f71f61500000000): Limit=976.56 MB Reservation=0 ReservationLimit=781.25 MB OtherMemory=975.69 MB Total=975.69 MB Peak=975.69 MB
  Fragment 6545c8bf314e81f5:2f71f61500000001: Reservation=0 OtherMemory=975.69 MB Total=975.69 MB Peak=975.69 MB
    HDFS_SCAN_NODE (id=0): Total=967.10 MB Peak=967.10 MB
      Exprs: Total=4.00 KB Peak=4.00 KB
    KrpcDataStreamSender (dst_id=1): Total=216.00 B Peak=216.00 B
    CodeGen: Total=211.00 B Peak=128.00 KB
I0825 11:48:33.496197 52024 query-state.cc:416] Cancel: query_id=6545c8bf314e81f5:2f71f61500000000
I0825 11:48:33.496706 52024 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=6545c8bf314e81f5:2f71f61500000001
I0825 11:48:33.497010 52024 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=6545c8bf314e81f5:2f71f61500000000 refcnt=1
I0825 11:48:34.147537 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:48:34.165509 52668 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:48:34.167171 52668 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xa6\xa4\x05s\xa9\x1eN}\x8b>\xd5\x15\xe56\x88\xc7",
      02: secret (string) = "\x96\xfc\xa5\x12\x91\xecN1\xa6\xe0\x86Z\xdf\xe4Yt",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:48:34.681329 52668 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xa6\xa4\x05s\xa9\x1eN}\x8b>\xd5\x15\xe56\x88\xc7",
      02: secret (string) = "\x96\xfc\xa5\x12\x91\xecN1\xa6\xe0\x86Z\xdf\xe4Yt",
    },
  },
}
I0825 11:48:34.683182 52668 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:51012 closed, closing 1 associated session(s)
I0825 11:48:35.079300 44439 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=9646a00872bbb37a:29f4c9ff00000000
I0825 11:48:35.083531 44439 query-exec-mgr.cc:46] StartQueryFInstances() query_id=9646a00872bbb37a:29f4c9ff00000000 coord=e4bdhpp023:22000
I0825 11:48:35.084353 44439 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:48:35.084964 44439 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:48:35.085839 44439 query-state.cc:178] Buffer pool limit for 9646a00872bbb37a:29f4c9ff00000000: 6871947673
I0825 11:48:35.086666 44439 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 9646a00872bbb37a:29f4c9ff00000000
I0825 11:48:35.093406 52674 query-state.cc:300] StartFInstances(): query_id=9646a00872bbb37a:29f4c9ff00000000 #instances=1
I0825 11:48:35.094625 52674 query-state.cc:313] descriptor table for query=9646a00872bbb37a:29f4c9ff00000000
tuples:
Tuple(id=0 size=97 slots=[Slot(id=2 type=DECIMAL(38,0) col_path=[2] offset=0 null=(offset=96 mask=1) slot_idx=0 field_idx=-1), Slot(id=3 type=STRING col_path=[3] offset=16 null=(offset=96 mask=2) slot_idx=1 field_idx=-1), Slot(id=4 type=DECIMAL(38,0) col_path=[4] offset=32 null=(offset=96 mask=4) slot_idx=2 field_idx=-1), Slot(id=5 type=STRING col_path=[5] offset=48 null=(offset=96 mask=8) slot_idx=3 field_idx=-1), Slot(id=6 type=STRING col_path=[6] offset=64 null=(offset=96 mask=10) slot_idx=4 field_idx=-1), Slot(id=7 type=STRING col_path=[7] offset=80 null=(offset=96 mask=20) slot_idx=5 field_idx=-1)] tuple_path=[])
I0825 11:48:35.107120 52675 query-state.cc:395] Executing instance. instance_id=9646a00872bbb37a:29f4c9ff00000001 fragment_idx=1 per_fragment_instance_idx=0 coord_state_idx=1 #in-flight=15
I0825 11:48:35.110307 52675 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '9646a00872bbb37a:29f4c9ff00000001': 190
I0825 11:48:35.131270 52674 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=9646a00872bbb37a:29f4c9ff00000000 refcnt=2
W0825 11:48:35.189996 43836 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:48:35.190805 43836 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1324210723_BP-1820042964-11.11.206.232-1548063025113
I0825 11:48:35.969995 52675 query-state.cc:403] Instance completed. instance_id=9646a00872bbb37a:29f4c9ff00000001 #in-flight=14 status=OK
I0825 11:48:35.970700 52675 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=9646a00872bbb37a:29f4c9ff00000000 refcnt=1
I0825 11:48:36.169739 52714 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:36.177445 52714 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:36.197758 52717 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:36.201824 52717 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:36.212476 52661 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:36.213241 52661 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:36.221722 52661 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:36.223661 52661 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:39.280135 52714 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:39.281451 52714 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:39.308176 52739 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:39.308681 52739 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:39.319068 52717 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:39.319593 52717 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:39.329499 52740 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:39.330058 52740 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:39.718228 44439 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=eb4c438e4d57717e:e789011100000000
I0825 11:48:39.719920 44439 query-exec-mgr.cc:46] StartQueryFInstances() query_id=eb4c438e4d57717e:e789011100000000 coord=e4bdhpp023:22000
I0825 11:48:39.720865 44439 query-state.cc:156] Using query memory limit from query options: 1.43 GB
I0825 11:48:39.721518 44439 mem-tracker.cc:191] Using query memory limit: 1.43 GB
I0825 11:48:39.722216 44439 query-state.cc:178] Buffer pool limit for eb4c438e4d57717e:e789011100000000: 1228800000
I0825 11:48:39.722715 44439 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query eb4c438e4d57717e:e789011100000000
I0825 11:48:39.739339 52769 query-state.cc:300] StartFInstances(): query_id=eb4c438e4d57717e:e789011100000000 #instances=1
I0825 11:48:39.742425 52769 query-state.cc:313] descriptor table for query=eb4c438e4d57717e:e789011100000000
tuples:
Tuple(id=0 size=595 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=588 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=588 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=STRING col_path=[10] offset=32 null=(offset=588 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[50] offset=48 null=(offset=588 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=STRING col_path=[44] offset=64 null=(offset=588 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=BIGINT col_path=[48] offset=352 null=(offset=590 mask=40) slot_idx=22 field_idx=-1), Slot(id=6 type=STRING col_path=[11] offset=80 null=(offset=588 mask=20) slot_idx=5 field_idx=-1), Slot(id=7 type=STRING col_path=[12] offset=96 null=(offset=588 mask=40) slot_idx=6 field_idx=-1), Slot(id=8 type=STRING col_path=[13] offset=112 null=(offset=588 mask=80) slot_idx=7 field_idx=-1), Slot(id=9 type=STRING col_path=[43] offset=128 null=(offset=589 mask=1) slot_idx=8 field_idx=-1), Slot(id=10 type=STRING col_path=[47] offset=144 null=(offset=589 mask=2) slot_idx=9 field_idx=-1), Slot(id=11 type=TIMESTAMP col_path=[15] offset=160 null=(offset=589 mask=4) slot_idx=10 field_idx=-1), Slot(id=12 type=TIMESTAMP col_path=[16] offset=176 null=(offset=589 mask=8) slot_idx=11 field_idx=-1), Slot(id=13 type=DECIMAL(16,2) col_path=[2] offset=360 null=(offset=590 mask=80) slot_idx=23 field_idx=-1), Slot(id=14 type=DECIMAL(17,2) col_path=[3] offset=368 null=(offset=591 mask=1) slot_idx=24 field_idx=-1), Slot(id=15 type=DECIMAL(17,2) col_path=[4] offset=376 null=(offset=591 mask=2) slot_idx=25 field_idx=-1), Slot(id=16 type=DECIMAL(17,2) col_path=[5] offset=384 null=(offset=591 mask=4) slot_idx=26 field_idx=-1), Slot(id=17 type=DOUBLE col_path=[6] offset=392 null=(offset=591 mask=8) slot_idx=27 field_idx=-1), Slot(id=18 type=DECIMAL(27,2) col_path=[7] offset=192 null=(offset=589 mask=10) slot_idx=12 field_idx=-1), Slot(id=19 type=BIGINT col_path=[28] offset=400 null=(offset=591 mask=10) slot_idx=28 field_idx=-1), Slot(id=20 type=DOUBLE col_path=[8] offset=408 null=(offset=591 mask=20) slot_idx=29 field_idx=-1), Slot(id=21 type=DECIMAL(27,2) col_path=[9] offset=208 null=(offset=589 mask=20) slot_idx=13 field_idx=-1), Slot(id=22 type=BIGINT col_path=[31] offset=416 null=(offset=591 mask=40) slot_idx=30 field_idx=-1), Slot(id=23 type=BIGINT col_path=[17] offset=424 null=(offset=591 mask=80) slot_idx=31 field_idx=-1), Slot(id=24 type=INT col_path=[18] offset=568 null=(offset=594 mask=2) slot_idx=49 field_idx=-1), Slot(id=25 type=DECIMAL(26,2) col_path=[23] offset=224 null=(offset=589 mask=40) slot_idx=14 field_idx=-1), Slot(id=26 type=DOUBLE col_path=[51] offset=432 null=(offset=592 mask=1) slot_idx=32 field_idx=-1), Slot(id=27 type=BIGINT col_path=[22] offset=440 null=(offset=592 mask=2) slot_idx=33 field_idx=-1), Slot(id=28 type=BIGINT col_path=[49] offset=448 null=(offset=592 mask=4) slot_idx=34 field_idx=-1), Slot(id=29 type=BIGINT col_path=[29] offset=456 null=(offset=592 mask=8) slot_idx=35 field_idx=-1), Slot(id=30 type=DECIMAL(26,2) col_path=[30] offset=240 null=(offset=589 mask=80) slot_idx=15 field_idx=-1), Slot(id=31 type=BIGINT col_path=[52] offset=464 null=(offset=592 mask=10) slot_idx=36 field_idx=-1), Slot(id=32 type=DOUBLE col_path=[25] offset=472 null=(offset=592 mask=20) slot_idx=37 field_idx=-1), Slot(id=33 type=DOUBLE col_path=[26] offset=480 null=(offset=592 mask=40) slot_idx=38 field_idx=-1), Slot(id=34 type=DOUBLE col_path=[27] offset=488 null=(offset=592 mask=80) slot_idx=39 field_idx=-1), Slot(id=35 type=INT col_path=[20] offset=572 null=(offset=594 mask=4) slot_idx=50 field_idx=-1), Slot(id=36 type=INT col_path=[21] offset=576 null=(offset=594 mask=8) slot_idx=51 field_idx=-1), Slot(id=37 type=DECIMAL(26,2) col_path=[32] offset=256 null=(offset=590 mask=1) slot_idx=16 field_idx=-1), Slot(id=38 type=DECIMAL(31,4) col_path=[33] offset=272 null=(offset=590 mask=2) slot_idx=17 field_idx=-1), Slot(id=39 type=DECIMAL(26,2) col_path=[46] offset=288 null=(offset=590 mask=4) slot_idx=18 field_idx=-1), Slot(id=40 type=BIGINT col_path=[41] offset=496 null=(offset=593 mask=1) slot_idx=40 field_idx=-1), Slot(id=41 type=BIGINT col_path=[40] offset=504 null=(offset=593 mask=2) slot_idx=41 field_idx=-1), Slot(id=42 type=BIGINT col_path=[24] offset=512 null=(offset=593 mask=4) slot_idx=42 field_idx=-1), Slot(id=43 type=BIGINT col_path=[38] offset=520 null=(offset=593 mask=8) slot_idx=43 field_idx=-1), Slot(id=44 type=BIGINT col_path=[19] offset=528 null=(offset=593 mask=10) slot_idx=44 field_idx=-1), Slot(id=45 type=INT col_path=[34] offset=580 null=(offset=594 mask=10) slot_idx=52 field_idx=-1), Slot(id=46 type=BIGINT col_path=[35] offset=536 null=(offset=593 mask=20) slot_idx=45 field_idx=-1), Slot(id=47 type=BIGINT col_path=[36] offset=544 null=(offset=593 mask=40) slot_idx=46 field_idx=-1), Slot(id=48 type=BIGINT col_path=[45] offset=552 null=(offset=593 mask=80) slot_idx=47 field_idx=-1), Slot(id=49 type=BIGINT col_path=[37] offset=560 null=(offset=594 mask=1) slot_idx=48 field_idx=-1), Slot(id=50 type=INT col_path=[39] offset=584 null=(offset=594 mask=20) slot_idx=53 field_idx=-1), Slot(id=51 type=STRING col_path=[53] offset=304 null=(offset=590 mask=8) slot_idx=19 field_idx=-1), Slot(id=52 type=STRING col_path=[14] offset=320 null=(offset=590 mask=10) slot_idx=20 field_idx=-1), Slot(id=53 type=STRING col_path=[42] offset=336 null=(offset=590 mask=20) slot_idx=21 field_idx=-1)] tuple_path=[])
I0825 11:48:39.746332 52770 query-state.cc:395] Executing instance. instance_id=eb4c438e4d57717e:e789011100000002 fragment_idx=1 per_fragment_instance_idx=1 coord_state_idx=5 #in-flight=15
I0825 11:48:39.748629 52770 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance 'eb4c438e4d57717e:e789011100000002': 190
I0825 11:48:39.767520 52769 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=eb4c438e4d57717e:e789011100000000 refcnt=2
I0825 11:48:40.005690 44128 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp023@PANEL.COM" on an internal connection
I0825 11:48:42.414723 52797 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:42.415521 52797 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:42.422895 52797 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:42.423631 52797 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:42.440732 52799 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:42.443989 52799 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:42.465338 52797 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:42.465914 52797 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:45.506740 52797 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:45.507948 52797 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:45.515347 52797 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:45.515945 52797 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:45.538045 52866 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:45.540526 52866 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:45.553675 52799 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:45.554380 52799 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:48.187409 50448 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=624e79009a7bc60a:a73c218100000000
I0825 11:48:48.188493 50448 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[13] {
      [0] = TColumnDesc {
        01: columnName (string) = "\xe9\x87\x87\xe8\xb4\xad\xe8\xae\xa2\xe5\x8d\x95\xe7\xb1\xbb\xe5\x9e\x8b",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "\xe9\x87\x87\xe8\xb4\xad\xe8\xae\xa2\xe5\x8d\x95\xe6\x97\xa5\xe6\x9c\x9f",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "\xe4\xbe\x9b\xe5\xba\x94\xe5\x95\x86\xe5\x90\x8d\xe7\xa7\xb0",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "\xe6\x94\xb6\xe8\xb4\xa7\xe7\xab\x99\xe7\x82\xb9",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "\xe7\xab\x99\xe7\x82\xb9\xe5\x90\x8d\xe7\xa7\xb0",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "\xe5\x95\x86\xe5\x93\x81\xe6\x8f\x8f\xe8\xbf\xb0",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "\xe5\x95\x86\xe5\x93\x81\xe7\xb1\xbb\xe7\x9b\xae\xe6\x8f\x8f\xe8\xbf\xb0",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 6,
      },
      [7] = TColumnDesc {
        01: columnName (string) = "\xe8\xae\xa2\xe5\x8d\x95\xe6\x95\xb0\xe9\x87\x8f",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 16,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 3,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 7,
      },
      [8] = TColumnDesc {
        01: columnName (string) = "\xe5\x87\x80\xe4\xbb\xb7",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 16,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 8,
      },
      [9] = TColumnDesc {
        01: columnName (string) = "\xe8\xae\xa2\xe5\x8d\x95\xe9\x87\x91\xe9\xa2\x9d_\xe4\xb8\x8d\xe5\x90\xab\xe7\xa8\x8e",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 16,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 9,
      },
      [10] = TColumnDesc {
        01: columnName (string) = "\xe6\x98\xaf\xe5\x90\xa6\xe5\xae\x8c\xe6\x88\x90\xe4\xba\xa4\xe8\xb4\xa7",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 10,
      },
      [11] = TColumnDesc {
        01: columnName (string) = "\xe8\xaf\xa5\xe8\xa1\x8c\xe6\x98\xaf\xe5\x90\xa6\xe8\xa2\xab\xe5\x88\xa0\xe9\x99\xa4",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 11,
      },
      [12] = TColumnDesc {
        01: columnName (string) = "\xe8\xaf\xa5\xe8\xa1\x8c\xe6\x98\xaf\xe5\x90\xa6\xe9\x80\x80\xe8\xb4\xa7",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 12,
      },
    },
  },
}
I0825 11:48:48.527580 52770 query-state.cc:403] Instance completed. instance_id=eb4c438e4d57717e:e789011100000002 #in-flight=14 status=OK
I0825 11:48:48.528460 52770 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=eb4c438e4d57717e:e789011100000000 refcnt=1
I0825 11:48:48.626716 52871 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:48.633898 52871 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:48.652083 52866 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:48.653460 52866 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:48.671788 52871 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:48.672600 52871 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:48.677987 52871 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:48.678900 52871 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:51.762709 52888 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:51.765913 52888 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:51.787967 52866 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:51.788864 52866 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:51.804646 52891 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:51.808702 52891 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:51.816707 52888 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:51.817523 52888 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:54.901661 52900 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:54.904618 52900 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:54.921552 52901 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:54.923084 52901 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:54.946663 52900 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:54.947459 52900 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:54.964833 52903 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:54.967845 52903 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:56.196095 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:48:56.208855 52907 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:48:56.212574 52907 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "T\x9d@\xc6\bZ@\xe4\xb4%\xcc\bJ\x02Lr",
      02: secret (string) = "\xf5\xa4\xfa\xeey\x10E\x9a\xa4@\xcf\xb6?/\xd40",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:48:56.245695 52907 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "T\x9d@\xc6\bZ@\xe4\xb4%\xcc\bJ\x02Lr",
      02: secret (string) = "\xf5\xa4\xfa\xeey\x10E\x9a\xa4@\xcf\xb6?/\xd40",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:48:56.246223 52907 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "T\x9d@\xc6\bZ@\xe4\xb4%\xcc\bJ\x02Lr",
      02: secret (string) = "\xf5\xa4\xfa\xeey\x10E\x9a\xa4@\xcf\xb6?/\xd40",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:48:56.248479 52907 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:48:56.281623 52907 Frontend.java:935] Analyzing query: use `dw04_sjfx`;
I0825 11:48:56.282773 52907 Frontend.java:947] Analysis finished.
I0825 11:48:56.366050 52907 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "G\x03\x1c\xbd\xcfP@R\x00\x00\x00\x00\xb3\xaf{\xb5",
      02: secret (string) = "G\x03\x1c\xbd\xcfP@R\x00\x00\x00\x00\xb3\xaf{\xb5",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:48:56.373524 52907 impala-hs2-server.cc:683] CloseOperation(): query_id=524050cfbd1c0347:b57bafb300000000
I0825 11:48:56.373927 52907 impala-server.cc:1015] UnregisterQuery(): query_id=524050cfbd1c0347:b57bafb300000000
I0825 11:48:56.374640 52907 impala-server.cc:1102] Cancel(): query_id=524050cfbd1c0347:b57bafb300000000
I0825 11:48:56.400378 52907 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "T\x9d@\xc6\bZ@\xe4\xb4%\xcc\bJ\x02Lr",
      02: secret (string) = "\xf5\xa4\xfa\xeey\x10E\x9a\xa4@\xcf\xb6?/\xd40",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:48:56.401001 52907 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "T\x9d@\xc6\bZ@\xe4\xb4%\xcc\bJ\x02Lr",
      02: secret (string) = "\xf5\xa4\xfa\xeey\x10E\x9a\xa4@\xcf\xb6?/\xd40",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:48:56.402386 52907 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:48:56.424865 52907 Frontend.java:935] Analyzing query: set REQUEST_POOL = 'agilebi';
I0825 11:48:56.438560 52907 Frontend.java:947] Analysis finished.
I0825 11:48:56.456072 52907 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "Kl9\x82V\x03@\xff\x00\x00\x00\x00\xff\xa6\xb9\x0e",
      02: secret (string) = "Kl9\x82V\x03@\xff\x00\x00\x00\x00\xff\xa6\xb9\x0e",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:48:56.464619 52907 impala-hs2-server.cc:683] CloseOperation(): query_id=ff40035682396c4b:eb9a6ff00000000
I0825 11:48:56.465546 52907 impala-server.cc:1015] UnregisterQuery(): query_id=ff40035682396c4b:eb9a6ff00000000
I0825 11:48:56.465916 52907 impala-server.cc:1102] Cancel(): query_id=ff40035682396c4b:eb9a6ff00000000
I0825 11:48:56.493808 52907 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "T\x9d@\xc6\bZ@\xe4\xb4%\xcc\bJ\x02Lr",
      02: secret (string) = "\xf5\xa4\xfa\xeey\x10E\x9a\xa4@\xcf\xb6?/\xd40",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:48:56.494482 52907 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "T\x9d@\xc6\bZ@\xe4\xb4%\xcc\bJ\x02Lr",
      02: secret (string) = "\xf5\xa4\xfa\xeey\x10E\x9a\xa4@\xcf\xb6?/\xd40",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:48:56.496080 52907 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:48:56.510928 52907 Frontend.java:935] Analyzing query: set MEM_LIMIT = 1024000000;
I0825 11:48:56.515859 52907 Frontend.java:947] Analysis finished.
I0825 11:48:56.525990 52907 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x9e5\x91\xba\x10\xfdF\xed\x00\x00\x00\x00#\xed\x7fF",
      02: secret (string) = "\x9e5\x91\xba\x10\xfdF\xed\x00\x00\x00\x00#\xed\x7fF",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:48:56.531913 52907 impala-hs2-server.cc:683] CloseOperation(): query_id=ed46fd10ba91359e:467fed2300000000
I0825 11:48:56.532882 52907 impala-server.cc:1015] UnregisterQuery(): query_id=ed46fd10ba91359e:467fed2300000000
I0825 11:48:56.533797 52907 impala-server.cc:1102] Cancel(): query_id=ed46fd10ba91359e:467fed2300000000
I0825 11:48:56.545114 52907 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "T\x9d@\xc6\bZ@\xe4\xb4%\xcc\bJ\x02Lr",
      02: secret (string) = "\xf5\xa4\xfa\xeey\x10E\x9a\xa4@\xcf\xb6?/\xd40",
    },
  },
  02: statement (string) = "DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_PPL`",
  04: runAsync (bool) = true,
}
I0825 11:48:56.548730 52907 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "T\x9d@\xc6\bZ@\xe4\xb4%\xcc\bJ\x02Lr",
      02: secret (string) = "\xf5\xa4\xfa\xeey\x10E\x9a\xa4@\xcf\xb6?/\xd40",
    },
  },
  02: statement (string) = "DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_PPL`",
  04: runAsync (bool) = true,
}
I0825 11:48:56.550446 52907 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:48:56.576328 52907 Frontend.java:935] Analyzing query: DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_PPL`
I0825 11:48:56.585214 52907 Frontend.java:947] Analysis finished.
I0825 11:48:56.723021 52907 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xed\xbe\xbf\xc0}\x86J\xd7\x00\x00\x00\x00\xaaZ\xf5c",
      02: secret (string) = "\xed\xbe\xbf\xc0}\x86J\xd7\x00\x00\x00\x00\xaaZ\xf5c",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:48:56.728433 52907 impala-hs2-server.cc:683] CloseOperation(): query_id=d74a867dc0bfbeed:63f55aaa00000000
I0825 11:48:56.730057 52907 impala-server.cc:1015] UnregisterQuery(): query_id=d74a867dc0bfbeed:63f55aaa00000000
I0825 11:48:56.730379 52907 impala-server.cc:1102] Cancel(): query_id=d74a867dc0bfbeed:63f55aaa00000000
I0825 11:48:56.859899 52907 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "T\x9d@\xc6\bZ@\xe4\xb4%\xcc\bJ\x02Lr",
      02: secret (string) = "\xf5\xa4\xfa\xeey\x10E\x9a\xa4@\xcf\xb6?/\xd40",
    },
  },
  02: statement (string) = "select   `bi_177[...](15324)",
  04: runAsync (bool) = true,
}
I0825 11:48:56.860747 52907 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "T\x9d@\xc6\bZ@\xe4\xb4%\xcc\bJ\x02Lr",
      02: secret (string) = "\xf5\xa4\xfa\xeey\x10E\x9a\xa4@\xcf\xb6?/\xd40",
    },
  },
  02: statement (string) = "select   `bi_177[...](15324)",
  04: runAsync (bool) = true,
}
I0825 11:48:56.861481 52907 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:48:56.879242 52907 Frontend.java:935] Analyzing query: select   `bi_1777753835894362515`.`帐号` as `bi_4405066279117047118` , `bi_1777753835894362515`.`卡号` as `bi_10248578450533883095` , `bi_1777753835894362515`.`卡类型描述` as `bi_6246159538240244065` , `bi_1777753835894362515`.`是否为副卡` as `bi_13540389403478941567` , `bi_1777753835894362515`.`交易主要站点` as `bi_2740263195203761510` , `bi_1777753835894362515`.`个人卡消费过加油站站点数量` as `bi_3616459640308034135` , `bi_1777753835894362515`.`交易类型描述` as `bi_10331142289063080322` , `bi_1777753835894362515`.`商品类型` as `bi_8759647043076232228` , `bi_1777753835894362515`.`商品类型描述` as `bi_14353747127936749017` , `bi_1777753835894362515`.`发卡单位` as `bi_10646976700040736340` , `bi_1777753835894362515`.`发卡单位与销售单位是否一致` as `bi_3120723227421642544` , `bi_1777753835894362515`.`首次交易日期` as `bi_14455382331679438995` , `bi_1777753835894362515`.`最近交易日期` as `bi_5478771142720032093` , `bi_1777753835894362515`.`平均油量升数` as `bi_617034579827635996` , `bi_1777753835894362515`.`平均消费金额` as `bi_15112077538935800504` , `bi_1777753835894362515`.`平均折扣金额` as `bi_3277906557631314998` , `bi_1777753835894362515`.`平均余额` as `bi_15647197458875151506` , `bi_1777753835894362515`.`日均消费笔数` as `bi_7064249764713199839` , `bi_1777753835894362515`.`日均消费金额` as `bi_10854565843347455823` , `bi_1777753835894362515`.`单日消费次数过多次数` as `bi_2261074975467520775` , `bi_1777753835894362515`.`个人卡夜间消费总次数` as `bi_11404968094779050130` , `bi_1777753835894362515`.`个人卡夜间消费总金额` as `bi_15065943078847283073` , `bi_1777753835894362515`.`日均夜间消费笔数` as `bi_15868460132744503901` , `bi_1777753835894362515`.`日均夜间消费金额` as `bi_15516783331422952374` , `bi_1777753835894362515`.`单日夜间消费次数过多次数` as `bi_16171388146955820514` , `bi_1777753835894362515`.`睡眠次数` as `bi_17048143494310675370` , `bi_1777753835894362515`.`是否仍在睡眠` as `bi_15197978810704604447` , `bi_1777753835894362515`.`个人卡累计消费金额` as `bi_7591110132802393138` , `bi_1777753835894362515`.`个人卡消费金额方差` as `bi_160391765441068244` , `bi_1777753835894362515`.`个人卡累计消费次数` as `bi_4156841468949947680` , `bi_1777753835894362515`.`个人卡消费金额为小数次数` as `bi_9794343777229462837` , `bi_1777753835894362515`.`个人卡消费过油品类型数量` as `bi_10293590438327478000` , `bi_1777753835894362515`.`个人卡消费过汽油品类型数量` as `bi_1177732512630799779` , `bi_1777753835894362515`.`个人卡汽油消费次数占比` as `bi_11456242312036654846` , `bi_1777753835894362515`.`个人卡汽油单笔高额消费次数` as `bi_9834182397780633995` , `bi_1777753835894362515`.`个人卡柴油消费次数占比` as `bi_6459884238352011348` , `bi_1777753835894362515`.`个人卡天然气消费次数占比` as `bi_16651092651258988174` , `bi_1777753835894362515`.`ic卡大额非油消费次数` as `bi_7054304210906615051` , `bi_1777753835894362515`.`非油累计消费金额` as `bi_16397999138841287705` , `bi_1777753835894362515`.`非油与成品油消费金额比例` as `bi_4542996461810298499` , `bi_1777753835894362515`.`个人卡累计充值金额` as `bi_4841881326785682188` , `bi_1777753835894362515`.`单日充值次数过多次数` as `bi_9422150591649301309` , `bi_1777753835894362515`.`即消费且余额低的次数831743621` as `bi_16833265966592949464` , `bi_1777753835894362515`.`同一班次消费的次数` as `bi_11088153473180053847` , `bi_1777753835894362515`.`密码重置次数` as `bi_3598974696379994152` , `bi_1777753835894362515`.`笔折扣额的消费的次数_2085032453` as `bi_5097711375700122218` , `bi_1777753835894362515`.`个人卡余额充足时充钱的次数` as `bi_8205063281634656287` , `bi_1777753835894362515`.`是否曾频繁转账` as `bi_14482952946536492029` , `bi_1777753835894362515`.`是否异常加油卡` as `bi_8782608630523284142` , `bi_1777753835894362515`.`单位名称` as `bi_14261383855208495737` , `bi_1777753835894362515`.`所属` as `bi_7873307995921860050` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_1777753835894362515`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_8081399462078118933` , TRIM(`bi_1777753835894362515`.`交易主要站点`) as `bi_616911404683852598`   from (select   `bi_152610414374251569`.`帐号` as `帐号` , `bi_152610414374251569`.`卡号` as `卡号` , `bi_152610414374251569`.`卡类型描述` as `卡类型描述` , `bi_152610414374251569`.`是否为副卡` as `是否为副卡` , `bi_152610414374251569`.`交易主要站点` as `交易主要站点` , `bi_152610414374251569`.`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量` , `bi_152610414374251569`.`交易类型描述` as `交易类型描述` , `bi_152610414374251569`.`商品类型` as `商品类型` , `bi_152610414374251569`.`商品类型描述` as `商品类型描述` , `bi_152610414374251569`.`发卡单位` as `发卡单位` , `bi_152610414374251569`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `bi_152610414374251569`.`首次交易日期` as `首次交易日期` , `bi_152610414374251569`.`最近交易日期` as `最近交易日期` , `bi_152610414374251569`.`平均油量升数` as `平均油量升数` , `bi_152610414374251569`.`平均消费金额` as `平均消费金额` , `bi_152610414374251569`.`平均折扣金额` as `平均折扣金额` , `bi_152610414374251569`.`平均余额` as `平均余额` , `bi_152610414374251569`.`日均消费笔数` as `日均消费笔数` , `bi_152610414374251569`.`日均消费金额` as `日均消费金额` , `bi_152610414374251569`.`单日消费次数过多次数` as `单日消费次数过多次数` , `bi_152610414374251569`.`个人卡夜间消费总次数` as `个人卡夜间消费总次数` , `bi_152610414374251569`.`个人卡夜间消费总金额` as `个人卡夜间消费总金额` , `bi_152610414374251569`.`日均夜间消费笔数` as `日均夜间消费笔数` , `bi_152610414374251569`.`日均夜间消费金额` as `日均夜间消费金额` , `bi_152610414374251569`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `bi_152610414374251569`.`睡眠次数` as `睡眠次数` , `bi_152610414374251569`.`是否仍在睡眠` as `是否仍在睡眠` , `bi_152610414374251569`.`个人卡累计消费金额` as `个人卡累计消费金额` , `bi_152610414374251569`.`个人卡消费金额方差` as `个人卡消费金额方差` , `bi_152610414374251569`.`个人卡累计消费次数` as `个人卡累计消费次数` , `bi_152610414374251569`.`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数` , `bi_152610414374251569`.`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量` , `bi_152610414374251569`.`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量` , `bi_152610414374251569`.`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比` , `bi_152610414374251569`.`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数` , `bi_152610414374251569`.`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比` , `bi_152610414374251569`.`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比` , `bi_152610414374251569`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `bi_152610414374251569`.`非油累计消费金额` as `非油累计消费金额` , `bi_152610414374251569`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `bi_152610414374251569`.`个人卡累计充值金额` as `个人卡累计充值金额` , `bi_152610414374251569`.`单日充值次数过多次数` as `单日充值次数过多次数` , `bi_152610414374251569`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `bi_152610414374251569`.`同一班次消费的次数` as `同一班次消费的次数` , `bi_152610414374251569`.`密码重置次数` as `密码重置次数` , `bi_152610414374251569`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `bi_152610414374251569`.`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数` , `bi_152610414374251569`.`是否曾频繁转账` as `是否曾频繁转账` , `bi_152610414374251569`.`是否异常加油卡` as `是否异常加油卡` , `bi_152610414374251569`.`单位名称` as `单位名称` , `bi_152610414374251569`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`个人卡夜间消费总次数` as `个人卡夜间消费总次数`,`个人卡夜间消费总金额` as `个人卡夜间消费总金额`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`个人卡累计消费金额` as `个人卡累计消费金额`,`个人卡消费金额方差` as `个人卡消费金额方差`,`个人卡累计消费次数` as `个人卡累计消费次数`,`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数`,`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比`,`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`个人卡累计充值金额` as `个人卡累计充值金额`,`单日充值次数过多次数` as `单日充值次数过多次数`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`个人卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`个人卡夜间消费总次数`,`个人卡夜间消费总金额`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`个人卡累计消费金额`,`个人卡消费金额方差`,`个人卡累计消费次数`,`个人卡消费金额为小数次数`,`个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比`,`个人卡天然气消费次数占比`,`ic卡大额非油消费次数`,`非油累计消费金额`,`非油与成品油消费金额比例`,`个人卡累计充值金额`,`单日充值次数过多次数`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,     
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `个人卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`, 
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`, 
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`,
       `单日消费次数过多次数`, 
       `个人卡夜间消费总次数`,
       `个人卡夜间消费总金额`,
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`, 
       `睡眠次数`,
       `是否仍在睡眠`,
       `个人卡累计消费金额`,
       `加油卡消费金额方差` `个人卡消费金额方差`,
       `个人卡累计消费次数`,
       `加油卡消费金额为小数次数` `个人卡消费金额为小数次数`,
       `个人卡消费过油品类型数量`,
       `个人卡消费过汽油品类型数量`,
       `个人卡汽油消费次数占比`,
       `个人卡汽油单笔高额消费次数`,
       `个人卡柴油消费次数占比`,
       `个人卡天然气消费次数占比`,
       `IC卡大额非油消费次数`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `个人卡累计充值金额`,
       `单日充值次数过多次数`, 
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `个人卡余额充足时充钱的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM DW04_SJFX.APP_AUAP_YK_PPL) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `bi_152610414374251569`  
     ) `bi_1777753835894362515`
      limit 1200001 
I0825 11:48:57.213295 52907 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:48:57.214402 52907 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:48:57.329623 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:48:57.345381 52918 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:48:57.347818 52918 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "I\xf42\x147^M\x94\x83\x13\x93y\x05aZ\xc2",
      02: secret (string) = "\x9e[$\x93\xe0eOP\xae\xad\x18\x19qS\x01\b",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:48:57.375048 52918 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "I\xf42\x147^M\x94\x83\x13\x93y\x05aZ\xc2",
      02: secret (string) = "\x9e[$\x93\xe0eOP\xae\xad\x18\x19qS\x01\b",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:48:57.375761 52918 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "I\xf42\x147^M\x94\x83\x13\x93y\x05aZ\xc2",
      02: secret (string) = "\x9e[$\x93\xe0eOP\xae\xad\x18\x19qS\x01\b",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:48:57.378602 52918 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:48:57.394074 52918 Frontend.java:935] Analyzing query: use `dw04_sjfx`;
I0825 11:48:57.411981 52918 Frontend.java:947] Analysis finished.
I0825 11:48:57.501350 52918 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xfd\x11\xf0#\"\xafD\xb8\x00\x00\x00\x00\xed\x8c\x1f\x01",
      02: secret (string) = "\xfd\x11\xf0#\"\xafD\xb8\x00\x00\x00\x00\xed\x8c\x1f\x01",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:48:57.508527 52918 impala-hs2-server.cc:683] CloseOperation(): query_id=b844af2223f011fd:11f8ced00000000
I0825 11:48:57.509639 52918 impala-server.cc:1015] UnregisterQuery(): query_id=b844af2223f011fd:11f8ced00000000
I0825 11:48:57.510912 52918 impala-server.cc:1102] Cancel(): query_id=b844af2223f011fd:11f8ced00000000
I0825 11:48:57.536429 52918 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "I\xf42\x147^M\x94\x83\x13\x93y\x05aZ\xc2",
      02: secret (string) = "\x9e[$\x93\xe0eOP\xae\xad\x18\x19qS\x01\b",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:48:57.537019 52918 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "I\xf42\x147^M\x94\x83\x13\x93y\x05aZ\xc2",
      02: secret (string) = "\x9e[$\x93\xe0eOP\xae\xad\x18\x19qS\x01\b",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:48:57.538077 52918 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:48:57.571319 52918 Frontend.java:935] Analyzing query: set REQUEST_POOL = 'agilebi';
I0825 11:48:57.573838 52918 Frontend.java:947] Analysis finished.
I0825 11:48:57.580508 52537 webserver.cc:361] Webserver: error reading: Resource temporarily unavailable
I0825 11:48:57.586158 52918 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x0ef\xddmK\x84I\x15\x00\x00\x00\x00b\xadG\xff",
      02: secret (string) = "\x0ef\xddmK\x84I\x15\x00\x00\x00\x00b\xadG\xff",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:48:57.591339 52907 Frontend.java:947] Analysis finished.
I0825 11:48:57.593312 52918 impala-hs2-server.cc:683] CloseOperation(): query_id=1549844b6ddd660e:ff47ad6200000000
I0825 11:48:57.593956 52918 impala-server.cc:1015] UnregisterQuery(): query_id=1549844b6ddd660e:ff47ad6200000000
I0825 11:48:57.594799 52918 impala-server.cc:1102] Cancel(): query_id=1549844b6ddd660e:ff47ad6200000000
I0825 11:48:57.597182 52907 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:48:57.598647 52907 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:48:57.610059 52907 admission-controller.cc:508] Schedule for id=d84822ce8430f20f:5a97b74100000000 in pool_name=root.agilebi cluster_mem_needed=5.72 GB PoolConfig: max_requests=500 max_queued=200 max_mem=800.00 GB
I0825 11:48:57.610553 52907 admission-controller.cc:513] Stats: agg_num_running=1, agg_num_queued=0, agg_mem_reserved=2.86 GB,  local_host(local_mem_admitted=0, num_admitted_running=0, num_queued=0, backend_mem_reserved=0)
I0825 11:48:57.611037 52907 admission-controller.cc:529] Admitted query id=d84822ce8430f20f:5a97b74100000000
I0825 11:48:57.611264 52907 coordinator.cc:93] Exec() query_id=d84822ce8430f20f:5a97b74100000000 stmt=select   `bi_1777753835894362515`.`帐号` as `bi_4405066279117047118` , `bi_1777753835894362515`.`卡号` as `bi_10248578450533883095` , `bi_1777753835894362515`.`卡类型描述` as `bi_6246159538240244065` , `bi_1777753835894362515`.`是否为副卡` as `bi_13540389403478941567` , `bi_1777753835894362515`.`交易主要站点` as `bi_2740263195203761510` , `bi_1777753835894362515`.`个人卡消费过加油站站点数量` as `bi_3616459640308034135` , `bi_1777753835894362515`.`交易类型描述` as `bi_10331142289063080322` , `bi_1777753835894362515`.`商品类型` as `bi_8759647043076232228` , `bi_1777753835894362515`.`商品类型描述` as `bi_14353747127936749017` , `bi_1777753835894362515`.`发卡单位` as `bi_10646976700040736340` , `bi_1777753835894362515`.`发卡单位与销售单位是否一致` as `bi_3120723227421642544` , `bi_1777753835894362515`.`首次交易日期` as `bi_14455382331679438995` , `bi_1777753835894362515`.`最近交易日期` as `bi_5478771142720032093` , `bi_1777753835894362515`.`平均油量升数` as `bi_617034579827635996` , `bi_1777753835894362515`.`平均消费金额` as `bi_15112077538935800504` , `bi_1777753835894362515`.`平均折扣金额` as `bi_3277906557631314998` , `bi_1777753835894362515`.`平均余额` as `bi_15647197458875151506` , `bi_1777753835894362515`.`日均消费笔数` as `bi_7064249764713199839` , `bi_1777753835894362515`.`日均消费金额` as `bi_10854565843347455823` , `bi_1777753835894362515`.`单日消费次数过多次数` as `bi_2261074975467520775` , `bi_1777753835894362515`.`个人卡夜间消费总次数` as `bi_11404968094779050130` , `bi_1777753835894362515`.`个人卡夜间消费总金额` as `bi_15065943078847283073` , `bi_1777753835894362515`.`日均夜间消费笔数` as `bi_15868460132744503901` , `bi_1777753835894362515`.`日均夜间消费金额` as `bi_15516783331422952374` , `bi_1777753835894362515`.`单日夜间消费次数过多次数` as `bi_16171388146955820514` , `bi_1777753835894362515`.`睡眠次数` as `bi_17048143494310675370` , `bi_1777753835894362515`.`是否仍在睡眠` as `bi_15197978810704604447` , `bi_1777753835894362515`.`个人卡累计消费金额` as `bi_7591110132802393138` , `bi_1777753835894362515`.`个人卡消费金额方差` as `bi_160391765441068244` , `bi_1777753835894362515`.`个人卡累计消费次数` as `bi_4156841468949947680` , `bi_1777753835894362515`.`个人卡消费金额为小数次数` as `bi_9794343777229462837` , `bi_1777753835894362515`.`个人卡消费过油品类型数量` as `bi_10293590438327478000` , `bi_1777753835894362515`.`个人卡消费过汽油品类型数量` as `bi_1177732512630799779` , `bi_1777753835894362515`.`个人卡汽油消费次数占比` as `bi_11456242312036654846` , `bi_1777753835894362515`.`个人卡汽油单笔高额消费次数` as `bi_9834182397780633995` , `bi_1777753835894362515`.`个人卡柴油消费次数占比` as `bi_6459884238352011348` , `bi_1777753835894362515`.`个人卡天然气消费次数占比` as `bi_16651092651258988174` , `bi_1777753835894362515`.`ic卡大额非油消费次数` as `bi_7054304210906615051` , `bi_1777753835894362515`.`非油累计消费金额` as `bi_16397999138841287705` , `bi_1777753835894362515`.`非油与成品油消费金额比例` as `bi_4542996461810298499` , `bi_1777753835894362515`.`个人卡累计充值金额` as `bi_4841881326785682188` , `bi_1777753835894362515`.`单日充值次数过多次数` as `bi_9422150591649301309` , `bi_1777753835894362515`.`即消费且余额低的次数831743621` as `bi_16833265966592949464` , `bi_1777753835894362515`.`同一班次消费的次数` as `bi_11088153473180053847` , `bi_1777753835894362515`.`密码重置次数` as `bi_3598974696379994152` , `bi_1777753835894362515`.`笔折扣额的消费的次数_2085032453` as `bi_5097711375700122218` , `bi_1777753835894362515`.`个人卡余额充足时充钱的次数` as `bi_8205063281634656287` , `bi_1777753835894362515`.`是否曾频繁转账` as `bi_14482952946536492029` , `bi_1777753835894362515`.`是否异常加油卡` as `bi_8782608630523284142` , `bi_1777753835894362515`.`单位名称` as `bi_14261383855208495737` , `bi_1777753835894362515`.`所属` as `bi_7873307995921860050` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_1777753835894362515`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_8081399462078118933` , TRIM(`bi_1777753835894362515`.`交易主要站点`) as `bi_616911404683852598`   from (select   `bi_152610414374251569`.`帐号` as `帐号` , `bi_152610414374251569`.`卡号` as `卡号` , `bi_152610414374251569`.`卡类型描述` as `卡类型描述` , `bi_152610414374251569`.`是否为副卡` as `是否为副卡` , `bi_152610414374251569`.`交易主要站点` as `交易主要站点` , `bi_152610414374251569`.`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量` , `bi_152610414374251569`.`交易类型描述` as `交易类型描述` , `bi_152610414374251569`.`商品类型` as `商品类型` , `bi_152610414374251569`.`商品类型描述` as `商品类型描述` , `bi_152610414374251569`.`发卡单位` as `发卡单位` , `bi_152610414374251569`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `bi_152610414374251569`.`首次交易日期` as `首次交易日期` , `bi_152610414374251569`.`最近交易日期` as `最近交易日期` , `bi_152610414374251569`.`平均油量升数` as `平均油量升数` , `bi_152610414374251569`.`平均消费金额` as `平均消费金额` , `bi_152610414374251569`.`平均折扣金额` as `平均折扣金额` , `bi_152610414374251569`.`平均余额` as `平均余额` , `bi_152610414374251569`.`日均消费笔数` as `日均消费笔数` , `bi_152610414374251569`.`日均消费金额` as `日均消费金额` , `bi_152610414374251569`.`单日消费次数过多次数` as `单日消费次数过多次数` , `bi_152610414374251569`.`个人卡夜间消费总次数` as `个人卡夜间消费总次数` , `bi_152610414374251569`.`个人卡夜间消费总金额` as `个人卡夜间消费总金额` , `bi_152610414374251569`.`日均夜间消费笔数` as `日均夜间消费笔数` , `bi_152610414374251569`.`日均夜间消费金额` as `日均夜间消费金额` , `bi_152610414374251569`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `bi_152610414374251569`.`睡眠次数` as `睡眠次数` , `bi_152610414374251569`.`是否仍在睡眠` as `是否仍在睡眠` , `bi_152610414374251569`.`个人卡累计消费金额` as `个人卡累计消费金额` , `bi_152610414374251569`.`个人卡消费金额方差` as `个人卡消费金额方差` , `bi_152610414374251569`.`个人卡累计消费次数` as `个人卡累计消费次数` , `bi_152610414374251569`.`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数` , `bi_152610414374251569`.`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量` , `bi_152610414374251569`.`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量` , `bi_152610414374251569`.`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比` , `bi_152610414374251569`.`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数` , `bi_152610414374251569`.`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比` , `bi_152610414374251569`.`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比` , `bi_152610414374251569`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `bi_152610414374251569`.`非油累计消费金额` as `非油累计消费金额` , `bi_152610414374251569`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `bi_152610414374251569`.`个人卡累计充值金额` as `个人卡累计充值金额` , `bi_152610414374251569`.`单日充值次数过多次数` as `单日充值次数过多次数` , `bi_152610414374251569`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `bi_152610414374251569`.`同一班次消费的次数` as `同一班次消费的次数` , `bi_152610414374251569`.`密码重置次数` as `密码重置次数` , `bi_152610414374251569`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `bi_152610414374251569`.`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数` , `bi_152610414374251569`.`是否曾频繁转账` as `是否曾频繁转账` , `bi_152610414374251569`.`是否异常加油卡` as `是否异常加油卡` , `bi_152610414374251569`.`单位名称` as `单位名称` , `bi_152610414374251569`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`个人卡夜间消费总次数` as `个人卡夜间消费总次数`,`个人卡夜间消费总金额` as `个人卡夜间消费总金额`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`个人卡累计消费金额` as `个人卡累计消费金额`,`个人卡消费金额方差` as `个人卡消费金额方差`,`个人卡累计消费次数` as `个人卡累计消费次数`,`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数`,`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比`,`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`个人卡累计充值金额` as `个人卡累计充值金额`,`单日充值次数过多次数` as `单日充值次数过多次数`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`个人卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`个人卡夜间消费总次数`,`个人卡夜间消费总金额`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`个人卡累计消费金额`,`个人卡消费金额方差`,`个人卡累计消费次数`,`个人卡消费金额为小数次数`,`个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比`,`个人卡天然气消费次数占比`,`ic卡大额非油消费次数`,`非油累计消费金额`,`非油与成品油消费金额比例`,`个人卡累计充值金额`,`单日充值次数过多次数`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,     
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `个人卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`, 
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`, 
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`,
       `单日消费次数过多次数`, 
       `个人卡夜间消费总次数`,
       `个人卡夜间消费总金额`,
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`, 
       `睡眠次数`,
       `是否仍在睡眠`,
       `个人卡累计消费金额`,
       `加油卡消费金额方差` `个人卡消费金额方差`,
       `个人卡累计消费次数`,
       `加油卡消费金额为小数次数` `个人卡消费金额为小数次数`,
       `个人卡消费过油品类型数量`,
       `个人卡消费过汽油品类型数量`,
       `个人卡汽油消费次数占比`,
       `个人卡汽油单笔高额消费次数`,
       `个人卡柴油消费次数占比`,
       `个人卡天然气消费次数占比`,
       `IC卡大额非油消费次数`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `个人卡累计充值金额`,
       `单日充值次数过多次数`, 
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `个人卡余额充足时充钱的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM DW04_SJFX.APP_AUAP_YK_PPL) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `bi_152610414374251569`  
     ) `bi_1777753835894362515`
      limit 1200001 
I0825 11:48:57.612565 52907 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:48:57.614327 52907 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:48:57.617108 52907 coordinator.cc:349] starting execution on 6 backends for query_id=d84822ce8430f20f:5a97b74100000000
I0825 11:48:57.620985 44904 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=d84822ce8430f20f:5a97b74100000000
I0825 11:48:57.621598 44904 query-exec-mgr.cc:46] StartQueryFInstances() query_id=d84822ce8430f20f:5a97b74100000000 coord=e4bdhpp025:22000
I0825 11:48:57.622031 44904 query-state.cc:178] Buffer pool limit for d84822ce8430f20f:5a97b74100000000: 819200000
I0825 11:48:57.622519 44904 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query d84822ce8430f20f:5a97b74100000000
I0825 11:48:57.623896 52918 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "I\xf42\x147^M\x94\x83\x13\x93y\x05aZ\xc2",
      02: secret (string) = "\x9e[$\x93\xe0eOP\xae\xad\x18\x19qS\x01\b",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:48:57.624437 52918 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "I\xf42\x147^M\x94\x83\x13\x93y\x05aZ\xc2",
      02: secret (string) = "\x9e[$\x93\xe0eOP\xae\xad\x18\x19qS\x01\b",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:48:57.626395 52918 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:48:57.636966 52922 query-state.cc:300] StartFInstances(): query_id=d84822ce8430f20f:5a97b74100000000 #instances=2
I0825 11:48:57.638257 52922 query-state.cc:313] descriptor table for query=d84822ce8430f20f:5a97b74100000000
tuples:
Tuple(id=0 size=583 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=576 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=576 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=STRING col_path=[10] offset=32 null=(offset=576 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[48] offset=48 null=(offset=576 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=STRING col_path=[39] offset=64 null=(offset=576 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=BIGINT col_path=[29] offset=352 null=(offset=578 mask=40) slot_idx=22 field_idx=-1), Slot(id=6 type=STRING col_path=[11] offset=80 null=(offset=576 mask=20) slot_idx=5 field_idx=-1), Slot(id=7 type=STRING col_path=[12] offset=96 null=(offset=576 mask=40) slot_idx=6 field_idx=-1), Slot(id=8 type=STRING col_path=[13] offset=112 null=(offset=576 mask=80) slot_idx=7 field_idx=-1), Slot(id=9 type=STRING col_path=[38] offset=128 null=(offset=577 mask=1) slot_idx=8 field_idx=-1), Slot(id=10 type=STRING col_path=[43] offset=144 null=(offset=577 mask=2) slot_idx=9 field_idx=-1), Slot(id=11 type=TIMESTAMP col_path=[15] offset=160 null=(offset=577 mask=4) slot_idx=10 field_idx=-1), Slot(id=12 type=TIMESTAMP col_path=[16] offset=176 null=(offset=577 mask=8) slot_idx=11 field_idx=-1), Slot(id=13 type=DECIMAL(16,2) col_path=[2] offset=360 null=(offset=578 mask=80) slot_idx=23 field_idx=-1), Slot(id=14 type=DECIMAL(17,2) col_path=[3] offset=368 null=(offset=579 mask=1) slot_idx=24 field_idx=-1), Slot(id=15 type=DECIMAL(17,2) col_path=[4] offset=376 null=(offset=579 mask=2) slot_idx=25 field_idx=-1), Slot(id=16 type=DECIMAL(17,2) col_path=[5] offset=384 null=(offset=579 mask=4) slot_idx=26 field_idx=-1), Slot(id=17 type=DOUBLE col_path=[6] offset=392 null=(offset=579 mask=8) slot_idx=27 field_idx=-1), Slot(id=18 type=DECIMAL(27,2) col_path=[7] offset=192 null=(offset=577 mask=10) slot_idx=12 field_idx=-1), Slot(id=19 type=BIGINT col_path=[25] offset=400 null=(offset=579 mask=10) slot_idx=28 field_idx=-1), Slot(id=20 type=BIGINT col_path=[27] offset=408 null=(offset=579 mask=20) slot_idx=29 field_idx=-1), Slot(id=21 type=DECIMAL(26,2) col_path=[28] offset=208 null=(offset=577 mask=20) slot_idx=13 field_idx=-1), Slot(id=22 type=DOUBLE col_path=[8] offset=416 null=(offset=579 mask=40) slot_idx=30 field_idx=-1), Slot(id=23 type=DECIMAL(27,2) col_path=[9] offset=224 null=(offset=577 mask=40) slot_idx=14 field_idx=-1), Slot(id=24 type=BIGINT col_path=[26] offset=424 null=(offset=579 mask=80) slot_idx=31 field_idx=-1), Slot(id=25 type=BIGINT col_path=[17] offset=432 null=(offset=580 mask=1) slot_idx=32 field_idx=-1), Slot(id=26 type=INT col_path=[18] offset=568 null=(offset=582 mask=2) slot_idx=49 field_idx=-1), Slot(id=27 type=DECIMAL(26,2) col_path=[41] offset=240 null=(offset=577 mask=80) slot_idx=15 field_idx=-1), Slot(id=28 type=DOUBLE col_path=[49] offset=440 null=(offset=580 mask=2) slot_idx=33 field_idx=-1), Slot(id=29 type=BIGINT col_path=[42] offset=448 null=(offset=580 mask=4) slot_idx=34 field_idx=-1), Slot(id=30 type=BIGINT col_path=[44] offset=456 null=(offset=580 mask=8) slot_idx=35 field_idx=-1), Slot(id=31 type=BIGINT col_path=[21] offset=464 null=(offset=580 mask=10) slot_idx=36 field_idx=-1), Slot(id=32 type=BIGINT col_path=[22] offset=472 null=(offset=580 mask=20) slot_idx=37 field_idx=-1), Slot(id=33 type=DOUBLE col_path=[45] offset=480 null=(offset=580 mask=40) slot_idx=38 field_idx=-1), Slot(id=34 type=BIGINT col_path=[20] offset=488 null=(offset=580 mask=80) slot_idx=39 field_idx=-1), Slot(id=35 type=DOUBLE col_path=[46] offset=496 null=(offset=581 mask=1) slot_idx=40 field_idx=-1), Slot(id=36 type=DOUBLE col_path=[47] offset=504 null=(offset=581 mask=2) slot_idx=41 field_idx=-1), Slot(id=37 type=BIGINT col_path=[19] offset=512 null=(offset=581 mask=4) slot_idx=42 field_idx=-1), Slot(id=38 type=DECIMAL(26,2) col_path=[30] offset=256 null=(offset=578 mask=1) slot_idx=16 field_idx=-1), Slot(id=39 type=DECIMAL(31,4) col_path=[31] offset=272 null=(offset=578 mask=2) slot_idx=17 field_idx=-1), Slot(id=40 type=DECIMAL(26,2) col_path=[23] offset=288 null=(offset=578 mask=4) slot_idx=18 field_idx=-1), Slot(id=41 type=BIGINT col_path=[24] offset=520 null=(offset=581 mask=8) slot_idx=43 field_idx=-1), Slot(id=42 type=BIGINT col_path=[32] offset=528 null=(offset=581 mask=10) slot_idx=44 field_idx=-1), Slot(id=43 type=BIGINT col_path=[33] offset=536 null=(offset=581 mask=20) slot_idx=45 field_idx=-1), Slot(id=44 type=BIGINT col_path=[40] offset=544 null=(offset=581 mask=40) slot_idx=46 field_idx=-1), Slot(id=45 type=BIGINT col_path=[34] offset=552 null=(offset=581 mask=80) slot_idx=47 field_idx=-1), Slot(id=46 type=BIGINT col_path=[35] offset=560 null=(offset=582 mask=1) slot_idx=48 field_idx=-1), Slot(id=47 type=INT col_path=[36] offset=572 null=(offset=582 mask=4) slot_idx=50 field_idx=-1), Slot(id=48 type=STRING col_path=[50] offset=304 null=(offset=578 mask=8) slot_idx=19 field_idx=-1), Slot(id=49 type=STRING col_path=[14] offset=320 null=(offset=578 mask=10) slot_idx=20 field_idx=-1), Slot(id=50 type=STRING col_path=[37] offset=336 null=(offset=578 mask=20) slot_idx=21 field_idx=-1)] tuple_path=[])
I0825 11:48:57.641139 52907 coordinator.cc:362] started execution on 6 backends for query_id=d84822ce8430f20f:5a97b74100000000
I0825 11:48:57.644019 52918 Frontend.java:935] Analyzing query: set MEM_LIMIT = 1024000000;
I0825 11:48:57.646373 52918 Frontend.java:947] Analysis finished.
I0825 11:48:57.650314 52918 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xa7\x1dh\x9c\xd2oD\xc9\x00\x00\x00\x00a\xb4>\xfd",
      02: secret (string) = "\xa7\x1dh\x9c\xd2oD\xc9\x00\x00\x00\x00a\xb4>\xfd",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:48:57.654830 52924 query-state.cc:395] Executing instance. instance_id=d84822ce8430f20f:5a97b74100000006 fragment_idx=1 per_fragment_instance_idx=5 coord_state_idx=5 #in-flight=16
I0825 11:48:57.655468 52918 impala-hs2-server.cc:683] CloseOperation(): query_id=c9446fd29c681da7:fd3eb46100000000
I0825 11:48:57.656914 52924 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance 'd84822ce8430f20f:5a97b74100000006': 190
I0825 11:48:57.656847 52918 impala-server.cc:1015] UnregisterQuery(): query_id=c9446fd29c681da7:fd3eb46100000000
I0825 11:48:57.646836 52923 query-state.cc:395] Executing instance. instance_id=d84822ce8430f20f:5a97b74100000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=5 #in-flight=15
I0825 11:48:57.660136 52918 impala-server.cc:1102] Cancel(): query_id=c9446fd29c681da7:fd3eb46100000000
I0825 11:48:57.664628 52918 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "I\xf42\x147^M\x94\x83\x13\x93y\x05aZ\xc2",
      02: secret (string) = "\x9e[$\x93\xe0eOP\xae\xad\x18\x19qS\x01\b",
    },
  },
  02: statement (string) = "DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_PPL`",
  04: runAsync (bool) = true,
}
I0825 11:48:57.665094 52918 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "I\xf42\x147^M\x94\x83\x13\x93y\x05aZ\xc2",
      02: secret (string) = "\x9e[$\x93\xe0eOP\xae\xad\x18\x19qS\x01\b",
    },
  },
  02: statement (string) = "DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_PPL`",
  04: runAsync (bool) = true,
}
I0825 11:48:57.666527 52918 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:48:57.672724 52922 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:48:57.681869 52907 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x0f\xf20\x84\xce\"H\xd8\x00\x00\x00\x00A\xb7\x97Z",
      02: secret (string) = "\x0f\xf20\x84\xce\"H\xd8\x00\x00\x00\x00A\xb7\x97Z",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:48:57.697530 52918 Frontend.java:935] Analyzing query: DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_PPL`
I0825 11:48:57.698693 52918 Frontend.java:947] Analysis finished.
W0825 11:48:57.815614 43831 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:48:57.818578 43831 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297896886_BP-1820042964-11.11.206.232-1548063025113
W0825 11:48:57.825209 43858 ShortCircuitCache.java:773] ShortCircuitCache(0x45360bf1): failed to get 1297896886_BP-1820042964-11.11.206.232-1548063025113
I0825 11:48:57.835146 52918 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xdd\x8edR\x84QH\xa8\x00\x00\x00\x00\xea\xd1\x16\x84",
      02: secret (string) = "\xdd\x8edR\x84QH\xa8\x00\x00\x00\x00\xea\xd1\x16\x84",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:48:57.844843 52918 impala-hs2-server.cc:683] CloseOperation(): query_id=a848518452648edd:8416d1ea00000000
I0825 11:48:57.845333 52918 impala-server.cc:1015] UnregisterQuery(): query_id=a848518452648edd:8416d1ea00000000
I0825 11:48:57.846567 52918 impala-server.cc:1102] Cancel(): query_id=a848518452648edd:8416d1ea00000000
I0825 11:48:57.979476 52918 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "I\xf42\x147^M\x94\x83\x13\x93y\x05aZ\xc2",
      02: secret (string) = "\x9e[$\x93\xe0eOP\xae\xad\x18\x19qS\x01\b",
    },
  },
  02: statement (string) = "select   `bi_177[...](15324)",
  04: runAsync (bool) = true,
}
I0825 11:48:57.982501 52918 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "I\xf42\x147^M\x94\x83\x13\x93y\x05aZ\xc2",
      02: secret (string) = "\x9e[$\x93\xe0eOP\xae\xad\x18\x19qS\x01\b",
    },
  },
  02: statement (string) = "select   `bi_177[...](15324)",
  04: runAsync (bool) = true,
}
I0825 11:48:57.983628 52918 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:48:57.999816 52918 Frontend.java:935] Analyzing query: select   `bi_1777753835894362515`.`帐号` as `bi_4405066279117047118` , `bi_1777753835894362515`.`卡号` as `bi_10248578450533883095` , `bi_1777753835894362515`.`卡类型描述` as `bi_6246159538240244065` , `bi_1777753835894362515`.`是否为副卡` as `bi_13540389403478941567` , `bi_1777753835894362515`.`交易主要站点` as `bi_2740263195203761510` , `bi_1777753835894362515`.`个人卡消费过加油站站点数量` as `bi_3616459640308034135` , `bi_1777753835894362515`.`交易类型描述` as `bi_10331142289063080322` , `bi_1777753835894362515`.`商品类型` as `bi_8759647043076232228` , `bi_1777753835894362515`.`商品类型描述` as `bi_14353747127936749017` , `bi_1777753835894362515`.`发卡单位` as `bi_10646976700040736340` , `bi_1777753835894362515`.`发卡单位与销售单位是否一致` as `bi_3120723227421642544` , `bi_1777753835894362515`.`首次交易日期` as `bi_14455382331679438995` , `bi_1777753835894362515`.`最近交易日期` as `bi_5478771142720032093` , `bi_1777753835894362515`.`平均油量升数` as `bi_617034579827635996` , `bi_1777753835894362515`.`平均消费金额` as `bi_15112077538935800504` , `bi_1777753835894362515`.`平均折扣金额` as `bi_3277906557631314998` , `bi_1777753835894362515`.`平均余额` as `bi_15647197458875151506` , `bi_1777753835894362515`.`日均消费笔数` as `bi_7064249764713199839` , `bi_1777753835894362515`.`日均消费金额` as `bi_10854565843347455823` , `bi_1777753835894362515`.`单日消费次数过多次数` as `bi_2261074975467520775` , `bi_1777753835894362515`.`个人卡夜间消费总次数` as `bi_11404968094779050130` , `bi_1777753835894362515`.`个人卡夜间消费总金额` as `bi_15065943078847283073` , `bi_1777753835894362515`.`日均夜间消费笔数` as `bi_15868460132744503901` , `bi_1777753835894362515`.`日均夜间消费金额` as `bi_15516783331422952374` , `bi_1777753835894362515`.`单日夜间消费次数过多次数` as `bi_16171388146955820514` , `bi_1777753835894362515`.`睡眠次数` as `bi_17048143494310675370` , `bi_1777753835894362515`.`是否仍在睡眠` as `bi_15197978810704604447` , `bi_1777753835894362515`.`个人卡累计消费金额` as `bi_7591110132802393138` , `bi_1777753835894362515`.`个人卡消费金额方差` as `bi_160391765441068244` , `bi_1777753835894362515`.`个人卡累计消费次数` as `bi_4156841468949947680` , `bi_1777753835894362515`.`个人卡消费金额为小数次数` as `bi_9794343777229462837` , `bi_1777753835894362515`.`个人卡消费过油品类型数量` as `bi_10293590438327478000` , `bi_1777753835894362515`.`个人卡消费过汽油品类型数量` as `bi_1177732512630799779` , `bi_1777753835894362515`.`个人卡汽油消费次数占比` as `bi_11456242312036654846` , `bi_1777753835894362515`.`个人卡汽油单笔高额消费次数` as `bi_9834182397780633995` , `bi_1777753835894362515`.`个人卡柴油消费次数占比` as `bi_6459884238352011348` , `bi_1777753835894362515`.`个人卡天然气消费次数占比` as `bi_16651092651258988174` , `bi_1777753835894362515`.`ic卡大额非油消费次数` as `bi_7054304210906615051` , `bi_1777753835894362515`.`非油累计消费金额` as `bi_16397999138841287705` , `bi_1777753835894362515`.`非油与成品油消费金额比例` as `bi_4542996461810298499` , `bi_1777753835894362515`.`个人卡累计充值金额` as `bi_4841881326785682188` , `bi_1777753835894362515`.`单日充值次数过多次数` as `bi_9422150591649301309` , `bi_1777753835894362515`.`即消费且余额低的次数831743621` as `bi_16833265966592949464` , `bi_1777753835894362515`.`同一班次消费的次数` as `bi_11088153473180053847` , `bi_1777753835894362515`.`密码重置次数` as `bi_3598974696379994152` , `bi_1777753835894362515`.`笔折扣额的消费的次数_2085032453` as `bi_5097711375700122218` , `bi_1777753835894362515`.`个人卡余额充足时充钱的次数` as `bi_8205063281634656287` , `bi_1777753835894362515`.`是否曾频繁转账` as `bi_14482952946536492029` , `bi_1777753835894362515`.`是否异常加油卡` as `bi_8782608630523284142` , `bi_1777753835894362515`.`单位名称` as `bi_14261383855208495737` , `bi_1777753835894362515`.`所属` as `bi_7873307995921860050` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_1777753835894362515`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_8081399462078118933` , TRIM(`bi_1777753835894362515`.`交易主要站点`) as `bi_616911404683852598`   from (select   `bi_152610414374251569`.`帐号` as `帐号` , `bi_152610414374251569`.`卡号` as `卡号` , `bi_152610414374251569`.`卡类型描述` as `卡类型描述` , `bi_152610414374251569`.`是否为副卡` as `是否为副卡` , `bi_152610414374251569`.`交易主要站点` as `交易主要站点` , `bi_152610414374251569`.`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量` , `bi_152610414374251569`.`交易类型描述` as `交易类型描述` , `bi_152610414374251569`.`商品类型` as `商品类型` , `bi_152610414374251569`.`商品类型描述` as `商品类型描述` , `bi_152610414374251569`.`发卡单位` as `发卡单位` , `bi_152610414374251569`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `bi_152610414374251569`.`首次交易日期` as `首次交易日期` , `bi_152610414374251569`.`最近交易日期` as `最近交易日期` , `bi_152610414374251569`.`平均油量升数` as `平均油量升数` , `bi_152610414374251569`.`平均消费金额` as `平均消费金额` , `bi_152610414374251569`.`平均折扣金额` as `平均折扣金额` , `bi_152610414374251569`.`平均余额` as `平均余额` , `bi_152610414374251569`.`日均消费笔数` as `日均消费笔数` , `bi_152610414374251569`.`日均消费金额` as `日均消费金额` , `bi_152610414374251569`.`单日消费次数过多次数` as `单日消费次数过多次数` , `bi_152610414374251569`.`个人卡夜间消费总次数` as `个人卡夜间消费总次数` , `bi_152610414374251569`.`个人卡夜间消费总金额` as `个人卡夜间消费总金额` , `bi_152610414374251569`.`日均夜间消费笔数` as `日均夜间消费笔数` , `bi_152610414374251569`.`日均夜间消费金额` as `日均夜间消费金额` , `bi_152610414374251569`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `bi_152610414374251569`.`睡眠次数` as `睡眠次数` , `bi_152610414374251569`.`是否仍在睡眠` as `是否仍在睡眠` , `bi_152610414374251569`.`个人卡累计消费金额` as `个人卡累计消费金额` , `bi_152610414374251569`.`个人卡消费金额方差` as `个人卡消费金额方差` , `bi_152610414374251569`.`个人卡累计消费次数` as `个人卡累计消费次数` , `bi_152610414374251569`.`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数` , `bi_152610414374251569`.`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量` , `bi_152610414374251569`.`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量` , `bi_152610414374251569`.`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比` , `bi_152610414374251569`.`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数` , `bi_152610414374251569`.`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比` , `bi_152610414374251569`.`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比` , `bi_152610414374251569`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `bi_152610414374251569`.`非油累计消费金额` as `非油累计消费金额` , `bi_152610414374251569`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `bi_152610414374251569`.`个人卡累计充值金额` as `个人卡累计充值金额` , `bi_152610414374251569`.`单日充值次数过多次数` as `单日充值次数过多次数` , `bi_152610414374251569`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `bi_152610414374251569`.`同一班次消费的次数` as `同一班次消费的次数` , `bi_152610414374251569`.`密码重置次数` as `密码重置次数` , `bi_152610414374251569`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `bi_152610414374251569`.`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数` , `bi_152610414374251569`.`是否曾频繁转账` as `是否曾频繁转账` , `bi_152610414374251569`.`是否异常加油卡` as `是否异常加油卡` , `bi_152610414374251569`.`单位名称` as `单位名称` , `bi_152610414374251569`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`个人卡夜间消费总次数` as `个人卡夜间消费总次数`,`个人卡夜间消费总金额` as `个人卡夜间消费总金额`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`个人卡累计消费金额` as `个人卡累计消费金额`,`个人卡消费金额方差` as `个人卡消费金额方差`,`个人卡累计消费次数` as `个人卡累计消费次数`,`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数`,`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比`,`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`个人卡累计充值金额` as `个人卡累计充值金额`,`单日充值次数过多次数` as `单日充值次数过多次数`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`个人卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`个人卡夜间消费总次数`,`个人卡夜间消费总金额`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`个人卡累计消费金额`,`个人卡消费金额方差`,`个人卡累计消费次数`,`个人卡消费金额为小数次数`,`个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比`,`个人卡天然气消费次数占比`,`ic卡大额非油消费次数`,`非油累计消费金额`,`非油与成品油消费金额比例`,`个人卡累计充值金额`,`单日充值次数过多次数`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,     
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `个人卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`, 
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`, 
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`,
       `单日消费次数过多次数`, 
       `个人卡夜间消费总次数`,
       `个人卡夜间消费总金额`,
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`, 
       `睡眠次数`,
       `是否仍在睡眠`,
       `个人卡累计消费金额`,
       `加油卡消费金额方差` `个人卡消费金额方差`,
       `个人卡累计消费次数`,
       `加油卡消费金额为小数次数` `个人卡消费金额为小数次数`,
       `个人卡消费过油品类型数量`,
       `个人卡消费过汽油品类型数量`,
       `个人卡汽油消费次数占比`,
       `个人卡汽油单笔高额消费次数`,
       `个人卡柴油消费次数占比`,
       `个人卡天然气消费次数占比`,
       `IC卡大额非油消费次数`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `个人卡累计充值金额`,
       `单日充值次数过多次数`, 
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `个人卡余额充足时充钱的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM DW04_SJFX.APP_AUAP_YK_PPL) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `bi_152610414374251569`  
     ) `bi_1777753835894362515`
      limit 1200001 
I0825 11:48:58.039463 52537 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:58.040989 52537 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:48:58.065268 52948 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:58.066231 52948 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:48:58.078346 52948 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:58.082713 52948 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:48:58.091351 52537 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:58.092379 52537 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:48:58.105352 52537 query-exec-mgr.cc:95] QueryState: query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:48:58.106846 52537 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:48:58.187675 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:48:58.203855 52961 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:48:58.212204 52961 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xfc}\x1f\xabp\xacM\x1b\x99D\xa1P\x99\x19\x12\x1b",
      02: secret (string) = "\x1au\xe6\xbd\x81\xf4C8\x83=\x1d\xafk\xe3\xa9\xf0",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:48:58.238505 52961 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xfc}\x1f\xabp\xacM\x1b\x99D\xa1P\x99\x19\x12\x1b",
      02: secret (string) = "\x1au\xe6\xbd\x81\xf4C8\x83=\x1d\xafk\xe3\xa9\xf0",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:48:58.240291 52961 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xfc}\x1f\xabp\xacM\x1b\x99D\xa1P\x99\x19\x12\x1b",
      02: secret (string) = "\x1au\xe6\xbd\x81\xf4C8\x83=\x1d\xafk\xe3\xa9\xf0",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:48:58.242312 52961 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:48:58.261376 52961 Frontend.java:935] Analyzing query: use `dw04_sjfx`;
I0825 11:48:58.263005 52961 Frontend.java:947] Analysis finished.
I0825 11:48:58.293924 52918 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:48:58.297823 52918 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:48:58.340607 52907 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=d84822ce8430f20f:5a97b74100000000
I0825 11:48:58.347308 52907 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[53] {
      [0] = TColumnDesc {
        01: columnName (string) = "bi_4405066279117047118",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "bi_10248578450533883095",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "bi_6246159538240244065",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "bi_13540389403478941567",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "bi_2740263195203761510",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "bi_3616459640308034135",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "bi_10331142289063080322",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 6,
      },
      [7] = TColumnDesc {
        01: columnName (string) = "bi_8759647043076232228",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 7,
      },
      [8] = TColumnDesc {
        01: columnName (string) = "bi_14353747127936749017",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 8,
      },
      [9] = TColumnDesc {
        01: columnName (string) = "bi_10646976700040736340",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 9,
      },
      [10] = TColumnDesc {
        01: columnName (string) = "bi_3120723227421642544",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 10,
      },
      [11] = TColumnDesc {
        01: columnName (string) = "bi_14455382331679438995",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 11,
      },
      [12] = TColumnDesc {
        01: columnName (string) = "bi_5478771142720032093",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 12,
      },
      [13] = TColumnDesc {
        01: columnName (string) = "bi_617034579827635996",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 16,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 13,
      },
      [14] = TColumnDesc {
        01: columnName (string) = "bi_15112077538935800504",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 14,
      },
      [15] = TColumnDesc {
        01: columnName (string) = "bi_3277906557631314998",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 15,
      },
      [16] = TColumnDesc {
        01: columnName (string) = "bi_15647197458875151506",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 16,
      },
      [17] = TColumnDesc {
        01: columnName (string) = "bi_7064249764713199839",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 17,
      },
      [18] = TColumnDesc {
        01: columnName (string) = "bi_10854565843347455823",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 27,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 18,
      },
      [19] = TColumnDesc {
        01: columnName (string) = "bi_2261074975467520775",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 19,
      },
      [20] = TColumnDesc {
        01: columnName (string) = "bi_11404968094779050130",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 20,
      },
      [21] = TColumnDesc {
        01: columnName (string) = "bi_15065943078847283073",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 21,
      },
      [22] = TColumnDesc {
        01: columnName (string) = "bi_15868460132744503901",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 22,
      },
      [23] = TColumnDesc {
        01: columnName (string) = "bi_15516783331422952374",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 27,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 23,
      },
      [24] = TColumnDesc {
        01: columnName (string) = "bi_16171388146955820514",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 24,
      },
      [25] = TColumnDesc {
        01: columnName (string) = "bi_17048143494310675370",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 25,
      },
      [26] = TColumnDesc {
        01: columnName (string) = "bi_15197978810704604447",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 26,
      },
      [27] = TColumnDesc {
        01: columnName (string) = "bi_7591110132802393138",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 27,
      },
      [28] = TColumnDesc {
        01: columnName (string) = "bi_160391765441068244",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 28,
      },
      [29] = TColumnDesc {
        01: columnName (string) = "bi_4156841468949947680",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 29,
      },
      [30] = TColumnDesc {
        01: columnName (string) = "bi_9794343777229462837",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 30,
      },
      [31] = TColumnDesc {
        01: columnName (string) = "bi_10293590438327478000",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 31,
      },
      [32] = TColumnDesc {
        01: columnName (string) = "bi_1177732512630799779",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 32,
      },
      [33] = TColumnDesc {
        01: columnName (string) = "bi_11456242312036654846",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 33,
      },
      [34] = TColumnDesc {
        01: columnName (string) = "bi_9834182397780633995",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 34,
      },
      [35] = TColumnDesc {
        01: columnName (string) = "bi_6459884238352011348",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 35,
      },
      [36] = TColumnDesc {
        01: columnName (string) = "bi_16651092651258988174",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 36,
      },
      [37] = TColumnDesc {
        01: columnName (string) = "bi_7054304210906615051",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 37,
      },
      [38] = TColumnDesc {
        01: columnName (string) = "bi_16397999138841287705",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 38,
      },
      [39] = TColumnDesc {
        01: columnName (string) = "bi_4542996461810298499",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 31,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 4,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 39,
      },
      [40] = TColumnDesc {
        01: columnName (string) = "bi_4841881326785682188",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 40,
      },
      [41] = TColumnDesc {
        01: columnName (string) = "bi_9422150591649301309",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 41,
      },
      [42] = TColumnDesc {
        01: columnName (string) = "bi_16833265966592949464",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 42,
      },
      [43] = TColumnDesc {
        01: columnName (string) = "bi_11088153473180053847",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 43,
      },
      [44] = TColumnDesc {
        01: columnName (string) = "bi_3598974696379994152",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 44,
      },
      [45] = TColumnDesc {
        01: columnName (string) = "bi_5097711375700122218",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 45,
      },
      [46] = TColumnDesc {
        01: columnName (string) = "bi_8205063281634656287",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 46,
      },
      [47] = TColumnDesc {
        01: columnName (string) = "bi_14482952946536492029",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 47,
      },
      [48] = TColumnDesc {
        01: columnName (string) = "bi_8782608630523284142",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 48,
      },
      [49] = TColumnDesc {
        01: columnName (string) = "bi_14261383855208495737",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 49,
      },
      [50] = TColumnDesc {
        01: columnName (string) = "bi_7873307995921860050",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 50,
      },
      [51] = TColumnDesc {
        01: columnName (string) = "bi_8081399462078118933",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 51,
      },
      [52] = TColumnDesc {
        01: columnName (string) = "bi_616911404683852598",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 52,
      },
    },
  },
}
I0825 11:48:58.362445 52961 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x98\xeb_\xb4m\xebN\xe7\x00\x00\x00\x00\xae1 \x13",
      02: secret (string) = "\x98\xeb_\xb4m\xebN\xe7\x00\x00\x00\x00\xae1 \x13",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:48:58.366008 52961 impala-hs2-server.cc:683] CloseOperation(): query_id=e74eeb6db45feb98:132031ae00000000
I0825 11:48:58.366830 52961 impala-server.cc:1015] UnregisterQuery(): query_id=e74eeb6db45feb98:132031ae00000000
I0825 11:48:58.367666 52961 impala-server.cc:1102] Cancel(): query_id=e74eeb6db45feb98:132031ae00000000
I0825 11:48:58.394999 52961 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xfc}\x1f\xabp\xacM\x1b\x99D\xa1P\x99\x19\x12\x1b",
      02: secret (string) = "\x1au\xe6\xbd\x81\xf4C8\x83=\x1d\xafk\xe3\xa9\xf0",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:48:58.395574 52961 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xfc}\x1f\xabp\xacM\x1b\x99D\xa1P\x99\x19\x12\x1b",
      02: secret (string) = "\x1au\xe6\xbd\x81\xf4C8\x83=\x1d\xafk\xe3\xa9\xf0",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:48:58.396698 52961 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:48:58.407418 52961 Frontend.java:935] Analyzing query: set REQUEST_POOL = 'agilebi';
I0825 11:48:58.413241 52961 Frontend.java:947] Analysis finished.
I0825 11:48:58.425587 52961 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xcb6\x01\xd2i+L\xce\x00\x00\x00\x00\xc2\xf8\xb06",
      02: secret (string) = "\xcb6\x01\xd2i+L\xce\x00\x00\x00\x00\xc2\xf8\xb06",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:48:58.432839 52961 impala-hs2-server.cc:683] CloseOperation(): query_id=ce4c2b69d20136cb:36b0f8c200000000
I0825 11:48:58.434008 52961 impala-server.cc:1015] UnregisterQuery(): query_id=ce4c2b69d20136cb:36b0f8c200000000
I0825 11:48:58.435576 52961 impala-server.cc:1102] Cancel(): query_id=ce4c2b69d20136cb:36b0f8c200000000
I0825 11:48:58.459971 52961 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xfc}\x1f\xabp\xacM\x1b\x99D\xa1P\x99\x19\x12\x1b",
      02: secret (string) = "\x1au\xe6\xbd\x81\xf4C8\x83=\x1d\xafk\xe3\xa9\xf0",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:48:58.461896 52961 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xfc}\x1f\xabp\xacM\x1b\x99D\xa1P\x99\x19\x12\x1b",
      02: secret (string) = "\x1au\xe6\xbd\x81\xf4C8\x83=\x1d\xafk\xe3\xa9\xf0",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:48:58.462939 52961 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:48:58.483428 52961 Frontend.java:935] Analyzing query: set MEM_LIMIT = 1024000000;
I0825 11:48:58.484495 52961 Frontend.java:947] Analysis finished.
I0825 11:48:58.493302 52961 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "?7u\xd5?[CA\x00\x00\x00\x00\\\x1e`\xc7",
      02: secret (string) = "?7u\xd5?[CA\x00\x00\x00\x00\\\x1e`\xc7",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:48:58.502919 52961 impala-hs2-server.cc:683] CloseOperation(): query_id=41435b3fd575373f:c7601e5c00000000
I0825 11:48:58.505226 52961 impala-server.cc:1015] UnregisterQuery(): query_id=41435b3fd575373f:c7601e5c00000000
I0825 11:48:58.506248 52961 impala-server.cc:1102] Cancel(): query_id=41435b3fd575373f:c7601e5c00000000
I0825 11:48:58.512818 52961 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xfc}\x1f\xabp\xacM\x1b\x99D\xa1P\x99\x19\x12\x1b",
      02: secret (string) = "\x1au\xe6\xbd\x81\xf4C8\x83=\x1d\xafk\xe3\xa9\xf0",
    },
  },
  02: statement (string) = "DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_PPL`",
  04: runAsync (bool) = true,
}
I0825 11:48:58.513381 52961 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xfc}\x1f\xabp\xacM\x1b\x99D\xa1P\x99\x19\x12\x1b",
      02: secret (string) = "\x1au\xe6\xbd\x81\xf4C8\x83=\x1d\xafk\xe3\xa9\xf0",
    },
  },
  02: statement (string) = "DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_PPL`",
  04: runAsync (bool) = true,
}
I0825 11:48:58.514539 52961 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:48:58.527014 52961 Frontend.java:935] Analyzing query: DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_PPL`
I0825 11:48:58.527742 52961 Frontend.java:947] Analysis finished.
I0825 11:48:58.652009 52961 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xfc\xe9\xb7\xb5\x9d\xb5G\"\x00\x00\x00\x00\xec\x7fU\x1d",
      02: secret (string) = "\xfc\xe9\xb7\xb5\x9d\xb5G\"\x00\x00\x00\x00\xec\x7fU\x1d",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:48:58.656369 52961 impala-hs2-server.cc:683] CloseOperation(): query_id=2247b59db5b7e9fc:1d557fec00000000
I0825 11:48:58.662494 52961 impala-server.cc:1015] UnregisterQuery(): query_id=2247b59db5b7e9fc:1d557fec00000000
I0825 11:48:58.663873 52961 impala-server.cc:1102] Cancel(): query_id=2247b59db5b7e9fc:1d557fec00000000
I0825 11:48:58.796123 52961 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xfc}\x1f\xabp\xacM\x1b\x99D\xa1P\x99\x19\x12\x1b",
      02: secret (string) = "\x1au\xe6\xbd\x81\xf4C8\x83=\x1d\xafk\xe3\xa9\xf0",
    },
  },
  02: statement (string) = "select   `bi_177[...](15324)",
  04: runAsync (bool) = true,
}
I0825 11:48:58.796736 52961 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xfc}\x1f\xabp\xacM\x1b\x99D\xa1P\x99\x19\x12\x1b",
      02: secret (string) = "\x1au\xe6\xbd\x81\xf4C8\x83=\x1d\xafk\xe3\xa9\xf0",
    },
  },
  02: statement (string) = "select   `bi_177[...](15324)",
  04: runAsync (bool) = true,
}
I0825 11:48:58.802462 52961 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:48:58.828992 52961 Frontend.java:935] Analyzing query: select   `bi_1777753835894362515`.`帐号` as `bi_4405066279117047118` , `bi_1777753835894362515`.`卡号` as `bi_10248578450533883095` , `bi_1777753835894362515`.`卡类型描述` as `bi_6246159538240244065` , `bi_1777753835894362515`.`是否为副卡` as `bi_13540389403478941567` , `bi_1777753835894362515`.`交易主要站点` as `bi_2740263195203761510` , `bi_1777753835894362515`.`个人卡消费过加油站站点数量` as `bi_3616459640308034135` , `bi_1777753835894362515`.`交易类型描述` as `bi_10331142289063080322` , `bi_1777753835894362515`.`商品类型` as `bi_8759647043076232228` , `bi_1777753835894362515`.`商品类型描述` as `bi_14353747127936749017` , `bi_1777753835894362515`.`发卡单位` as `bi_10646976700040736340` , `bi_1777753835894362515`.`发卡单位与销售单位是否一致` as `bi_3120723227421642544` , `bi_1777753835894362515`.`首次交易日期` as `bi_14455382331679438995` , `bi_1777753835894362515`.`最近交易日期` as `bi_5478771142720032093` , `bi_1777753835894362515`.`平均油量升数` as `bi_617034579827635996` , `bi_1777753835894362515`.`平均消费金额` as `bi_15112077538935800504` , `bi_1777753835894362515`.`平均折扣金额` as `bi_3277906557631314998` , `bi_1777753835894362515`.`平均余额` as `bi_15647197458875151506` , `bi_1777753835894362515`.`日均消费笔数` as `bi_7064249764713199839` , `bi_1777753835894362515`.`日均消费金额` as `bi_10854565843347455823` , `bi_1777753835894362515`.`单日消费次数过多次数` as `bi_2261074975467520775` , `bi_1777753835894362515`.`个人卡夜间消费总次数` as `bi_11404968094779050130` , `bi_1777753835894362515`.`个人卡夜间消费总金额` as `bi_15065943078847283073` , `bi_1777753835894362515`.`日均夜间消费笔数` as `bi_15868460132744503901` , `bi_1777753835894362515`.`日均夜间消费金额` as `bi_15516783331422952374` , `bi_1777753835894362515`.`单日夜间消费次数过多次数` as `bi_16171388146955820514` , `bi_1777753835894362515`.`睡眠次数` as `bi_17048143494310675370` , `bi_1777753835894362515`.`是否仍在睡眠` as `bi_15197978810704604447` , `bi_1777753835894362515`.`个人卡累计消费金额` as `bi_7591110132802393138` , `bi_1777753835894362515`.`个人卡消费金额方差` as `bi_160391765441068244` , `bi_1777753835894362515`.`个人卡累计消费次数` as `bi_4156841468949947680` , `bi_1777753835894362515`.`个人卡消费金额为小数次数` as `bi_9794343777229462837` , `bi_1777753835894362515`.`个人卡消费过油品类型数量` as `bi_10293590438327478000` , `bi_1777753835894362515`.`个人卡消费过汽油品类型数量` as `bi_1177732512630799779` , `bi_1777753835894362515`.`个人卡汽油消费次数占比` as `bi_11456242312036654846` , `bi_1777753835894362515`.`个人卡汽油单笔高额消费次数` as `bi_9834182397780633995` , `bi_1777753835894362515`.`个人卡柴油消费次数占比` as `bi_6459884238352011348` , `bi_1777753835894362515`.`个人卡天然气消费次数占比` as `bi_16651092651258988174` , `bi_1777753835894362515`.`ic卡大额非油消费次数` as `bi_7054304210906615051` , `bi_1777753835894362515`.`非油累计消费金额` as `bi_16397999138841287705` , `bi_1777753835894362515`.`非油与成品油消费金额比例` as `bi_4542996461810298499` , `bi_1777753835894362515`.`个人卡累计充值金额` as `bi_4841881326785682188` , `bi_1777753835894362515`.`单日充值次数过多次数` as `bi_9422150591649301309` , `bi_1777753835894362515`.`即消费且余额低的次数831743621` as `bi_16833265966592949464` , `bi_1777753835894362515`.`同一班次消费的次数` as `bi_11088153473180053847` , `bi_1777753835894362515`.`密码重置次数` as `bi_3598974696379994152` , `bi_1777753835894362515`.`笔折扣额的消费的次数_2085032453` as `bi_5097711375700122218` , `bi_1777753835894362515`.`个人卡余额充足时充钱的次数` as `bi_8205063281634656287` , `bi_1777753835894362515`.`是否曾频繁转账` as `bi_14482952946536492029` , `bi_1777753835894362515`.`是否异常加油卡` as `bi_8782608630523284142` , `bi_1777753835894362515`.`单位名称` as `bi_14261383855208495737` , `bi_1777753835894362515`.`所属` as `bi_7873307995921860050` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_1777753835894362515`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_8081399462078118933` , TRIM(`bi_1777753835894362515`.`交易主要站点`) as `bi_616911404683852598`   from (select   `bi_152610414374251569`.`帐号` as `帐号` , `bi_152610414374251569`.`卡号` as `卡号` , `bi_152610414374251569`.`卡类型描述` as `卡类型描述` , `bi_152610414374251569`.`是否为副卡` as `是否为副卡` , `bi_152610414374251569`.`交易主要站点` as `交易主要站点` , `bi_152610414374251569`.`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量` , `bi_152610414374251569`.`交易类型描述` as `交易类型描述` , `bi_152610414374251569`.`商品类型` as `商品类型` , `bi_152610414374251569`.`商品类型描述` as `商品类型描述` , `bi_152610414374251569`.`发卡单位` as `发卡单位` , `bi_152610414374251569`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `bi_152610414374251569`.`首次交易日期` as `首次交易日期` , `bi_152610414374251569`.`最近交易日期` as `最近交易日期` , `bi_152610414374251569`.`平均油量升数` as `平均油量升数` , `bi_152610414374251569`.`平均消费金额` as `平均消费金额` , `bi_152610414374251569`.`平均折扣金额` as `平均折扣金额` , `bi_152610414374251569`.`平均余额` as `平均余额` , `bi_152610414374251569`.`日均消费笔数` as `日均消费笔数` , `bi_152610414374251569`.`日均消费金额` as `日均消费金额` , `bi_152610414374251569`.`单日消费次数过多次数` as `单日消费次数过多次数` , `bi_152610414374251569`.`个人卡夜间消费总次数` as `个人卡夜间消费总次数` , `bi_152610414374251569`.`个人卡夜间消费总金额` as `个人卡夜间消费总金额` , `bi_152610414374251569`.`日均夜间消费笔数` as `日均夜间消费笔数` , `bi_152610414374251569`.`日均夜间消费金额` as `日均夜间消费金额` , `bi_152610414374251569`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `bi_152610414374251569`.`睡眠次数` as `睡眠次数` , `bi_152610414374251569`.`是否仍在睡眠` as `是否仍在睡眠` , `bi_152610414374251569`.`个人卡累计消费金额` as `个人卡累计消费金额` , `bi_152610414374251569`.`个人卡消费金额方差` as `个人卡消费金额方差` , `bi_152610414374251569`.`个人卡累计消费次数` as `个人卡累计消费次数` , `bi_152610414374251569`.`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数` , `bi_152610414374251569`.`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量` , `bi_152610414374251569`.`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量` , `bi_152610414374251569`.`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比` , `bi_152610414374251569`.`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数` , `bi_152610414374251569`.`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比` , `bi_152610414374251569`.`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比` , `bi_152610414374251569`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `bi_152610414374251569`.`非油累计消费金额` as `非油累计消费金额` , `bi_152610414374251569`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `bi_152610414374251569`.`个人卡累计充值金额` as `个人卡累计充值金额` , `bi_152610414374251569`.`单日充值次数过多次数` as `单日充值次数过多次数` , `bi_152610414374251569`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `bi_152610414374251569`.`同一班次消费的次数` as `同一班次消费的次数` , `bi_152610414374251569`.`密码重置次数` as `密码重置次数` , `bi_152610414374251569`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `bi_152610414374251569`.`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数` , `bi_152610414374251569`.`是否曾频繁转账` as `是否曾频繁转账` , `bi_152610414374251569`.`是否异常加油卡` as `是否异常加油卡` , `bi_152610414374251569`.`单位名称` as `单位名称` , `bi_152610414374251569`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`个人卡夜间消费总次数` as `个人卡夜间消费总次数`,`个人卡夜间消费总金额` as `个人卡夜间消费总金额`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`个人卡累计消费金额` as `个人卡累计消费金额`,`个人卡消费金额方差` as `个人卡消费金额方差`,`个人卡累计消费次数` as `个人卡累计消费次数`,`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数`,`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比`,`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`个人卡累计充值金额` as `个人卡累计充值金额`,`单日充值次数过多次数` as `单日充值次数过多次数`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`个人卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`个人卡夜间消费总次数`,`个人卡夜间消费总金额`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`个人卡累计消费金额`,`个人卡消费金额方差`,`个人卡累计消费次数`,`个人卡消费金额为小数次数`,`个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比`,`个人卡天然气消费次数占比`,`ic卡大额非油消费次数`,`非油累计消费金额`,`非油与成品油消费金额比例`,`个人卡累计充值金额`,`单日充值次数过多次数`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,     
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `个人卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`, 
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`, 
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`,
       `单日消费次数过多次数`, 
       `个人卡夜间消费总次数`,
       `个人卡夜间消费总金额`,
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`, 
       `睡眠次数`,
       `是否仍在睡眠`,
       `个人卡累计消费金额`,
       `加油卡消费金额方差` `个人卡消费金额方差`,
       `个人卡累计消费次数`,
       `加油卡消费金额为小数次数` `个人卡消费金额为小数次数`,
       `个人卡消费过油品类型数量`,
       `个人卡消费过汽油品类型数量`,
       `个人卡汽油消费次数占比`,
       `个人卡汽油单笔高额消费次数`,
       `个人卡柴油消费次数占比`,
       `个人卡天然气消费次数占比`,
       `IC卡大额非油消费次数`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `个人卡累计充值金额`,
       `单日充值次数过多次数`, 
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `个人卡余额充足时充钱的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM DW04_SJFX.APP_AUAP_YK_PPL) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `bi_152610414374251569`  
     ) `bi_1777753835894362515`
      limit 1200001 
W0825 11:48:58.840476 43859 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:48:58.842224 43859 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297896886_BP-1820042964-11.11.206.232-1548063025113
I0825 11:48:58.949590 52918 Frontend.java:947] Analysis finished.
I0825 11:48:58.956066 52918 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:48:58.964866 52918 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:48:58.985355 52918 admission-controller.cc:508] Schedule for id=3d41395d29a26d74:9a4d2a3d00000000 in pool_name=root.agilebi cluster_mem_needed=5.72 GB PoolConfig: max_requests=500 max_queued=200 max_mem=800.00 GB
I0825 11:48:58.988956 52918 admission-controller.cc:513] Stats: agg_num_running=2, agg_num_queued=0, agg_mem_reserved=8.58 GB,  local_host(local_mem_admitted=5.72 GB, num_admitted_running=1, num_queued=0, backend_mem_reserved=976.56 MB)
I0825 11:48:58.989967 52918 admission-controller.cc:529] Admitted query id=3d41395d29a26d74:9a4d2a3d00000000
I0825 11:48:58.990586 52918 coordinator.cc:93] Exec() query_id=3d41395d29a26d74:9a4d2a3d00000000 stmt=select   `bi_1777753835894362515`.`帐号` as `bi_4405066279117047118` , `bi_1777753835894362515`.`卡号` as `bi_10248578450533883095` , `bi_1777753835894362515`.`卡类型描述` as `bi_6246159538240244065` , `bi_1777753835894362515`.`是否为副卡` as `bi_13540389403478941567` , `bi_1777753835894362515`.`交易主要站点` as `bi_2740263195203761510` , `bi_1777753835894362515`.`个人卡消费过加油站站点数量` as `bi_3616459640308034135` , `bi_1777753835894362515`.`交易类型描述` as `bi_10331142289063080322` , `bi_1777753835894362515`.`商品类型` as `bi_8759647043076232228` , `bi_1777753835894362515`.`商品类型描述` as `bi_14353747127936749017` , `bi_1777753835894362515`.`发卡单位` as `bi_10646976700040736340` , `bi_1777753835894362515`.`发卡单位与销售单位是否一致` as `bi_3120723227421642544` , `bi_1777753835894362515`.`首次交易日期` as `bi_14455382331679438995` , `bi_1777753835894362515`.`最近交易日期` as `bi_5478771142720032093` , `bi_1777753835894362515`.`平均油量升数` as `bi_617034579827635996` , `bi_1777753835894362515`.`平均消费金额` as `bi_15112077538935800504` , `bi_1777753835894362515`.`平均折扣金额` as `bi_3277906557631314998` , `bi_1777753835894362515`.`平均余额` as `bi_15647197458875151506` , `bi_1777753835894362515`.`日均消费笔数` as `bi_7064249764713199839` , `bi_1777753835894362515`.`日均消费金额` as `bi_10854565843347455823` , `bi_1777753835894362515`.`单日消费次数过多次数` as `bi_2261074975467520775` , `bi_1777753835894362515`.`个人卡夜间消费总次数` as `bi_11404968094779050130` , `bi_1777753835894362515`.`个人卡夜间消费总金额` as `bi_15065943078847283073` , `bi_1777753835894362515`.`日均夜间消费笔数` as `bi_15868460132744503901` , `bi_1777753835894362515`.`日均夜间消费金额` as `bi_15516783331422952374` , `bi_1777753835894362515`.`单日夜间消费次数过多次数` as `bi_16171388146955820514` , `bi_1777753835894362515`.`睡眠次数` as `bi_17048143494310675370` , `bi_1777753835894362515`.`是否仍在睡眠` as `bi_15197978810704604447` , `bi_1777753835894362515`.`个人卡累计消费金额` as `bi_7591110132802393138` , `bi_1777753835894362515`.`个人卡消费金额方差` as `bi_160391765441068244` , `bi_1777753835894362515`.`个人卡累计消费次数` as `bi_4156841468949947680` , `bi_1777753835894362515`.`个人卡消费金额为小数次数` as `bi_9794343777229462837` , `bi_1777753835894362515`.`个人卡消费过油品类型数量` as `bi_10293590438327478000` , `bi_1777753835894362515`.`个人卡消费过汽油品类型数量` as `bi_1177732512630799779` , `bi_1777753835894362515`.`个人卡汽油消费次数占比` as `bi_11456242312036654846` , `bi_1777753835894362515`.`个人卡汽油单笔高额消费次数` as `bi_9834182397780633995` , `bi_1777753835894362515`.`个人卡柴油消费次数占比` as `bi_6459884238352011348` , `bi_1777753835894362515`.`个人卡天然气消费次数占比` as `bi_16651092651258988174` , `bi_1777753835894362515`.`ic卡大额非油消费次数` as `bi_7054304210906615051` , `bi_1777753835894362515`.`非油累计消费金额` as `bi_16397999138841287705` , `bi_1777753835894362515`.`非油与成品油消费金额比例` as `bi_4542996461810298499` , `bi_1777753835894362515`.`个人卡累计充值金额` as `bi_4841881326785682188` , `bi_1777753835894362515`.`单日充值次数过多次数` as `bi_9422150591649301309` , `bi_1777753835894362515`.`即消费且余额低的次数831743621` as `bi_16833265966592949464` , `bi_1777753835894362515`.`同一班次消费的次数` as `bi_11088153473180053847` , `bi_1777753835894362515`.`密码重置次数` as `bi_3598974696379994152` , `bi_1777753835894362515`.`笔折扣额的消费的次数_2085032453` as `bi_5097711375700122218` , `bi_1777753835894362515`.`个人卡余额充足时充钱的次数` as `bi_8205063281634656287` , `bi_1777753835894362515`.`是否曾频繁转账` as `bi_14482952946536492029` , `bi_1777753835894362515`.`是否异常加油卡` as `bi_8782608630523284142` , `bi_1777753835894362515`.`单位名称` as `bi_14261383855208495737` , `bi_1777753835894362515`.`所属` as `bi_7873307995921860050` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_1777753835894362515`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_8081399462078118933` , TRIM(`bi_1777753835894362515`.`交易主要站点`) as `bi_616911404683852598`   from (select   `bi_152610414374251569`.`帐号` as `帐号` , `bi_152610414374251569`.`卡号` as `卡号` , `bi_152610414374251569`.`卡类型描述` as `卡类型描述` , `bi_152610414374251569`.`是否为副卡` as `是否为副卡` , `bi_152610414374251569`.`交易主要站点` as `交易主要站点` , `bi_152610414374251569`.`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量` , `bi_152610414374251569`.`交易类型描述` as `交易类型描述` , `bi_152610414374251569`.`商品类型` as `商品类型` , `bi_152610414374251569`.`商品类型描述` as `商品类型描述` , `bi_152610414374251569`.`发卡单位` as `发卡单位` , `bi_152610414374251569`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `bi_152610414374251569`.`首次交易日期` as `首次交易日期` , `bi_152610414374251569`.`最近交易日期` as `最近交易日期` , `bi_152610414374251569`.`平均油量升数` as `平均油量升数` , `bi_152610414374251569`.`平均消费金额` as `平均消费金额` , `bi_152610414374251569`.`平均折扣金额` as `平均折扣金额` , `bi_152610414374251569`.`平均余额` as `平均余额` , `bi_152610414374251569`.`日均消费笔数` as `日均消费笔数` , `bi_152610414374251569`.`日均消费金额` as `日均消费金额` , `bi_152610414374251569`.`单日消费次数过多次数` as `单日消费次数过多次数` , `bi_152610414374251569`.`个人卡夜间消费总次数` as `个人卡夜间消费总次数` , `bi_152610414374251569`.`个人卡夜间消费总金额` as `个人卡夜间消费总金额` , `bi_152610414374251569`.`日均夜间消费笔数` as `日均夜间消费笔数` , `bi_152610414374251569`.`日均夜间消费金额` as `日均夜间消费金额` , `bi_152610414374251569`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `bi_152610414374251569`.`睡眠次数` as `睡眠次数` , `bi_152610414374251569`.`是否仍在睡眠` as `是否仍在睡眠` , `bi_152610414374251569`.`个人卡累计消费金额` as `个人卡累计消费金额` , `bi_152610414374251569`.`个人卡消费金额方差` as `个人卡消费金额方差` , `bi_152610414374251569`.`个人卡累计消费次数` as `个人卡累计消费次数` , `bi_152610414374251569`.`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数` , `bi_152610414374251569`.`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量` , `bi_152610414374251569`.`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量` , `bi_152610414374251569`.`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比` , `bi_152610414374251569`.`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数` , `bi_152610414374251569`.`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比` , `bi_152610414374251569`.`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比` , `bi_152610414374251569`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `bi_152610414374251569`.`非油累计消费金额` as `非油累计消费金额` , `bi_152610414374251569`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `bi_152610414374251569`.`个人卡累计充值金额` as `个人卡累计充值金额` , `bi_152610414374251569`.`单日充值次数过多次数` as `单日充值次数过多次数` , `bi_152610414374251569`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `bi_152610414374251569`.`同一班次消费的次数` as `同一班次消费的次数` , `bi_152610414374251569`.`密码重置次数` as `密码重置次数` , `bi_152610414374251569`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `bi_152610414374251569`.`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数` , `bi_152610414374251569`.`是否曾频繁转账` as `是否曾频繁转账` , `bi_152610414374251569`.`是否异常加油卡` as `是否异常加油卡` , `bi_152610414374251569`.`单位名称` as `单位名称` , `bi_152610414374251569`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`个人卡夜间消费总次数` as `个人卡夜间消费总次数`,`个人卡夜间消费总金额` as `个人卡夜间消费总金额`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`个人卡累计消费金额` as `个人卡累计消费金额`,`个人卡消费金额方差` as `个人卡消费金额方差`,`个人卡累计消费次数` as `个人卡累计消费次数`,`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数`,`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比`,`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`个人卡累计充值金额` as `个人卡累计充值金额`,`单日充值次数过多次数` as `单日充值次数过多次数`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`个人卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`个人卡夜间消费总次数`,`个人卡夜间消费总金额`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`个人卡累计消费金额`,`个人卡消费金额方差`,`个人卡累计消费次数`,`个人卡消费金额为小数次数`,`个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比`,`个人卡天然气消费次数占比`,`ic卡大额非油消费次数`,`非油累计消费金额`,`非油与成品油消费金额比例`,`个人卡累计充值金额`,`单日充值次数过多次数`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,     
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `个人卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`, 
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`, 
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`,
       `单日消费次数过多次数`, 
       `个人卡夜间消费总次数`,
       `个人卡夜间消费总金额`,
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`, 
       `睡眠次数`,
       `是否仍在睡眠`,
       `个人卡累计消费金额`,
       `加油卡消费金额方差` `个人卡消费金额方差`,
       `个人卡累计消费次数`,
       `加油卡消费金额为小数次数` `个人卡消费金额为小数次数`,
       `个人卡消费过油品类型数量`,
       `个人卡消费过汽油品类型数量`,
       `个人卡汽油消费次数占比`,
       `个人卡汽油单笔高额消费次数`,
       `个人卡柴油消费次数占比`,
       `个人卡天然气消费次数占比`,
       `IC卡大额非油消费次数`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `个人卡累计充值金额`,
       `单日充值次数过多次数`, 
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `个人卡余额充足时充钱的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM DW04_SJFX.APP_AUAP_YK_PPL) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `bi_152610414374251569`  
     ) `bi_1777753835894362515`
      limit 1200001 
I0825 11:48:58.991499 52918 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:48:58.994875 52918 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:48:58.996270 52918 coordinator.cc:349] starting execution on 6 backends for query_id=3d41395d29a26d74:9a4d2a3d00000000
I0825 11:48:58.999889 45240 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=3d41395d29a26d74:9a4d2a3d00000000
I0825 11:48:59.000464 45240 query-exec-mgr.cc:46] StartQueryFInstances() query_id=3d41395d29a26d74:9a4d2a3d00000000 coord=e4bdhpp025:22000
I0825 11:48:59.001003 45240 query-state.cc:178] Buffer pool limit for 3d41395d29a26d74:9a4d2a3d00000000: 819200000
I0825 11:48:59.001515 45240 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 3d41395d29a26d74:9a4d2a3d00000000
I0825 11:48:59.012745 53026 query-state.cc:300] StartFInstances(): query_id=3d41395d29a26d74:9a4d2a3d00000000 #instances=2
I0825 11:48:59.017340 53026 query-state.cc:313] descriptor table for query=3d41395d29a26d74:9a4d2a3d00000000
tuples:
Tuple(id=0 size=583 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=576 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=576 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=STRING col_path=[10] offset=32 null=(offset=576 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[48] offset=48 null=(offset=576 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=STRING col_path=[39] offset=64 null=(offset=576 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=BIGINT col_path=[29] offset=352 null=(offset=578 mask=40) slot_idx=22 field_idx=-1), Slot(id=6 type=STRING col_path=[11] offset=80 null=(offset=576 mask=20) slot_idx=5 field_idx=-1), Slot(id=7 type=STRING col_path=[12] offset=96 null=(offset=576 mask=40) slot_idx=6 field_idx=-1), Slot(id=8 type=STRING col_path=[13] offset=112 null=(offset=576 mask=80) slot_idx=7 field_idx=-1), Slot(id=9 type=STRING col_path=[38] offset=128 null=(offset=577 mask=1) slot_idx=8 field_idx=-1), Slot(id=10 type=STRING col_path=[43] offset=144 null=(offset=577 mask=2) slot_idx=9 field_idx=-1), Slot(id=11 type=TIMESTAMP col_path=[15] offset=160 null=(offset=577 mask=4) slot_idx=10 field_idx=-1), Slot(id=12 type=TIMESTAMP col_path=[16] offset=176 null=(offset=577 mask=8) slot_idx=11 field_idx=-1), Slot(id=13 type=DECIMAL(16,2) col_path=[2] offset=360 null=(offset=578 mask=80) slot_idx=23 field_idx=-1), Slot(id=14 type=DECIMAL(17,2) col_path=[3] offset=368 null=(offset=579 mask=1) slot_idx=24 field_idx=-1), Slot(id=15 type=DECIMAL(17,2) col_path=[4] offset=376 null=(offset=579 mask=2) slot_idx=25 field_idx=-1), Slot(id=16 type=DECIMAL(17,2) col_path=[5] offset=384 null=(offset=579 mask=4) slot_idx=26 field_idx=-1), Slot(id=17 type=DOUBLE col_path=[6] offset=392 null=(offset=579 mask=8) slot_idx=27 field_idx=-1), Slot(id=18 type=DECIMAL(27,2) col_path=[7] offset=192 null=(offset=577 mask=10) slot_idx=12 field_idx=-1), Slot(id=19 type=BIGINT col_path=[25] offset=400 null=(offset=579 mask=10) slot_idx=28 field_idx=-1), Slot(id=20 type=BIGINT col_path=[27] offset=408 null=(offset=579 mask=20) slot_idx=29 field_idx=-1), Slot(id=21 type=DECIMAL(26,2) col_path=[28] offset=208 null=(offset=577 mask=20) slot_idx=13 field_idx=-1), Slot(id=22 type=DOUBLE col_path=[8] offset=416 null=(offset=579 mask=40) slot_idx=30 field_idx=-1), Slot(id=23 type=DECIMAL(27,2) col_path=[9] offset=224 null=(offset=577 mask=40) slot_idx=14 field_idx=-1), Slot(id=24 type=BIGINT col_path=[26] offset=424 null=(offset=579 mask=80) slot_idx=31 field_idx=-1), Slot(id=25 type=BIGINT col_path=[17] offset=432 null=(offset=580 mask=1) slot_idx=32 field_idx=-1), Slot(id=26 type=INT col_path=[18] offset=568 null=(offset=582 mask=2) slot_idx=49 field_idx=-1), Slot(id=27 type=DECIMAL(26,2) col_path=[41] offset=240 null=(offset=577 mask=80) slot_idx=15 field_idx=-1), Slot(id=28 type=DOUBLE col_path=[49] offset=440 null=(offset=580 mask=2) slot_idx=33 field_idx=-1), Slot(id=29 type=BIGINT col_path=[42] offset=448 null=(offset=580 mask=4) slot_idx=34 field_idx=-1), Slot(id=30 type=BIGINT col_path=[44] offset=456 null=(offset=580 mask=8) slot_idx=35 field_idx=-1), Slot(id=31 type=BIGINT col_path=[21] offset=464 null=(offset=580 mask=10) slot_idx=36 field_idx=-1), Slot(id=32 type=BIGINT col_path=[22] offset=472 null=(offset=580 mask=20) slot_idx=37 field_idx=-1), Slot(id=33 type=DOUBLE col_path=[45] offset=480 null=(offset=580 mask=40) slot_idx=38 field_idx=-1), Slot(id=34 type=BIGINT col_path=[20] offset=488 null=(offset=580 mask=80) slot_idx=39 field_idx=-1), Slot(id=35 type=DOUBLE col_path=[46] offset=496 null=(offset=581 mask=1) slot_idx=40 field_idx=-1), Slot(id=36 type=DOUBLE col_path=[47] offset=504 null=(offset=581 mask=2) slot_idx=41 field_idx=-1), Slot(id=37 type=BIGINT col_path=[19] offset=512 null=(offset=581 mask=4) slot_idx=42 field_idx=-1), Slot(id=38 type=DECIMAL(26,2) col_path=[30] offset=256 null=(offset=578 mask=1) slot_idx=16 field_idx=-1), Slot(id=39 type=DECIMAL(31,4) col_path=[31] offset=272 null=(offset=578 mask=2) slot_idx=17 field_idx=-1), Slot(id=40 type=DECIMAL(26,2) col_path=[23] offset=288 null=(offset=578 mask=4) slot_idx=18 field_idx=-1), Slot(id=41 type=BIGINT col_path=[24] offset=520 null=(offset=581 mask=8) slot_idx=43 field_idx=-1), Slot(id=42 type=BIGINT col_path=[32] offset=528 null=(offset=581 mask=10) slot_idx=44 field_idx=-1), Slot(id=43 type=BIGINT col_path=[33] offset=536 null=(offset=581 mask=20) slot_idx=45 field_idx=-1), Slot(id=44 type=BIGINT col_path=[40] offset=544 null=(offset=581 mask=40) slot_idx=46 field_idx=-1), Slot(id=45 type=BIGINT col_path=[34] offset=552 null=(offset=581 mask=80) slot_idx=47 field_idx=-1), Slot(id=46 type=BIGINT col_path=[35] offset=560 null=(offset=582 mask=1) slot_idx=48 field_idx=-1), Slot(id=47 type=INT col_path=[36] offset=572 null=(offset=582 mask=4) slot_idx=50 field_idx=-1), Slot(id=48 type=STRING col_path=[50] offset=304 null=(offset=578 mask=8) slot_idx=19 field_idx=-1), Slot(id=49 type=STRING col_path=[14] offset=320 null=(offset=578 mask=10) slot_idx=20 field_idx=-1), Slot(id=50 type=STRING col_path=[37] offset=336 null=(offset=578 mask=20) slot_idx=21 field_idx=-1)] tuple_path=[])
I0825 11:48:59.025588 52918 coordinator.cc:362] started execution on 6 backends for query_id=3d41395d29a26d74:9a4d2a3d00000000
I0825 11:48:59.030786 53027 query-state.cc:395] Executing instance. instance_id=3d41395d29a26d74:9a4d2a3d00000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=5 #in-flight=17
I0825 11:48:59.034718 53029 query-state.cc:395] Executing instance. instance_id=3d41395d29a26d74:9a4d2a3d00000006 fragment_idx=1 per_fragment_instance_idx=5 coord_state_idx=5 #in-flight=18
I0825 11:48:59.038587 53029 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '3d41395d29a26d74:9a4d2a3d00000006': 190
I0825 11:48:59.060019 53026 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:48:59.065907 52918 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "tm\xa2)]9A=\x00\x00\x00\x00=*M\x9a",
      02: secret (string) = "tm\xa2)]9A=\x00\x00\x00\x00=*M\x9a",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:48:59.350258 52961 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:48:59.352591 52961 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:48:59.681450 52918 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=3d41395d29a26d74:9a4d2a3d00000000
I0825 11:48:59.685228 52918 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[53] {
      [0] = TColumnDesc {
        01: columnName (string) = "bi_4405066279117047118",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "bi_10248578450533883095",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "bi_6246159538240244065",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "bi_13540389403478941567",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "bi_2740263195203761510",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "bi_3616459640308034135",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "bi_10331142289063080322",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 6,
      },
      [7] = TColumnDesc {
        01: columnName (string) = "bi_8759647043076232228",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 7,
      },
      [8] = TColumnDesc {
        01: columnName (string) = "bi_14353747127936749017",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 8,
      },
      [9] = TColumnDesc {
        01: columnName (string) = "bi_10646976700040736340",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 9,
      },
      [10] = TColumnDesc {
        01: columnName (string) = "bi_3120723227421642544",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 10,
      },
      [11] = TColumnDesc {
        01: columnName (string) = "bi_14455382331679438995",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 11,
      },
      [12] = TColumnDesc {
        01: columnName (string) = "bi_5478771142720032093",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 12,
      },
      [13] = TColumnDesc {
        01: columnName (string) = "bi_617034579827635996",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 16,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 13,
      },
      [14] = TColumnDesc {
        01: columnName (string) = "bi_15112077538935800504",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 14,
      },
      [15] = TColumnDesc {
        01: columnName (string) = "bi_3277906557631314998",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 15,
      },
      [16] = TColumnDesc {
        01: columnName (string) = "bi_15647197458875151506",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 16,
      },
      [17] = TColumnDesc {
        01: columnName (string) = "bi_7064249764713199839",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 17,
      },
      [18] = TColumnDesc {
        01: columnName (string) = "bi_10854565843347455823",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 27,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 18,
      },
      [19] = TColumnDesc {
        01: columnName (string) = "bi_2261074975467520775",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 19,
      },
      [20] = TColumnDesc {
        01: columnName (string) = "bi_11404968094779050130",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 20,
      },
      [21] = TColumnDesc {
        01: columnName (string) = "bi_15065943078847283073",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 21,
      },
      [22] = TColumnDesc {
        01: columnName (string) = "bi_15868460132744503901",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 22,
      },
      [23] = TColumnDesc {
        01: columnName (string) = "bi_15516783331422952374",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 27,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 23,
      },
      [24] = TColumnDesc {
        01: columnName (string) = "bi_16171388146955820514",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 24,
      },
      [25] = TColumnDesc {
        01: columnName (string) = "bi_17048143494310675370",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 25,
      },
      [26] = TColumnDesc {
        01: columnName (string) = "bi_15197978810704604447",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 26,
      },
      [27] = TColumnDesc {
        01: columnName (string) = "bi_7591110132802393138",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 27,
      },
      [28] = TColumnDesc {
        01: columnName (string) = "bi_160391765441068244",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 28,
      },
      [29] = TColumnDesc {
        01: columnName (string) = "bi_4156841468949947680",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 29,
      },
      [30] = TColumnDesc {
        01: columnName (string) = "bi_9794343777229462837",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 30,
      },
      [31] = TColumnDesc {
        01: columnName (string) = "bi_10293590438327478000",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 31,
      },
      [32] = TColumnDesc {
        01: columnName (string) = "bi_1177732512630799779",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 32,
      },
      [33] = TColumnDesc {
        01: columnName (string) = "bi_11456242312036654846",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 33,
      },
      [34] = TColumnDesc {
        01: columnName (string) = "bi_9834182397780633995",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 34,
      },
      [35] = TColumnDesc {
        01: columnName (string) = "bi_6459884238352011348",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 35,
      },
      [36] = TColumnDesc {
        01: columnName (string) = "bi_16651092651258988174",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 36,
      },
      [37] = TColumnDesc {
        01: columnName (string) = "bi_7054304210906615051",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 37,
      },
      [38] = TColumnDesc {
        01: columnName (string) = "bi_16397999138841287705",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 38,
      },
      [39] = TColumnDesc {
        01: columnName (string) = "bi_4542996461810298499",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 31,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 4,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 39,
      },
      [40] = TColumnDesc {
        01: columnName (string) = "bi_4841881326785682188",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 40,
      },
      [41] = TColumnDesc {
        01: columnName (string) = "bi_9422150591649301309",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 41,
      },
      [42] = TColumnDesc {
        01: columnName (string) = "bi_16833265966592949464",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 42,
      },
      [43] = TColumnDesc {
        01: columnName (string) = "bi_11088153473180053847",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 43,
      },
      [44] = TColumnDesc {
        01: columnName (string) = "bi_3598974696379994152",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 44,
      },
      [45] = TColumnDesc {
        01: columnName (string) = "bi_5097711375700122218",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 45,
      },
      [46] = TColumnDesc {
        01: columnName (string) = "bi_8205063281634656287",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 46,
      },
      [47] = TColumnDesc {
        01: columnName (string) = "bi_14482952946536492029",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 47,
      },
      [48] = TColumnDesc {
        01: columnName (string) = "bi_8782608630523284142",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 48,
      },
      [49] = TColumnDesc {
        01: columnName (string) = "bi_14261383855208495737",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 49,
      },
      [50] = TColumnDesc {
        01: columnName (string) = "bi_7873307995921860050",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 50,
      },
      [51] = TColumnDesc {
        01: columnName (string) = "bi_8081399462078118933",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 51,
      },
      [52] = TColumnDesc {
        01: columnName (string) = "bi_616911404683852598",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 52,
      },
    },
  },
}
W0825 11:48:59.865506 43863 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:48:59.868396 43863 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297896886_BP-1820042964-11.11.206.232-1548063025113
I0825 11:48:59.878093 52961 Frontend.java:947] Analysis finished.
I0825 11:48:59.888550 52961 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:48:59.890899 52961 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:48:59.901036 52961 admission-controller.cc:508] Schedule for id=ab479bb9665197df:11f307500000000 in pool_name=root.agilebi cluster_mem_needed=5.72 GB PoolConfig: max_requests=500 max_queued=200 max_mem=800.00 GB
I0825 11:48:59.902456 52961 admission-controller.cc:513] Stats: agg_num_running=3, agg_num_queued=0, agg_mem_reserved=14.31 GB,  local_host(local_mem_admitted=11.44 GB, num_admitted_running=2, num_queued=0, backend_mem_reserved=1.91 GB)
I0825 11:48:59.907265 52961 admission-controller.cc:529] Admitted query id=ab479bb9665197df:11f307500000000
I0825 11:48:59.908847 52961 coordinator.cc:93] Exec() query_id=ab479bb9665197df:11f307500000000 stmt=select   `bi_1777753835894362515`.`帐号` as `bi_4405066279117047118` , `bi_1777753835894362515`.`卡号` as `bi_10248578450533883095` , `bi_1777753835894362515`.`卡类型描述` as `bi_6246159538240244065` , `bi_1777753835894362515`.`是否为副卡` as `bi_13540389403478941567` , `bi_1777753835894362515`.`交易主要站点` as `bi_2740263195203761510` , `bi_1777753835894362515`.`个人卡消费过加油站站点数量` as `bi_3616459640308034135` , `bi_1777753835894362515`.`交易类型描述` as `bi_10331142289063080322` , `bi_1777753835894362515`.`商品类型` as `bi_8759647043076232228` , `bi_1777753835894362515`.`商品类型描述` as `bi_14353747127936749017` , `bi_1777753835894362515`.`发卡单位` as `bi_10646976700040736340` , `bi_1777753835894362515`.`发卡单位与销售单位是否一致` as `bi_3120723227421642544` , `bi_1777753835894362515`.`首次交易日期` as `bi_14455382331679438995` , `bi_1777753835894362515`.`最近交易日期` as `bi_5478771142720032093` , `bi_1777753835894362515`.`平均油量升数` as `bi_617034579827635996` , `bi_1777753835894362515`.`平均消费金额` as `bi_15112077538935800504` , `bi_1777753835894362515`.`平均折扣金额` as `bi_3277906557631314998` , `bi_1777753835894362515`.`平均余额` as `bi_15647197458875151506` , `bi_1777753835894362515`.`日均消费笔数` as `bi_7064249764713199839` , `bi_1777753835894362515`.`日均消费金额` as `bi_10854565843347455823` , `bi_1777753835894362515`.`单日消费次数过多次数` as `bi_2261074975467520775` , `bi_1777753835894362515`.`个人卡夜间消费总次数` as `bi_11404968094779050130` , `bi_1777753835894362515`.`个人卡夜间消费总金额` as `bi_15065943078847283073` , `bi_1777753835894362515`.`日均夜间消费笔数` as `bi_15868460132744503901` , `bi_1777753835894362515`.`日均夜间消费金额` as `bi_15516783331422952374` , `bi_1777753835894362515`.`单日夜间消费次数过多次数` as `bi_16171388146955820514` , `bi_1777753835894362515`.`睡眠次数` as `bi_17048143494310675370` , `bi_1777753835894362515`.`是否仍在睡眠` as `bi_15197978810704604447` , `bi_1777753835894362515`.`个人卡累计消费金额` as `bi_7591110132802393138` , `bi_1777753835894362515`.`个人卡消费金额方差` as `bi_160391765441068244` , `bi_1777753835894362515`.`个人卡累计消费次数` as `bi_4156841468949947680` , `bi_1777753835894362515`.`个人卡消费金额为小数次数` as `bi_9794343777229462837` , `bi_1777753835894362515`.`个人卡消费过油品类型数量` as `bi_10293590438327478000` , `bi_1777753835894362515`.`个人卡消费过汽油品类型数量` as `bi_1177732512630799779` , `bi_1777753835894362515`.`个人卡汽油消费次数占比` as `bi_11456242312036654846` , `bi_1777753835894362515`.`个人卡汽油单笔高额消费次数` as `bi_9834182397780633995` , `bi_1777753835894362515`.`个人卡柴油消费次数占比` as `bi_6459884238352011348` , `bi_1777753835894362515`.`个人卡天然气消费次数占比` as `bi_16651092651258988174` , `bi_1777753835894362515`.`ic卡大额非油消费次数` as `bi_7054304210906615051` , `bi_1777753835894362515`.`非油累计消费金额` as `bi_16397999138841287705` , `bi_1777753835894362515`.`非油与成品油消费金额比例` as `bi_4542996461810298499` , `bi_1777753835894362515`.`个人卡累计充值金额` as `bi_4841881326785682188` , `bi_1777753835894362515`.`单日充值次数过多次数` as `bi_9422150591649301309` , `bi_1777753835894362515`.`即消费且余额低的次数831743621` as `bi_16833265966592949464` , `bi_1777753835894362515`.`同一班次消费的次数` as `bi_11088153473180053847` , `bi_1777753835894362515`.`密码重置次数` as `bi_3598974696379994152` , `bi_1777753835894362515`.`笔折扣额的消费的次数_2085032453` as `bi_5097711375700122218` , `bi_1777753835894362515`.`个人卡余额充足时充钱的次数` as `bi_8205063281634656287` , `bi_1777753835894362515`.`是否曾频繁转账` as `bi_14482952946536492029` , `bi_1777753835894362515`.`是否异常加油卡` as `bi_8782608630523284142` , `bi_1777753835894362515`.`单位名称` as `bi_14261383855208495737` , `bi_1777753835894362515`.`所属` as `bi_7873307995921860050` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_1777753835894362515`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_8081399462078118933` , TRIM(`bi_1777753835894362515`.`交易主要站点`) as `bi_616911404683852598`   from (select   `bi_152610414374251569`.`帐号` as `帐号` , `bi_152610414374251569`.`卡号` as `卡号` , `bi_152610414374251569`.`卡类型描述` as `卡类型描述` , `bi_152610414374251569`.`是否为副卡` as `是否为副卡` , `bi_152610414374251569`.`交易主要站点` as `交易主要站点` , `bi_152610414374251569`.`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量` , `bi_152610414374251569`.`交易类型描述` as `交易类型描述` , `bi_152610414374251569`.`商品类型` as `商品类型` , `bi_152610414374251569`.`商品类型描述` as `商品类型描述` , `bi_152610414374251569`.`发卡单位` as `发卡单位` , `bi_152610414374251569`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `bi_152610414374251569`.`首次交易日期` as `首次交易日期` , `bi_152610414374251569`.`最近交易日期` as `最近交易日期` , `bi_152610414374251569`.`平均油量升数` as `平均油量升数` , `bi_152610414374251569`.`平均消费金额` as `平均消费金额` , `bi_152610414374251569`.`平均折扣金额` as `平均折扣金额` , `bi_152610414374251569`.`平均余额` as `平均余额` , `bi_152610414374251569`.`日均消费笔数` as `日均消费笔数` , `bi_152610414374251569`.`日均消费金额` as `日均消费金额` , `bi_152610414374251569`.`单日消费次数过多次数` as `单日消费次数过多次数` , `bi_152610414374251569`.`个人卡夜间消费总次数` as `个人卡夜间消费总次数` , `bi_152610414374251569`.`个人卡夜间消费总金额` as `个人卡夜间消费总金额` , `bi_152610414374251569`.`日均夜间消费笔数` as `日均夜间消费笔数` , `bi_152610414374251569`.`日均夜间消费金额` as `日均夜间消费金额` , `bi_152610414374251569`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `bi_152610414374251569`.`睡眠次数` as `睡眠次数` , `bi_152610414374251569`.`是否仍在睡眠` as `是否仍在睡眠` , `bi_152610414374251569`.`个人卡累计消费金额` as `个人卡累计消费金额` , `bi_152610414374251569`.`个人卡消费金额方差` as `个人卡消费金额方差` , `bi_152610414374251569`.`个人卡累计消费次数` as `个人卡累计消费次数` , `bi_152610414374251569`.`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数` , `bi_152610414374251569`.`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量` , `bi_152610414374251569`.`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量` , `bi_152610414374251569`.`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比` , `bi_152610414374251569`.`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数` , `bi_152610414374251569`.`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比` , `bi_152610414374251569`.`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比` , `bi_152610414374251569`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `bi_152610414374251569`.`非油累计消费金额` as `非油累计消费金额` , `bi_152610414374251569`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `bi_152610414374251569`.`个人卡累计充值金额` as `个人卡累计充值金额` , `bi_152610414374251569`.`单日充值次数过多次数` as `单日充值次数过多次数` , `bi_152610414374251569`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `bi_152610414374251569`.`同一班次消费的次数` as `同一班次消费的次数` , `bi_152610414374251569`.`密码重置次数` as `密码重置次数` , `bi_152610414374251569`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `bi_152610414374251569`.`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数` , `bi_152610414374251569`.`是否曾频繁转账` as `是否曾频繁转账` , `bi_152610414374251569`.`是否异常加油卡` as `是否异常加油卡` , `bi_152610414374251569`.`单位名称` as `单位名称` , `bi_152610414374251569`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`个人卡夜间消费总次数` as `个人卡夜间消费总次数`,`个人卡夜间消费总金额` as `个人卡夜间消费总金额`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`个人卡累计消费金额` as `个人卡累计消费金额`,`个人卡消费金额方差` as `个人卡消费金额方差`,`个人卡累计消费次数` as `个人卡累计消费次数`,`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数`,`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比`,`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`个人卡累计充值金额` as `个人卡累计充值金额`,`单日充值次数过多次数` as `单日充值次数过多次数`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`个人卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`个人卡夜间消费总次数`,`个人卡夜间消费总金额`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`个人卡累计消费金额`,`个人卡消费金额方差`,`个人卡累计消费次数`,`个人卡消费金额为小数次数`,`个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比`,`个人卡天然气消费次数占比`,`ic卡大额非油消费次数`,`非油累计消费金额`,`非油与成品油消费金额比例`,`个人卡累计充值金额`,`单日充值次数过多次数`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,     
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `个人卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`, 
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`, 
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`,
       `单日消费次数过多次数`, 
       `个人卡夜间消费总次数`,
       `个人卡夜间消费总金额`,
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`, 
       `睡眠次数`,
       `是否仍在睡眠`,
       `个人卡累计消费金额`,
       `加油卡消费金额方差` `个人卡消费金额方差`,
       `个人卡累计消费次数`,
       `加油卡消费金额为小数次数` `个人卡消费金额为小数次数`,
       `个人卡消费过油品类型数量`,
       `个人卡消费过汽油品类型数量`,
       `个人卡汽油消费次数占比`,
       `个人卡汽油单笔高额消费次数`,
       `个人卡柴油消费次数占比`,
       `个人卡天然气消费次数占比`,
       `IC卡大额非油消费次数`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `个人卡累计充值金额`,
       `单日充值次数过多次数`, 
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `个人卡余额充足时充钱的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM DW04_SJFX.APP_AUAP_YK_PPL) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `bi_152610414374251569`  
     ) `bi_1777753835894362515`
      limit 1200001 
I0825 11:48:59.909834 52961 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:48:59.910226 52961 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:48:59.911573 52961 coordinator.cc:349] starting execution on 6 backends for query_id=ab479bb9665197df:11f307500000000
I0825 11:48:59.916632 44904 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=ab479bb9665197df:11f307500000000
I0825 11:48:59.918699 44904 query-exec-mgr.cc:46] StartQueryFInstances() query_id=ab479bb9665197df:11f307500000000 coord=e4bdhpp025:22000
I0825 11:48:59.919028 44904 query-state.cc:178] Buffer pool limit for ab479bb9665197df:11f307500000000: 819200000
I0825 11:48:59.920136 44904 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query ab479bb9665197df:11f307500000000
I0825 11:48:59.934528 52961 coordinator.cc:362] started execution on 6 backends for query_id=ab479bb9665197df:11f307500000000
I0825 11:48:59.927834 53118 query-state.cc:300] StartFInstances(): query_id=ab479bb9665197df:11f307500000000 #instances=2
I0825 11:48:59.938510 53118 query-state.cc:313] descriptor table for query=ab479bb9665197df:11f307500000000
tuples:
Tuple(id=0 size=583 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=576 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=576 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=STRING col_path=[10] offset=32 null=(offset=576 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[48] offset=48 null=(offset=576 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=STRING col_path=[39] offset=64 null=(offset=576 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=BIGINT col_path=[29] offset=352 null=(offset=578 mask=40) slot_idx=22 field_idx=-1), Slot(id=6 type=STRING col_path=[11] offset=80 null=(offset=576 mask=20) slot_idx=5 field_idx=-1), Slot(id=7 type=STRING col_path=[12] offset=96 null=(offset=576 mask=40) slot_idx=6 field_idx=-1), Slot(id=8 type=STRING col_path=[13] offset=112 null=(offset=576 mask=80) slot_idx=7 field_idx=-1), Slot(id=9 type=STRING col_path=[38] offset=128 null=(offset=577 mask=1) slot_idx=8 field_idx=-1), Slot(id=10 type=STRING col_path=[43] offset=144 null=(offset=577 mask=2) slot_idx=9 field_idx=-1), Slot(id=11 type=TIMESTAMP col_path=[15] offset=160 null=(offset=577 mask=4) slot_idx=10 field_idx=-1), Slot(id=12 type=TIMESTAMP col_path=[16] offset=176 null=(offset=577 mask=8) slot_idx=11 field_idx=-1), Slot(id=13 type=DECIMAL(16,2) col_path=[2] offset=360 null=(offset=578 mask=80) slot_idx=23 field_idx=-1), Slot(id=14 type=DECIMAL(17,2) col_path=[3] offset=368 null=(offset=579 mask=1) slot_idx=24 field_idx=-1), Slot(id=15 type=DECIMAL(17,2) col_path=[4] offset=376 null=(offset=579 mask=2) slot_idx=25 field_idx=-1), Slot(id=16 type=DECIMAL(17,2) col_path=[5] offset=384 null=(offset=579 mask=4) slot_idx=26 field_idx=-1), Slot(id=17 type=DOUBLE col_path=[6] offset=392 null=(offset=579 mask=8) slot_idx=27 field_idx=-1), Slot(id=18 type=DECIMAL(27,2) col_path=[7] offset=192 null=(offset=577 mask=10) slot_idx=12 field_idx=-1), Slot(id=19 type=BIGINT col_path=[25] offset=400 null=(offset=579 mask=10) slot_idx=28 field_idx=-1), Slot(id=20 type=BIGINT col_path=[27] offset=408 null=(offset=579 mask=20) slot_idx=29 field_idx=-1), Slot(id=21 type=DECIMAL(26,2) col_path=[28] offset=208 null=(offset=577 mask=20) slot_idx=13 field_idx=-1), Slot(id=22 type=DOUBLE col_path=[8] offset=416 null=(offset=579 mask=40) slot_idx=30 field_idx=-1), Slot(id=23 type=DECIMAL(27,2) col_path=[9] offset=224 null=(offset=577 mask=40) slot_idx=14 field_idx=-1), Slot(id=24 type=BIGINT col_path=[26] offset=424 null=(offset=579 mask=80) slot_idx=31 field_idx=-1), Slot(id=25 type=BIGINT col_path=[17] offset=432 null=(offset=580 mask=1) slot_idx=32 field_idx=-1), Slot(id=26 type=INT col_path=[18] offset=568 null=(offset=582 mask=2) slot_idx=49 field_idx=-1), Slot(id=27 type=DECIMAL(26,2) col_path=[41] offset=240 null=(offset=577 mask=80) slot_idx=15 field_idx=-1), Slot(id=28 type=DOUBLE col_path=[49] offset=440 null=(offset=580 mask=2) slot_idx=33 field_idx=-1), Slot(id=29 type=BIGINT col_path=[42] offset=448 null=(offset=580 mask=4) slot_idx=34 field_idx=-1), Slot(id=30 type=BIGINT col_path=[44] offset=456 null=(offset=580 mask=8) slot_idx=35 field_idx=-1), Slot(id=31 type=BIGINT col_path=[21] offset=464 null=(offset=580 mask=10) slot_idx=36 field_idx=-1), Slot(id=32 type=BIGINT col_path=[22] offset=472 null=(offset=580 mask=20) slot_idx=37 field_idx=-1), Slot(id=33 type=DOUBLE col_path=[45] offset=480 null=(offset=580 mask=40) slot_idx=38 field_idx=-1), Slot(id=34 type=BIGINT col_path=[20] offset=488 null=(offset=580 mask=80) slot_idx=39 field_idx=-1), Slot(id=35 type=DOUBLE col_path=[46] offset=496 null=(offset=581 mask=1) slot_idx=40 field_idx=-1), Slot(id=36 type=DOUBLE col_path=[47] offset=504 null=(offset=581 mask=2) slot_idx=41 field_idx=-1), Slot(id=37 type=BIGINT col_path=[19] offset=512 null=(offset=581 mask=4) slot_idx=42 field_idx=-1), Slot(id=38 type=DECIMAL(26,2) col_path=[30] offset=256 null=(offset=578 mask=1) slot_idx=16 field_idx=-1), Slot(id=39 type=DECIMAL(31,4) col_path=[31] offset=272 null=(offset=578 mask=2) slot_idx=17 field_idx=-1), Slot(id=40 type=DECIMAL(26,2) col_path=[23] offset=288 null=(offset=578 mask=4) slot_idx=18 field_idx=-1), Slot(id=41 type=BIGINT col_path=[24] offset=520 null=(offset=581 mask=8) slot_idx=43 field_idx=-1), Slot(id=42 type=BIGINT col_path=[32] offset=528 null=(offset=581 mask=10) slot_idx=44 field_idx=-1), Slot(id=43 type=BIGINT col_path=[33] offset=536 null=(offset=581 mask=20) slot_idx=45 field_idx=-1), Slot(id=44 type=BIGINT col_path=[40] offset=544 null=(offset=581 mask=40) slot_idx=46 field_idx=-1), Slot(id=45 type=BIGINT col_path=[34] offset=552 null=(offset=581 mask=80) slot_idx=47 field_idx=-1), Slot(id=46 type=BIGINT col_path=[35] offset=560 null=(offset=582 mask=1) slot_idx=48 field_idx=-1), Slot(id=47 type=INT col_path=[36] offset=572 null=(offset=582 mask=4) slot_idx=50 field_idx=-1), Slot(id=48 type=STRING col_path=[50] offset=304 null=(offset=578 mask=8) slot_idx=19 field_idx=-1), Slot(id=49 type=STRING col_path=[14] offset=320 null=(offset=578 mask=10) slot_idx=20 field_idx=-1), Slot(id=50 type=STRING col_path=[37] offset=336 null=(offset=578 mask=20) slot_idx=21 field_idx=-1)] tuple_path=[])
I0825 11:48:59.946007 53122 query-state.cc:395] Executing instance. instance_id=ab479bb9665197df:11f307500000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=5 #in-flight=19
I0825 11:48:59.962867 53124 query-state.cc:395] Executing instance. instance_id=ab479bb9665197df:11f307500000006 fragment_idx=1 per_fragment_instance_idx=5 coord_state_idx=5 #in-flight=20
I0825 11:48:59.964766 53124 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance 'ab479bb9665197df:11f307500000006': 190
I0825 11:48:59.991668 53118 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:00.004314 52961 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xdf\x97Qf\xb9\x9bG\xab\x00\x00\x00\x00u0\x1f\x01",
      02: secret (string) = "\xdf\x97Qf\xb9\x9bG\xab\x00\x00\x00\x00u0\x1f\x01",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:00.361227 44439 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=cd4c1202c157df1d:d37511b300000000
I0825 11:49:00.362347 44439 query-exec-mgr.cc:46] StartQueryFInstances() query_id=cd4c1202c157df1d:d37511b300000000 coord=e4bdhpp023:22000
I0825 11:49:00.365329 44439 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:49:00.367033 44439 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:49:00.368969 44439 query-state.cc:178] Buffer pool limit for cd4c1202c157df1d:d37511b300000000: 819200000
I0825 11:49:00.369758 44439 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query cd4c1202c157df1d:d37511b300000000
I0825 11:49:00.374503 53198 query-state.cc:300] StartFInstances(): query_id=cd4c1202c157df1d:d37511b300000000 #instances=1
I0825 11:49:00.381654 53198 query-state.cc:313] descriptor table for query=cd4c1202c157df1d:d37511b300000000
tuples:
Tuple(id=0 size=583 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=576 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=576 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=STRING col_path=[10] offset=32 null=(offset=576 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[48] offset=48 null=(offset=576 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=STRING col_path=[39] offset=64 null=(offset=576 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=BIGINT col_path=[29] offset=352 null=(offset=578 mask=40) slot_idx=22 field_idx=-1), Slot(id=6 type=STRING col_path=[11] offset=80 null=(offset=576 mask=20) slot_idx=5 field_idx=-1), Slot(id=7 type=STRING col_path=[12] offset=96 null=(offset=576 mask=40) slot_idx=6 field_idx=-1), Slot(id=8 type=STRING col_path=[13] offset=112 null=(offset=576 mask=80) slot_idx=7 field_idx=-1), Slot(id=9 type=STRING col_path=[38] offset=128 null=(offset=577 mask=1) slot_idx=8 field_idx=-1), Slot(id=10 type=STRING col_path=[43] offset=144 null=(offset=577 mask=2) slot_idx=9 field_idx=-1), Slot(id=11 type=TIMESTAMP col_path=[15] offset=160 null=(offset=577 mask=4) slot_idx=10 field_idx=-1), Slot(id=12 type=TIMESTAMP col_path=[16] offset=176 null=(offset=577 mask=8) slot_idx=11 field_idx=-1), Slot(id=13 type=DECIMAL(16,2) col_path=[2] offset=360 null=(offset=578 mask=80) slot_idx=23 field_idx=-1), Slot(id=14 type=DECIMAL(17,2) col_path=[3] offset=368 null=(offset=579 mask=1) slot_idx=24 field_idx=-1), Slot(id=15 type=DECIMAL(17,2) col_path=[4] offset=376 null=(offset=579 mask=2) slot_idx=25 field_idx=-1), Slot(id=16 type=DECIMAL(17,2) col_path=[5] offset=384 null=(offset=579 mask=4) slot_idx=26 field_idx=-1), Slot(id=17 type=DOUBLE col_path=[6] offset=392 null=(offset=579 mask=8) slot_idx=27 field_idx=-1), Slot(id=18 type=DECIMAL(27,2) col_path=[7] offset=192 null=(offset=577 mask=10) slot_idx=12 field_idx=-1), Slot(id=19 type=BIGINT col_path=[25] offset=400 null=(offset=579 mask=10) slot_idx=28 field_idx=-1), Slot(id=20 type=BIGINT col_path=[27] offset=408 null=(offset=579 mask=20) slot_idx=29 field_idx=-1), Slot(id=21 type=DECIMAL(26,2) col_path=[28] offset=208 null=(offset=577 mask=20) slot_idx=13 field_idx=-1), Slot(id=22 type=DOUBLE col_path=[8] offset=416 null=(offset=579 mask=40) slot_idx=30 field_idx=-1), Slot(id=23 type=DECIMAL(27,2) col_path=[9] offset=224 null=(offset=577 mask=40) slot_idx=14 field_idx=-1), Slot(id=24 type=BIGINT col_path=[26] offset=424 null=(offset=579 mask=80) slot_idx=31 field_idx=-1), Slot(id=25 type=BIGINT col_path=[17] offset=432 null=(offset=580 mask=1) slot_idx=32 field_idx=-1), Slot(id=26 type=INT col_path=[18] offset=568 null=(offset=582 mask=2) slot_idx=49 field_idx=-1), Slot(id=27 type=DECIMAL(26,2) col_path=[41] offset=240 null=(offset=577 mask=80) slot_idx=15 field_idx=-1), Slot(id=28 type=DOUBLE col_path=[49] offset=440 null=(offset=580 mask=2) slot_idx=33 field_idx=-1), Slot(id=29 type=BIGINT col_path=[42] offset=448 null=(offset=580 mask=4) slot_idx=34 field_idx=-1), Slot(id=30 type=BIGINT col_path=[44] offset=456 null=(offset=580 mask=8) slot_idx=35 field_idx=-1), Slot(id=31 type=BIGINT col_path=[21] offset=464 null=(offset=580 mask=10) slot_idx=36 field_idx=-1), Slot(id=32 type=BIGINT col_path=[22] offset=472 null=(offset=580 mask=20) slot_idx=37 field_idx=-1), Slot(id=33 type=DOUBLE col_path=[45] offset=480 null=(offset=580 mask=40) slot_idx=38 field_idx=-1), Slot(id=34 type=BIGINT col_path=[20] offset=488 null=(offset=580 mask=80) slot_idx=39 field_idx=-1), Slot(id=35 type=DOUBLE col_path=[46] offset=496 null=(offset=581 mask=1) slot_idx=40 field_idx=-1), Slot(id=36 type=DOUBLE col_path=[47] offset=504 null=(offset=581 mask=2) slot_idx=41 field_idx=-1), Slot(id=37 type=BIGINT col_path=[19] offset=512 null=(offset=581 mask=4) slot_idx=42 field_idx=-1), Slot(id=38 type=DECIMAL(26,2) col_path=[30] offset=256 null=(offset=578 mask=1) slot_idx=16 field_idx=-1), Slot(id=39 type=DECIMAL(31,4) col_path=[31] offset=272 null=(offset=578 mask=2) slot_idx=17 field_idx=-1), Slot(id=40 type=DECIMAL(26,2) col_path=[23] offset=288 null=(offset=578 mask=4) slot_idx=18 field_idx=-1), Slot(id=41 type=BIGINT col_path=[24] offset=520 null=(offset=581 mask=8) slot_idx=43 field_idx=-1), Slot(id=42 type=BIGINT col_path=[32] offset=528 null=(offset=581 mask=10) slot_idx=44 field_idx=-1), Slot(id=43 type=BIGINT col_path=[33] offset=536 null=(offset=581 mask=20) slot_idx=45 field_idx=-1), Slot(id=44 type=BIGINT col_path=[40] offset=544 null=(offset=581 mask=40) slot_idx=46 field_idx=-1), Slot(id=45 type=BIGINT col_path=[34] offset=552 null=(offset=581 mask=80) slot_idx=47 field_idx=-1), Slot(id=46 type=BIGINT col_path=[35] offset=560 null=(offset=582 mask=1) slot_idx=48 field_idx=-1), Slot(id=47 type=INT col_path=[36] offset=572 null=(offset=582 mask=4) slot_idx=50 field_idx=-1), Slot(id=48 type=STRING col_path=[50] offset=304 null=(offset=578 mask=8) slot_idx=19 field_idx=-1), Slot(id=49 type=STRING col_path=[14] offset=320 null=(offset=578 mask=10) slot_idx=20 field_idx=-1), Slot(id=50 type=STRING col_path=[37] offset=336 null=(offset=578 mask=20) slot_idx=21 field_idx=-1)] tuple_path=[])
I0825 11:49:00.401962 53201 query-state.cc:395] Executing instance. instance_id=cd4c1202c157df1d:d37511b300000006 fragment_idx=1 per_fragment_instance_idx=5 coord_state_idx=5 #in-flight=21
I0825 11:49:00.403738 53201 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance 'cd4c1202c157df1d:d37511b300000006': 190
I0825 11:49:00.426647 53198 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c1202c157df1d:d37511b300000000 refcnt=2
I0825 11:49:00.637765 52961 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=ab479bb9665197df:11f307500000000
I0825 11:49:00.640530 52961 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[53] {
      [0] = TColumnDesc {
        01: columnName (string) = "bi_4405066279117047118",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "bi_10248578450533883095",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "bi_6246159538240244065",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "bi_13540389403478941567",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "bi_2740263195203761510",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "bi_3616459640308034135",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "bi_10331142289063080322",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 6,
      },
      [7] = TColumnDesc {
        01: columnName (string) = "bi_8759647043076232228",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 7,
      },
      [8] = TColumnDesc {
        01: columnName (string) = "bi_14353747127936749017",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 8,
      },
      [9] = TColumnDesc {
        01: columnName (string) = "bi_10646976700040736340",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 9,
      },
      [10] = TColumnDesc {
        01: columnName (string) = "bi_3120723227421642544",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 10,
      },
      [11] = TColumnDesc {
        01: columnName (string) = "bi_14455382331679438995",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 11,
      },
      [12] = TColumnDesc {
        01: columnName (string) = "bi_5478771142720032093",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 12,
      },
      [13] = TColumnDesc {
        01: columnName (string) = "bi_617034579827635996",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 16,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 13,
      },
      [14] = TColumnDesc {
        01: columnName (string) = "bi_15112077538935800504",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 14,
      },
      [15] = TColumnDesc {
        01: columnName (string) = "bi_3277906557631314998",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 15,
      },
      [16] = TColumnDesc {
        01: columnName (string) = "bi_15647197458875151506",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 16,
      },
      [17] = TColumnDesc {
        01: columnName (string) = "bi_7064249764713199839",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 17,
      },
      [18] = TColumnDesc {
        01: columnName (string) = "bi_10854565843347455823",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 27,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 18,
      },
      [19] = TColumnDesc {
        01: columnName (string) = "bi_2261074975467520775",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 19,
      },
      [20] = TColumnDesc {
        01: columnName (string) = "bi_11404968094779050130",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 20,
      },
      [21] = TColumnDesc {
        01: columnName (string) = "bi_15065943078847283073",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 21,
      },
      [22] = TColumnDesc {
        01: columnName (string) = "bi_15868460132744503901",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 22,
      },
      [23] = TColumnDesc {
        01: columnName (string) = "bi_15516783331422952374",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 27,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 23,
      },
      [24] = TColumnDesc {
        01: columnName (string) = "bi_16171388146955820514",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 24,
      },
      [25] = TColumnDesc {
        01: columnName (string) = "bi_17048143494310675370",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 25,
      },
      [26] = TColumnDesc {
        01: columnName (string) = "bi_15197978810704604447",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 26,
      },
      [27] = TColumnDesc {
        01: columnName (string) = "bi_7591110132802393138",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 27,
      },
      [28] = TColumnDesc {
        01: columnName (string) = "bi_160391765441068244",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 28,
      },
      [29] = TColumnDesc {
        01: columnName (string) = "bi_4156841468949947680",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 29,
      },
      [30] = TColumnDesc {
        01: columnName (string) = "bi_9794343777229462837",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 30,
      },
      [31] = TColumnDesc {
        01: columnName (string) = "bi_10293590438327478000",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 31,
      },
      [32] = TColumnDesc {
        01: columnName (string) = "bi_1177732512630799779",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 32,
      },
      [33] = TColumnDesc {
        01: columnName (string) = "bi_11456242312036654846",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 33,
      },
      [34] = TColumnDesc {
        01: columnName (string) = "bi_9834182397780633995",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 34,
      },
      [35] = TColumnDesc {
        01: columnName (string) = "bi_6459884238352011348",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 35,
      },
      [36] = TColumnDesc {
        01: columnName (string) = "bi_16651092651258988174",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 36,
      },
      [37] = TColumnDesc {
        01: columnName (string) = "bi_7054304210906615051",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 37,
      },
      [38] = TColumnDesc {
        01: columnName (string) = "bi_16397999138841287705",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 38,
      },
      [39] = TColumnDesc {
        01: columnName (string) = "bi_4542996461810298499",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 31,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 4,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 39,
      },
      [40] = TColumnDesc {
        01: columnName (string) = "bi_4841881326785682188",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 40,
      },
      [41] = TColumnDesc {
        01: columnName (string) = "bi_9422150591649301309",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 41,
      },
      [42] = TColumnDesc {
        01: columnName (string) = "bi_16833265966592949464",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 42,
      },
      [43] = TColumnDesc {
        01: columnName (string) = "bi_11088153473180053847",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 43,
      },
      [44] = TColumnDesc {
        01: columnName (string) = "bi_3598974696379994152",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 44,
      },
      [45] = TColumnDesc {
        01: columnName (string) = "bi_5097711375700122218",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 45,
      },
      [46] = TColumnDesc {
        01: columnName (string) = "bi_8205063281634656287",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 46,
      },
      [47] = TColumnDesc {
        01: columnName (string) = "bi_14482952946536492029",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 47,
      },
      [48] = TColumnDesc {
        01: columnName (string) = "bi_8782608630523284142",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 48,
      },
      [49] = TColumnDesc {
        01: columnName (string) = "bi_14261383855208495737",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 49,
      },
      [50] = TColumnDesc {
        01: columnName (string) = "bi_7873307995921860050",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 50,
      },
      [51] = TColumnDesc {
        01: columnName (string) = "bi_8081399462078118933",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 51,
      },
      [52] = TColumnDesc {
        01: columnName (string) = "bi_616911404683852598",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 52,
      },
    },
  },
}
W0825 11:49:00.872069 43860 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:49:00.873710 43860 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297896886_BP-1820042964-11.11.206.232-1548063025113
I0825 11:49:01.215660 52537 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:01.218750 52537 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:01.227139 53334 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:01.232270 53334 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:01.242307 52537 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:01.243221 52537 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:01.261850 53343 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:01.264961 53343 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:01.274641 53334 query-exec-mgr.cc:95] QueryState: query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:01.275799 53334 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:01.287734 52537 query-exec-mgr.cc:95] QueryState: query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:01.289222 52537 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:01.307353 53352 query-exec-mgr.cc:95] QueryState: query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:01.310954 53352 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:01.874657 44132 thrift-util.cc:123] TAcceptQueueServer: Caught TException: No more data to read.
W0825 11:49:01.881911 43862 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:49:01.883131 43862 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297896886_BP-1820042964-11.11.206.232-1548063025113
W0825 11:49:02.892136 43862 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:49:02.893623 43862 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297896886_BP-1820042964-11.11.206.232-1548063025113
I0825 11:49:03.710908 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:49:03.714885 53817 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:49:03.739220 53817 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = ")7w\x92\xf3\xfbC\xcc\xbe\xe2\x1d\xe5\x86\xdb\x9eD",
      02: secret (string) = "\x14^\xa3\xfc\xb7IC\x1d\xb9\x0e\x82\xbf\xf6i^y",
    },
  },
  02: statement (string) = "use dw20",
  04: runAsync (bool) = true,
}
I0825 11:49:03.739985 53817 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = ")7w\x92\xf3\xfbC\xcc\xbe\xe2\x1d\xe5\x86\xdb\x9eD",
      02: secret (string) = "\x14^\xa3\xfc\xb7IC\x1d\xb9\x0e\x82\xbf\xf6i^y",
    },
  },
  02: statement (string) = "use dw20",
  04: runAsync (bool) = true,
}
I0825 11:49:03.748819 53817 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:03.770519 53817 Frontend.java:935] Analyzing query: use dw20
I0825 11:49:03.780335 53817 Frontend.java:947] Analysis finished.
I0825 11:49:03.881119 53817 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\"\xf6Dv0\x0fLP\x00\x00\x00\x005\xe9N.",
      02: secret (string) = "\"\xf6Dv0\x0fLP\x00\x00\x00\x005\xe9N.",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:49:03.887611 53817 impala-hs2-server.cc:683] CloseOperation(): query_id=504c0f307644f622:2e4ee93500000000
I0825 11:49:03.887923 53817 impala-server.cc:1015] UnregisterQuery(): query_id=504c0f307644f622:2e4ee93500000000
I0825 11:49:03.888211 53817 impala-server.cc:1102] Cancel(): query_id=504c0f307644f622:2e4ee93500000000
I0825 11:49:03.912564 53817 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = ")7w\x92\xf3\xfbC\xcc\xbe\xe2\x1d\xe5\x86\xdb\x9eD",
      02: secret (string) = "\x14^\xa3\xfc\xb7IC\x1d\xb9\x0e\x82\xbf\xf6i^y",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:49:03.913679 53817 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = ")7w\x92\xf3\xfbC\xcc\xbe\xe2\x1d\xe5\x86\xdb\x9eD",
      02: secret (string) = "\x14^\xa3\xfc\xb7IC\x1d\xb9\x0e\x82\xbf\xf6i^y",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:49:03.921113 53817 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:03.947301 53817 Frontend.java:935] Analyzing query: set mem_limit='8g'
I0825 11:49:03.953675 53817 Frontend.java:947] Analysis finished.
I0825 11:49:03.957285 53817 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "%\x84\x83\xa0\x88\x12K\xa0\x00\x00\x00\x00\xe0d\xcfH",
      02: secret (string) = "%\x84\x83\xa0\x88\x12K\xa0\x00\x00\x00\x00\xe0d\xcfH",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:03.963783 53817 impala-hs2-server.cc:683] CloseOperation(): query_id=a04b1288a0838425:48cf64e000000000
I0825 11:49:03.966426 53817 impala-server.cc:1015] UnregisterQuery(): query_id=a04b1288a0838425:48cf64e000000000
I0825 11:49:03.966995 53817 impala-server.cc:1102] Cancel(): query_id=a04b1288a0838425:48cf64e000000000
I0825 11:49:03.977007 53817 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = ")7w\x92\xf3\xfbC\xcc\xbe\xe2\x1d\xe5\x86\xdb\x9eD",
      02: secret (string) = "\x14^\xa3\xfc\xb7IC\x1d\xb9\x0e\x82\xbf\xf6i^y",
    },
  },
  02: statement (string) = "DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`",
  04: runAsync (bool) = true,
}
I0825 11:49:03.977313 53817 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = ")7w\x92\xf3\xfbC\xcc\xbe\xe2\x1d\xe5\x86\xdb\x9eD",
      02: secret (string) = "\x14^\xa3\xfc\xb7IC\x1d\xb9\x0e\x82\xbf\xf6i^y",
    },
  },
  02: statement (string) = "DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`",
  04: runAsync (bool) = true,
}
I0825 11:49:03.981259 53817 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:03.993634 53817 Frontend.java:935] Analyzing query: DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`
I0825 11:49:03.998824 53817 Frontend.java:947] Analysis finished.
W0825 11:49:04.001113 43831 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:49:04.002476 43831 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297064873_BP-1820042964-11.11.206.232-1548063025113
I0825 11:49:04.135879 53817 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "{\xdc*D\xa1\xffJ\x10\x00\x00\x00\x00A\xce\xf6]",
      02: secret (string) = "{\xdc*D\xa1\xffJ\x10\x00\x00\x00\x00A\xce\xf6]",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:04.140780 53817 impala-hs2-server.cc:683] CloseOperation(): query_id=104affa1442adc7b:5df6ce4100000000
I0825 11:49:04.141211 53817 impala-server.cc:1015] UnregisterQuery(): query_id=104affa1442adc7b:5df6ce4100000000
I0825 11:49:04.142064 53817 impala-server.cc:1102] Cancel(): query_id=104affa1442adc7b:5df6ce4100000000
I0825 11:49:04.152371 53817 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = ")7w\x92\xf3\xfbC\xcc\xbe\xe2\x1d\xe5\x86\xdb\x9eD",
      02: secret (string) = "\x14^\xa3\xfc\xb7IC\x1d\xb9\x0e\x82\xbf\xf6i^y",
    },
  },
  02: statement (string) = "SELECT `cnpc_vie[...](10454)",
  04: runAsync (bool) = true,
}
I0825 11:49:04.156827 53817 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = ")7w\x92\xf3\xfbC\xcc\xbe\xe2\x1d\xe5\x86\xdb\x9eD",
      02: secret (string) = "\x14^\xa3\xfc\xb7IC\x1d\xb9\x0e\x82\xbf\xf6i^y",
    },
  },
  02: statement (string) = "SELECT `cnpc_vie[...](10454)",
  04: runAsync (bool) = true,
}
I0825 11:49:04.158253 53817 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:04.175693 53817 Frontend.java:935] Analyzing query: SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey` AS `bi_16209772373942822610` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator` AS `bi_7173110153481771205` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`created` AS `bi_13491404487973529010` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor` AS `bi_16709338949652660965` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited` AS `bi_7778611651735101528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t` AS `bi_5365439428354097443` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode` AS `bi_17739814079848908328` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`code` AS `bi_2232887874484344045` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode` AS `bi_369040516142209005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename` AS `bi_6559770015537514515` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`name` AS `bi_15189533194949851777` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename` AS `bi_7541878364736470844` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename` AS `bi_5792701378059420076` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename` AS `bi_3349638123191173855` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename` AS `bi_15445715632339295217` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname` AS `bi_9114563080665146699` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname` AS `bi_13865388329565152770` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname` AS `bi_12093476229320587287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname` AS `bi_5623662814544693635` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname` AS `bi_13683947135958082930` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw` AS `bi_11924957536007553338` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate` AS `bi_614967852965536978` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate` AS `bi_5003822878387321743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate` AS `bi_6413940051808780525` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment` AS `bi_11216260561419591329` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark` AS `bi_15719283721382345906` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone` AS `bi_2135828979746422287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername` AS `bi_8234557137695700893` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion` AS `bi_5133013160763149225` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname` AS `bi_2661014466711632970` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername` AS `bi_13689588754024198241` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate` AS `bi_11029029363983356005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate` AS `bi_6920746512342794880` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate` AS `bi_1980803134228074743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode` AS `bi_16284813439853843418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname` AS `bi_4893616353618505239` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail` AS `bi_7824035878402166299` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname` AS `bi_17834913520635724437` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid` AS `bi_1963530120962417240` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname` AS `bi_5127572173810565873` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype` AS `bi_2440282083506678752` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey` AS `bi_5524861625849511082` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid` AS `bi_13360343267273546668` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode` AS `bi_13600932575276159557` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname` AS `bi_10699817008190601050` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short` AS `bi_15916860084426853186` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode` AS `bi_4007708937737028237` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname` AS `bi_7467729968303243062` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short` AS `bi_16247278283018779660` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` AS `bi_14123165879102550317`  FROM (SELECT `temp_sql_wrapper_table`.`rowkey` AS `rowkey` , `temp_sql_wrapper_table`.`creator` AS `creator` , `temp_sql_wrapper_table`.`created` AS `created` , `temp_sql_wrapper_table`.`editor` AS `editor` , `temp_sql_wrapper_table`.`edited` AS `edited` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`declarecode` AS `declarecode` , `temp_sql_wrapper_table`.`code` AS `code` , `temp_sql_wrapper_table`.`interiorcode` AS `interiorcode` , `temp_sql_wrapper_table`.`choicetypename` AS `choicetypename` , `temp_sql_wrapper_table`.`name` AS `name` , `temp_sql_wrapper_table`.`objectssumtypename` AS `objectssumtypename` , `temp_sql_wrapper_table`.`typename` AS `typename` , `temp_sql_wrapper_table`.`subtypename` AS `subtypename` , `temp_sql_wrapper_table`.`endtypename` AS `endtypename` , `temp_sql_wrapper_table`.`ourstatusname` AS `ourstatusname` , `temp_sql_wrapper_table`.`fundditchname` AS `fundditchname` , `temp_sql_wrapper_table`.`subfundditchname` AS `subfundditchname` , `temp_sql_wrapper_table`.`fundallocationname` AS `fundallocationname` , `temp_sql_wrapper_table`.`deptidname` AS `deptidname` , `temp_sql_wrapper_table`.`dependlaw` AS `dependlaw` , `temp_sql_wrapper_table`.`startperformingdate` AS `startperformingdate` , `temp_sql_wrapper_table`.`endperformingdate` AS `endperformingdate` , `temp_sql_wrapper_table`.`performfinishdate` AS `performfinishdate` , `temp_sql_wrapper_table`.`performfinishcomment` AS `performfinishcomment` , `temp_sql_wrapper_table`.`remark` AS `remark` , `temp_sql_wrapper_table`.`undertakerphone` AS `undertakerphone` , `temp_sql_wrapper_table`.`undertakername` AS `undertakername` , `temp_sql_wrapper_table`.`undertakeropinion` AS `undertakeropinion` , `temp_sql_wrapper_table`.`undertakedeptname` AS `undertakedeptname` , `temp_sql_wrapper_table`.`deptchargername` AS `deptchargername` , `temp_sql_wrapper_table`.`submitteddate` AS `submitteddate` , `temp_sql_wrapper_table`.`createdate` AS `createdate` , `temp_sql_wrapper_table`.`modifydate` AS `modifydate` , `temp_sql_wrapper_table`.`localcode` AS `localcode` , `temp_sql_wrapper_table`.`frameworkname` AS `frameworkname` , `temp_sql_wrapper_table`.`notbiddingreasondetail` AS `notbiddingreasondetail` , `temp_sql_wrapper_table`.`connectedtransactionsname` AS `connectedtransactionsname` , `temp_sql_wrapper_table`.`performanceid` AS `performanceid` , `temp_sql_wrapper_table`.`relatormodel_counterpartyname` AS `relatormodel_counterpartyname` , `temp_sql_wrapper_table`.`relatormodel_orgtype` AS `relatormodel_orgtype` , `temp_sql_wrapper_table`.`relatormodel_rowkey` AS `relatormodel_rowkey` , `temp_sql_wrapper_table`.`signexaminationfileid` AS `signexaminationfileid` , `temp_sql_wrapper_table`.`groupcode` AS `groupcode` , `temp_sql_wrapper_table`.`groupname` AS `groupname` , `temp_sql_wrapper_table`.`groupname_short` AS `groupname_short` , `temp_sql_wrapper_table`.`regcode` AS `regcode` , `temp_sql_wrapper_table`.`regname` AS `regname` , `temp_sql_wrapper_table`.`regname_short` AS `regname_short` , `temp_sql_wrapper_table`.`etl_date` AS `etl_date`  FROM (SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`created`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`code`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`name`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` FROM `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120` `cnpc_view_ctms_v2_b_contractinfo_c120`  LIMIT 1000 ) `temp_sql_wrapper_table`) `cnpc_view_ctms_v2_b_contractinfo_c120` LIMIT 1200001 
I0825 11:49:04.185699 53817 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:49:04.187809 53817 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:49:04.190325 53817 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:49:04.192807 53817 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:49:04.204687 53817 Frontend.java:947] Analysis finished.
I0825 11:49:04.224560 53817 admission-controller.cc:508] Schedule for id=f642676286782544:a6650bcc00000000 in pool_name=root.default cluster_mem_needed=16.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
I0825 11:49:04.226052 53817 admission-controller.cc:513] Stats: agg_num_running=10, agg_num_queued=0, agg_mem_reserved=400.00 GB,  local_host(local_mem_admitted=160.00 GB, num_admitted_running=4, num_queued=0, backend_mem_reserved=80.00 GB)
I0825 11:49:04.226307 53817 admission-controller.cc:529] Admitted query id=f642676286782544:a6650bcc00000000
I0825 11:49:04.226557 53817 coordinator.cc:93] Exec() query_id=f642676286782544:a6650bcc00000000 stmt=SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey` AS `bi_16209772373942822610` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator` AS `bi_7173110153481771205` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`created` AS `bi_13491404487973529010` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor` AS `bi_16709338949652660965` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited` AS `bi_7778611651735101528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t` AS `bi_5365439428354097443` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode` AS `bi_17739814079848908328` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`code` AS `bi_2232887874484344045` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode` AS `bi_369040516142209005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename` AS `bi_6559770015537514515` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`name` AS `bi_15189533194949851777` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename` AS `bi_7541878364736470844` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename` AS `bi_5792701378059420076` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename` AS `bi_3349638123191173855` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename` AS `bi_15445715632339295217` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname` AS `bi_9114563080665146699` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname` AS `bi_13865388329565152770` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname` AS `bi_12093476229320587287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname` AS `bi_5623662814544693635` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname` AS `bi_13683947135958082930` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw` AS `bi_11924957536007553338` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate` AS `bi_614967852965536978` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate` AS `bi_5003822878387321743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate` AS `bi_6413940051808780525` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment` AS `bi_11216260561419591329` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark` AS `bi_15719283721382345906` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone` AS `bi_2135828979746422287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername` AS `bi_8234557137695700893` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion` AS `bi_5133013160763149225` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname` AS `bi_2661014466711632970` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername` AS `bi_13689588754024198241` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate` AS `bi_11029029363983356005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate` AS `bi_6920746512342794880` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate` AS `bi_1980803134228074743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode` AS `bi_16284813439853843418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname` AS `bi_4893616353618505239` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail` AS `bi_7824035878402166299` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname` AS `bi_17834913520635724437` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid` AS `bi_1963530120962417240` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname` AS `bi_5127572173810565873` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype` AS `bi_2440282083506678752` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey` AS `bi_5524861625849511082` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid` AS `bi_13360343267273546668` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode` AS `bi_13600932575276159557` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname` AS `bi_10699817008190601050` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short` AS `bi_15916860084426853186` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode` AS `bi_4007708937737028237` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname` AS `bi_7467729968303243062` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short` AS `bi_16247278283018779660` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` AS `bi_14123165879102550317`  FROM (SELECT `temp_sql_wrapper_table`.`rowkey` AS `rowkey` , `temp_sql_wrapper_table`.`creator` AS `creator` , `temp_sql_wrapper_table`.`created` AS `created` , `temp_sql_wrapper_table`.`editor` AS `editor` , `temp_sql_wrapper_table`.`edited` AS `edited` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`declarecode` AS `declarecode` , `temp_sql_wrapper_table`.`code` AS `code` , `temp_sql_wrapper_table`.`interiorcode` AS `interiorcode` , `temp_sql_wrapper_table`.`choicetypename` AS `choicetypename` , `temp_sql_wrapper_table`.`name` AS `name` , `temp_sql_wrapper_table`.`objectssumtypename` AS `objectssumtypename` , `temp_sql_wrapper_table`.`typename` AS `typename` , `temp_sql_wrapper_table`.`subtypename` AS `subtypename` , `temp_sql_wrapper_table`.`endtypename` AS `endtypename` , `temp_sql_wrapper_table`.`ourstatusname` AS `ourstatusname` , `temp_sql_wrapper_table`.`fundditchname` AS `fundditchname` , `temp_sql_wrapper_table`.`subfundditchname` AS `subfundditchname` , `temp_sql_wrapper_table`.`fundallocationname` AS `fundallocationname` , `temp_sql_wrapper_table`.`deptidname` AS `deptidname` , `temp_sql_wrapper_table`.`dependlaw` AS `dependlaw` , `temp_sql_wrapper_table`.`startperformingdate` AS `startperformingdate` , `temp_sql_wrapper_table`.`endperformingdate` AS `endperformingdate` , `temp_sql_wrapper_table`.`performfinishdate` AS `performfinishdate` , `temp_sql_wrapper_table`.`performfinishcomment` AS `performfinishcomment` , `temp_sql_wrapper_table`.`remark` AS `remark` , `temp_sql_wrapper_table`.`undertakerphone` AS `undertakerphone` , `temp_sql_wrapper_table`.`undertakername` AS `undertakername` , `temp_sql_wrapper_table`.`undertakeropinion` AS `undertakeropinion` , `temp_sql_wrapper_table`.`undertakedeptname` AS `undertakedeptname` , `temp_sql_wrapper_table`.`deptchargername` AS `deptchargername` , `temp_sql_wrapper_table`.`submitteddate` AS `submitteddate` , `temp_sql_wrapper_table`.`createdate` AS `createdate` , `temp_sql_wrapper_table`.`modifydate` AS `modifydate` , `temp_sql_wrapper_table`.`localcode` AS `localcode` , `temp_sql_wrapper_table`.`frameworkname` AS `frameworkname` , `temp_sql_wrapper_table`.`notbiddingreasondetail` AS `notbiddingreasondetail` , `temp_sql_wrapper_table`.`connectedtransactionsname` AS `connectedtransactionsname` , `temp_sql_wrapper_table`.`performanceid` AS `performanceid` , `temp_sql_wrapper_table`.`relatormodel_counterpartyname` AS `relatormodel_counterpartyname` , `temp_sql_wrapper_table`.`relatormodel_orgtype` AS `relatormodel_orgtype` , `temp_sql_wrapper_table`.`relatormodel_rowkey` AS `relatormodel_rowkey` , `temp_sql_wrapper_table`.`signexaminationfileid` AS `signexaminationfileid` , `temp_sql_wrapper_table`.`groupcode` AS `groupcode` , `temp_sql_wrapper_table`.`groupname` AS `groupname` , `temp_sql_wrapper_table`.`groupname_short` AS `groupname_short` , `temp_sql_wrapper_table`.`regcode` AS `regcode` , `temp_sql_wrapper_table`.`regname` AS `regname` , `temp_sql_wrapper_table`.`regname_short` AS `regname_short` , `temp_sql_wrapper_table`.`etl_date` AS `etl_date`  FROM (SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`created`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`code`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`name`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` FROM `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120` `cnpc_view_ctms_v2_b_contractinfo_c120`  LIMIT 1000 ) `temp_sql_wrapper_table`) `cnpc_view_ctms_v2_b_contractinfo_c120` LIMIT 1200001 
I0825 11:49:04.228379 53817 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:49:04.228893 53817 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:49:04.230806 53817 coordinator.cc:349] starting execution on 2 backends for query_id=f642676286782544:a6650bcc00000000
I0825 11:49:04.237345 45240 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=f642676286782544:a6650bcc00000000
I0825 11:49:04.238229 45240 query-exec-mgr.cc:46] StartQueryFInstances() query_id=f642676286782544:a6650bcc00000000 coord=e4bdhpp025:22000
I0825 11:49:04.238478 45240 query-state.cc:178] Buffer pool limit for f642676286782544:a6650bcc00000000: 6871947673
I0825 11:49:04.239043 45240 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query f642676286782544:a6650bcc00000000
I0825 11:49:04.240903 53829 query-state.cc:300] StartFInstances(): query_id=f642676286782544:a6650bcc00000000 #instances=1
I0825 11:49:04.241626 53817 coordinator.cc:362] started execution on 2 backends for query_id=f642676286782544:a6650bcc00000000
I0825 11:49:04.241776 53829 query-state.cc:313] descriptor table for query=f642676286782544:a6650bcc00000000
tuples:
Tuple(id=0 size=807 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=800 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=800 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=TIMESTAMP col_path=[2] offset=32 null=(offset=800 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[3] offset=48 null=(offset=800 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=TIMESTAMP col_path=[4] offset=64 null=(offset=800 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=STRING col_path=[8] offset=80 null=(offset=800 mask=20) slot_idx=5 field_idx=-1), Slot(id=6 type=STRING col_path=[9] offset=96 null=(offset=800 mask=40) slot_idx=6 field_idx=-1), Slot(id=7 type=STRING col_path=[10] offset=112 null=(offset=800 mask=80) slot_idx=7 field_idx=-1), Slot(id=8 type=STRING col_path=[11] offset=128 null=(offset=801 mask=1) slot_idx=8 field_idx=-1), Slot(id=9 type=STRING col_path=[13] offset=144 null=(offset=801 mask=2) slot_idx=9 field_idx=-1), Slot(id=10 type=STRING col_path=[15] offset=160 null=(offset=801 mask=4) slot_idx=10 field_idx=-1), Slot(id=11 type=STRING col_path=[19] offset=176 null=(offset=801 mask=8) slot_idx=11 field_idx=-1), Slot(id=12 type=STRING col_path=[21] offset=192 null=(offset=801 mask=10) slot_idx=12 field_idx=-1), Slot(id=13 type=STRING col_path=[23] offset=208 null=(offset=801 mask=20) slot_idx=13 field_idx=-1), Slot(id=14 type=STRING col_path=[25] offset=224 null=(offset=801 mask=40) slot_idx=14 field_idx=-1), Slot(id=15 type=STRING col_path=[27] offset=240 null=(offset=801 mask=80) slot_idx=15 field_idx=-1), Slot(id=16 type=STRING col_path=[32] offset=256 null=(offset=802 mask=1) slot_idx=16 field_idx=-1), Slot(id=17 type=STRING col_path=[34] offset=272 null=(offset=802 mask=2) slot_idx=17 field_idx=-1), Slot(id=18 type=STRING col_path=[36] offset=288 null=(offset=802 mask=4) slot_idx=18 field_idx=-1), Slot(id=19 type=STRING col_path=[38] offset=304 null=(offset=802 mask=8) slot_idx=19 field_idx=-1), Slot(id=20 type=STRING col_path=[39] offset=320 null=(offset=802 mask=10) slot_idx=20 field_idx=-1), Slot(id=21 type=TIMESTAMP col_path=[40] offset=336 null=(offset=802 mask=20) slot_idx=21 field_idx=-1), Slot(id=22 type=TIMESTAMP col_path=[41] offset=352 null=(offset=802 mask=40) slot_idx=22 field_idx=-1), Slot(id=23 type=TIMESTAMP col_path=[42] offset=368 null=(offset=802 mask=80) slot_idx=23 field_idx=-1), Slot(id=24 type=STRING col_path=[43] offset=384 null=(offset=803 mask=1) slot_idx=24 field_idx=-1), Slot(id=25 type=STRING col_path=[44] offset=400 null=(offset=803 mask=2) slot_idx=25 field_idx=-1), Slot(id=26 type=STRING col_path=[46] offset=416 null=(offset=803 mask=4) slot_idx=26 field_idx=-1), Slot(id=27 type=STRING col_path=[47] offset=432 null=(offset=803 mask=8) slot_idx=27 field_idx=-1), Slot(id=28 type=STRING col_path=[48] offset=448 null=(offset=803 mask=10) slot_idx=28 field_idx=-1), Slot(id=29 type=STRING col_path=[50] offset=464 null=(offset=803 mask=20) slot_idx=29 field_idx=-1), Slot(id=30 type=STRING col_path=[52] offset=480 null=(offset=803 mask=40) slot_idx=30 field_idx=-1), Slot(id=31 type=TIMESTAMP col_path=[53] offset=496 null=(offset=803 mask=80) slot_idx=31 field_idx=-1), Slot(id=32 type=TIMESTAMP col_path=[54] offset=512 null=(offset=804 mask=1) slot_idx=32 field_idx=-1), Slot(id=33 type=TIMESTAMP col_path=[55] offset=528 null=(offset=804 mask=2) slot_idx=33 field_idx=-1), Slot(id=34 type=STRING col_path=[58] offset=544 null=(offset=804 mask=4) slot_idx=34 field_idx=-1), Slot(id=35 type=STRING col_path=[68] offset=560 null=(offset=804 mask=8) slot_idx=35 field_idx=-1), Slot(id=36 type=STRING col_path=[70] offset=576 null=(offset=804 mask=10) slot_idx=36 field_idx=-1), Slot(id=37 type=STRING col_path=[71] offset=592 null=(offset=804 mask=20) slot_idx=37 field_idx=-1), Slot(id=38 type=STRING col_path=[74] offset=608 null=(offset=804 mask=40) slot_idx=38 field_idx=-1), Slot(id=39 type=STRING col_path=[75] offset=624 null=(offset=804 mask=80) slot_idx=39 field_idx=-1), Slot(id=40 type=STRING col_path=[76] offset=640 null=(offset=805 mask=1) slot_idx=40 field_idx=-1), Slot(id=41 type=STRING col_path=[77] offset=656 null=(offset=805 mask=2) slot_idx=41 field_idx=-1), Slot(id=42 type=STRING col_path=[81] offset=672 null=(offset=805 mask=4) slot_idx=42 field_idx=-1), Slot(id=43 type=STRING col_path=[83] offset=688 null=(offset=805 mask=8) slot_idx=43 field_idx=-1), Slot(id=44 type=STRING col_path=[84] offset=704 null=(offset=805 mask=10) slot_idx=44 field_idx=-1), Slot(id=45 type=STRING col_path=[85] offset=720 null=(offset=805 mask=20) slot_idx=45 field_idx=-1), Slot(id=46 type=STRING col_path=[86] offset=736 null=(offset=805 mask=40) slot_idx=46 field_idx=-1), Slot(id=47 type=STRING col_path=[87] offset=752 null=(offset=805 mask=80) slot_idx=47 field_idx=-1), Slot(id=48 type=STRING col_path=[88] offset=768 null=(offset=806 mask=1) slot_idx=48 field_idx=-1), Slot(id=49 type=TIMESTAMP col_path=[89] offset=784 null=(offset=806 mask=2) slot_idx=49 field_idx=-1)] tuple_path=[])
I0825 11:49:04.253576 53830 query-state.cc:395] Executing instance. instance_id=f642676286782544:a6650bcc00000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=1 #in-flight=22
I0825 11:49:04.263167 53829 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f642676286782544:a6650bcc00000000 refcnt=3
I0825 11:49:04.274425 53817 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "D%x\x86bgB\xf6\x00\x00\x00\x00\xcc\ve\xa6",
      02: secret (string) = "D%x\x86bgB\xf6\x00\x00\x00\x00\xcc\ve\xa6",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:04.393604 53350 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:04.399988 53350 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:04.414829 53834 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:04.422230 53834 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:04.443431 53350 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:04.444250 53350 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:04.457790 53837 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:04.460598 53837 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:04.480504 53835 query-exec-mgr.cc:95] QueryState: query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:04.485625 53835 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:04.502032 53350 query-exec-mgr.cc:95] QueryState: query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:04.504554 53350 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:04.514724 53841 query-exec-mgr.cc:95] QueryState: query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:04.523313 53841 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:04.536798 53834 query-exec-mgr.cc:95] QueryState: query_id=f642676286782544:a6650bcc00000000 refcnt=3
I0825 11:49:04.537555 53834 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f642676286782544:a6650bcc00000000 refcnt=3
I0825 11:49:05.070106 51940 coordinator.cc:689] Backend completed:  host=e4bdhpp021:22000 remaining=1 query_id=f642676286782544:a6650bcc00000000
I0825 11:49:05.072940 51940 coordinator-backend-state.cc:226] query_id=f642676286782544:a6650bcc00000000: first in-progress backend: e4bdhpp025:22000
I0825 11:49:05.073328 53817 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=f642676286782544:a6650bcc00000000
I0825 11:49:05.074797 53817 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[50] {
      [0] = TColumnDesc {
        01: columnName (string) = "bi_16209772373942822610",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "bi_7173110153481771205",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "bi_13491404487973529010",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "bi_16709338949652660965",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "bi_7778611651735101528",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "bi_5365439428354097443",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "bi_17739814079848908328",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 6,
      },
      [7] = TColumnDesc {
        01: columnName (string) = "bi_2232887874484344045",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 7,
      },
      [8] = TColumnDesc {
        01: columnName (string) = "bi_369040516142209005",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 8,
      },
      [9] = TColumnDesc {
        01: columnName (string) = "bi_6559770015537514515",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 9,
      },
      [10] = TColumnDesc {
        01: columnName (string) = "bi_15189533194949851777",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 10,
      },
      [11] = TColumnDesc {
        01: columnName (string) = "bi_7541878364736470844",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 11,
      },
      [12] = TColumnDesc {
        01: columnName (string) = "bi_5792701378059420076",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 12,
      },
      [13] = TColumnDesc {
        01: columnName (string) = "bi_3349638123191173855",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 13,
      },
      [14] = TColumnDesc {
        01: columnName (string) = "bi_15445715632339295217",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 14,
      },
      [15] = TColumnDesc {
        01: columnName (string) = "bi_9114563080665146699",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 15,
      },
      [16] = TColumnDesc {
        01: columnName (string) = "bi_13865388329565152770",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 16,
      },
      [17] = TColumnDesc {
        01: columnName (string) = "bi_12093476229320587287",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 17,
      },
      [18] = TColumnDesc {
        01: columnName (string) = "bi_5623662814544693635",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 18,
      },
      [19] = TColumnDesc {
        01: columnName (string) = "bi_13683947135958082930",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 19,
      },
      [20] = TColumnDesc {
        01: columnName (string) = "bi_11924957536007553338",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 20,
      },
      [21] = TColumnDesc {
        01: columnName (string) = "bi_614967852965536978",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 21,
      },
      [22] = TColumnDesc {
        01: columnName (string) = "bi_5003822878387321743",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 22,
      },
      [23] = TColumnDesc {
        01: columnName (string) = "bi_6413940051808780525",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 23,
      },
      [24] = TColumnDesc {
        01: columnName (string) = "bi_11216260561419591329",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 24,
      },
      [25] = TColumnDesc {
        01: columnName (string) = "bi_15719283721382345906",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 25,
      },
      [26] = TColumnDesc {
        01: columnName (string) = "bi_2135828979746422287",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 26,
      },
      [27] = TColumnDesc {
        01: columnName (string) = "bi_8234557137695700893",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 27,
      },
      [28] = TColumnDesc {
        01: columnName (string) = "bi_5133013160763149225",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 28,
      },
      [29] = TColumnDesc {
        01: columnName (string) = "bi_2661014466711632970",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 29,
      },
      [30] = TColumnDesc {
        01: columnName (string) = "bi_13689588754024198241",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 30,
      },
      [31] = TColumnDesc {
        01: columnName (string) = "bi_11029029363983356005",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 31,
      },
      [32] = TColumnDesc {
        01: columnName (string) = "bi_6920746512342794880",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 32,
      },
      [33] = TColumnDesc {
        01: columnName (string) = "bi_1980803134228074743",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 33,
      },
      [34] = TColumnDesc {
        01: columnName (string) = "bi_16284813439853843418",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 34,
      },
      [35] = TColumnDesc {
        01: columnName (string) = "bi_4893616353618505239",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 35,
      },
      [36] = TColumnDesc {
        01: columnName (string) = "bi_7824035878402166299",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 36,
      },
      [37] = TColumnDesc {
        01: columnName (string) = "bi_17834913520635724437",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 37,
      },
      [38] = TColumnDesc {
        01: columnName (string) = "bi_1963530120962417240",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 38,
      },
      [39] = TColumnDesc {
        01: columnName (string) = "bi_5127572173810565873",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 39,
      },
      [40] = TColumnDesc {
        01: columnName (string) = "bi_2440282083506678752",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 40,
      },
      [41] = TColumnDesc {
        01: columnName (string) = "bi_5524861625849511082",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 41,
      },
      [42] = TColumnDesc {
        01: columnName (string) = "bi_13360343267273546668",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 42,
      },
      [43] = TColumnDesc {
        01: columnName (string) = "bi_13600932575276159557",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 43,
      },
      [44] = TColumnDesc {
        01: columnName (string) = "bi_10699817008190601050",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 44,
      },
      [45] = TColumnDesc {
        01: columnName (string) = "bi_15916860084426853186",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 45,
      },
      [46] = TColumnDesc {
        01: columnName (string) = "bi_4007708937737028237",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 46,
      },
      [47] = TColumnDesc {
        01: columnName (string) = "bi_7467729968303243062",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 47,
      },
      [48] = TColumnDesc {
        01: columnName (string) = "bi_16247278283018779660",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 48,
      },
      [49] = TColumnDesc {
        01: columnName (string) = "bi_14123165879102550317",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 49,
      },
    },
  },
}
I0825 11:49:05.192533 53830 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=f642676286782544:a6650bcc00000000, node=1
I0825 11:49:05.192463 53817 coordinator.cc:527] All backends finished successfully. query_id=f642676286782544:a6650bcc00000000
I0825 11:49:05.193853 53830 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=f642676286782544:a6650bcc00000000 node_id=1
I0825 11:49:05.194610 53817 coordinator.cc:783] Release admission control resources for query_id=f642676286782544:a6650bcc00000000
I0825 11:49:05.194797 53830 query-state.cc:403] Instance completed. instance_id=f642676286782544:a6650bcc00000000 #in-flight=21 status=OK
I0825 11:49:05.195787 53830 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f642676286782544:a6650bcc00000000 refcnt=2
I0825 11:49:05.249053 53817 impala-hs2-server.cc:683] CloseOperation(): query_id=f642676286782544:a6650bcc00000000
I0825 11:49:05.249624 53817 impala-server.cc:1015] UnregisterQuery(): query_id=f642676286782544:a6650bcc00000000
I0825 11:49:05.250149 53817 impala-server.cc:1102] Cancel(): query_id=f642676286782544:a6650bcc00000000
I0825 11:49:05.250478 53817 coordinator.cc:629] Cancel() query_id=f642676286782544:a6650bcc00000000
I0825 11:49:05.250744 53817 coordinator.cc:639] CancelBackends() query_id=f642676286782544:a6650bcc00000000, tried to cancel 0 backends
I0825 11:49:05.296809 53817 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f642676286782544:a6650bcc00000000 refcnt=1
I0825 11:49:05.325837 53817 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = ")7w\x92\xf3\xfbC\xcc\xbe\xe2\x1d\xe5\x86\xdb\x9eD",
      02: secret (string) = "\x14^\xa3\xfc\xb7IC\x1d\xb9\x0e\x82\xbf\xf6i^y",
    },
  },
}
I0825 11:49:05.333642 53817 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:58070 closed, closing 1 associated session(s)
I0825 11:49:06.092396 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:49:06.103116 53863 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:49:06.127151 53863 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "1\xc9\xcdV\xc8mK\x06\xbf\x8b;\xdf4\xe5\xe1\xe9",
      02: secret (string) = "\xa8\t\x7f\xd5}\xbfF\xa7\xab\x13\xd6fh\x96\xfb\xd1",
    },
  },
  02: statement (string) = "use dw20",
  04: runAsync (bool) = true,
}
I0825 11:49:06.127780 53863 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "1\xc9\xcdV\xc8mK\x06\xbf\x8b;\xdf4\xe5\xe1\xe9",
      02: secret (string) = "\xa8\t\x7f\xd5}\xbfF\xa7\xab\x13\xd6fh\x96\xfb\xd1",
    },
  },
  02: statement (string) = "use dw20",
  04: runAsync (bool) = true,
}
I0825 11:49:06.144150 53863 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:06.173923 53863 Frontend.java:935] Analyzing query: use dw20
I0825 11:49:06.189711 53863 Frontend.java:947] Analysis finished.
I0825 11:49:06.362023 53863 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\r\x9e\xeb\xf9`@N+\x00\x00\x00\x00:DC:",
      02: secret (string) = "\r\x9e\xeb\xf9`@N+\x00\x00\x00\x00:DC:",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:49:06.382728 53863 impala-hs2-server.cc:683] CloseOperation(): query_id=2b4e4060f9eb9e0d:3a43443a00000000
I0825 11:49:06.386605 53863 impala-server.cc:1015] UnregisterQuery(): query_id=2b4e4060f9eb9e0d:3a43443a00000000
I0825 11:49:06.387845 53863 impala-server.cc:1102] Cancel(): query_id=2b4e4060f9eb9e0d:3a43443a00000000
I0825 11:49:06.414243 53863 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "1\xc9\xcdV\xc8mK\x06\xbf\x8b;\xdf4\xe5\xe1\xe9",
      02: secret (string) = "\xa8\t\x7f\xd5}\xbfF\xa7\xab\x13\xd6fh\x96\xfb\xd1",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:49:06.415133 53863 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "1\xc9\xcdV\xc8mK\x06\xbf\x8b;\xdf4\xe5\xe1\xe9",
      02: secret (string) = "\xa8\t\x7f\xd5}\xbfF\xa7\xab\x13\xd6fh\x96\xfb\xd1",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:49:06.416404 53863 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:06.431028 53863 Frontend.java:935] Analyzing query: set mem_limit='8g'
I0825 11:49:06.431654 53863 Frontend.java:947] Analysis finished.
I0825 11:49:06.435192 53863 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = ":\x94\xc0\xca\x15\\E\a\x00\x00\x00\x00\x9d\x1f\x98r",
      02: secret (string) = ":\x94\xc0\xca\x15\\E\a\x00\x00\x00\x00\x9d\x1f\x98r",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:06.442602 53863 impala-hs2-server.cc:683] CloseOperation(): query_id=7455c15cac0943a:72981f9d00000000
I0825 11:49:06.442859 53863 impala-server.cc:1015] UnregisterQuery(): query_id=7455c15cac0943a:72981f9d00000000
I0825 11:49:06.443635 53863 impala-server.cc:1102] Cancel(): query_id=7455c15cac0943a:72981f9d00000000
I0825 11:49:06.447269 53863 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "1\xc9\xcdV\xc8mK\x06\xbf\x8b;\xdf4\xe5\xe1\xe9",
      02: secret (string) = "\xa8\t\x7f\xd5}\xbfF\xa7\xab\x13\xd6fh\x96\xfb\xd1",
    },
  },
  02: statement (string) = "DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`",
  04: runAsync (bool) = true,
}
I0825 11:49:06.447952 53863 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "1\xc9\xcdV\xc8mK\x06\xbf\x8b;\xdf4\xe5\xe1\xe9",
      02: secret (string) = "\xa8\t\x7f\xd5}\xbfF\xa7\xab\x13\xd6fh\x96\xfb\xd1",
    },
  },
  02: statement (string) = "DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`",
  04: runAsync (bool) = true,
}
I0825 11:49:06.450937 53863 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:06.474682 53863 Frontend.java:935] Analyzing query: DESCRIBE `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120`
I0825 11:49:06.476444 53863 Frontend.java:947] Analysis finished.
I0825 11:49:06.669804 53863 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xaf\xba\x04J=\xe5Jh\x00\x00\x00\x001'\x1d\xc2",
      02: secret (string) = "\xaf\xba\x04J=\xe5Jh\x00\x00\x00\x001'\x1d\xc2",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:06.675004 53863 impala-hs2-server.cc:683] CloseOperation(): query_id=684ae53d4a04baaf:c21d273100000000
I0825 11:49:06.675515 53863 impala-server.cc:1015] UnregisterQuery(): query_id=684ae53d4a04baaf:c21d273100000000
I0825 11:49:06.675938 53863 impala-server.cc:1102] Cancel(): query_id=684ae53d4a04baaf:c21d273100000000
I0825 11:49:06.685636 53863 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "1\xc9\xcdV\xc8mK\x06\xbf\x8b;\xdf4\xe5\xe1\xe9",
      02: secret (string) = "\xa8\t\x7f\xd5}\xbfF\xa7\xab\x13\xd6fh\x96\xfb\xd1",
    },
  },
  02: statement (string) = "SELECT COUNT(1) [...](10497)",
  04: runAsync (bool) = true,
}
I0825 11:49:06.687382 53863 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "1\xc9\xcdV\xc8mK\x06\xbf\x8b;\xdf4\xe5\xe1\xe9",
      02: secret (string) = "\xa8\t\x7f\xd5}\xbfF\xa7\xab\x13\xd6fh\x96\xfb\xd1",
    },
  },
  02: statement (string) = "SELECT COUNT(1) [...](10497)",
  04: runAsync (bool) = true,
}
I0825 11:49:06.694260 53863 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:06.707867 53863 Frontend.java:935] Analyzing query: SELECT COUNT(1) AS `EXPR_1`  FROM (SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey` AS `bi_16209772373942822610` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator` AS `bi_7173110153481771205` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`created` AS `bi_13491404487973529010` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor` AS `bi_16709338949652660965` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited` AS `bi_7778611651735101528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t` AS `bi_5365439428354097443` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode` AS `bi_17739814079848908328` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`code` AS `bi_2232887874484344045` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode` AS `bi_369040516142209005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename` AS `bi_6559770015537514515` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`name` AS `bi_15189533194949851777` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename` AS `bi_7541878364736470844` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename` AS `bi_5792701378059420076` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename` AS `bi_3349638123191173855` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename` AS `bi_15445715632339295217` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname` AS `bi_9114563080665146699` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname` AS `bi_13865388329565152770` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname` AS `bi_12093476229320587287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname` AS `bi_5623662814544693635` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname` AS `bi_13683947135958082930` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw` AS `bi_11924957536007553338` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate` AS `bi_614967852965536978` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate` AS `bi_5003822878387321743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate` AS `bi_6413940051808780525` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment` AS `bi_11216260561419591329` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark` AS `bi_15719283721382345906` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone` AS `bi_2135828979746422287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername` AS `bi_8234557137695700893` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion` AS `bi_5133013160763149225` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname` AS `bi_2661014466711632970` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername` AS `bi_13689588754024198241` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate` AS `bi_11029029363983356005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate` AS `bi_6920746512342794880` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate` AS `bi_1980803134228074743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode` AS `bi_16284813439853843418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname` AS `bi_4893616353618505239` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail` AS `bi_7824035878402166299` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname` AS `bi_17834913520635724437` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid` AS `bi_1963530120962417240` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname` AS `bi_5127572173810565873` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype` AS `bi_2440282083506678752` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey` AS `bi_5524861625849511082` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid` AS `bi_13360343267273546668` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode` AS `bi_13600932575276159557` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname` AS `bi_10699817008190601050` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short` AS `bi_15916860084426853186` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode` AS `bi_4007708937737028237` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname` AS `bi_7467729968303243062` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short` AS `bi_16247278283018779660` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` AS `bi_14123165879102550317`  FROM (SELECT `temp_sql_wrapper_table`.`rowkey` AS `rowkey` , `temp_sql_wrapper_table`.`creator` AS `creator` , `temp_sql_wrapper_table`.`created` AS `created` , `temp_sql_wrapper_table`.`editor` AS `editor` , `temp_sql_wrapper_table`.`edited` AS `edited` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`declarecode` AS `declarecode` , `temp_sql_wrapper_table`.`code` AS `code` , `temp_sql_wrapper_table`.`interiorcode` AS `interiorcode` , `temp_sql_wrapper_table`.`choicetypename` AS `choicetypename` , `temp_sql_wrapper_table`.`name` AS `name` , `temp_sql_wrapper_table`.`objectssumtypename` AS `objectssumtypename` , `temp_sql_wrapper_table`.`typename` AS `typename` , `temp_sql_wrapper_table`.`subtypename` AS `subtypename` , `temp_sql_wrapper_table`.`endtypename` AS `endtypename` , `temp_sql_wrapper_table`.`ourstatusname` AS `ourstatusname` , `temp_sql_wrapper_table`.`fundditchname` AS `fundditchname` , `temp_sql_wrapper_table`.`subfundditchname` AS `subfundditchname` , `temp_sql_wrapper_table`.`fundallocationname` AS `fundallocationname` , `temp_sql_wrapper_table`.`deptidname` AS `deptidname` , `temp_sql_wrapper_table`.`dependlaw` AS `dependlaw` , `temp_sql_wrapper_table`.`startperformingdate` AS `startperformingdate` , `temp_sql_wrapper_table`.`endperformingdate` AS `endperformingdate` , `temp_sql_wrapper_table`.`performfinishdate` AS `performfinishdate` , `temp_sql_wrapper_table`.`performfinishcomment` AS `performfinishcomment` , `temp_sql_wrapper_table`.`remark` AS `remark` , `temp_sql_wrapper_table`.`undertakerphone` AS `undertakerphone` , `temp_sql_wrapper_table`.`undertakername` AS `undertakername` , `temp_sql_wrapper_table`.`undertakeropinion` AS `undertakeropinion` , `temp_sql_wrapper_table`.`undertakedeptname` AS `undertakedeptname` , `temp_sql_wrapper_table`.`deptchargername` AS `deptchargername` , `temp_sql_wrapper_table`.`submitteddate` AS `submitteddate` , `temp_sql_wrapper_table`.`createdate` AS `createdate` , `temp_sql_wrapper_table`.`modifydate` AS `modifydate` , `temp_sql_wrapper_table`.`localcode` AS `localcode` , `temp_sql_wrapper_table`.`frameworkname` AS `frameworkname` , `temp_sql_wrapper_table`.`notbiddingreasondetail` AS `notbiddingreasondetail` , `temp_sql_wrapper_table`.`connectedtransactionsname` AS `connectedtransactionsname` , `temp_sql_wrapper_table`.`performanceid` AS `performanceid` , `temp_sql_wrapper_table`.`relatormodel_counterpartyname` AS `relatormodel_counterpartyname` , `temp_sql_wrapper_table`.`relatormodel_orgtype` AS `relatormodel_orgtype` , `temp_sql_wrapper_table`.`relatormodel_rowkey` AS `relatormodel_rowkey` , `temp_sql_wrapper_table`.`signexaminationfileid` AS `signexaminationfileid` , `temp_sql_wrapper_table`.`groupcode` AS `groupcode` , `temp_sql_wrapper_table`.`groupname` AS `groupname` , `temp_sql_wrapper_table`.`groupname_short` AS `groupname_short` , `temp_sql_wrapper_table`.`regcode` AS `regcode` , `temp_sql_wrapper_table`.`regname` AS `regname` , `temp_sql_wrapper_table`.`regname_short` AS `regname_short` , `temp_sql_wrapper_table`.`etl_date` AS `etl_date`  FROM (SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`created`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`code`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`name`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` FROM `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120` `cnpc_view_ctms_v2_b_contractinfo_c120`  LIMIT 1000 ) `temp_sql_wrapper_table`) `cnpc_view_ctms_v2_b_contractinfo_c120`) `tableWithoutPaging` 
I0825 11:49:06.721345 53863 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:49:06.722793 53863 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:49:06.735086 53863 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:49:06.736416 53863 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:49:06.743172 53863 Frontend.java:947] Analysis finished.
I0825 11:49:06.755283 53863 admission-controller.cc:508] Schedule for id=684c60a38cf8fe8d:ad995b5300000000 in pool_name=root.default cluster_mem_needed=16.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
W0825 11:49:06.755306 43858 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
I0825 11:49:06.756709 53863 admission-controller.cc:513] Stats: agg_num_running=10, agg_num_queued=0, agg_mem_reserved=400.00 GB,  local_host(local_mem_admitted=160.00 GB, num_admitted_running=4, num_queued=0, backend_mem_reserved=80.00 GB)
I0825 11:49:06.757189 53863 admission-controller.cc:529] Admitted query id=684c60a38cf8fe8d:ad995b5300000000
W0825 11:49:06.757205 43858 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297896886_BP-1820042964-11.11.206.232-1548063025113
I0825 11:49:06.757519 53863 coordinator.cc:93] Exec() query_id=684c60a38cf8fe8d:ad995b5300000000 stmt=SELECT COUNT(1) AS `EXPR_1`  FROM (SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey` AS `bi_16209772373942822610` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator` AS `bi_7173110153481771205` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`created` AS `bi_13491404487973529010` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor` AS `bi_16709338949652660965` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited` AS `bi_7778611651735101528` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t` AS `bi_5365439428354097443` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode` AS `bi_17739814079848908328` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`code` AS `bi_2232887874484344045` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode` AS `bi_369040516142209005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename` AS `bi_6559770015537514515` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`name` AS `bi_15189533194949851777` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename` AS `bi_7541878364736470844` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename` AS `bi_5792701378059420076` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename` AS `bi_3349638123191173855` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename` AS `bi_15445715632339295217` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname` AS `bi_9114563080665146699` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname` AS `bi_13865388329565152770` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname` AS `bi_12093476229320587287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname` AS `bi_5623662814544693635` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname` AS `bi_13683947135958082930` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw` AS `bi_11924957536007553338` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate` AS `bi_614967852965536978` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate` AS `bi_5003822878387321743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate` AS `bi_6413940051808780525` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment` AS `bi_11216260561419591329` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark` AS `bi_15719283721382345906` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone` AS `bi_2135828979746422287` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername` AS `bi_8234557137695700893` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion` AS `bi_5133013160763149225` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname` AS `bi_2661014466711632970` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername` AS `bi_13689588754024198241` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate` AS `bi_11029029363983356005` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate` AS `bi_6920746512342794880` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate` AS `bi_1980803134228074743` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode` AS `bi_16284813439853843418` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname` AS `bi_4893616353618505239` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail` AS `bi_7824035878402166299` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname` AS `bi_17834913520635724437` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid` AS `bi_1963530120962417240` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname` AS `bi_5127572173810565873` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype` AS `bi_2440282083506678752` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey` AS `bi_5524861625849511082` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid` AS `bi_13360343267273546668` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode` AS `bi_13600932575276159557` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname` AS `bi_10699817008190601050` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short` AS `bi_15916860084426853186` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode` AS `bi_4007708937737028237` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname` AS `bi_7467729968303243062` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short` AS `bi_16247278283018779660` , `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` AS `bi_14123165879102550317`  FROM (SELECT `temp_sql_wrapper_table`.`rowkey` AS `rowkey` , `temp_sql_wrapper_table`.`creator` AS `creator` , `temp_sql_wrapper_table`.`created` AS `created` , `temp_sql_wrapper_table`.`editor` AS `editor` , `temp_sql_wrapper_table`.`edited` AS `edited` , `temp_sql_wrapper_table`.`oulabel_t` AS `oulabel_t` , `temp_sql_wrapper_table`.`declarecode` AS `declarecode` , `temp_sql_wrapper_table`.`code` AS `code` , `temp_sql_wrapper_table`.`interiorcode` AS `interiorcode` , `temp_sql_wrapper_table`.`choicetypename` AS `choicetypename` , `temp_sql_wrapper_table`.`name` AS `name` , `temp_sql_wrapper_table`.`objectssumtypename` AS `objectssumtypename` , `temp_sql_wrapper_table`.`typename` AS `typename` , `temp_sql_wrapper_table`.`subtypename` AS `subtypename` , `temp_sql_wrapper_table`.`endtypename` AS `endtypename` , `temp_sql_wrapper_table`.`ourstatusname` AS `ourstatusname` , `temp_sql_wrapper_table`.`fundditchname` AS `fundditchname` , `temp_sql_wrapper_table`.`subfundditchname` AS `subfundditchname` , `temp_sql_wrapper_table`.`fundallocationname` AS `fundallocationname` , `temp_sql_wrapper_table`.`deptidname` AS `deptidname` , `temp_sql_wrapper_table`.`dependlaw` AS `dependlaw` , `temp_sql_wrapper_table`.`startperformingdate` AS `startperformingdate` , `temp_sql_wrapper_table`.`endperformingdate` AS `endperformingdate` , `temp_sql_wrapper_table`.`performfinishdate` AS `performfinishdate` , `temp_sql_wrapper_table`.`performfinishcomment` AS `performfinishcomment` , `temp_sql_wrapper_table`.`remark` AS `remark` , `temp_sql_wrapper_table`.`undertakerphone` AS `undertakerphone` , `temp_sql_wrapper_table`.`undertakername` AS `undertakername` , `temp_sql_wrapper_table`.`undertakeropinion` AS `undertakeropinion` , `temp_sql_wrapper_table`.`undertakedeptname` AS `undertakedeptname` , `temp_sql_wrapper_table`.`deptchargername` AS `deptchargername` , `temp_sql_wrapper_table`.`submitteddate` AS `submitteddate` , `temp_sql_wrapper_table`.`createdate` AS `createdate` , `temp_sql_wrapper_table`.`modifydate` AS `modifydate` , `temp_sql_wrapper_table`.`localcode` AS `localcode` , `temp_sql_wrapper_table`.`frameworkname` AS `frameworkname` , `temp_sql_wrapper_table`.`notbiddingreasondetail` AS `notbiddingreasondetail` , `temp_sql_wrapper_table`.`connectedtransactionsname` AS `connectedtransactionsname` , `temp_sql_wrapper_table`.`performanceid` AS `performanceid` , `temp_sql_wrapper_table`.`relatormodel_counterpartyname` AS `relatormodel_counterpartyname` , `temp_sql_wrapper_table`.`relatormodel_orgtype` AS `relatormodel_orgtype` , `temp_sql_wrapper_table`.`relatormodel_rowkey` AS `relatormodel_rowkey` , `temp_sql_wrapper_table`.`signexaminationfileid` AS `signexaminationfileid` , `temp_sql_wrapper_table`.`groupcode` AS `groupcode` , `temp_sql_wrapper_table`.`groupname` AS `groupname` , `temp_sql_wrapper_table`.`groupname_short` AS `groupname_short` , `temp_sql_wrapper_table`.`regcode` AS `regcode` , `temp_sql_wrapper_table`.`regname` AS `regname` , `temp_sql_wrapper_table`.`regname_short` AS `regname_short` , `temp_sql_wrapper_table`.`etl_date` AS `etl_date`  FROM (SELECT `cnpc_view_ctms_v2_b_contractinfo_c120`.`rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`creator`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`created`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`editor`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`edited`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`oulabel_t`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`declarecode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`code`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`interiorcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`choicetypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`name`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`objectssumtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`typename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endtypename`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`ourstatusname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`subfundditchname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`fundallocationname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptidname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`dependlaw`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`startperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`endperformingdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performfinishcomment`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`remark`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakerphone`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakeropinion`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`undertakedeptname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`deptchargername`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`submitteddate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`createdate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`modifydate`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`localcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`frameworkname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`notbiddingreasondetail`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`connectedtransactionsname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`performanceid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_counterpartyname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_orgtype`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`relatormodel_rowkey`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`signexaminationfileid`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`groupname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regcode`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`regname_short`, `cnpc_view_ctms_v2_b_contractinfo_c120`.`etl_date` FROM `dw20`.`cnpc_view_ctms_v2_b_contractinfo_c120` `cnpc_view_ctms_v2_b_contractinfo_c120`  LIMIT 1000 ) `temp_sql_wrapper_table`) `cnpc_view_ctms_v2_b_contractinfo_c120`) `tableWithoutPaging` 
I0825 11:49:06.759963 53863 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:49:06.760375 53863 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:49:06.760965 53863 coordinator.cc:349] starting execution on 2 backends for query_id=684c60a38cf8fe8d:ad995b5300000000
I0825 11:49:06.763593 45240 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=684c60a38cf8fe8d:ad995b5300000000
I0825 11:49:06.771453 45240 query-exec-mgr.cc:46] StartQueryFInstances() query_id=684c60a38cf8fe8d:ad995b5300000000 coord=e4bdhpp025:22000
I0825 11:49:06.772419 45240 query-state.cc:178] Buffer pool limit for 684c60a38cf8fe8d:ad995b5300000000: 6871947673
I0825 11:49:06.773361 45240 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 684c60a38cf8fe8d:ad995b5300000000
I0825 11:49:06.784286 53871 query-state.cc:300] StartFInstances(): query_id=684c60a38cf8fe8d:ad995b5300000000 #instances=1
I0825 11:49:06.784720 53863 coordinator.cc:362] started execution on 2 backends for query_id=684c60a38cf8fe8d:ad995b5300000000
I0825 11:49:06.789286 53871 query-state.cc:313] descriptor table for query=684c60a38cf8fe8d:ad995b5300000000
tuples:
Tuple(id=4 size=8 slots=[Slot(id=200 type=BIGINT col_path=[] offset=0 null=(offset=0 mask=0) slot_idx=0 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=0 slots=[] tuple_path=[])
I0825 11:49:06.794051 53875 query-state.cc:395] Executing instance. instance_id=684c60a38cf8fe8d:ad995b5300000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=1 #in-flight=22
I0825 11:49:06.803404 53871 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=684c60a38cf8fe8d:ad995b5300000000 refcnt=3
I0825 11:49:06.803419 53875 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=684c60a38cf8fe8d:ad995b5300000000, node=2
I0825 11:49:06.803963 51940 coordinator.cc:689] Backend completed:  host=e4bdhpp021:22000 remaining=1 query_id=684c60a38cf8fe8d:ad995b5300000000
I0825 11:49:06.804644 51940 coordinator-backend-state.cc:226] query_id=684c60a38cf8fe8d:ad995b5300000000: first in-progress backend: e4bdhpp025:22000
I0825 11:49:06.804711 53875 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=684c60a38cf8fe8d:ad995b5300000000 node_id=2
I0825 11:49:06.813930 53863 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x8d\xfe\xf8\x8c\xa3`Lh\x00\x00\x00\x00S[\x99\xad",
      02: secret (string) = "\x8d\xfe\xf8\x8c\xa3`Lh\x00\x00\x00\x00S[\x99\xad",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:06.816078 53863 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=684c60a38cf8fe8d:ad995b5300000000
I0825 11:49:06.816866 53863 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[1] {
      [0] = TColumnDesc {
        01: columnName (string) = "expr_1",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
    },
  },
}
I0825 11:49:06.818549 53863 coordinator.cc:522] Coordinator waiting for backends to finish, 1 remaining. query_id=684c60a38cf8fe8d:ad995b5300000000
I0825 11:49:06.822537 53863 coordinator.cc:527] All backends finished successfully. query_id=684c60a38cf8fe8d:ad995b5300000000
I0825 11:49:06.822898 53875 query-state.cc:403] Instance completed. instance_id=684c60a38cf8fe8d:ad995b5300000000 #in-flight=21 status=OK
I0825 11:49:06.823225 53863 coordinator.cc:783] Release admission control resources for query_id=684c60a38cf8fe8d:ad995b5300000000
I0825 11:49:06.824723 53875 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=684c60a38cf8fe8d:ad995b5300000000 refcnt=2
I0825 11:49:06.837591 53863 impala-hs2-server.cc:683] CloseOperation(): query_id=684c60a38cf8fe8d:ad995b5300000000
I0825 11:49:06.838138 53863 impala-server.cc:1015] UnregisterQuery(): query_id=684c60a38cf8fe8d:ad995b5300000000
I0825 11:49:06.838429 53863 impala-server.cc:1102] Cancel(): query_id=684c60a38cf8fe8d:ad995b5300000000
I0825 11:49:06.838909 53863 coordinator.cc:629] Cancel() query_id=684c60a38cf8fe8d:ad995b5300000000
I0825 11:49:06.841369 53863 coordinator.cc:639] CancelBackends() query_id=684c60a38cf8fe8d:ad995b5300000000, tried to cancel 0 backends
I0825 11:49:06.845938 53863 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=684c60a38cf8fe8d:ad995b5300000000 refcnt=1
I0825 11:49:06.849881 53863 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "1\xc9\xcdV\xc8mK\x06\xbf\x8b;\xdf4\xe5\xe1\xe9",
      02: secret (string) = "\xa8\t\x7f\xd5}\xbfF\xa7\xab\x13\xd6fh\x96\xfb\xd1",
    },
  },
}
I0825 11:49:06.853058 53863 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:58536 closed, closing 1 associated session(s)
I0825 11:49:07.605342 53943 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:07.607234 53943 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:07.632030 53350 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:07.633710 53350 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:07.642907 53943 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:07.643868 53943 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:07.654711 53947 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:07.655848 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:49:07.658598 53947 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:07.661804 53949 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:49:07.666669 53949 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xd3\x88\xde\xa3g\xbbBe\x94\x10P\xbc\x89o\xd3\xf1",
      02: secret (string) = "\xda\xa5\xad\xfa\xb4\xd8@\x9a\xa1\xd8\xe5\xb7I\xf3O*",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:49:07.681578 53951 query-exec-mgr.cc:95] QueryState: query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:07.683133 53951 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:07.707549 53944 query-exec-mgr.cc:95] QueryState: query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:07.715049 53944 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:07.730394 53945 query-exec-mgr.cc:95] QueryState: query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:07.731272 53945 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=ab479bb9665197df:11f307500000000 refcnt=4
W0825 11:49:07.767498 43862 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:49:07.772631 43862 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297896886_BP-1820042964-11.11.206.232-1548063025113
I0825 11:49:07.988523 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:49:07.996660 53999 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:49:07.999303 53949 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xd3\x88\xde\xa3g\xbbBe\x94\x10P\xbc\x89o\xd3\xf1",
      02: secret (string) = "\xda\xa5\xad\xfa\xb4\xd8@\x9a\xa1\xd8\xe5\xb7I\xf3O*",
    },
  },
}
I0825 11:49:08.001297 53949 thrift-util.cc:123] TSocket::read() recv() <Host: ::ffff:11.11.237.129 Port: 58880>Connection reset by peer
I0825 11:49:08.001875 53949 thrift-util.cc:123] TAcceptQueueServer client died: ECONNRESET
I0825 11:49:08.003023 53949 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:58880 closed, closing 1 associated session(s)
I0825 11:49:08.026800 53999 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xa1q=\x1a\x0fOM\xb9\x9eD$\xfbu\xaad\x89",
      02: secret (string) = "\x13v\x85\x9d\x9f.E\xf4\x8d\xe7[@\xc6\xce\x95K",
    },
  },
  02: statement (string) = "use dw18_la",
  04: runAsync (bool) = true,
}
I0825 11:49:08.027848 53999 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xa1q=\x1a\x0fOM\xb9\x9eD$\xfbu\xaad\x89",
      02: secret (string) = "\x13v\x85\x9d\x9f.E\xf4\x8d\xe7[@\xc6\xce\x95K",
    },
  },
  02: statement (string) = "use dw18_la",
  04: runAsync (bool) = true,
}
I0825 11:49:08.029116 53999 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:08.040510 53999 Frontend.java:935] Analyzing query: use dw18_la
I0825 11:49:08.046361 53999 Frontend.java:947] Analysis finished.
I0825 11:49:08.236541 53999 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\r\xe26J\nIH\xa7\x00\x00\x00\x00\xbf\xdd\xe2\xf3",
      02: secret (string) = "\r\xe26J\nIH\xa7\x00\x00\x00\x00\xbf\xdd\xe2\xf3",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:49:08.245075 53999 impala-hs2-server.cc:683] CloseOperation(): query_id=a748490a4a36e20d:f3e2ddbf00000000
I0825 11:49:08.245569 53999 impala-server.cc:1015] UnregisterQuery(): query_id=a748490a4a36e20d:f3e2ddbf00000000
I0825 11:49:08.255228 53999 impala-server.cc:1102] Cancel(): query_id=a748490a4a36e20d:f3e2ddbf00000000
I0825 11:49:08.283502 53999 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xa1q=\x1a\x0fOM\xb9\x9eD$\xfbu\xaad\x89",
      02: secret (string) = "\x13v\x85\x9d\x9f.E\xf4\x8d\xe7[@\xc6\xce\x95K",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:49:08.284337 53999 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xa1q=\x1a\x0fOM\xb9\x9eD$\xfbu\xaad\x89",
      02: secret (string) = "\x13v\x85\x9d\x9f.E\xf4\x8d\xe7[@\xc6\xce\x95K",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:49:08.285640 53999 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:08.302114 53999 Frontend.java:935] Analyzing query: set mem_limit='8g'
I0825 11:49:08.312386 53999 Frontend.java:947] Analysis finished.
I0825 11:49:08.315511 53999 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "PV\xee\x12iiO\x12\x00\x00\x00\x00\x92\x8f[\t",
      02: secret (string) = "PV\xee\x12iiO\x12\x00\x00\x00\x00\x92\x8f[\t",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:08.322340 53999 impala-hs2-server.cc:683] CloseOperation(): query_id=124f696912ee5650:95b8f9200000000
I0825 11:49:08.322883 53999 impala-server.cc:1015] UnregisterQuery(): query_id=124f696912ee5650:95b8f9200000000
I0825 11:49:08.323225 53999 impala-server.cc:1102] Cancel(): query_id=124f696912ee5650:95b8f9200000000
I0825 11:49:08.328148 53999 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xa1q=\x1a\x0fOM\xb9\x9eD$\xfbu\xaad\x89",
      02: secret (string) = "\x13v\x85\x9d\x9f.E\xf4\x8d\xe7[@\xc6\xce\x95K",
    },
  },
  02: statement (string) = "DESCRIBE `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120`",
  04: runAsync (bool) = true,
}
I0825 11:49:08.333057 53999 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xa1q=\x1a\x0fOM\xb9\x9eD$\xfbu\xaad\x89",
      02: secret (string) = "\x13v\x85\x9d\x9f.E\xf4\x8d\xe7[@\xc6\xce\x95K",
    },
  },
  02: statement (string) = "DESCRIBE `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120`",
  04: runAsync (bool) = true,
}
I0825 11:49:08.336637 53999 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:08.356243 53999 Frontend.java:935] Analyzing query: DESCRIBE `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120`
I0825 11:49:08.357949 53999 Frontend.java:947] Analysis finished.
I0825 11:49:08.551805 53999 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "(\xc1xaC\xbfBi\x00\x00\x00\x00/J\xfb\xc3",
      02: secret (string) = "(\xc1xaC\xbfBi\x00\x00\x00\x00/J\xfb\xc3",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:08.555858 53999 impala-hs2-server.cc:683] CloseOperation(): query_id=6942bf436178c128:c3fb4a2f00000000
I0825 11:49:08.556393 53999 impala-server.cc:1015] UnregisterQuery(): query_id=6942bf436178c128:c3fb4a2f00000000
I0825 11:49:08.556861 53999 impala-server.cc:1102] Cancel(): query_id=6942bf436178c128:c3fb4a2f00000000
I0825 11:49:08.574966 53999 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xa1q=\x1a\x0fOM\xb9\x9eD$\xfbu\xaad\x89",
      02: secret (string) = "\x13v\x85\x9d\x9f.E\xf4\x8d\xe7[@\xc6\xce\x95K",
    },
  },
  02: statement (string) = "SELECT `bi_16518[...](2649)",
  04: runAsync (bool) = true,
}
I0825 11:49:08.575757 53999 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xa1q=\x1a\x0fOM\xb9\x9eD$\xfbu\xaad\x89",
      02: secret (string) = "\x13v\x85\x9d\x9f.E\xf4\x8d\xe7[@\xc6\xce\x95K",
    },
  },
  02: statement (string) = "SELECT `bi_16518[...](2649)",
  04: runAsync (bool) = true,
}
I0825 11:49:08.576719 53999 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:08.593587 53999 Frontend.java:935] Analyzing query: SELECT `bi_16518359572041906452`.`bi_11047500209402619491` AS `bi_4584329074808174062` , `bi_16518359572041906452`.`bi_8739345836465617530` AS `bi_813660579643793135` , `bi_16518359572041906452`.`bi_6439070652440084537` AS `bi_2671125010966300805`  FROM (SELECT `b_la_v_foreign_counterparty_c120`.`relativorrelationid` AS `bi_11047500209402619491` , `b_la_v_foreign_counterparty_c120`.`counterpartyname` AS `bi_8739345836465617530` , `b_la_v_foreign_counterparty_c120`.`counterpartyname_key` AS `bi_6439070652440084537`  FROM (SELECT `temp_sql_wrapper_table`.`relativorrelationid` AS `relativorrelationid` , `temp_sql_wrapper_table`.`counterpartyname` AS `counterpartyname` , `temp_sql_wrapper_table`.`counterpartyname_key` AS `counterpartyname_key`  FROM (SELECT `temp_sub_query_table`.`relativorrelationid`, `temp_sub_query_table`.`counterpartyname`, `temp_sub_query_table`.`counterpartyname_key` FROM (SELECT `b_la_v_foreign_contractrelativorrelation_c120`.`rowkey`, `b_la_v_foreign_contractrelativorrelation_c120`.`id`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`contractid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativorrelationid`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname_key`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_name`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_relativeid`, `b_la_v_foreign_contractrelativorrelation_c120`.`regionsign`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgname`, `b_la_v_foreign_contractrelativorrelation_c120`.`mdmcode`, `b_la_v_foreign_contractrelativorrelation_c120`.`creator`, `b_la_v_foreign_contractrelativorrelation_c120`.`created`, `b_la_v_foreign_contractrelativorrelation_c120`.`editor`, `b_la_v_foreign_contractrelativorrelation_c120`.`edited`, `b_la_v_foreign_contractrelativorrelation_c120`.`isdeleted`, `b_la_v_foreign_contractrelativorrelation_c120`.`etl_date` FROM `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120` `b_la_v_foreign_contractrelativorrelation_c120` ) `temp_sub_query_table` WHERE (`temp_sub_query_table`.`oulabel_t` LIKE '%辽河油田%')  LIMIT 1000 ) `temp_sql_wrapper_table`) `b_la_v_foreign_counterparty_c120`) `bi_16518359572041906452` LIMIT 1200001 
I0825 11:49:08.606940 53999 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:49:08.607651 53999 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:49:08.610781 53999 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:49:08.612125 53999 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:49:08.615504 53999 Frontend.java:947] Analysis finished.
I0825 11:49:08.619202 53999 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:49:08.620255 53999 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:49:08.623049 52929 runtime-state.cc:170] Error from query d84822ce8430f20f:5a97b74100000000: Memory limit exceeded: Could not allocate string buffer of 24 bytes for ORC file 'hdfs://cluster1/apps/hive/warehouse/dw04_sjfx.db/app_auap_yk_ppl/000003_0'.
HDFS_SCAN_NODE (id=0) could not allocate 24.00 B without exceeding limit.
Error occurred on backend e4bdhpp025:22000 by fragment d84822ce8430f20f:5a97b74100000006
Memory left in process limit: 284.03 GB
Memory left in query limit: 554.27 KB
Query(d84822ce8430f20f:5a97b74100000000): Limit=976.56 MB Reservation=0 ReservationLimit=781.25 MB OtherMemory=976.02 MB Total=976.02 MB Peak=976.02 MB
  Fragment d84822ce8430f20f:5a97b74100000006: Reservation=0 OtherMemory=954.84 MB Total=954.84 MB Peak=954.84 MB
    HDFS_SCAN_NODE (id=0): Total=946.26 MB Peak=951.27 MB
      Exprs: Total=4.00 KB Peak=4.00 KB
    KrpcDataStreamSender (dst_id=1): Total=224.00 B Peak=224.00 B
    CodeGen: Total=211.00 B Peak=128.00 KB
  Fragment d84822ce8430f20f:5a97b74100000000: Reservation=0 OtherMemory=21.18 MB Total=21.18 MB Peak=21.31 MB
    EXCHANGE_NODE (id=1): Reservation=20.36 MB OtherMemory=763.41 KB Total=21.10 MB Peak=21.24 MB
      KrpcDeferredRpcs: Total=763.41 KB Peak=899.53 KB
    PLAN_ROOT_SINK: Total=64.00 KB Peak=64.00 KB
      PLAN_ROOT_SINK Exprs: Total=64.00 KB Peak=64.00 KB
    CodeGen: Total=4.96 KB Peak=924.00 KB
I0825 11:49:08.623634 52929 hdfs-scan-node.cc:541] Scan node (id=0) ran into a parse error for scan range hdfs://cluster1/apps/hive/warehouse/dw04_sjfx.db/app_auap_yk_ppl/000003_0(190414868:102400). Processed 0 bytes.
I0825 11:49:08.629443 53999 admission-controller.cc:508] Schedule for id=e84be2dfabdef468:975df4ce00000000 in pool_name=root.default cluster_mem_needed=8.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
I0825 11:49:08.630021 53999 admission-controller.cc:513] Stats: agg_num_running=10, agg_num_queued=0, agg_mem_reserved=400.00 GB,  local_host(local_mem_admitted=160.00 GB, num_admitted_running=4, num_queued=0, backend_mem_reserved=80.00 GB)
I0825 11:49:08.630465 53999 admission-controller.cc:529] Admitted query id=e84be2dfabdef468:975df4ce00000000
I0825 11:49:08.631139 53999 coordinator.cc:93] Exec() query_id=e84be2dfabdef468:975df4ce00000000 stmt=SELECT `bi_16518359572041906452`.`bi_11047500209402619491` AS `bi_4584329074808174062` , `bi_16518359572041906452`.`bi_8739345836465617530` AS `bi_813660579643793135` , `bi_16518359572041906452`.`bi_6439070652440084537` AS `bi_2671125010966300805`  FROM (SELECT `b_la_v_foreign_counterparty_c120`.`relativorrelationid` AS `bi_11047500209402619491` , `b_la_v_foreign_counterparty_c120`.`counterpartyname` AS `bi_8739345836465617530` , `b_la_v_foreign_counterparty_c120`.`counterpartyname_key` AS `bi_6439070652440084537`  FROM (SELECT `temp_sql_wrapper_table`.`relativorrelationid` AS `relativorrelationid` , `temp_sql_wrapper_table`.`counterpartyname` AS `counterpartyname` , `temp_sql_wrapper_table`.`counterpartyname_key` AS `counterpartyname_key`  FROM (SELECT `temp_sub_query_table`.`relativorrelationid`, `temp_sub_query_table`.`counterpartyname`, `temp_sub_query_table`.`counterpartyname_key` FROM (SELECT `b_la_v_foreign_contractrelativorrelation_c120`.`rowkey`, `b_la_v_foreign_contractrelativorrelation_c120`.`id`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`contractid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativorrelationid`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname_key`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_name`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_relativeid`, `b_la_v_foreign_contractrelativorrelation_c120`.`regionsign`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgname`, `b_la_v_foreign_contractrelativorrelation_c120`.`mdmcode`, `b_la_v_foreign_contractrelativorrelation_c120`.`creator`, `b_la_v_foreign_contractrelativorrelation_c120`.`created`, `b_la_v_foreign_contractrelativorrelation_c120`.`editor`, `b_la_v_foreign_contractrelativorrelation_c120`.`edited`, `b_la_v_foreign_contractrelativorrelation_c120`.`isdeleted`, `b_la_v_foreign_contractrelativorrelation_c120`.`etl_date` FROM `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120` `b_la_v_foreign_contractrelativorrelation_c120` ) `temp_sub_query_table` WHERE (`temp_sub_query_table`.`oulabel_t` LIKE '%辽河油田%')  LIMIT 1000 ) `temp_sql_wrapper_table`) `b_la_v_foreign_counterparty_c120`) `bi_16518359572041906452` LIMIT 1200001 
I0825 11:49:08.633450 53999 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:49:08.634177 53999 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:49:08.636471 53999 coordinator.cc:349] starting execution on 1 backends for query_id=e84be2dfabdef468:975df4ce00000000
I0825 11:49:08.644263 44904 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=e84be2dfabdef468:975df4ce00000000
I0825 11:49:08.644670 44904 query-exec-mgr.cc:46] StartQueryFInstances() query_id=e84be2dfabdef468:975df4ce00000000 coord=e4bdhpp025:22000
I0825 11:49:08.646100 44904 query-state.cc:178] Buffer pool limit for e84be2dfabdef468:975df4ce00000000: 6871947673
I0825 11:49:08.646395 44904 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query e84be2dfabdef468:975df4ce00000000
I0825 11:49:08.647387 54084 query-state.cc:300] StartFInstances(): query_id=e84be2dfabdef468:975df4ce00000000 #instances=2
I0825 11:49:08.647780 53999 coordinator.cc:362] started execution on 1 backends for query_id=e84be2dfabdef468:975df4ce00000000
I0825 11:49:08.647853 54084 query-state.cc:313] descriptor table for query=e84be2dfabdef468:975df4ce00000000
tuples:
Tuple(id=0 size=65 slots=[Slot(id=3 type=STRING col_path=[3] offset=0 null=(offset=64 mask=1) slot_idx=0 field_idx=-1), Slot(id=5 type=STRING col_path=[5] offset=16 null=(offset=64 mask=2) slot_idx=1 field_idx=-1), Slot(id=6 type=STRING col_path=[6] offset=32 null=(offset=64 mask=4) slot_idx=2 field_idx=-1), Slot(id=7 type=STRING col_path=[7] offset=48 null=(offset=64 mask=8) slot_idx=3 field_idx=-1)] tuple_path=[])
I0825 11:49:08.654431 54085 query-state.cc:395] Executing instance. instance_id=e84be2dfabdef468:975df4ce00000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=0 #in-flight=22
I0825 11:49:08.658470 54086 query-state.cc:395] Executing instance. instance_id=e84be2dfabdef468:975df4ce00000001 fragment_idx=1 per_fragment_instance_idx=0 coord_state_idx=0 #in-flight=23
I0825 11:49:08.659155 54086 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance 'e84be2dfabdef468:975df4ce00000001': 190
I0825 11:49:08.672924 54084 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e84be2dfabdef468:975df4ce00000000 refcnt=4
I0825 11:49:08.675653 53999 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "h\xf4\xde\xab\xdf\xe2K\xe8\x00\x00\x00\x00\xce\xf4]\x97",
      02: secret (string) = "h\xf4\xde\xab\xdf\xe2K\xe8\x00\x00\x00\x00\xce\xf4]\x97",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
W0825 11:49:08.773306 43861 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:49:08.775665 43863 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:49:08.776698 43861 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297896886_BP-1820042964-11.11.206.232-1548063025113
W0825 11:49:08.779757 43863 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1324210723_BP-1820042964-11.11.206.232-1548063025113
I0825 11:49:09.145774 53041 runtime-state.cc:170] Error from query 3d41395d29a26d74:9a4d2a3d00000000: Memory limit exceeded: Could not allocate string buffer of 128 bytes for ORC file 'hdfs://cluster1/apps/hive/warehouse/dw04_sjfx.db/app_auap_yk_ppl/000007_0'.
HDFS_SCAN_NODE (id=0) could not allocate 128.00 B without exceeding limit.
Error occurred on backend e4bdhpp025:22000 by fragment 3d41395d29a26d74:9a4d2a3d00000006
Memory left in process limit: 283.95 GB
Memory left in query limit: 636.70 KB
Query(3d41395d29a26d74:9a4d2a3d00000000): Limit=976.56 MB Reservation=0 ReservationLimit=781.25 MB OtherMemory=975.94 MB Total=975.94 MB Peak=975.94 MB
  Fragment 3d41395d29a26d74:9a4d2a3d00000000: Reservation=0 OtherMemory=20.07 MB Total=20.07 MB Peak=20.31 MB
    EXCHANGE_NODE (id=1): Reservation=19.67 MB OtherMemory=330.04 KB Total=19.99 MB Peak=20.23 MB
      KrpcDeferredRpcs: Total=330.04 KB Peak=970.86 KB
    PLAN_ROOT_SINK: Total=64.00 KB Peak=64.00 KB
      PLAN_ROOT_SINK Exprs: Total=64.00 KB Peak=64.00 KB
    CodeGen: Total=4.96 KB Peak=924.00 KB
  Fragment 3d41395d29a26d74:9a4d2a3d00000006: Reservation=0 OtherMemory=955.87 MB Total=955.87 MB Peak=955.87 MB
    HDFS_SCAN_NODE (id=0): Total=947.29 MB Peak=947.29 MB
      Exprs: Total=4.00 KB Peak=4.00 KB
    KrpcDataStreamSender (dst_id=1): Total=224.00 B Peak=224.00 B
    CodeGen: Total=211.00 B Peak=128.00 KB
I0825 11:49:09.147565 53041 hdfs-scan-node.cc:541] Scan node (id=0) ran into a parse error for scan range hdfs://cluster1/apps/hive/warehouse/dw04_sjfx.db/app_auap_yk_ppl/000007_0(189043201:102400). Processed 0 bytes.
I0825 11:49:09.194479 53999 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=e84be2dfabdef468:975df4ce00000000
I0825 11:49:09.195416 53999 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[3] {
      [0] = TColumnDesc {
        01: columnName (string) = "bi_4584329074808174062",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "bi_813660579643793135",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "bi_2671125010966300805",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
    },
  },
}
I0825 11:49:09.199806 54086 query-state.cc:403] Instance completed. instance_id=e84be2dfabdef468:975df4ce00000001 #in-flight=22 status=OK
I0825 11:49:09.200676 54086 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e84be2dfabdef468:975df4ce00000000 refcnt=3
I0825 11:49:09.205264 53999 coordinator.cc:527] All backends finished successfully. query_id=e84be2dfabdef468:975df4ce00000000
I0825 11:49:09.205963 54085 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=e84be2dfabdef468:975df4ce00000000, node=1
I0825 11:49:09.205965 53999 coordinator.cc:783] Release admission control resources for query_id=e84be2dfabdef468:975df4ce00000000
I0825 11:49:09.206257 54085 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=e84be2dfabdef468:975df4ce00000000 node_id=1
I0825 11:49:09.206811 54085 query-state.cc:403] Instance completed. instance_id=e84be2dfabdef468:975df4ce00000000 #in-flight=21 status=OK
I0825 11:49:09.207131 54085 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e84be2dfabdef468:975df4ce00000000 refcnt=2
I0825 11:49:09.208977 53999 impala-hs2-server.cc:683] CloseOperation(): query_id=e84be2dfabdef468:975df4ce00000000
I0825 11:49:09.209564 53999 impala-server.cc:1015] UnregisterQuery(): query_id=e84be2dfabdef468:975df4ce00000000
I0825 11:49:09.210014 53999 impala-server.cc:1102] Cancel(): query_id=e84be2dfabdef468:975df4ce00000000
I0825 11:49:09.210623 53999 coordinator.cc:629] Cancel() query_id=e84be2dfabdef468:975df4ce00000000
I0825 11:49:09.210919 53999 coordinator.cc:639] CancelBackends() query_id=e84be2dfabdef468:975df4ce00000000, tried to cancel 0 backends
I0825 11:49:09.217202 53999 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e84be2dfabdef468:975df4ce00000000 refcnt=1
I0825 11:49:09.231446 53999 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xa1q=\x1a\x0fOM\xb9\x9eD$\xfbu\xaad\x89",
      02: secret (string) = "\x13v\x85\x9d\x9f.E\xf4\x8d\xe7[@\xc6\xce\x95K",
    },
  },
}
I0825 11:49:09.236696 53999 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:58956 closed, closing 1 associated session(s)
I0825 11:49:09.598953 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:49:09.606940 54196 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:49:09.608994 54196 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x05k7\x82\xe9\xaaO\x83\xbew\xa8\x03\xeba\xba\x13",
      02: secret (string) = "\xa3D,F\x05\xf8DA\xb9S\xd5\xae>%\x80\x8e",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:49:09.741888 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:49:09.746933 54197 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:49:09.749424 54196 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x05k7\x82\xe9\xaaO\x83\xbew\xa8\x03\xeba\xba\x13",
      02: secret (string) = "\xa3D,F\x05\xf8DA\xb9S\xd5\xae>%\x80\x8e",
    },
  },
}
I0825 11:49:09.750813 54196 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:59314 closed, closing 1 associated session(s)
I0825 11:49:09.777361 54197 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "f]\xa9\xd9\xd4CFV\xb14\x94\xb0\xa9>\xab!",
      02: secret (string) = "\b#$F\xda\x17K0\xb2\xbb\xc8\xef\x05\xe0\xca:",
    },
  },
  02: statement (string) = "use dw18_la",
  04: runAsync (bool) = true,
}
I0825 11:49:09.778033 54197 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "f]\xa9\xd9\xd4CFV\xb14\x94\xb0\xa9>\xab!",
      02: secret (string) = "\b#$F\xda\x17K0\xb2\xbb\xc8\xef\x05\xe0\xca:",
    },
  },
  02: statement (string) = "use dw18_la",
  04: runAsync (bool) = true,
}
I0825 11:49:09.781365 54197 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:09.795032 54197 Frontend.java:935] Analyzing query: use dw18_la
I0825 11:49:09.797215 54197 Frontend.java:947] Analysis finished.
I0825 11:49:09.883597 54197 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x16\xd3\xe9\xbf\xdb3B2\x00\x00\x00\x00#\x14\xc0\x8e",
      02: secret (string) = "\x16\xd3\xe9\xbf\xdb3B2\x00\x00\x00\x00#\x14\xc0\x8e",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:49:09.902566 54197 impala-hs2-server.cc:683] CloseOperation(): query_id=324233dbbfe9d316:8ec0142300000000
I0825 11:49:09.903156 54197 impala-server.cc:1015] UnregisterQuery(): query_id=324233dbbfe9d316:8ec0142300000000
I0825 11:49:09.904364 54197 impala-server.cc:1102] Cancel(): query_id=324233dbbfe9d316:8ec0142300000000
I0825 11:49:09.926606 54197 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "f]\xa9\xd9\xd4CFV\xb14\x94\xb0\xa9>\xab!",
      02: secret (string) = "\b#$F\xda\x17K0\xb2\xbb\xc8\xef\x05\xe0\xca:",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:49:09.926750 54197 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "f]\xa9\xd9\xd4CFV\xb14\x94\xb0\xa9>\xab!",
      02: secret (string) = "\b#$F\xda\x17K0\xb2\xbb\xc8\xef\x05\xe0\xca:",
    },
  },
  02: statement (string) = "set mem_limit='8g'",
  04: runAsync (bool) = true,
}
I0825 11:49:09.927983 54197 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:09.943979 54197 Frontend.java:935] Analyzing query: set mem_limit='8g'
I0825 11:49:09.950872 54197 Frontend.java:947] Analysis finished.
I0825 11:49:09.954236 54197 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "6\xe2\xce\xa1\xee\xf2A\x8a\x00\x00\x00\x00\xb5\xa9y\xe6",
      02: secret (string) = "6\xe2\xce\xa1\xee\xf2A\x8a\x00\x00\x00\x00\xb5\xa9y\xe6",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:09.960005 54197 impala-hs2-server.cc:683] CloseOperation(): query_id=8a41f2eea1cee236:e679a9b500000000
I0825 11:49:09.960139 54197 impala-server.cc:1015] UnregisterQuery(): query_id=8a41f2eea1cee236:e679a9b500000000
I0825 11:49:09.961191 54197 impala-server.cc:1102] Cancel(): query_id=8a41f2eea1cee236:e679a9b500000000
I0825 11:49:09.963724 54197 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "f]\xa9\xd9\xd4CFV\xb14\x94\xb0\xa9>\xab!",
      02: secret (string) = "\b#$F\xda\x17K0\xb2\xbb\xc8\xef\x05\xe0\xca:",
    },
  },
  02: statement (string) = "DESCRIBE `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120`",
  04: runAsync (bool) = true,
}
I0825 11:49:09.964316 54197 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "f]\xa9\xd9\xd4CFV\xb14\x94\xb0\xa9>\xab!",
      02: secret (string) = "\b#$F\xda\x17K0\xb2\xbb\xc8\xef\x05\xe0\xca:",
    },
  },
  02: statement (string) = "DESCRIBE `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120`",
  04: runAsync (bool) = true,
}
I0825 11:49:09.966413 54197 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:09.985309 54197 Frontend.java:935] Analyzing query: DESCRIBE `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120`
I0825 11:49:09.997162 54197 Frontend.java:947] Analysis finished.
I0825 11:49:10.133247 54197 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xc9\xdek\x98$,H\xee\x00\x00\x00\x00;\x87\xcc\x90",
      02: secret (string) = "\xc9\xdek\x98$,H\xee\x00\x00\x00\x00;\x87\xcc\x90",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:10.136597 54197 impala-hs2-server.cc:683] CloseOperation(): query_id=ee482c24986bdec9:90cc873b00000000
I0825 11:49:10.137169 54197 impala-server.cc:1015] UnregisterQuery(): query_id=ee482c24986bdec9:90cc873b00000000
I0825 11:49:10.137751 54197 impala-server.cc:1102] Cancel(): query_id=ee482c24986bdec9:90cc873b00000000
I0825 11:49:10.141582 54197 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "f]\xa9\xd9\xd4CFV\xb14\x94\xb0\xa9>\xab!",
      02: secret (string) = "\b#$F\xda\x17K0\xb2\xbb\xc8\xef\x05\xe0\xca:",
    },
  },
  02: statement (string) = "SELECT COUNT(1) [...](2692)",
  04: runAsync (bool) = true,
}
I0825 11:49:10.142055 54197 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "f]\xa9\xd9\xd4CFV\xb14\x94\xb0\xa9>\xab!",
      02: secret (string) = "\b#$F\xda\x17K0\xb2\xbb\xc8\xef\x05\xe0\xca:",
    },
  },
  02: statement (string) = "SELECT COUNT(1) [...](2692)",
  04: runAsync (bool) = true,
}
I0825 11:49:10.143283 54197 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 8589934592,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:10.161456 54197 Frontend.java:935] Analyzing query: SELECT COUNT(1) AS `EXPR_1`  FROM (SELECT `bi_16518359572041906452`.`bi_11047500209402619491` AS `bi_4584329074808174062` , `bi_16518359572041906452`.`bi_8739345836465617530` AS `bi_813660579643793135` , `bi_16518359572041906452`.`bi_6439070652440084537` AS `bi_2671125010966300805`  FROM (SELECT `b_la_v_foreign_counterparty_c120`.`relativorrelationid` AS `bi_11047500209402619491` , `b_la_v_foreign_counterparty_c120`.`counterpartyname` AS `bi_8739345836465617530` , `b_la_v_foreign_counterparty_c120`.`counterpartyname_key` AS `bi_6439070652440084537`  FROM (SELECT `temp_sql_wrapper_table`.`relativorrelationid` AS `relativorrelationid` , `temp_sql_wrapper_table`.`counterpartyname` AS `counterpartyname` , `temp_sql_wrapper_table`.`counterpartyname_key` AS `counterpartyname_key`  FROM (SELECT `temp_sub_query_table`.`relativorrelationid`, `temp_sub_query_table`.`counterpartyname`, `temp_sub_query_table`.`counterpartyname_key` FROM (SELECT `b_la_v_foreign_contractrelativorrelation_c120`.`rowkey`, `b_la_v_foreign_contractrelativorrelation_c120`.`id`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`contractid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativorrelationid`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname_key`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_name`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_relativeid`, `b_la_v_foreign_contractrelativorrelation_c120`.`regionsign`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgname`, `b_la_v_foreign_contractrelativorrelation_c120`.`mdmcode`, `b_la_v_foreign_contractrelativorrelation_c120`.`creator`, `b_la_v_foreign_contractrelativorrelation_c120`.`created`, `b_la_v_foreign_contractrelativorrelation_c120`.`editor`, `b_la_v_foreign_contractrelativorrelation_c120`.`edited`, `b_la_v_foreign_contractrelativorrelation_c120`.`isdeleted`, `b_la_v_foreign_contractrelativorrelation_c120`.`etl_date` FROM `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120` `b_la_v_foreign_contractrelativorrelation_c120` ) `temp_sub_query_table` WHERE (`temp_sub_query_table`.`oulabel_t` LIKE '%辽河油田%')  LIMIT 1000 ) `temp_sql_wrapper_table`) `b_la_v_foreign_counterparty_c120`) `bi_16518359572041906452`) `tableWithoutPaging` 
I0825 11:49:10.163475 54197 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:49:10.163951 54197 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:49:10.169529 54197 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:49:10.170292 54197 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:49:10.178802 54197 Frontend.java:947] Analysis finished.
I0825 11:49:10.182070 54197 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:49:10.183380 54197 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:49:10.193213 54197 admission-controller.cc:508] Schedule for id=3f483200454cc23f:1ea1c6fb00000000 in pool_name=root.default cluster_mem_needed=8.00 GB PoolConfig: max_requests=500 max_queued=200 max_mem=4050.00 GB
I0825 11:49:10.193888 54197 admission-controller.cc:513] Stats: agg_num_running=10, agg_num_queued=0, agg_mem_reserved=400.00 GB,  local_host(local_mem_admitted=160.00 GB, num_admitted_running=4, num_queued=0, backend_mem_reserved=80.00 GB)
I0825 11:49:10.195647 54197 admission-controller.cc:529] Admitted query id=3f483200454cc23f:1ea1c6fb00000000
I0825 11:49:10.196071 54197 coordinator.cc:93] Exec() query_id=3f483200454cc23f:1ea1c6fb00000000 stmt=SELECT COUNT(1) AS `EXPR_1`  FROM (SELECT `bi_16518359572041906452`.`bi_11047500209402619491` AS `bi_4584329074808174062` , `bi_16518359572041906452`.`bi_8739345836465617530` AS `bi_813660579643793135` , `bi_16518359572041906452`.`bi_6439070652440084537` AS `bi_2671125010966300805`  FROM (SELECT `b_la_v_foreign_counterparty_c120`.`relativorrelationid` AS `bi_11047500209402619491` , `b_la_v_foreign_counterparty_c120`.`counterpartyname` AS `bi_8739345836465617530` , `b_la_v_foreign_counterparty_c120`.`counterpartyname_key` AS `bi_6439070652440084537`  FROM (SELECT `temp_sql_wrapper_table`.`relativorrelationid` AS `relativorrelationid` , `temp_sql_wrapper_table`.`counterpartyname` AS `counterpartyname` , `temp_sql_wrapper_table`.`counterpartyname_key` AS `counterpartyname_key`  FROM (SELECT `temp_sub_query_table`.`relativorrelationid`, `temp_sub_query_table`.`counterpartyname`, `temp_sub_query_table`.`counterpartyname_key` FROM (SELECT `b_la_v_foreign_contractrelativorrelation_c120`.`rowkey`, `b_la_v_foreign_contractrelativorrelation_c120`.`id`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`contractid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativorrelationid`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname`, `b_la_v_foreign_contractrelativorrelation_c120`.`counterpartyname_key`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_name`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeundertaker_relativeid`, `b_la_v_foreign_contractrelativorrelation_c120`.`regionsign`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_oulabel_t`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgid`, `b_la_v_foreign_contractrelativorrelation_c120`.`relativeorg_orgname`, `b_la_v_foreign_contractrelativorrelation_c120`.`mdmcode`, `b_la_v_foreign_contractrelativorrelation_c120`.`creator`, `b_la_v_foreign_contractrelativorrelation_c120`.`created`, `b_la_v_foreign_contractrelativorrelation_c120`.`editor`, `b_la_v_foreign_contractrelativorrelation_c120`.`edited`, `b_la_v_foreign_contractrelativorrelation_c120`.`isdeleted`, `b_la_v_foreign_contractrelativorrelation_c120`.`etl_date` FROM `dw18_la`.`b_la_v_foreign_contractrelativorrelation_c120` `b_la_v_foreign_contractrelativorrelation_c120` ) `temp_sub_query_table` WHERE (`temp_sub_query_table`.`oulabel_t` LIKE '%辽河油田%')  LIMIT 1000 ) `temp_sql_wrapper_table`) `b_la_v_foreign_counterparty_c120`) `bi_16518359572041906452`) `tableWithoutPaging` 
I0825 11:49:10.197069 54197 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:49:10.199538 54197 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:49:10.201421 54197 coordinator.cc:349] starting execution on 1 backends for query_id=3f483200454cc23f:1ea1c6fb00000000
I0825 11:49:10.203112 44904 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=3f483200454cc23f:1ea1c6fb00000000
I0825 11:49:10.203565 44904 query-exec-mgr.cc:46] StartQueryFInstances() query_id=3f483200454cc23f:1ea1c6fb00000000 coord=e4bdhpp025:22000
I0825 11:49:10.203898 44904 query-state.cc:178] Buffer pool limit for 3f483200454cc23f:1ea1c6fb00000000: 6871947673
I0825 11:49:10.204380 44904 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 3f483200454cc23f:1ea1c6fb00000000
I0825 11:49:10.206743 54207 query-state.cc:300] StartFInstances(): query_id=3f483200454cc23f:1ea1c6fb00000000 #instances=2
I0825 11:49:10.207556 54197 coordinator.cc:362] started execution on 1 backends for query_id=3f483200454cc23f:1ea1c6fb00000000
I0825 11:49:10.208151 54207 query-state.cc:313] descriptor table for query=3f483200454cc23f:1ea1c6fb00000000
tuples:
Tuple(id=6 size=8 slots=[Slot(id=56 type=BIGINT col_path=[] offset=0 null=(offset=0 mask=0) slot_idx=0 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=17 slots=[Slot(id=3 type=STRING col_path=[3] offset=0 null=(offset=16 mask=1) slot_idx=0 field_idx=-1)] tuple_path=[])
I0825 11:49:10.223462 54208 query-state.cc:395] Executing instance. instance_id=3f483200454cc23f:1ea1c6fb00000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=0 #in-flight=22
I0825 11:49:10.224244 54209 query-state.cc:395] Executing instance. instance_id=3f483200454cc23f:1ea1c6fb00000001 fragment_idx=1 per_fragment_instance_idx=0 coord_state_idx=0 #in-flight=23
I0825 11:49:10.226976 54209 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '3f483200454cc23f:1ea1c6fb00000001': 190
I0825 11:49:10.246955 54207 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3f483200454cc23f:1ea1c6fb00000000 refcnt=4
I0825 11:49:10.261277 54197 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "?\xc2LE\x002H?\x00\x00\x00\x00\xfb\xc6\xa1\x1e",
      02: secret (string) = "?\xc2LE\x002H?\x00\x00\x00\x00\xfb\xc6\xa1\x1e",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
W0825 11:49:10.318207 43836 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:49:10.319432 43836 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1324210723_BP-1820042964-11.11.206.232-1548063025113
I0825 11:49:10.426364 54208 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=3f483200454cc23f:1ea1c6fb00000000, node=2
I0825 11:49:10.428164 54208 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=3f483200454cc23f:1ea1c6fb00000000 node_id=2
I0825 11:49:10.436551 54197 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=3f483200454cc23f:1ea1c6fb00000000
I0825 11:49:10.589502 54197 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[1] {
      [0] = TColumnDesc {
        01: columnName (string) = "expr_1",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
    },
  },
}
I0825 11:49:10.593140 54209 query-state.cc:403] Instance completed. instance_id=3f483200454cc23f:1ea1c6fb00000001 #in-flight=22 status=OK
I0825 11:49:10.597079 54197 coordinator.cc:522] Coordinator waiting for backends to finish, 1 remaining. query_id=3f483200454cc23f:1ea1c6fb00000000
I0825 11:49:10.596900 54209 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3f483200454cc23f:1ea1c6fb00000000 refcnt=3
I0825 11:49:10.632828 54197 coordinator.cc:527] All backends finished successfully. query_id=3f483200454cc23f:1ea1c6fb00000000
I0825 11:49:10.633821 54197 coordinator.cc:783] Release admission control resources for query_id=3f483200454cc23f:1ea1c6fb00000000
I0825 11:49:10.652271 54197 impala-hs2-server.cc:683] CloseOperation(): query_id=3f483200454cc23f:1ea1c6fb00000000
I0825 11:49:10.655372 54197 impala-server.cc:1015] UnregisterQuery(): query_id=3f483200454cc23f:1ea1c6fb00000000
I0825 11:49:10.658705 54197 impala-server.cc:1102] Cancel(): query_id=3f483200454cc23f:1ea1c6fb00000000
I0825 11:49:10.658799 54208 query-state.cc:403] Instance completed. instance_id=3f483200454cc23f:1ea1c6fb00000000 #in-flight=21 status=OK
I0825 11:49:10.659377 54197 coordinator.cc:629] Cancel() query_id=3f483200454cc23f:1ea1c6fb00000000
I0825 11:49:10.659965 54197 coordinator.cc:639] CancelBackends() query_id=3f483200454cc23f:1ea1c6fb00000000, tried to cancel 0 backends
I0825 11:49:10.659806 54208 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3f483200454cc23f:1ea1c6fb00000000 refcnt=2
I0825 11:49:10.667619 54197 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3f483200454cc23f:1ea1c6fb00000000 refcnt=1
I0825 11:49:10.679428 54197 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "f]\xa9\xd9\xd4CFV\xb14\x94\xb0\xa9>\xab!",
      02: secret (string) = "\b#$F\xda\x17K0\xb2\xbb\xc8\xef\x05\xe0\xca:",
    },
  },
}
I0825 11:49:10.681710 54197 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:59388 closed, closing 1 associated session(s)
I0825 11:49:10.781303 54248 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:10.783440 54248 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:10.792955 54254 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:10.794420 54254 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:10.804800 54259 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:10.805543 54259 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:10.817173 54262 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:10.819725 54262 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:10.833039 54248 query-exec-mgr.cc:95] QueryState: query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:10.833755 54248 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:10.841835 54254 query-exec-mgr.cc:95] QueryState: query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:10.843457 54254 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:10.855163 54259 query-exec-mgr.cc:95] QueryState: query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:10.856675 54259 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:11.086629 53141 runtime-state.cc:170] Error from query ab479bb9665197df:11f307500000000: Memory limit exceeded: Could not allocate string buffer of 9 bytes for ORC file 'hdfs://cluster1/apps/hive/warehouse/dw04_sjfx.db/app_auap_yk_ppl/000007_0'.
HDFS_SCAN_NODE (id=0) could not allocate 9.00 B without exceeding limit.
Error occurred on backend e4bdhpp025:22000 by fragment ab479bb9665197df:11f307500000006
Memory left in process limit: 283.69 GB
Memory left in query limit: 357.21 KB
Query(ab479bb9665197df:11f307500000000): Limit=976.56 MB Reservation=0 ReservationLimit=781.25 MB OtherMemory=976.21 MB Total=976.21 MB Peak=976.21 MB
  Fragment ab479bb9665197df:11f307500000000: Reservation=0 OtherMemory=19.68 MB Total=19.68 MB Peak=19.81 MB
    EXCHANGE_NODE (id=1): Reservation=18.87 MB OtherMemory=754.21 KB Total=19.60 MB Peak=19.74 MB
      KrpcDeferredRpcs: Total=754.21 KB Peak=1.03 MB
    PLAN_ROOT_SINK: Total=64.00 KB Peak=64.00 KB
      PLAN_ROOT_SINK Exprs: Total=64.00 KB Peak=64.00 KB
    CodeGen: Total=4.96 KB Peak=924.00 KB
  Fragment ab479bb9665197df:11f307500000006: Reservation=0 OtherMemory=956.53 MB Total=956.53 MB Peak=956.53 MB
    HDFS_SCAN_NODE (id=0): Total=953.96 MB Peak=953.96 MB
      Exprs: Total=4.00 KB Peak=4.00 KB
    KrpcDataStreamSender (dst_id=1): Total=224.00 B Peak=224.00 B
    CodeGen: Total=211.00 B Peak=128.00 KB
I0825 11:49:11.087622 53141 hdfs-scan-node.cc:541] Scan node (id=0) ran into a parse error for scan range hdfs://cluster1/apps/hive/warehouse/dw04_sjfx.db/app_auap_yk_ppl/000007_0(189043201:102400). Processed 0 bytes.
W0825 11:49:11.320318 43862 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:49:11.321521 43862 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297896886_BP-1820042964-11.11.206.232-1548063025113
I0825 11:49:13.905287 54262 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:13.906252 54262 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:13.917500 54543 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:13.919389 54543 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:13.934140 54545 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:13.934742 54545 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:13.945611 54546 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:13.948267 54546 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:13.955499 54542 query-exec-mgr.cc:95] QueryState: query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:13.956055 54542 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:13.974427 54544 query-exec-mgr.cc:95] QueryState: query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:13.975085 54544 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:13.983906 54543 query-exec-mgr.cc:95] QueryState: query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:13.984531 54543 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=ab479bb9665197df:11f307500000000 refcnt=4
W0825 11:49:15.038683 43859 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:49:15.039988 43859 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297896886_BP-1820042964-11.11.206.232-1548063025113
W0825 11:49:16.041597 43861 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:49:16.042377 43861 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297896886_BP-1820042964-11.11.206.232-1548063025113
I0825 11:49:17.023831 54543 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:17.024847 54543 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:17.033329 55014 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:17.035210 55014 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:17.056372 54544 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:17.057150 54544 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:17.067785 54543 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:17.070120 54543 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:17.077919 55017 query-exec-mgr.cc:95] QueryState: query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:17.078588 55017 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:17.087019 55015 query-exec-mgr.cc:95] QueryState: query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:17.087570 55015 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:17.102434 55016 query-exec-mgr.cc:95] QueryState: query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:17.103260 55016 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:17.450464 53222 runtime-state.cc:170] Error from query cd4c1202c157df1d:d37511b300000000: Memory limit exceeded: Could not allocate string buffer of 128 bytes for ORC file 'hdfs://cluster1/apps/hive/warehouse/dw04_sjfx.db/app_auap_yk_ppl/000003_0'.
HDFS_SCAN_NODE (id=0) could not allocate 128.00 B without exceeding limit.
Error occurred on backend e4bdhpp025:22000 by fragment cd4c1202c157df1d:d37511b300000006
Memory left in process limit: 283.25 GB
Memory left in query limit: 909.32 KB
Query(cd4c1202c157df1d:d37511b300000000): Limit=976.56 MB Reservation=0 ReservationLimit=781.25 MB OtherMemory=975.67 MB Total=975.67 MB Peak=975.67 MB
  Fragment cd4c1202c157df1d:d37511b300000006: Reservation=0 OtherMemory=975.67 MB Total=975.67 MB Peak=975.67 MB
    HDFS_SCAN_NODE (id=0): Total=974.10 MB Peak=974.10 MB
      Exprs: Total=4.00 KB Peak=4.00 KB
    KrpcDataStreamSender (dst_id=1): Total=224.00 B Peak=224.00 B
    CodeGen: Total=211.00 B Peak=128.00 KB
I0825 11:49:17.451206 53222 hdfs-scan-node.cc:541] Scan node (id=0) ran into a parse error for scan range hdfs://cluster1/apps/hive/warehouse/dw04_sjfx.db/app_auap_yk_ppl/000003_0(190414868:102400). Processed 0 bytes.
I0825 11:49:20.149169 55019 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:20.150370 55019 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:20.159112 55045 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:20.163771 55045 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:20.176908 55048 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:20.179497 55048 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:20.190076 54543 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:20.190627 54543 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:20.198858 54543 query-exec-mgr.cc:95] QueryState: query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:20.199565 54543 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:20.208890 55055 query-exec-mgr.cc:95] QueryState: query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:20.209687 55055 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:20.217682 55047 query-exec-mgr.cc:95] QueryState: query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:20.218503 55047 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:23.277772 55063 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:23.278702 55063 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:23.299288 55019 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:23.300801 55019 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:23.310088 55066 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:23.310741 55066 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:23.318807 55067 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:23.319520 55067 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:23.326946 55063 query-exec-mgr.cc:95] QueryState: query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:23.328112 55063 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:23.335855 55064 query-exec-mgr.cc:95] QueryState: query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:23.336645 55064 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:23.346091 55019 query-exec-mgr.cc:95] QueryState: query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:23.346832 55019 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:24.735168 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:49:24.742637 55135 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:49:24.744840 55135 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "N\x18\x95\xa9\xb6\x90H\x0f\x93!\xd8\xf3v\x10E\x01",
      02: secret (string) = "\xc1\x12D4nXF+\xa8\x99\xda\xe8t\xb9\xd8O",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:49:24.798920 55135 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "N\x18\x95\xa9\xb6\x90H\x0f\x93!\xd8\xf3v\x10E\x01",
      02: secret (string) = "\xc1\x12D4nXF+\xa8\x99\xda\xe8t\xb9\xd8O",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:49:24.799484 55135 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "N\x18\x95\xa9\xb6\x90H\x0f\x93!\xd8\xf3v\x10E\x01",
      02: secret (string) = "\xc1\x12D4nXF+\xa8\x99\xda\xe8t\xb9\xd8O",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:49:24.802282 55135 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:24.813963 55135 Frontend.java:935] Analyzing query: use `dw04_sjfx`;
I0825 11:49:24.814988 55135 Frontend.java:947] Analysis finished.
I0825 11:49:24.888343 55135 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xd4\xc4\xdf\x1a\x03\x8fL\xc1\x00\x00\x00\x00JI$,",
      02: secret (string) = "\xd4\xc4\xdf\x1a\x03\x8fL\xc1\x00\x00\x00\x00JI$,",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:49:24.891868 55135 impala-hs2-server.cc:683] CloseOperation(): query_id=c14c8f031adfc4d4:2c24494a00000000
I0825 11:49:24.894541 55135 impala-server.cc:1015] UnregisterQuery(): query_id=c14c8f031adfc4d4:2c24494a00000000
I0825 11:49:24.895138 55135 impala-server.cc:1102] Cancel(): query_id=c14c8f031adfc4d4:2c24494a00000000
I0825 11:49:24.916608 55135 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "N\x18\x95\xa9\xb6\x90H\x0f\x93!\xd8\xf3v\x10E\x01",
      02: secret (string) = "\xc1\x12D4nXF+\xa8\x99\xda\xe8t\xb9\xd8O",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:49:24.917158 55135 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "N\x18\x95\xa9\xb6\x90H\x0f\x93!\xd8\xf3v\x10E\x01",
      02: secret (string) = "\xc1\x12D4nXF+\xa8\x99\xda\xe8t\xb9\xd8O",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:49:24.918085 55135 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:24.928575 55135 Frontend.java:935] Analyzing query: set REQUEST_POOL = 'agilebi';
I0825 11:49:24.929409 55135 Frontend.java:947] Analysis finished.
I0825 11:49:24.943130 55135 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "E\xc7\x04\x83?\x96C\x8c\x00\x00\x00\x00\xc3\x93\x99B",
      02: secret (string) = "E\xc7\x04\x83?\x96C\x8c\x00\x00\x00\x00\xc3\x93\x99B",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:24.965126 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:49:24.970518 55138 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:49:24.972472 55138 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe8w\xcb&\x05wC\x12\x9b\x86Og\xc1\x04\xf3Y",
      02: secret (string) = "\x192m\x8f\xac\\M\x97\xb4y5/nR'\xd6",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:49:24.976198 55135 impala-hs2-server.cc:683] CloseOperation(): query_id=8c43963f8304c745:429993c300000000
I0825 11:49:24.976594 55135 impala-server.cc:1015] UnregisterQuery(): query_id=8c43963f8304c745:429993c300000000
I0825 11:49:24.977350 55135 impala-server.cc:1102] Cancel(): query_id=8c43963f8304c745:429993c300000000
I0825 11:49:25.006422 55138 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe8w\xcb&\x05wC\x12\x9b\x86Og\xc1\x04\xf3Y",
      02: secret (string) = "\x192m\x8f\xac\\M\x97\xb4y5/nR'\xd6",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:49:25.007220 55138 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe8w\xcb&\x05wC\x12\x9b\x86Og\xc1\x04\xf3Y",
      02: secret (string) = "\x192m\x8f\xac\\M\x97\xb4y5/nR'\xd6",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:49:25.008792 55138 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:25.009864 55135 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "N\x18\x95\xa9\xb6\x90H\x0f\x93!\xd8\xf3v\x10E\x01",
      02: secret (string) = "\xc1\x12D4nXF+\xa8\x99\xda\xe8t\xb9\xd8O",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:49:25.011993 55135 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "N\x18\x95\xa9\xb6\x90H\x0f\x93!\xd8\xf3v\x10E\x01",
      02: secret (string) = "\xc1\x12D4nXF+\xa8\x99\xda\xe8t\xb9\xd8O",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:49:25.013108 55135 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:25.020874 55138 Frontend.java:935] Analyzing query: use `dw04_sjfx`;
I0825 11:49:25.022665 55138 Frontend.java:947] Analysis finished.
I0825 11:49:25.025033 55135 Frontend.java:935] Analyzing query: set MEM_LIMIT = 1024000000;
I0825 11:49:25.026580 55135 Frontend.java:947] Analysis finished.
I0825 11:49:25.031677 55135 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x8b\xf8\xae\x9b\xc7\x93H\xd5\x00\x00\x00\x00\xa5\xf4<\x13",
      02: secret (string) = "\x8b\xf8\xae\x9b\xc7\x93H\xd5\x00\x00\x00\x00\xa5\xf4<\x13",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:25.077821 55135 impala-hs2-server.cc:683] CloseOperation(): query_id=d54893c79baef88b:133cf4a500000000
I0825 11:49:25.078183 55135 impala-server.cc:1015] UnregisterQuery(): query_id=d54893c79baef88b:133cf4a500000000
I0825 11:49:25.078632 55135 impala-server.cc:1102] Cancel(): query_id=d54893c79baef88b:133cf4a500000000
I0825 11:49:25.082475 55135 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "N\x18\x95\xa9\xb6\x90H\x0f\x93!\xd8\xf3v\x10E\x01",
      02: secret (string) = "\xc1\x12D4nXF+\xa8\x99\xda\xe8t\xb9\xd8O",
    },
  },
  02: statement (string) = "DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_PPL`",
  04: runAsync (bool) = true,
}
I0825 11:49:25.082994 55135 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "N\x18\x95\xa9\xb6\x90H\x0f\x93!\xd8\xf3v\x10E\x01",
      02: secret (string) = "\xc1\x12D4nXF+\xa8\x99\xda\xe8t\xb9\xd8O",
    },
  },
  02: statement (string) = "DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_PPL`",
  04: runAsync (bool) = true,
}
I0825 11:49:25.083953 55135 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:25.094826 55135 Frontend.java:935] Analyzing query: DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_PPL`
I0825 11:49:25.095012 55138 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xe9W\x86kG\x86K1\x00\x00\x00\x00\xc9D\xf5\xa2",
      02: secret (string) = "\xe9W\x86kG\x86K1\x00\x00\x00\x00\xc9D\xf5\xa2",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:49:25.096931 55135 Frontend.java:947] Analysis finished.
I0825 11:49:25.099509 55138 impala-hs2-server.cc:683] CloseOperation(): query_id=314b86476b8657e9:a2f544c900000000
I0825 11:49:25.100150 55138 impala-server.cc:1015] UnregisterQuery(): query_id=314b86476b8657e9:a2f544c900000000
I0825 11:49:25.100502 55138 impala-server.cc:1102] Cancel(): query_id=314b86476b8657e9:a2f544c900000000
I0825 11:49:25.121014 55138 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe8w\xcb&\x05wC\x12\x9b\x86Og\xc1\x04\xf3Y",
      02: secret (string) = "\x192m\x8f\xac\\M\x97\xb4y5/nR'\xd6",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:49:25.121583 55138 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe8w\xcb&\x05wC\x12\x9b\x86Og\xc1\x04\xf3Y",
      02: secret (string) = "\x192m\x8f\xac\\M\x97\xb4y5/nR'\xd6",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:49:25.122962 55138 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:25.189030 55138 Frontend.java:935] Analyzing query: set REQUEST_POOL = 'agilebi';
I0825 11:49:25.194854 55138 Frontend.java:947] Analysis finished.
I0825 11:49:25.203267 55138 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xaa\xc9\xa8\x99\xcdZA\x1c\x00\x00\x00\x00V\xef\xf9\xe9",
      02: secret (string) = "\xaa\xc9\xa8\x99\xcdZA\x1c\x00\x00\x00\x00V\xef\xf9\xe9",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:25.207484 55138 impala-hs2-server.cc:683] CloseOperation(): query_id=1c415acd99a8c9aa:e9f9ef5600000000
I0825 11:49:25.208053 55138 impala-server.cc:1015] UnregisterQuery(): query_id=1c415acd99a8c9aa:e9f9ef5600000000
I0825 11:49:25.208753 55138 impala-server.cc:1102] Cancel(): query_id=1c415acd99a8c9aa:e9f9ef5600000000
I0825 11:49:25.237520 55135 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xcbyf\xbc \x96N\xb8\x00\x00\x00\x00\x9f\"I\x01",
      02: secret (string) = "\xcbyf\xbc \x96N\xb8\x00\x00\x00\x00\x9f\"I\x01",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:25.274767 55135 impala-hs2-server.cc:683] CloseOperation(): query_id=b84e9620bc6679cb:149229f00000000
I0825 11:49:25.275270 55135 impala-server.cc:1015] UnregisterQuery(): query_id=b84e9620bc6679cb:149229f00000000
I0825 11:49:25.276314 55135 impala-server.cc:1102] Cancel(): query_id=b84e9620bc6679cb:149229f00000000
I0825 11:49:25.291008 55138 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe8w\xcb&\x05wC\x12\x9b\x86Og\xc1\x04\xf3Y",
      02: secret (string) = "\x192m\x8f\xac\\M\x97\xb4y5/nR'\xd6",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:49:25.292299 55138 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe8w\xcb&\x05wC\x12\x9b\x86Og\xc1\x04\xf3Y",
      02: secret (string) = "\x192m\x8f\xac\\M\x97\xb4y5/nR'\xd6",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:49:25.294078 55138 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:25.310941 55138 Frontend.java:935] Analyzing query: set MEM_LIMIT = 1024000000;
I0825 11:49:25.311981 55138 Frontend.java:947] Analysis finished.
I0825 11:49:25.318835 55138 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x97N\xb8'WmL\x14\x00\x00\x00\x00\x85\xde\x17v",
      02: secret (string) = "\x97N\xb8'WmL\x14\x00\x00\x00\x00\x85\xde\x17v",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:25.388741 55138 impala-hs2-server.cc:683] CloseOperation(): query_id=144c6d5727b84e97:7617de8500000000
I0825 11:49:25.389571 55138 impala-server.cc:1015] UnregisterQuery(): query_id=144c6d5727b84e97:7617de8500000000
I0825 11:49:25.389881 55138 impala-server.cc:1102] Cancel(): query_id=144c6d5727b84e97:7617de8500000000
I0825 11:49:25.393266 55138 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe8w\xcb&\x05wC\x12\x9b\x86Og\xc1\x04\xf3Y",
      02: secret (string) = "\x192m\x8f\xac\\M\x97\xb4y5/nR'\xd6",
    },
  },
  02: statement (string) = "DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_PPL`",
  04: runAsync (bool) = true,
}
I0825 11:49:25.393765 55138 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe8w\xcb&\x05wC\x12\x9b\x86Og\xc1\x04\xf3Y",
      02: secret (string) = "\x192m\x8f\xac\\M\x97\xb4y5/nR'\xd6",
    },
  },
  02: statement (string) = "DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_PPL`",
  04: runAsync (bool) = true,
}
I0825 11:49:25.394951 55138 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:25.414731 55138 Frontend.java:935] Analyzing query: DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_PPL`
I0825 11:49:25.416028 55138 Frontend.java:947] Analysis finished.
I0825 11:49:25.472368 55138 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xba\x91G\xbccqF\xcf\x00\x00\x00\x00k\x8czZ",
      02: secret (string) = "\xba\x91G\xbccqF\xcf\x00\x00\x00\x00k\x8czZ",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:25.477178 55138 impala-hs2-server.cc:683] CloseOperation(): query_id=cf467163bc4791ba:5a7a8c6b00000000
I0825 11:49:25.478997 55138 impala-server.cc:1015] UnregisterQuery(): query_id=cf467163bc4791ba:5a7a8c6b00000000
I0825 11:49:25.479275 55138 impala-server.cc:1102] Cancel(): query_id=cf467163bc4791ba:5a7a8c6b00000000
I0825 11:49:25.802356 55135 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "N\x18\x95\xa9\xb6\x90H\x0f\x93!\xd8\xf3v\x10E\x01",
      02: secret (string) = "\xc1\x12D4nXF+\xa8\x99\xda\xe8t\xb9\xd8O",
    },
  },
  02: statement (string) = "select   `bi_177[...](15324)",
  04: runAsync (bool) = true,
}
I0825 11:49:25.803018 55135 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "N\x18\x95\xa9\xb6\x90H\x0f\x93!\xd8\xf3v\x10E\x01",
      02: secret (string) = "\xc1\x12D4nXF+\xa8\x99\xda\xe8t\xb9\xd8O",
    },
  },
  02: statement (string) = "select   `bi_177[...](15324)",
  04: runAsync (bool) = true,
}
I0825 11:49:25.803831 55135 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:25.814150 55135 Frontend.java:935] Analyzing query: select   `bi_1777753835894362515`.`帐号` as `bi_4405066279117047118` , `bi_1777753835894362515`.`卡号` as `bi_10248578450533883095` , `bi_1777753835894362515`.`卡类型描述` as `bi_6246159538240244065` , `bi_1777753835894362515`.`是否为副卡` as `bi_13540389403478941567` , `bi_1777753835894362515`.`交易主要站点` as `bi_2740263195203761510` , `bi_1777753835894362515`.`个人卡消费过加油站站点数量` as `bi_3616459640308034135` , `bi_1777753835894362515`.`交易类型描述` as `bi_10331142289063080322` , `bi_1777753835894362515`.`商品类型` as `bi_8759647043076232228` , `bi_1777753835894362515`.`商品类型描述` as `bi_14353747127936749017` , `bi_1777753835894362515`.`发卡单位` as `bi_10646976700040736340` , `bi_1777753835894362515`.`发卡单位与销售单位是否一致` as `bi_3120723227421642544` , `bi_1777753835894362515`.`首次交易日期` as `bi_14455382331679438995` , `bi_1777753835894362515`.`最近交易日期` as `bi_5478771142720032093` , `bi_1777753835894362515`.`平均油量升数` as `bi_617034579827635996` , `bi_1777753835894362515`.`平均消费金额` as `bi_15112077538935800504` , `bi_1777753835894362515`.`平均折扣金额` as `bi_3277906557631314998` , `bi_1777753835894362515`.`平均余额` as `bi_15647197458875151506` , `bi_1777753835894362515`.`日均消费笔数` as `bi_7064249764713199839` , `bi_1777753835894362515`.`日均消费金额` as `bi_10854565843347455823` , `bi_1777753835894362515`.`单日消费次数过多次数` as `bi_2261074975467520775` , `bi_1777753835894362515`.`个人卡夜间消费总次数` as `bi_11404968094779050130` , `bi_1777753835894362515`.`个人卡夜间消费总金额` as `bi_15065943078847283073` , `bi_1777753835894362515`.`日均夜间消费笔数` as `bi_15868460132744503901` , `bi_1777753835894362515`.`日均夜间消费金额` as `bi_15516783331422952374` , `bi_1777753835894362515`.`单日夜间消费次数过多次数` as `bi_16171388146955820514` , `bi_1777753835894362515`.`睡眠次数` as `bi_17048143494310675370` , `bi_1777753835894362515`.`是否仍在睡眠` as `bi_15197978810704604447` , `bi_1777753835894362515`.`个人卡累计消费金额` as `bi_7591110132802393138` , `bi_1777753835894362515`.`个人卡消费金额方差` as `bi_160391765441068244` , `bi_1777753835894362515`.`个人卡累计消费次数` as `bi_4156841468949947680` , `bi_1777753835894362515`.`个人卡消费金额为小数次数` as `bi_9794343777229462837` , `bi_1777753835894362515`.`个人卡消费过油品类型数量` as `bi_10293590438327478000` , `bi_1777753835894362515`.`个人卡消费过汽油品类型数量` as `bi_1177732512630799779` , `bi_1777753835894362515`.`个人卡汽油消费次数占比` as `bi_11456242312036654846` , `bi_1777753835894362515`.`个人卡汽油单笔高额消费次数` as `bi_9834182397780633995` , `bi_1777753835894362515`.`个人卡柴油消费次数占比` as `bi_6459884238352011348` , `bi_1777753835894362515`.`个人卡天然气消费次数占比` as `bi_16651092651258988174` , `bi_1777753835894362515`.`ic卡大额非油消费次数` as `bi_7054304210906615051` , `bi_1777753835894362515`.`非油累计消费金额` as `bi_16397999138841287705` , `bi_1777753835894362515`.`非油与成品油消费金额比例` as `bi_4542996461810298499` , `bi_1777753835894362515`.`个人卡累计充值金额` as `bi_4841881326785682188` , `bi_1777753835894362515`.`单日充值次数过多次数` as `bi_9422150591649301309` , `bi_1777753835894362515`.`即消费且余额低的次数831743621` as `bi_16833265966592949464` , `bi_1777753835894362515`.`同一班次消费的次数` as `bi_11088153473180053847` , `bi_1777753835894362515`.`密码重置次数` as `bi_3598974696379994152` , `bi_1777753835894362515`.`笔折扣额的消费的次数_2085032453` as `bi_5097711375700122218` , `bi_1777753835894362515`.`个人卡余额充足时充钱的次数` as `bi_8205063281634656287` , `bi_1777753835894362515`.`是否曾频繁转账` as `bi_14482952946536492029` , `bi_1777753835894362515`.`是否异常加油卡` as `bi_8782608630523284142` , `bi_1777753835894362515`.`单位名称` as `bi_14261383855208495737` , `bi_1777753835894362515`.`所属` as `bi_7873307995921860050` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_1777753835894362515`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_8081399462078118933` , TRIM(`bi_1777753835894362515`.`交易主要站点`) as `bi_616911404683852598`   from (select   `bi_152610414374251569`.`帐号` as `帐号` , `bi_152610414374251569`.`卡号` as `卡号` , `bi_152610414374251569`.`卡类型描述` as `卡类型描述` , `bi_152610414374251569`.`是否为副卡` as `是否为副卡` , `bi_152610414374251569`.`交易主要站点` as `交易主要站点` , `bi_152610414374251569`.`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量` , `bi_152610414374251569`.`交易类型描述` as `交易类型描述` , `bi_152610414374251569`.`商品类型` as `商品类型` , `bi_152610414374251569`.`商品类型描述` as `商品类型描述` , `bi_152610414374251569`.`发卡单位` as `发卡单位` , `bi_152610414374251569`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `bi_152610414374251569`.`首次交易日期` as `首次交易日期` , `bi_152610414374251569`.`最近交易日期` as `最近交易日期` , `bi_152610414374251569`.`平均油量升数` as `平均油量升数` , `bi_152610414374251569`.`平均消费金额` as `平均消费金额` , `bi_152610414374251569`.`平均折扣金额` as `平均折扣金额` , `bi_152610414374251569`.`平均余额` as `平均余额` , `bi_152610414374251569`.`日均消费笔数` as `日均消费笔数` , `bi_152610414374251569`.`日均消费金额` as `日均消费金额` , `bi_152610414374251569`.`单日消费次数过多次数` as `单日消费次数过多次数` , `bi_152610414374251569`.`个人卡夜间消费总次数` as `个人卡夜间消费总次数` , `bi_152610414374251569`.`个人卡夜间消费总金额` as `个人卡夜间消费总金额` , `bi_152610414374251569`.`日均夜间消费笔数` as `日均夜间消费笔数` , `bi_152610414374251569`.`日均夜间消费金额` as `日均夜间消费金额` , `bi_152610414374251569`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `bi_152610414374251569`.`睡眠次数` as `睡眠次数` , `bi_152610414374251569`.`是否仍在睡眠` as `是否仍在睡眠` , `bi_152610414374251569`.`个人卡累计消费金额` as `个人卡累计消费金额` , `bi_152610414374251569`.`个人卡消费金额方差` as `个人卡消费金额方差` , `bi_152610414374251569`.`个人卡累计消费次数` as `个人卡累计消费次数` , `bi_152610414374251569`.`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数` , `bi_152610414374251569`.`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量` , `bi_152610414374251569`.`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量` , `bi_152610414374251569`.`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比` , `bi_152610414374251569`.`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数` , `bi_152610414374251569`.`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比` , `bi_152610414374251569`.`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比` , `bi_152610414374251569`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `bi_152610414374251569`.`非油累计消费金额` as `非油累计消费金额` , `bi_152610414374251569`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `bi_152610414374251569`.`个人卡累计充值金额` as `个人卡累计充值金额` , `bi_152610414374251569`.`单日充值次数过多次数` as `单日充值次数过多次数` , `bi_152610414374251569`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `bi_152610414374251569`.`同一班次消费的次数` as `同一班次消费的次数` , `bi_152610414374251569`.`密码重置次数` as `密码重置次数` , `bi_152610414374251569`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `bi_152610414374251569`.`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数` , `bi_152610414374251569`.`是否曾频繁转账` as `是否曾频繁转账` , `bi_152610414374251569`.`是否异常加油卡` as `是否异常加油卡` , `bi_152610414374251569`.`单位名称` as `单位名称` , `bi_152610414374251569`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`个人卡夜间消费总次数` as `个人卡夜间消费总次数`,`个人卡夜间消费总金额` as `个人卡夜间消费总金额`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`个人卡累计消费金额` as `个人卡累计消费金额`,`个人卡消费金额方差` as `个人卡消费金额方差`,`个人卡累计消费次数` as `个人卡累计消费次数`,`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数`,`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比`,`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`个人卡累计充值金额` as `个人卡累计充值金额`,`单日充值次数过多次数` as `单日充值次数过多次数`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`个人卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`个人卡夜间消费总次数`,`个人卡夜间消费总金额`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`个人卡累计消费金额`,`个人卡消费金额方差`,`个人卡累计消费次数`,`个人卡消费金额为小数次数`,`个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比`,`个人卡天然气消费次数占比`,`ic卡大额非油消费次数`,`非油累计消费金额`,`非油与成品油消费金额比例`,`个人卡累计充值金额`,`单日充值次数过多次数`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,     
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `个人卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`, 
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`, 
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`,
       `单日消费次数过多次数`, 
       `个人卡夜间消费总次数`,
       `个人卡夜间消费总金额`,
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`, 
       `睡眠次数`,
       `是否仍在睡眠`,
       `个人卡累计消费金额`,
       `加油卡消费金额方差` `个人卡消费金额方差`,
       `个人卡累计消费次数`,
       `加油卡消费金额为小数次数` `个人卡消费金额为小数次数`,
       `个人卡消费过油品类型数量`,
       `个人卡消费过汽油品类型数量`,
       `个人卡汽油消费次数占比`,
       `个人卡汽油单笔高额消费次数`,
       `个人卡柴油消费次数占比`,
       `个人卡天然气消费次数占比`,
       `IC卡大额非油消费次数`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `个人卡累计充值金额`,
       `单日充值次数过多次数`, 
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `个人卡余额充足时充钱的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM DW04_SJFX.APP_AUAP_YK_PPL) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `bi_152610414374251569`  
     ) `bi_1777753835894362515`
      limit 1200001 
I0825 11:49:26.089509 55135 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:49:26.095680 55135 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:49:26.104640 55138 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe8w\xcb&\x05wC\x12\x9b\x86Og\xc1\x04\xf3Y",
      02: secret (string) = "\x192m\x8f\xac\\M\x97\xb4y5/nR'\xd6",
    },
  },
  02: statement (string) = "select   `bi_177[...](15324)",
  04: runAsync (bool) = true,
}
I0825 11:49:26.105171 55138 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe8w\xcb&\x05wC\x12\x9b\x86Og\xc1\x04\xf3Y",
      02: secret (string) = "\x192m\x8f\xac\\M\x97\xb4y5/nR'\xd6",
    },
  },
  02: statement (string) = "select   `bi_177[...](15324)",
  04: runAsync (bool) = true,
}
I0825 11:49:26.106024 55138 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:26.118250 55138 Frontend.java:935] Analyzing query: select   `bi_1777753835894362515`.`帐号` as `bi_4405066279117047118` , `bi_1777753835894362515`.`卡号` as `bi_10248578450533883095` , `bi_1777753835894362515`.`卡类型描述` as `bi_6246159538240244065` , `bi_1777753835894362515`.`是否为副卡` as `bi_13540389403478941567` , `bi_1777753835894362515`.`交易主要站点` as `bi_2740263195203761510` , `bi_1777753835894362515`.`个人卡消费过加油站站点数量` as `bi_3616459640308034135` , `bi_1777753835894362515`.`交易类型描述` as `bi_10331142289063080322` , `bi_1777753835894362515`.`商品类型` as `bi_8759647043076232228` , `bi_1777753835894362515`.`商品类型描述` as `bi_14353747127936749017` , `bi_1777753835894362515`.`发卡单位` as `bi_10646976700040736340` , `bi_1777753835894362515`.`发卡单位与销售单位是否一致` as `bi_3120723227421642544` , `bi_1777753835894362515`.`首次交易日期` as `bi_14455382331679438995` , `bi_1777753835894362515`.`最近交易日期` as `bi_5478771142720032093` , `bi_1777753835894362515`.`平均油量升数` as `bi_617034579827635996` , `bi_1777753835894362515`.`平均消费金额` as `bi_15112077538935800504` , `bi_1777753835894362515`.`平均折扣金额` as `bi_3277906557631314998` , `bi_1777753835894362515`.`平均余额` as `bi_15647197458875151506` , `bi_1777753835894362515`.`日均消费笔数` as `bi_7064249764713199839` , `bi_1777753835894362515`.`日均消费金额` as `bi_10854565843347455823` , `bi_1777753835894362515`.`单日消费次数过多次数` as `bi_2261074975467520775` , `bi_1777753835894362515`.`个人卡夜间消费总次数` as `bi_11404968094779050130` , `bi_1777753835894362515`.`个人卡夜间消费总金额` as `bi_15065943078847283073` , `bi_1777753835894362515`.`日均夜间消费笔数` as `bi_15868460132744503901` , `bi_1777753835894362515`.`日均夜间消费金额` as `bi_15516783331422952374` , `bi_1777753835894362515`.`单日夜间消费次数过多次数` as `bi_16171388146955820514` , `bi_1777753835894362515`.`睡眠次数` as `bi_17048143494310675370` , `bi_1777753835894362515`.`是否仍在睡眠` as `bi_15197978810704604447` , `bi_1777753835894362515`.`个人卡累计消费金额` as `bi_7591110132802393138` , `bi_1777753835894362515`.`个人卡消费金额方差` as `bi_160391765441068244` , `bi_1777753835894362515`.`个人卡累计消费次数` as `bi_4156841468949947680` , `bi_1777753835894362515`.`个人卡消费金额为小数次数` as `bi_9794343777229462837` , `bi_1777753835894362515`.`个人卡消费过油品类型数量` as `bi_10293590438327478000` , `bi_1777753835894362515`.`个人卡消费过汽油品类型数量` as `bi_1177732512630799779` , `bi_1777753835894362515`.`个人卡汽油消费次数占比` as `bi_11456242312036654846` , `bi_1777753835894362515`.`个人卡汽油单笔高额消费次数` as `bi_9834182397780633995` , `bi_1777753835894362515`.`个人卡柴油消费次数占比` as `bi_6459884238352011348` , `bi_1777753835894362515`.`个人卡天然气消费次数占比` as `bi_16651092651258988174` , `bi_1777753835894362515`.`ic卡大额非油消费次数` as `bi_7054304210906615051` , `bi_1777753835894362515`.`非油累计消费金额` as `bi_16397999138841287705` , `bi_1777753835894362515`.`非油与成品油消费金额比例` as `bi_4542996461810298499` , `bi_1777753835894362515`.`个人卡累计充值金额` as `bi_4841881326785682188` , `bi_1777753835894362515`.`单日充值次数过多次数` as `bi_9422150591649301309` , `bi_1777753835894362515`.`即消费且余额低的次数831743621` as `bi_16833265966592949464` , `bi_1777753835894362515`.`同一班次消费的次数` as `bi_11088153473180053847` , `bi_1777753835894362515`.`密码重置次数` as `bi_3598974696379994152` , `bi_1777753835894362515`.`笔折扣额的消费的次数_2085032453` as `bi_5097711375700122218` , `bi_1777753835894362515`.`个人卡余额充足时充钱的次数` as `bi_8205063281634656287` , `bi_1777753835894362515`.`是否曾频繁转账` as `bi_14482952946536492029` , `bi_1777753835894362515`.`是否异常加油卡` as `bi_8782608630523284142` , `bi_1777753835894362515`.`单位名称` as `bi_14261383855208495737` , `bi_1777753835894362515`.`所属` as `bi_7873307995921860050` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_1777753835894362515`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_8081399462078118933` , TRIM(`bi_1777753835894362515`.`交易主要站点`) as `bi_616911404683852598`   from (select   `bi_152610414374251569`.`帐号` as `帐号` , `bi_152610414374251569`.`卡号` as `卡号` , `bi_152610414374251569`.`卡类型描述` as `卡类型描述` , `bi_152610414374251569`.`是否为副卡` as `是否为副卡` , `bi_152610414374251569`.`交易主要站点` as `交易主要站点` , `bi_152610414374251569`.`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量` , `bi_152610414374251569`.`交易类型描述` as `交易类型描述` , `bi_152610414374251569`.`商品类型` as `商品类型` , `bi_152610414374251569`.`商品类型描述` as `商品类型描述` , `bi_152610414374251569`.`发卡单位` as `发卡单位` , `bi_152610414374251569`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `bi_152610414374251569`.`首次交易日期` as `首次交易日期` , `bi_152610414374251569`.`最近交易日期` as `最近交易日期` , `bi_152610414374251569`.`平均油量升数` as `平均油量升数` , `bi_152610414374251569`.`平均消费金额` as `平均消费金额` , `bi_152610414374251569`.`平均折扣金额` as `平均折扣金额` , `bi_152610414374251569`.`平均余额` as `平均余额` , `bi_152610414374251569`.`日均消费笔数` as `日均消费笔数` , `bi_152610414374251569`.`日均消费金额` as `日均消费金额` , `bi_152610414374251569`.`单日消费次数过多次数` as `单日消费次数过多次数` , `bi_152610414374251569`.`个人卡夜间消费总次数` as `个人卡夜间消费总次数` , `bi_152610414374251569`.`个人卡夜间消费总金额` as `个人卡夜间消费总金额` , `bi_152610414374251569`.`日均夜间消费笔数` as `日均夜间消费笔数` , `bi_152610414374251569`.`日均夜间消费金额` as `日均夜间消费金额` , `bi_152610414374251569`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `bi_152610414374251569`.`睡眠次数` as `睡眠次数` , `bi_152610414374251569`.`是否仍在睡眠` as `是否仍在睡眠` , `bi_152610414374251569`.`个人卡累计消费金额` as `个人卡累计消费金额` , `bi_152610414374251569`.`个人卡消费金额方差` as `个人卡消费金额方差` , `bi_152610414374251569`.`个人卡累计消费次数` as `个人卡累计消费次数` , `bi_152610414374251569`.`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数` , `bi_152610414374251569`.`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量` , `bi_152610414374251569`.`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量` , `bi_152610414374251569`.`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比` , `bi_152610414374251569`.`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数` , `bi_152610414374251569`.`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比` , `bi_152610414374251569`.`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比` , `bi_152610414374251569`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `bi_152610414374251569`.`非油累计消费金额` as `非油累计消费金额` , `bi_152610414374251569`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `bi_152610414374251569`.`个人卡累计充值金额` as `个人卡累计充值金额` , `bi_152610414374251569`.`单日充值次数过多次数` as `单日充值次数过多次数` , `bi_152610414374251569`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `bi_152610414374251569`.`同一班次消费的次数` as `同一班次消费的次数` , `bi_152610414374251569`.`密码重置次数` as `密码重置次数` , `bi_152610414374251569`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `bi_152610414374251569`.`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数` , `bi_152610414374251569`.`是否曾频繁转账` as `是否曾频繁转账` , `bi_152610414374251569`.`是否异常加油卡` as `是否异常加油卡` , `bi_152610414374251569`.`单位名称` as `单位名称` , `bi_152610414374251569`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`个人卡夜间消费总次数` as `个人卡夜间消费总次数`,`个人卡夜间消费总金额` as `个人卡夜间消费总金额`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`个人卡累计消费金额` as `个人卡累计消费金额`,`个人卡消费金额方差` as `个人卡消费金额方差`,`个人卡累计消费次数` as `个人卡累计消费次数`,`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数`,`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比`,`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`个人卡累计充值金额` as `个人卡累计充值金额`,`单日充值次数过多次数` as `单日充值次数过多次数`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`个人卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`个人卡夜间消费总次数`,`个人卡夜间消费总金额`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`个人卡累计消费金额`,`个人卡消费金额方差`,`个人卡累计消费次数`,`个人卡消费金额为小数次数`,`个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比`,`个人卡天然气消费次数占比`,`ic卡大额非油消费次数`,`非油累计消费金额`,`非油与成品油消费金额比例`,`个人卡累计充值金额`,`单日充值次数过多次数`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,     
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `个人卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`, 
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`, 
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`,
       `单日消费次数过多次数`, 
       `个人卡夜间消费总次数`,
       `个人卡夜间消费总金额`,
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`, 
       `睡眠次数`,
       `是否仍在睡眠`,
       `个人卡累计消费金额`,
       `加油卡消费金额方差` `个人卡消费金额方差`,
       `个人卡累计消费次数`,
       `加油卡消费金额为小数次数` `个人卡消费金额为小数次数`,
       `个人卡消费过油品类型数量`,
       `个人卡消费过汽油品类型数量`,
       `个人卡汽油消费次数占比`,
       `个人卡汽油单笔高额消费次数`,
       `个人卡柴油消费次数占比`,
       `个人卡天然气消费次数占比`,
       `IC卡大额非油消费次数`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `个人卡累计充值金额`,
       `单日充值次数过多次数`, 
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `个人卡余额充足时充钱的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM DW04_SJFX.APP_AUAP_YK_PPL) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `bi_152610414374251569`  
     ) `bi_1777753835894362515`
      limit 1200001 
I0825 11:49:26.400068 55148 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:26.401185 55148 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:26.422219 55150 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:26.422771 55150 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:26.433043 55152 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:26.434952 55152 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:26.443033 55148 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:26.443934 55148 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:26.457445 55149 query-exec-mgr.cc:95] QueryState: query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:26.458439 55149 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:26.470862 55150 query-exec-mgr.cc:95] QueryState: query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:26.471838 55150 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:26.479336 55154 query-exec-mgr.cc:95] QueryState: query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:26.479871 55154 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:26.672585 55138 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:49:26.673848 55138 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:49:26.745620 55135 Frontend.java:947] Analysis finished.
I0825 11:49:26.751189 55135 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:49:26.754892 55135 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:49:26.769034 55135 admission-controller.cc:508] Schedule for id=b24f477464b4e6af:ff4672a00000000 in pool_name=root.agilebi cluster_mem_needed=6.68 GB PoolConfig: max_requests=500 max_queued=200 max_mem=800.00 GB
I0825 11:49:26.771868 55135 admission-controller.cc:513] Stats: agg_num_running=4, agg_num_queued=0, agg_mem_reserved=22.89 GB,  local_host(local_mem_admitted=17.17 GB, num_admitted_running=3, num_queued=0, backend_mem_reserved=3.81 GB)
I0825 11:49:26.775956 55135 admission-controller.cc:529] Admitted query id=b24f477464b4e6af:ff4672a00000000
I0825 11:49:26.778896 55135 coordinator.cc:93] Exec() query_id=b24f477464b4e6af:ff4672a00000000 stmt=select   `bi_1777753835894362515`.`帐号` as `bi_4405066279117047118` , `bi_1777753835894362515`.`卡号` as `bi_10248578450533883095` , `bi_1777753835894362515`.`卡类型描述` as `bi_6246159538240244065` , `bi_1777753835894362515`.`是否为副卡` as `bi_13540389403478941567` , `bi_1777753835894362515`.`交易主要站点` as `bi_2740263195203761510` , `bi_1777753835894362515`.`个人卡消费过加油站站点数量` as `bi_3616459640308034135` , `bi_1777753835894362515`.`交易类型描述` as `bi_10331142289063080322` , `bi_1777753835894362515`.`商品类型` as `bi_8759647043076232228` , `bi_1777753835894362515`.`商品类型描述` as `bi_14353747127936749017` , `bi_1777753835894362515`.`发卡单位` as `bi_10646976700040736340` , `bi_1777753835894362515`.`发卡单位与销售单位是否一致` as `bi_3120723227421642544` , `bi_1777753835894362515`.`首次交易日期` as `bi_14455382331679438995` , `bi_1777753835894362515`.`最近交易日期` as `bi_5478771142720032093` , `bi_1777753835894362515`.`平均油量升数` as `bi_617034579827635996` , `bi_1777753835894362515`.`平均消费金额` as `bi_15112077538935800504` , `bi_1777753835894362515`.`平均折扣金额` as `bi_3277906557631314998` , `bi_1777753835894362515`.`平均余额` as `bi_15647197458875151506` , `bi_1777753835894362515`.`日均消费笔数` as `bi_7064249764713199839` , `bi_1777753835894362515`.`日均消费金额` as `bi_10854565843347455823` , `bi_1777753835894362515`.`单日消费次数过多次数` as `bi_2261074975467520775` , `bi_1777753835894362515`.`个人卡夜间消费总次数` as `bi_11404968094779050130` , `bi_1777753835894362515`.`个人卡夜间消费总金额` as `bi_15065943078847283073` , `bi_1777753835894362515`.`日均夜间消费笔数` as `bi_15868460132744503901` , `bi_1777753835894362515`.`日均夜间消费金额` as `bi_15516783331422952374` , `bi_1777753835894362515`.`单日夜间消费次数过多次数` as `bi_16171388146955820514` , `bi_1777753835894362515`.`睡眠次数` as `bi_17048143494310675370` , `bi_1777753835894362515`.`是否仍在睡眠` as `bi_15197978810704604447` , `bi_1777753835894362515`.`个人卡累计消费金额` as `bi_7591110132802393138` , `bi_1777753835894362515`.`个人卡消费金额方差` as `bi_160391765441068244` , `bi_1777753835894362515`.`个人卡累计消费次数` as `bi_4156841468949947680` , `bi_1777753835894362515`.`个人卡消费金额为小数次数` as `bi_9794343777229462837` , `bi_1777753835894362515`.`个人卡消费过油品类型数量` as `bi_10293590438327478000` , `bi_1777753835894362515`.`个人卡消费过汽油品类型数量` as `bi_1177732512630799779` , `bi_1777753835894362515`.`个人卡汽油消费次数占比` as `bi_11456242312036654846` , `bi_1777753835894362515`.`个人卡汽油单笔高额消费次数` as `bi_9834182397780633995` , `bi_1777753835894362515`.`个人卡柴油消费次数占比` as `bi_6459884238352011348` , `bi_1777753835894362515`.`个人卡天然气消费次数占比` as `bi_16651092651258988174` , `bi_1777753835894362515`.`ic卡大额非油消费次数` as `bi_7054304210906615051` , `bi_1777753835894362515`.`非油累计消费金额` as `bi_16397999138841287705` , `bi_1777753835894362515`.`非油与成品油消费金额比例` as `bi_4542996461810298499` , `bi_1777753835894362515`.`个人卡累计充值金额` as `bi_4841881326785682188` , `bi_1777753835894362515`.`单日充值次数过多次数` as `bi_9422150591649301309` , `bi_1777753835894362515`.`即消费且余额低的次数831743621` as `bi_16833265966592949464` , `bi_1777753835894362515`.`同一班次消费的次数` as `bi_11088153473180053847` , `bi_1777753835894362515`.`密码重置次数` as `bi_3598974696379994152` , `bi_1777753835894362515`.`笔折扣额的消费的次数_2085032453` as `bi_5097711375700122218` , `bi_1777753835894362515`.`个人卡余额充足时充钱的次数` as `bi_8205063281634656287` , `bi_1777753835894362515`.`是否曾频繁转账` as `bi_14482952946536492029` , `bi_1777753835894362515`.`是否异常加油卡` as `bi_8782608630523284142` , `bi_1777753835894362515`.`单位名称` as `bi_14261383855208495737` , `bi_1777753835894362515`.`所属` as `bi_7873307995921860050` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_1777753835894362515`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_8081399462078118933` , TRIM(`bi_1777753835894362515`.`交易主要站点`) as `bi_616911404683852598`   from (select   `bi_152610414374251569`.`帐号` as `帐号` , `bi_152610414374251569`.`卡号` as `卡号` , `bi_152610414374251569`.`卡类型描述` as `卡类型描述` , `bi_152610414374251569`.`是否为副卡` as `是否为副卡` , `bi_152610414374251569`.`交易主要站点` as `交易主要站点` , `bi_152610414374251569`.`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量` , `bi_152610414374251569`.`交易类型描述` as `交易类型描述` , `bi_152610414374251569`.`商品类型` as `商品类型` , `bi_152610414374251569`.`商品类型描述` as `商品类型描述` , `bi_152610414374251569`.`发卡单位` as `发卡单位` , `bi_152610414374251569`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `bi_152610414374251569`.`首次交易日期` as `首次交易日期` , `bi_152610414374251569`.`最近交易日期` as `最近交易日期` , `bi_152610414374251569`.`平均油量升数` as `平均油量升数` , `bi_152610414374251569`.`平均消费金额` as `平均消费金额` , `bi_152610414374251569`.`平均折扣金额` as `平均折扣金额` , `bi_152610414374251569`.`平均余额` as `平均余额` , `bi_152610414374251569`.`日均消费笔数` as `日均消费笔数` , `bi_152610414374251569`.`日均消费金额` as `日均消费金额` , `bi_152610414374251569`.`单日消费次数过多次数` as `单日消费次数过多次数` , `bi_152610414374251569`.`个人卡夜间消费总次数` as `个人卡夜间消费总次数` , `bi_152610414374251569`.`个人卡夜间消费总金额` as `个人卡夜间消费总金额` , `bi_152610414374251569`.`日均夜间消费笔数` as `日均夜间消费笔数` , `bi_152610414374251569`.`日均夜间消费金额` as `日均夜间消费金额` , `bi_152610414374251569`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `bi_152610414374251569`.`睡眠次数` as `睡眠次数` , `bi_152610414374251569`.`是否仍在睡眠` as `是否仍在睡眠` , `bi_152610414374251569`.`个人卡累计消费金额` as `个人卡累计消费金额` , `bi_152610414374251569`.`个人卡消费金额方差` as `个人卡消费金额方差` , `bi_152610414374251569`.`个人卡累计消费次数` as `个人卡累计消费次数` , `bi_152610414374251569`.`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数` , `bi_152610414374251569`.`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量` , `bi_152610414374251569`.`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量` , `bi_152610414374251569`.`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比` , `bi_152610414374251569`.`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数` , `bi_152610414374251569`.`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比` , `bi_152610414374251569`.`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比` , `bi_152610414374251569`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `bi_152610414374251569`.`非油累计消费金额` as `非油累计消费金额` , `bi_152610414374251569`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `bi_152610414374251569`.`个人卡累计充值金额` as `个人卡累计充值金额` , `bi_152610414374251569`.`单日充值次数过多次数` as `单日充值次数过多次数` , `bi_152610414374251569`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `bi_152610414374251569`.`同一班次消费的次数` as `同一班次消费的次数` , `bi_152610414374251569`.`密码重置次数` as `密码重置次数` , `bi_152610414374251569`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `bi_152610414374251569`.`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数` , `bi_152610414374251569`.`是否曾频繁转账` as `是否曾频繁转账` , `bi_152610414374251569`.`是否异常加油卡` as `是否异常加油卡` , `bi_152610414374251569`.`单位名称` as `单位名称` , `bi_152610414374251569`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`个人卡夜间消费总次数` as `个人卡夜间消费总次数`,`个人卡夜间消费总金额` as `个人卡夜间消费总金额`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`个人卡累计消费金额` as `个人卡累计消费金额`,`个人卡消费金额方差` as `个人卡消费金额方差`,`个人卡累计消费次数` as `个人卡累计消费次数`,`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数`,`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比`,`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`个人卡累计充值金额` as `个人卡累计充值金额`,`单日充值次数过多次数` as `单日充值次数过多次数`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`个人卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`个人卡夜间消费总次数`,`个人卡夜间消费总金额`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`个人卡累计消费金额`,`个人卡消费金额方差`,`个人卡累计消费次数`,`个人卡消费金额为小数次数`,`个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比`,`个人卡天然气消费次数占比`,`ic卡大额非油消费次数`,`非油累计消费金额`,`非油与成品油消费金额比例`,`个人卡累计充值金额`,`单日充值次数过多次数`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,     
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `个人卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`, 
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`, 
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`,
       `单日消费次数过多次数`, 
       `个人卡夜间消费总次数`,
       `个人卡夜间消费总金额`,
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`, 
       `睡眠次数`,
       `是否仍在睡眠`,
       `个人卡累计消费金额`,
       `加油卡消费金额方差` `个人卡消费金额方差`,
       `个人卡累计消费次数`,
       `加油卡消费金额为小数次数` `个人卡消费金额为小数次数`,
       `个人卡消费过油品类型数量`,
       `个人卡消费过汽油品类型数量`,
       `个人卡汽油消费次数占比`,
       `个人卡汽油单笔高额消费次数`,
       `个人卡柴油消费次数占比`,
       `个人卡天然气消费次数占比`,
       `IC卡大额非油消费次数`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `个人卡累计充值金额`,
       `单日充值次数过多次数`, 
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `个人卡余额充足时充钱的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM DW04_SJFX.APP_AUAP_YK_PPL) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `bi_152610414374251569`  
     ) `bi_1777753835894362515`
      limit 1200001 
I0825 11:49:26.779557 55135 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:49:26.782086 55135 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:49:26.782935 55135 coordinator.cc:349] starting execution on 7 backends for query_id=b24f477464b4e6af:ff4672a00000000
I0825 11:49:26.787737 45240 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=b24f477464b4e6af:ff4672a00000000
I0825 11:49:26.788372 45240 query-exec-mgr.cc:46] StartQueryFInstances() query_id=b24f477464b4e6af:ff4672a00000000 coord=e4bdhpp025:22000
I0825 11:49:26.788686 45240 query-state.cc:178] Buffer pool limit for b24f477464b4e6af:ff4672a00000000: 819200000
I0825 11:49:26.789078 45240 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query b24f477464b4e6af:ff4672a00000000
I0825 11:49:26.791244 55161 query-state.cc:300] StartFInstances(): query_id=b24f477464b4e6af:ff4672a00000000 #instances=2
I0825 11:49:26.793344 55161 query-state.cc:313] descriptor table for query=b24f477464b4e6af:ff4672a00000000
tuples:
Tuple(id=0 size=583 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=576 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=576 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=STRING col_path=[10] offset=32 null=(offset=576 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[48] offset=48 null=(offset=576 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=STRING col_path=[39] offset=64 null=(offset=576 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=BIGINT col_path=[29] offset=352 null=(offset=578 mask=40) slot_idx=22 field_idx=-1), Slot(id=6 type=STRING col_path=[11] offset=80 null=(offset=576 mask=20) slot_idx=5 field_idx=-1), Slot(id=7 type=STRING col_path=[12] offset=96 null=(offset=576 mask=40) slot_idx=6 field_idx=-1), Slot(id=8 type=STRING col_path=[13] offset=112 null=(offset=576 mask=80) slot_idx=7 field_idx=-1), Slot(id=9 type=STRING col_path=[38] offset=128 null=(offset=577 mask=1) slot_idx=8 field_idx=-1), Slot(id=10 type=STRING col_path=[43] offset=144 null=(offset=577 mask=2) slot_idx=9 field_idx=-1), Slot(id=11 type=TIMESTAMP col_path=[15] offset=160 null=(offset=577 mask=4) slot_idx=10 field_idx=-1), Slot(id=12 type=TIMESTAMP col_path=[16] offset=176 null=(offset=577 mask=8) slot_idx=11 field_idx=-1), Slot(id=13 type=DECIMAL(16,2) col_path=[2] offset=360 null=(offset=578 mask=80) slot_idx=23 field_idx=-1), Slot(id=14 type=DECIMAL(17,2) col_path=[3] offset=368 null=(offset=579 mask=1) slot_idx=24 field_idx=-1), Slot(id=15 type=DECIMAL(17,2) col_path=[4] offset=376 null=(offset=579 mask=2) slot_idx=25 field_idx=-1), Slot(id=16 type=DECIMAL(17,2) col_path=[5] offset=384 null=(offset=579 mask=4) slot_idx=26 field_idx=-1), Slot(id=17 type=DOUBLE col_path=[6] offset=392 null=(offset=579 mask=8) slot_idx=27 field_idx=-1), Slot(id=18 type=DECIMAL(27,2) col_path=[7] offset=192 null=(offset=577 mask=10) slot_idx=12 field_idx=-1), Slot(id=19 type=BIGINT col_path=[25] offset=400 null=(offset=579 mask=10) slot_idx=28 field_idx=-1), Slot(id=20 type=BIGINT col_path=[27] offset=408 null=(offset=579 mask=20) slot_idx=29 field_idx=-1), Slot(id=21 type=DECIMAL(26,2) col_path=[28] offset=208 null=(offset=577 mask=20) slot_idx=13 field_idx=-1), Slot(id=22 type=DOUBLE col_path=[8] offset=416 null=(offset=579 mask=40) slot_idx=30 field_idx=-1), Slot(id=23 type=DECIMAL(27,2) col_path=[9] offset=224 null=(offset=577 mask=40) slot_idx=14 field_idx=-1), Slot(id=24 type=BIGINT col_path=[26] offset=424 null=(offset=579 mask=80) slot_idx=31 field_idx=-1), Slot(id=25 type=BIGINT col_path=[17] offset=432 null=(offset=580 mask=1) slot_idx=32 field_idx=-1), Slot(id=26 type=INT col_path=[18] offset=568 null=(offset=582 mask=2) slot_idx=49 field_idx=-1), Slot(id=27 type=DECIMAL(26,2) col_path=[41] offset=240 null=(offset=577 mask=80) slot_idx=15 field_idx=-1), Slot(id=28 type=DOUBLE col_path=[49] offset=440 null=(offset=580 mask=2) slot_idx=33 field_idx=-1), Slot(id=29 type=BIGINT col_path=[42] offset=448 null=(offset=580 mask=4) slot_idx=34 field_idx=-1), Slot(id=30 type=BIGINT col_path=[44] offset=456 null=(offset=580 mask=8) slot_idx=35 field_idx=-1), Slot(id=31 type=BIGINT col_path=[21] offset=464 null=(offset=580 mask=10) slot_idx=36 field_idx=-1), Slot(id=32 type=BIGINT col_path=[22] offset=472 null=(offset=580 mask=20) slot_idx=37 field_idx=-1), Slot(id=33 type=DOUBLE col_path=[45] offset=480 null=(offset=580 mask=40) slot_idx=38 field_idx=-1), Slot(id=34 type=BIGINT col_path=[20] offset=488 null=(offset=580 mask=80) slot_idx=39 field_idx=-1), Slot(id=35 type=DOUBLE col_path=[46] offset=496 null=(offset=581 mask=1) slot_idx=40 field_idx=-1), Slot(id=36 type=DOUBLE col_path=[47] offset=504 null=(offset=581 mask=2) slot_idx=41 field_idx=-1), Slot(id=37 type=BIGINT col_path=[19] offset=512 null=(offset=581 mask=4) slot_idx=42 field_idx=-1), Slot(id=38 type=DECIMAL(26,2) col_path=[30] offset=256 null=(offset=578 mask=1) slot_idx=16 field_idx=-1), Slot(id=39 type=DECIMAL(31,4) col_path=[31] offset=272 null=(offset=578 mask=2) slot_idx=17 field_idx=-1), Slot(id=40 type=DECIMAL(26,2) col_path=[23] offset=288 null=(offset=578 mask=4) slot_idx=18 field_idx=-1), Slot(id=41 type=BIGINT col_path=[24] offset=520 null=(offset=581 mask=8) slot_idx=43 field_idx=-1), Slot(id=42 type=BIGINT col_path=[32] offset=528 null=(offset=581 mask=10) slot_idx=44 field_idx=-1), Slot(id=43 type=BIGINT col_path=[33] offset=536 null=(offset=581 mask=20) slot_idx=45 field_idx=-1), Slot(id=44 type=BIGINT col_path=[40] offset=544 null=(offset=581 mask=40) slot_idx=46 field_idx=-1), Slot(id=45 type=BIGINT col_path=[34] offset=552 null=(offset=581 mask=80) slot_idx=47 field_idx=-1), Slot(id=46 type=BIGINT col_path=[35] offset=560 null=(offset=582 mask=1) slot_idx=48 field_idx=-1), Slot(id=47 type=INT col_path=[36] offset=572 null=(offset=582 mask=4) slot_idx=50 field_idx=-1), Slot(id=48 type=STRING col_path=[50] offset=304 null=(offset=578 mask=8) slot_idx=19 field_idx=-1), Slot(id=49 type=STRING col_path=[14] offset=320 null=(offset=578 mask=10) slot_idx=20 field_idx=-1), Slot(id=50 type=STRING col_path=[37] offset=336 null=(offset=578 mask=20) slot_idx=21 field_idx=-1)] tuple_path=[])
I0825 11:49:26.799225 55162 query-state.cc:395] Executing instance. instance_id=b24f477464b4e6af:ff4672a00000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=6 #in-flight=22
I0825 11:49:26.803339 55163 query-state.cc:395] Executing instance. instance_id=b24f477464b4e6af:ff4672a00000007 fragment_idx=1 per_fragment_instance_idx=6 coord_state_idx=6 #in-flight=23
I0825 11:49:26.808192 55163 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance 'b24f477464b4e6af:ff4672a00000007': 190
I0825 11:49:26.813694 55161 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=b24f477464b4e6af:ff4672a00000000 refcnt=4
W0825 11:49:26.892566 43831 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:49:26.897126 43831 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297896886_BP-1820042964-11.11.206.232-1548063025113
I0825 11:49:27.091064 55138 Frontend.java:947] Analysis finished.
I0825 11:49:27.094643 55138 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:49:27.095974 55138 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:49:27.103962 55138 admission-controller.cc:508] Schedule for id=564078f8b576bb47:c0cdecdc00000000 in pool_name=root.agilebi cluster_mem_needed=6.68 GB PoolConfig: max_requests=500 max_queued=200 max_mem=800.00 GB
I0825 11:49:27.105217 55138 admission-controller.cc:513] Stats: agg_num_running=5, agg_num_queued=0, agg_mem_reserved=28.61 GB,  local_host(local_mem_admitted=23.84 GB, num_admitted_running=4, num_queued=0, backend_mem_reserved=4.77 GB)
I0825 11:49:27.108333 55138 admission-controller.cc:529] Admitted query id=564078f8b576bb47:c0cdecdc00000000
I0825 11:49:27.109839 55138 coordinator.cc:93] Exec() query_id=564078f8b576bb47:c0cdecdc00000000 stmt=select   `bi_1777753835894362515`.`帐号` as `bi_4405066279117047118` , `bi_1777753835894362515`.`卡号` as `bi_10248578450533883095` , `bi_1777753835894362515`.`卡类型描述` as `bi_6246159538240244065` , `bi_1777753835894362515`.`是否为副卡` as `bi_13540389403478941567` , `bi_1777753835894362515`.`交易主要站点` as `bi_2740263195203761510` , `bi_1777753835894362515`.`个人卡消费过加油站站点数量` as `bi_3616459640308034135` , `bi_1777753835894362515`.`交易类型描述` as `bi_10331142289063080322` , `bi_1777753835894362515`.`商品类型` as `bi_8759647043076232228` , `bi_1777753835894362515`.`商品类型描述` as `bi_14353747127936749017` , `bi_1777753835894362515`.`发卡单位` as `bi_10646976700040736340` , `bi_1777753835894362515`.`发卡单位与销售单位是否一致` as `bi_3120723227421642544` , `bi_1777753835894362515`.`首次交易日期` as `bi_14455382331679438995` , `bi_1777753835894362515`.`最近交易日期` as `bi_5478771142720032093` , `bi_1777753835894362515`.`平均油量升数` as `bi_617034579827635996` , `bi_1777753835894362515`.`平均消费金额` as `bi_15112077538935800504` , `bi_1777753835894362515`.`平均折扣金额` as `bi_3277906557631314998` , `bi_1777753835894362515`.`平均余额` as `bi_15647197458875151506` , `bi_1777753835894362515`.`日均消费笔数` as `bi_7064249764713199839` , `bi_1777753835894362515`.`日均消费金额` as `bi_10854565843347455823` , `bi_1777753835894362515`.`单日消费次数过多次数` as `bi_2261074975467520775` , `bi_1777753835894362515`.`个人卡夜间消费总次数` as `bi_11404968094779050130` , `bi_1777753835894362515`.`个人卡夜间消费总金额` as `bi_15065943078847283073` , `bi_1777753835894362515`.`日均夜间消费笔数` as `bi_15868460132744503901` , `bi_1777753835894362515`.`日均夜间消费金额` as `bi_15516783331422952374` , `bi_1777753835894362515`.`单日夜间消费次数过多次数` as `bi_16171388146955820514` , `bi_1777753835894362515`.`睡眠次数` as `bi_17048143494310675370` , `bi_1777753835894362515`.`是否仍在睡眠` as `bi_15197978810704604447` , `bi_1777753835894362515`.`个人卡累计消费金额` as `bi_7591110132802393138` , `bi_1777753835894362515`.`个人卡消费金额方差` as `bi_160391765441068244` , `bi_1777753835894362515`.`个人卡累计消费次数` as `bi_4156841468949947680` , `bi_1777753835894362515`.`个人卡消费金额为小数次数` as `bi_9794343777229462837` , `bi_1777753835894362515`.`个人卡消费过油品类型数量` as `bi_10293590438327478000` , `bi_1777753835894362515`.`个人卡消费过汽油品类型数量` as `bi_1177732512630799779` , `bi_1777753835894362515`.`个人卡汽油消费次数占比` as `bi_11456242312036654846` , `bi_1777753835894362515`.`个人卡汽油单笔高额消费次数` as `bi_9834182397780633995` , `bi_1777753835894362515`.`个人卡柴油消费次数占比` as `bi_6459884238352011348` , `bi_1777753835894362515`.`个人卡天然气消费次数占比` as `bi_16651092651258988174` , `bi_1777753835894362515`.`ic卡大额非油消费次数` as `bi_7054304210906615051` , `bi_1777753835894362515`.`非油累计消费金额` as `bi_16397999138841287705` , `bi_1777753835894362515`.`非油与成品油消费金额比例` as `bi_4542996461810298499` , `bi_1777753835894362515`.`个人卡累计充值金额` as `bi_4841881326785682188` , `bi_1777753835894362515`.`单日充值次数过多次数` as `bi_9422150591649301309` , `bi_1777753835894362515`.`即消费且余额低的次数831743621` as `bi_16833265966592949464` , `bi_1777753835894362515`.`同一班次消费的次数` as `bi_11088153473180053847` , `bi_1777753835894362515`.`密码重置次数` as `bi_3598974696379994152` , `bi_1777753835894362515`.`笔折扣额的消费的次数_2085032453` as `bi_5097711375700122218` , `bi_1777753835894362515`.`个人卡余额充足时充钱的次数` as `bi_8205063281634656287` , `bi_1777753835894362515`.`是否曾频繁转账` as `bi_14482952946536492029` , `bi_1777753835894362515`.`是否异常加油卡` as `bi_8782608630523284142` , `bi_1777753835894362515`.`单位名称` as `bi_14261383855208495737` , `bi_1777753835894362515`.`所属` as `bi_7873307995921860050` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_1777753835894362515`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_8081399462078118933` , TRIM(`bi_1777753835894362515`.`交易主要站点`) as `bi_616911404683852598`   from (select   `bi_152610414374251569`.`帐号` as `帐号` , `bi_152610414374251569`.`卡号` as `卡号` , `bi_152610414374251569`.`卡类型描述` as `卡类型描述` , `bi_152610414374251569`.`是否为副卡` as `是否为副卡` , `bi_152610414374251569`.`交易主要站点` as `交易主要站点` , `bi_152610414374251569`.`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量` , `bi_152610414374251569`.`交易类型描述` as `交易类型描述` , `bi_152610414374251569`.`商品类型` as `商品类型` , `bi_152610414374251569`.`商品类型描述` as `商品类型描述` , `bi_152610414374251569`.`发卡单位` as `发卡单位` , `bi_152610414374251569`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `bi_152610414374251569`.`首次交易日期` as `首次交易日期` , `bi_152610414374251569`.`最近交易日期` as `最近交易日期` , `bi_152610414374251569`.`平均油量升数` as `平均油量升数` , `bi_152610414374251569`.`平均消费金额` as `平均消费金额` , `bi_152610414374251569`.`平均折扣金额` as `平均折扣金额` , `bi_152610414374251569`.`平均余额` as `平均余额` , `bi_152610414374251569`.`日均消费笔数` as `日均消费笔数` , `bi_152610414374251569`.`日均消费金额` as `日均消费金额` , `bi_152610414374251569`.`单日消费次数过多次数` as `单日消费次数过多次数` , `bi_152610414374251569`.`个人卡夜间消费总次数` as `个人卡夜间消费总次数` , `bi_152610414374251569`.`个人卡夜间消费总金额` as `个人卡夜间消费总金额` , `bi_152610414374251569`.`日均夜间消费笔数` as `日均夜间消费笔数` , `bi_152610414374251569`.`日均夜间消费金额` as `日均夜间消费金额` , `bi_152610414374251569`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `bi_152610414374251569`.`睡眠次数` as `睡眠次数` , `bi_152610414374251569`.`是否仍在睡眠` as `是否仍在睡眠` , `bi_152610414374251569`.`个人卡累计消费金额` as `个人卡累计消费金额` , `bi_152610414374251569`.`个人卡消费金额方差` as `个人卡消费金额方差` , `bi_152610414374251569`.`个人卡累计消费次数` as `个人卡累计消费次数` , `bi_152610414374251569`.`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数` , `bi_152610414374251569`.`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量` , `bi_152610414374251569`.`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量` , `bi_152610414374251569`.`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比` , `bi_152610414374251569`.`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数` , `bi_152610414374251569`.`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比` , `bi_152610414374251569`.`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比` , `bi_152610414374251569`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `bi_152610414374251569`.`非油累计消费金额` as `非油累计消费金额` , `bi_152610414374251569`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `bi_152610414374251569`.`个人卡累计充值金额` as `个人卡累计充值金额` , `bi_152610414374251569`.`单日充值次数过多次数` as `单日充值次数过多次数` , `bi_152610414374251569`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `bi_152610414374251569`.`同一班次消费的次数` as `同一班次消费的次数` , `bi_152610414374251569`.`密码重置次数` as `密码重置次数` , `bi_152610414374251569`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `bi_152610414374251569`.`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数` , `bi_152610414374251569`.`是否曾频繁转账` as `是否曾频繁转账` , `bi_152610414374251569`.`是否异常加油卡` as `是否异常加油卡` , `bi_152610414374251569`.`单位名称` as `单位名称` , `bi_152610414374251569`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`个人卡夜间消费总次数` as `个人卡夜间消费总次数`,`个人卡夜间消费总金额` as `个人卡夜间消费总金额`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`个人卡累计消费金额` as `个人卡累计消费金额`,`个人卡消费金额方差` as `个人卡消费金额方差`,`个人卡累计消费次数` as `个人卡累计消费次数`,`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数`,`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比`,`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`个人卡累计充值金额` as `个人卡累计充值金额`,`单日充值次数过多次数` as `单日充值次数过多次数`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`个人卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`个人卡夜间消费总次数`,`个人卡夜间消费总金额`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`个人卡累计消费金额`,`个人卡消费金额方差`,`个人卡累计消费次数`,`个人卡消费金额为小数次数`,`个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比`,`个人卡天然气消费次数占比`,`ic卡大额非油消费次数`,`非油累计消费金额`,`非油与成品油消费金额比例`,`个人卡累计充值金额`,`单日充值次数过多次数`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,     
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `个人卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`, 
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`, 
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`,
       `单日消费次数过多次数`, 
       `个人卡夜间消费总次数`,
       `个人卡夜间消费总金额`,
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`, 
       `睡眠次数`,
       `是否仍在睡眠`,
       `个人卡累计消费金额`,
       `加油卡消费金额方差` `个人卡消费金额方差`,
       `个人卡累计消费次数`,
       `加油卡消费金额为小数次数` `个人卡消费金额为小数次数`,
       `个人卡消费过油品类型数量`,
       `个人卡消费过汽油品类型数量`,
       `个人卡汽油消费次数占比`,
       `个人卡汽油单笔高额消费次数`,
       `个人卡柴油消费次数占比`,
       `个人卡天然气消费次数占比`,
       `IC卡大额非油消费次数`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `个人卡累计充值金额`,
       `单日充值次数过多次数`, 
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `个人卡余额充足时充钱的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM DW04_SJFX.APP_AUAP_YK_PPL) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `bi_152610414374251569`  
     ) `bi_1777753835894362515`
      limit 1200001 
I0825 11:49:27.110802 55138 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:49:27.111589 55138 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:49:27.112536 55138 coordinator.cc:349] starting execution on 7 backends for query_id=564078f8b576bb47:c0cdecdc00000000
I0825 11:49:27.116946 45240 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=564078f8b576bb47:c0cdecdc00000000
I0825 11:49:27.117425 45240 query-exec-mgr.cc:46] StartQueryFInstances() query_id=564078f8b576bb47:c0cdecdc00000000 coord=e4bdhpp025:22000
I0825 11:49:27.123430 45240 query-state.cc:178] Buffer pool limit for 564078f8b576bb47:c0cdecdc00000000: 819200000
I0825 11:49:27.123972 45240 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 564078f8b576bb47:c0cdecdc00000000
I0825 11:49:27.126263 55212 query-state.cc:300] StartFInstances(): query_id=564078f8b576bb47:c0cdecdc00000000 #instances=2
I0825 11:49:27.127600 55212 query-state.cc:313] descriptor table for query=564078f8b576bb47:c0cdecdc00000000
tuples:
Tuple(id=0 size=583 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=576 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=576 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=STRING col_path=[10] offset=32 null=(offset=576 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[48] offset=48 null=(offset=576 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=STRING col_path=[39] offset=64 null=(offset=576 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=BIGINT col_path=[29] offset=352 null=(offset=578 mask=40) slot_idx=22 field_idx=-1), Slot(id=6 type=STRING col_path=[11] offset=80 null=(offset=576 mask=20) slot_idx=5 field_idx=-1), Slot(id=7 type=STRING col_path=[12] offset=96 null=(offset=576 mask=40) slot_idx=6 field_idx=-1), Slot(id=8 type=STRING col_path=[13] offset=112 null=(offset=576 mask=80) slot_idx=7 field_idx=-1), Slot(id=9 type=STRING col_path=[38] offset=128 null=(offset=577 mask=1) slot_idx=8 field_idx=-1), Slot(id=10 type=STRING col_path=[43] offset=144 null=(offset=577 mask=2) slot_idx=9 field_idx=-1), Slot(id=11 type=TIMESTAMP col_path=[15] offset=160 null=(offset=577 mask=4) slot_idx=10 field_idx=-1), Slot(id=12 type=TIMESTAMP col_path=[16] offset=176 null=(offset=577 mask=8) slot_idx=11 field_idx=-1), Slot(id=13 type=DECIMAL(16,2) col_path=[2] offset=360 null=(offset=578 mask=80) slot_idx=23 field_idx=-1), Slot(id=14 type=DECIMAL(17,2) col_path=[3] offset=368 null=(offset=579 mask=1) slot_idx=24 field_idx=-1), Slot(id=15 type=DECIMAL(17,2) col_path=[4] offset=376 null=(offset=579 mask=2) slot_idx=25 field_idx=-1), Slot(id=16 type=DECIMAL(17,2) col_path=[5] offset=384 null=(offset=579 mask=4) slot_idx=26 field_idx=-1), Slot(id=17 type=DOUBLE col_path=[6] offset=392 null=(offset=579 mask=8) slot_idx=27 field_idx=-1), Slot(id=18 type=DECIMAL(27,2) col_path=[7] offset=192 null=(offset=577 mask=10) slot_idx=12 field_idx=-1), Slot(id=19 type=BIGINT col_path=[25] offset=400 null=(offset=579 mask=10) slot_idx=28 field_idx=-1), Slot(id=20 type=BIGINT col_path=[27] offset=408 null=(offset=579 mask=20) slot_idx=29 field_idx=-1), Slot(id=21 type=DECIMAL(26,2) col_path=[28] offset=208 null=(offset=577 mask=20) slot_idx=13 field_idx=-1), Slot(id=22 type=DOUBLE col_path=[8] offset=416 null=(offset=579 mask=40) slot_idx=30 field_idx=-1), Slot(id=23 type=DECIMAL(27,2) col_path=[9] offset=224 null=(offset=577 mask=40) slot_idx=14 field_idx=-1), Slot(id=24 type=BIGINT col_path=[26] offset=424 null=(offset=579 mask=80) slot_idx=31 field_idx=-1), Slot(id=25 type=BIGINT col_path=[17] offset=432 null=(offset=580 mask=1) slot_idx=32 field_idx=-1), Slot(id=26 type=INT col_path=[18] offset=568 null=(offset=582 mask=2) slot_idx=49 field_idx=-1), Slot(id=27 type=DECIMAL(26,2) col_path=[41] offset=240 null=(offset=577 mask=80) slot_idx=15 field_idx=-1), Slot(id=28 type=DOUBLE col_path=[49] offset=440 null=(offset=580 mask=2) slot_idx=33 field_idx=-1), Slot(id=29 type=BIGINT col_path=[42] offset=448 null=(offset=580 mask=4) slot_idx=34 field_idx=-1), Slot(id=30 type=BIGINT col_path=[44] offset=456 null=(offset=580 mask=8) slot_idx=35 field_idx=-1), Slot(id=31 type=BIGINT col_path=[21] offset=464 null=(offset=580 mask=10) slot_idx=36 field_idx=-1), Slot(id=32 type=BIGINT col_path=[22] offset=472 null=(offset=580 mask=20) slot_idx=37 field_idx=-1), Slot(id=33 type=DOUBLE col_path=[45] offset=480 null=(offset=580 mask=40) slot_idx=38 field_idx=-1), Slot(id=34 type=BIGINT col_path=[20] offset=488 null=(offset=580 mask=80) slot_idx=39 field_idx=-1), Slot(id=35 type=DOUBLE col_path=[46] offset=496 null=(offset=581 mask=1) slot_idx=40 field_idx=-1), Slot(id=36 type=DOUBLE col_path=[47] offset=504 null=(offset=581 mask=2) slot_idx=41 field_idx=-1), Slot(id=37 type=BIGINT col_path=[19] offset=512 null=(offset=581 mask=4) slot_idx=42 field_idx=-1), Slot(id=38 type=DECIMAL(26,2) col_path=[30] offset=256 null=(offset=578 mask=1) slot_idx=16 field_idx=-1), Slot(id=39 type=DECIMAL(31,4) col_path=[31] offset=272 null=(offset=578 mask=2) slot_idx=17 field_idx=-1), Slot(id=40 type=DECIMAL(26,2) col_path=[23] offset=288 null=(offset=578 mask=4) slot_idx=18 field_idx=-1), Slot(id=41 type=BIGINT col_path=[24] offset=520 null=(offset=581 mask=8) slot_idx=43 field_idx=-1), Slot(id=42 type=BIGINT col_path=[32] offset=528 null=(offset=581 mask=10) slot_idx=44 field_idx=-1), Slot(id=43 type=BIGINT col_path=[33] offset=536 null=(offset=581 mask=20) slot_idx=45 field_idx=-1), Slot(id=44 type=BIGINT col_path=[40] offset=544 null=(offset=581 mask=40) slot_idx=46 field_idx=-1), Slot(id=45 type=BIGINT col_path=[34] offset=552 null=(offset=581 mask=80) slot_idx=47 field_idx=-1), Slot(id=46 type=BIGINT col_path=[35] offset=560 null=(offset=582 mask=1) slot_idx=48 field_idx=-1), Slot(id=47 type=INT col_path=[36] offset=572 null=(offset=582 mask=4) slot_idx=50 field_idx=-1), Slot(id=48 type=STRING col_path=[50] offset=304 null=(offset=578 mask=8) slot_idx=19 field_idx=-1), Slot(id=49 type=STRING col_path=[14] offset=320 null=(offset=578 mask=10) slot_idx=20 field_idx=-1), Slot(id=50 type=STRING col_path=[37] offset=336 null=(offset=578 mask=20) slot_idx=21 field_idx=-1)] tuple_path=[])
I0825 11:49:27.132930 55214 query-state.cc:395] Executing instance. instance_id=564078f8b576bb47:c0cdecdc00000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=6 #in-flight=24
I0825 11:49:27.135728 55215 query-state.cc:395] Executing instance. instance_id=564078f8b576bb47:c0cdecdc00000007 fragment_idx=1 per_fragment_instance_idx=6 coord_state_idx=6 #in-flight=25
I0825 11:49:27.136291 55215 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '564078f8b576bb47:c0cdecdc00000007': 190
I0825 11:49:27.146243 55212 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=564078f8b576bb47:c0cdecdc00000000 refcnt=4
W0825 11:49:27.897789 43861 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:49:27.902192 43861 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297896886_BP-1820042964-11.11.206.232-1548063025113
I0825 11:49:29.566912 55676 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:29.569932 55676 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:29.584108 55678 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:29.585269 55678 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:29.599444 55676 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:29.600117 55676 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:29.607012 55678 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:29.607568 55678 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:29.624840 55680 query-exec-mgr.cc:95] QueryState: query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:29.625990 55680 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:29.636323 55155 query-exec-mgr.cc:95] QueryState: query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:29.637143 55155 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:29.649379 55676 query-exec-mgr.cc:95] QueryState: query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:29.650575 55676 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:29.658589 55678 query-exec-mgr.cc:95] QueryState: query_id=b24f477464b4e6af:ff4672a00000000 refcnt=4
I0825 11:49:29.659410 55678 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=b24f477464b4e6af:ff4672a00000000 refcnt=4
I0825 11:49:30.499433 44128 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp021@PANEL.COM" on an internal connection
I0825 11:49:30.910044 55135 coordinator.cc:362] started execution on 7 backends for query_id=b24f477464b4e6af:ff4672a00000000
I0825 11:49:30.916357 55135 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xaf\xe6\xb4dtGO\xb2\x00\x00\x00\x00*g\xf4\x0f",
      02: secret (string) = "\xaf\xe6\xb4dtGO\xb2\x00\x00\x00\x00*g\xf4\x0f",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:30.919095 55680 query-exec-mgr.cc:95] QueryState: query_id=564078f8b576bb47:c0cdecdc00000000 refcnt=4
I0825 11:49:30.919818 55680 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=564078f8b576bb47:c0cdecdc00000000 refcnt=4
I0825 11:49:30.985522 55135 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=b24f477464b4e6af:ff4672a00000000
I0825 11:49:30.987382 55135 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[53] {
      [0] = TColumnDesc {
        01: columnName (string) = "bi_4405066279117047118",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "bi_10248578450533883095",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "bi_6246159538240244065",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "bi_13540389403478941567",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "bi_2740263195203761510",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "bi_3616459640308034135",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "bi_10331142289063080322",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 6,
      },
      [7] = TColumnDesc {
        01: columnName (string) = "bi_8759647043076232228",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 7,
      },
      [8] = TColumnDesc {
        01: columnName (string) = "bi_14353747127936749017",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 8,
      },
      [9] = TColumnDesc {
        01: columnName (string) = "bi_10646976700040736340",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 9,
      },
      [10] = TColumnDesc {
        01: columnName (string) = "bi_3120723227421642544",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 10,
      },
      [11] = TColumnDesc {
        01: columnName (string) = "bi_14455382331679438995",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 11,
      },
      [12] = TColumnDesc {
        01: columnName (string) = "bi_5478771142720032093",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 12,
      },
      [13] = TColumnDesc {
        01: columnName (string) = "bi_617034579827635996",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 16,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 13,
      },
      [14] = TColumnDesc {
        01: columnName (string) = "bi_15112077538935800504",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 14,
      },
      [15] = TColumnDesc {
        01: columnName (string) = "bi_3277906557631314998",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 15,
      },
      [16] = TColumnDesc {
        01: columnName (string) = "bi_15647197458875151506",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 16,
      },
      [17] = TColumnDesc {
        01: columnName (string) = "bi_7064249764713199839",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 17,
      },
      [18] = TColumnDesc {
        01: columnName (string) = "bi_10854565843347455823",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 27,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 18,
      },
      [19] = TColumnDesc {
        01: columnName (string) = "bi_2261074975467520775",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 19,
      },
      [20] = TColumnDesc {
        01: columnName (string) = "bi_11404968094779050130",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 20,
      },
      [21] = TColumnDesc {
        01: columnName (string) = "bi_15065943078847283073",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 21,
      },
      [22] = TColumnDesc {
        01: columnName (string) = "bi_15868460132744503901",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 22,
      },
      [23] = TColumnDesc {
        01: columnName (string) = "bi_15516783331422952374",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 27,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 23,
      },
      [24] = TColumnDesc {
        01: columnName (string) = "bi_16171388146955820514",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 24,
      },
      [25] = TColumnDesc {
        01: columnName (string) = "bi_17048143494310675370",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 25,
      },
      [26] = TColumnDesc {
        01: columnName (string) = "bi_15197978810704604447",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 26,
      },
      [27] = TColumnDesc {
        01: columnName (string) = "bi_7591110132802393138",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 27,
      },
      [28] = TColumnDesc {
        01: columnName (string) = "bi_160391765441068244",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 28,
      },
      [29] = TColumnDesc {
        01: columnName (string) = "bi_4156841468949947680",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 29,
      },
      [30] = TColumnDesc {
        01: columnName (string) = "bi_9794343777229462837",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 30,
      },
      [31] = TColumnDesc {
        01: columnName (string) = "bi_10293590438327478000",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 31,
      },
      [32] = TColumnDesc {
        01: columnName (string) = "bi_1177732512630799779",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 32,
      },
      [33] = TColumnDesc {
        01: columnName (string) = "bi_11456242312036654846",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 33,
      },
      [34] = TColumnDesc {
        01: columnName (string) = "bi_9834182397780633995",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 34,
      },
      [35] = TColumnDesc {
        01: columnName (string) = "bi_6459884238352011348",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 35,
      },
      [36] = TColumnDesc {
        01: columnName (string) = "bi_16651092651258988174",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 36,
      },
      [37] = TColumnDesc {
        01: columnName (string) = "bi_7054304210906615051",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 37,
      },
      [38] = TColumnDesc {
        01: columnName (string) = "bi_16397999138841287705",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 38,
      },
      [39] = TColumnDesc {
        01: columnName (string) = "bi_4542996461810298499",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 31,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 4,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 39,
      },
      [40] = TColumnDesc {
        01: columnName (string) = "bi_4841881326785682188",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 40,
      },
      [41] = TColumnDesc {
        01: columnName (string) = "bi_9422150591649301309",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 41,
      },
      [42] = TColumnDesc {
        01: columnName (string) = "bi_16833265966592949464",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 42,
      },
      [43] = TColumnDesc {
        01: columnName (string) = "bi_11088153473180053847",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 43,
      },
      [44] = TColumnDesc {
        01: columnName (string) = "bi_3598974696379994152",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 44,
      },
      [45] = TColumnDesc {
        01: columnName (string) = "bi_5097711375700122218",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 45,
      },
      [46] = TColumnDesc {
        01: columnName (string) = "bi_8205063281634656287",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 46,
      },
      [47] = TColumnDesc {
        01: columnName (string) = "bi_14482952946536492029",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 47,
      },
      [48] = TColumnDesc {
        01: columnName (string) = "bi_8782608630523284142",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 48,
      },
      [49] = TColumnDesc {
        01: columnName (string) = "bi_14261383855208495737",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 49,
      },
      [50] = TColumnDesc {
        01: columnName (string) = "bi_7873307995921860050",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 50,
      },
      [51] = TColumnDesc {
        01: columnName (string) = "bi_8081399462078118933",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 51,
      },
      [52] = TColumnDesc {
        01: columnName (string) = "bi_616911404683852598",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 52,
      },
    },
  },
}
I0825 11:49:31.750074 55138 coordinator.cc:362] started execution on 7 backends for query_id=564078f8b576bb47:c0cdecdc00000000
I0825 11:49:31.772187 51940 coordinator.cc:689] Backend completed:  host=e4bdhpp021:22000 remaining=6 query_id=564078f8b576bb47:c0cdecdc00000000
I0825 11:49:31.772941 55138 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "G\xbbv\xb5\xf8x@V\x00\x00\x00\x00\xdc\xec\xcd\xc0",
      02: secret (string) = "G\xbbv\xb5\xf8x@V\x00\x00\x00\x00\xdc\xec\xcd\xc0",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:31.776580 51940 coordinator-backend-state.cc:226] query_id=564078f8b576bb47:c0cdecdc00000000: first in-progress backend: e4bdhpp010:22000
I0825 11:49:31.789877 55138 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=564078f8b576bb47:c0cdecdc00000000
I0825 11:49:31.792078 55138 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[53] {
      [0] = TColumnDesc {
        01: columnName (string) = "bi_4405066279117047118",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "bi_10248578450533883095",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "bi_6246159538240244065",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "bi_13540389403478941567",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "bi_2740263195203761510",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "bi_3616459640308034135",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "bi_10331142289063080322",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 6,
      },
      [7] = TColumnDesc {
        01: columnName (string) = "bi_8759647043076232228",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 7,
      },
      [8] = TColumnDesc {
        01: columnName (string) = "bi_14353747127936749017",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 8,
      },
      [9] = TColumnDesc {
        01: columnName (string) = "bi_10646976700040736340",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 9,
      },
      [10] = TColumnDesc {
        01: columnName (string) = "bi_3120723227421642544",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 10,
      },
      [11] = TColumnDesc {
        01: columnName (string) = "bi_14455382331679438995",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 11,
      },
      [12] = TColumnDesc {
        01: columnName (string) = "bi_5478771142720032093",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 12,
      },
      [13] = TColumnDesc {
        01: columnName (string) = "bi_617034579827635996",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 16,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 13,
      },
      [14] = TColumnDesc {
        01: columnName (string) = "bi_15112077538935800504",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 14,
      },
      [15] = TColumnDesc {
        01: columnName (string) = "bi_3277906557631314998",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 15,
      },
      [16] = TColumnDesc {
        01: columnName (string) = "bi_15647197458875151506",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 16,
      },
      [17] = TColumnDesc {
        01: columnName (string) = "bi_7064249764713199839",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 17,
      },
      [18] = TColumnDesc {
        01: columnName (string) = "bi_10854565843347455823",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 27,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 18,
      },
      [19] = TColumnDesc {
        01: columnName (string) = "bi_2261074975467520775",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 19,
      },
      [20] = TColumnDesc {
        01: columnName (string) = "bi_11404968094779050130",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 20,
      },
      [21] = TColumnDesc {
        01: columnName (string) = "bi_15065943078847283073",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 21,
      },
      [22] = TColumnDesc {
        01: columnName (string) = "bi_15868460132744503901",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 22,
      },
      [23] = TColumnDesc {
        01: columnName (string) = "bi_15516783331422952374",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 27,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 23,
      },
      [24] = TColumnDesc {
        01: columnName (string) = "bi_16171388146955820514",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 24,
      },
      [25] = TColumnDesc {
        01: columnName (string) = "bi_17048143494310675370",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 25,
      },
      [26] = TColumnDesc {
        01: columnName (string) = "bi_15197978810704604447",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 26,
      },
      [27] = TColumnDesc {
        01: columnName (string) = "bi_7591110132802393138",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 27,
      },
      [28] = TColumnDesc {
        01: columnName (string) = "bi_160391765441068244",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 28,
      },
      [29] = TColumnDesc {
        01: columnName (string) = "bi_4156841468949947680",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 29,
      },
      [30] = TColumnDesc {
        01: columnName (string) = "bi_9794343777229462837",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 30,
      },
      [31] = TColumnDesc {
        01: columnName (string) = "bi_10293590438327478000",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 31,
      },
      [32] = TColumnDesc {
        01: columnName (string) = "bi_1177732512630799779",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 32,
      },
      [33] = TColumnDesc {
        01: columnName (string) = "bi_11456242312036654846",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 33,
      },
      [34] = TColumnDesc {
        01: columnName (string) = "bi_9834182397780633995",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 34,
      },
      [35] = TColumnDesc {
        01: columnName (string) = "bi_6459884238352011348",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 35,
      },
      [36] = TColumnDesc {
        01: columnName (string) = "bi_16651092651258988174",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 36,
      },
      [37] = TColumnDesc {
        01: columnName (string) = "bi_7054304210906615051",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 37,
      },
      [38] = TColumnDesc {
        01: columnName (string) = "bi_16397999138841287705",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 38,
      },
      [39] = TColumnDesc {
        01: columnName (string) = "bi_4542996461810298499",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 31,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 4,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 39,
      },
      [40] = TColumnDesc {
        01: columnName (string) = "bi_4841881326785682188",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 40,
      },
      [41] = TColumnDesc {
        01: columnName (string) = "bi_9422150591649301309",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 41,
      },
      [42] = TColumnDesc {
        01: columnName (string) = "bi_16833265966592949464",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 42,
      },
      [43] = TColumnDesc {
        01: columnName (string) = "bi_11088153473180053847",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 43,
      },
      [44] = TColumnDesc {
        01: columnName (string) = "bi_3598974696379994152",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 44,
      },
      [45] = TColumnDesc {
        01: columnName (string) = "bi_5097711375700122218",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 45,
      },
      [46] = TColumnDesc {
        01: columnName (string) = "bi_8205063281634656287",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 46,
      },
      [47] = TColumnDesc {
        01: columnName (string) = "bi_14482952946536492029",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 47,
      },
      [48] = TColumnDesc {
        01: columnName (string) = "bi_8782608630523284142",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 48,
      },
      [49] = TColumnDesc {
        01: columnName (string) = "bi_14261383855208495737",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 49,
      },
      [50] = TColumnDesc {
        01: columnName (string) = "bi_7873307995921860050",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 50,
      },
      [51] = TColumnDesc {
        01: columnName (string) = "bi_8081399462078118933",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 51,
      },
      [52] = TColumnDesc {
        01: columnName (string) = "bi_616911404683852598",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 52,
      },
    },
  },
}
I0825 11:49:32.663174 44128 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp010@PANEL.COM" on an internal connection
I0825 11:49:33.895924 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:49:33.909706 55726 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:49:33.915638 55726 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x97_\xdd\x8a\x98\x14A\xe6\x8a4\x93\xa4\x83\xead\x80",
      02: secret (string) = "\xc9\xc4\xa5\xb7\x8cxH4\x9dcL\x98\x93eB\x1b",
    },
  },
  02: infoType (i32) = 18,
}
W0825 11:49:34.017904 43863 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:49:34.019357 43863 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297896886_BP-1820042964-11.11.206.232-1548063025113
I0825 11:49:34.284255 55726 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x97_\xdd\x8a\x98\x14A\xe6\x8a4\x93\xa4\x83\xead\x80",
      02: secret (string) = "\xc9\xc4\xa5\xb7\x8cxH4\x9dcL\x98\x93eB\x1b",
    },
  },
}
I0825 11:49:34.285432 55726 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:36696 closed, closing 1 associated session(s)
I0825 11:49:34.314544 52773 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=4947fc280ea111fa:35861fec00000000
I0825 11:49:34.315404 52773 query-exec-mgr.cc:46] StartQueryFInstances() query_id=4947fc280ea111fa:35861fec00000000 coord=e4bdhpp023:22000
I0825 11:49:34.316074 52773 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:49:34.322887 52773 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:49:34.323377 52773 query-state.cc:178] Buffer pool limit for 4947fc280ea111fa:35861fec00000000: 6871947673
I0825 11:49:34.327796 52773 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 4947fc280ea111fa:35861fec00000000
I0825 11:49:34.331912 55771 query-state.cc:300] StartFInstances(): query_id=4947fc280ea111fa:35861fec00000000 #instances=1
I0825 11:49:34.333433 55771 query-state.cc:313] descriptor table for query=4947fc280ea111fa:35861fec00000000
tuples:
Tuple(id=0 size=97 slots=[Slot(id=2 type=DECIMAL(38,0) col_path=[2] offset=0 null=(offset=96 mask=1) slot_idx=0 field_idx=-1), Slot(id=3 type=STRING col_path=[3] offset=16 null=(offset=96 mask=2) slot_idx=1 field_idx=-1), Slot(id=4 type=DECIMAL(38,0) col_path=[4] offset=32 null=(offset=96 mask=4) slot_idx=2 field_idx=-1), Slot(id=5 type=STRING col_path=[5] offset=48 null=(offset=96 mask=8) slot_idx=3 field_idx=-1), Slot(id=6 type=STRING col_path=[6] offset=64 null=(offset=96 mask=10) slot_idx=4 field_idx=-1), Slot(id=7 type=STRING col_path=[7] offset=80 null=(offset=96 mask=20) slot_idx=5 field_idx=-1)] tuple_path=[])
I0825 11:49:34.345790 55773 query-state.cc:395] Executing instance. instance_id=4947fc280ea111fa:35861fec00000001 fragment_idx=1 per_fragment_instance_idx=0 coord_state_idx=1 #in-flight=26
I0825 11:49:34.348747 55773 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '4947fc280ea111fa:35861fec00000001': 190
I0825 11:49:34.358870 55771 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=4947fc280ea111fa:35861fec00000000 refcnt=2
I0825 11:49:34.642405 52773 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=9f413c281596793d:62029f400000000
I0825 11:49:34.643234 52773 query-exec-mgr.cc:46] StartQueryFInstances() query_id=9f413c281596793d:62029f400000000 coord=e4bdhpp023:22000
I0825 11:49:34.644529 52773 query-state.cc:156] Using query memory limit from query options: 8.00 GB
I0825 11:49:34.645246 52773 mem-tracker.cc:191] Using query memory limit: 8.00 GB
I0825 11:49:34.646682 52773 query-state.cc:178] Buffer pool limit for 9f413c281596793d:62029f400000000: 6871947673
I0825 11:49:34.648165 52773 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 9f413c281596793d:62029f400000000
I0825 11:49:34.659229 55846 query-state.cc:300] StartFInstances(): query_id=9f413c281596793d:62029f400000000 #instances=1
I0825 11:49:34.660887 55846 query-state.cc:313] descriptor table for query=9f413c281596793d:62029f400000000
tuples:
Tuple(id=6 size=8 slots=[Slot(id=68 type=BIGINT col_path=[] offset=0 null=(offset=0 mask=0) slot_idx=0 field_idx=-1)] tuple_path=[])
Tuple(id=0 size=17 slots=[Slot(id=3 type=STRING col_path=[3] offset=0 null=(offset=16 mask=1) slot_idx=0 field_idx=-1)] tuple_path=[])
I0825 11:49:34.665889 55850 query-state.cc:395] Executing instance. instance_id=9f413c281596793d:62029f400000001 fragment_idx=1 per_fragment_instance_idx=0 coord_state_idx=1 #in-flight=27
I0825 11:49:34.666458 55850 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '9f413c281596793d:62029f400000001': 190
I0825 11:49:34.672201 55846 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=9f413c281596793d:62029f400000000 refcnt=2
I0825 11:49:34.837798 55912 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:34.838949 55912 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:34.859434 55917 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:34.860816 55917 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:34.875715 55155 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:34.876453 55155 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:34.889125 55912 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:34.890293 55912 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:34.907991 55932 query-exec-mgr.cc:95] QueryState: query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:34.913365 55932 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:34.925788 55922 query-exec-mgr.cc:95] QueryState: query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:34.926941 55922 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:34.936889 55924 query-exec-mgr.cc:95] QueryState: query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:34.938622 55924 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:34.946168 55914 query-exec-mgr.cc:95] QueryState: query_id=b24f477464b4e6af:ff4672a00000000 refcnt=4
I0825 11:49:34.946933 55914 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=b24f477464b4e6af:ff4672a00000000 refcnt=4
I0825 11:49:34.968268 55917 query-exec-mgr.cc:95] QueryState: query_id=564078f8b576bb47:c0cdecdc00000000 refcnt=4
I0825 11:49:34.969789 55917 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=564078f8b576bb47:c0cdecdc00000000 refcnt=4
W0825 11:49:35.023175 43860 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:49:35.024399 43860 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297896886_BP-1820042964-11.11.206.232-1548063025113
I0825 11:49:35.030591 55773 query-state.cc:403] Instance completed. instance_id=4947fc280ea111fa:35861fec00000001 #in-flight=26 status=OK
I0825 11:49:35.031103 55773 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=4947fc280ea111fa:35861fec00000000 refcnt=1
I0825 11:49:35.055866 55185 runtime-state.cc:170] Error from query b24f477464b4e6af:ff4672a00000000: Memory limit exceeded: Could not allocate string buffer of 21 bytes for ORC file 'hdfs://cluster1/apps/hive/warehouse/dw04_sjfx.db/app_auap_yk_ppl/000002_0'.
HDFS_SCAN_NODE (id=0) could not allocate 21.00 B without exceeding limit.
Error occurred on backend e4bdhpp025:22000 by fragment b24f477464b4e6af:ff4672a00000007
Memory left in process limit: 282.06 GB
Memory left in query limit: 336.53 KB
Query(b24f477464b4e6af:ff4672a00000000): Limit=976.56 MB Reservation=0 ReservationLimit=781.25 MB OtherMemory=976.23 MB Total=976.23 MB Peak=976.23 MB
  Fragment b24f477464b4e6af:ff4672a00000000: Reservation=0 OtherMemory=19.62 MB Total=19.62 MB Peak=19.70 MB
    EXCHANGE_NODE (id=1): Reservation=18.94 MB OtherMemory=623.14 KB Total=19.55 MB Peak=19.62 MB
      KrpcDeferredRpcs: Total=623.14 KB Peak=806.54 KB
    PLAN_ROOT_SINK: Total=64.00 KB Peak=64.00 KB
      PLAN_ROOT_SINK Exprs: Total=64.00 KB Peak=64.00 KB
    CodeGen: Total=4.96 KB Peak=924.00 KB
  Fragment b24f477464b4e6af:ff4672a00000007: Reservation=0 OtherMemory=956.61 MB Total=956.61 MB Peak=956.61 MB
    HDFS_SCAN_NODE (id=0): Total=948.04 MB Peak=948.04 MB
      Exprs: Total=4.00 KB Peak=4.00 KB
    KrpcDataStreamSender (dst_id=1): Total=224.00 B Peak=224.00 B
    CodeGen: Total=211.00 B Peak=128.00 KB
I0825 11:49:35.057308 55185 hdfs-scan-node.cc:541] Scan node (id=0) ran into a parse error for scan range hdfs://cluster1/apps/hive/warehouse/dw04_sjfx.db/app_auap_yk_ppl/000002_0(190410345:102400). Processed 0 bytes.
I0825 11:49:35.522676 55850 query-state.cc:403] Instance completed. instance_id=9f413c281596793d:62029f400000001 #in-flight=25 status=OK
I0825 11:49:35.523435 55850 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=9f413c281596793d:62029f400000000 refcnt=1
I0825 11:49:35.626029 48391 thrift-util.cc:123] TSocket::read() recv() <Host: ::ffff:11.11.206.242 Port: 34480>Connection reset by peer
I0825 11:49:35.625998 48585 thrift-util.cc:123] TSocket::read() recv() <Host: ::ffff:11.11.206.242 Port: 34672>Connection reset by peer
I0825 11:49:35.626152 45244 thrift-util.cc:123] TSocket::read() recv() <Host: ::ffff:11.11.206.242 Port: 56638>Connection reset by peer
I0825 11:49:35.628713 48585 thrift-util.cc:123] TAcceptQueueServer client died: ECONNRESET
I0825 11:49:35.626062 48682 thrift-util.cc:123] TSocket::read() recv() <Host: ::ffff:11.11.206.242 Port: 34888>Connection reset by peer
I0825 11:49:35.626175 47386 thrift-util.cc:123] TSocket::read() recv() <Host: ::ffff:11.11.206.242 Port: 60988>Connection reset by peer
I0825 11:49:35.629704 48682 thrift-util.cc:123] TAcceptQueueServer client died: ECONNRESET
I0825 11:49:35.630124 47386 thrift-util.cc:123] TAcceptQueueServer client died: ECONNRESET
I0825 11:49:35.626473 48603 thrift-util.cc:123] TSocket::read() recv() <Host: ::ffff:11.11.206.242 Port: 34730>Connection reset by peer
I0825 11:49:35.626430 48690 thrift-util.cc:123] TSocket::read() recv() <Host: ::ffff:11.11.206.242 Port: 34948>Connection reset by peer
I0825 11:49:35.626350 43721 connection.cc:511] client connection to 11.11.206.242:27000 shut down by remote end.
I0825 11:49:35.626636 48242 thrift-util.cc:123] TSocket::read() recv() <Host: ::ffff:11.11.206.242 Port: 34340>Connection reset by peer
I0825 11:49:35.627106 45435 thrift-util.cc:123] TSocket::read() recv() <Host: ::ffff:11.11.206.242 Port: 59044>Connection reset by peer
I0825 11:49:35.626787 45418 thrift-util.cc:123] TSocket::read() recv() <Host: ::ffff:11.11.206.242 Port: 58058>Connection reset by peer
I0825 11:49:35.634291 45418 thrift-util.cc:123] TAcceptQueueServer client died: ECONNRESET
I0825 11:49:35.628151 48525 thrift-util.cc:123] TSocket::read() recv() <Host: ::ffff:11.11.206.242 Port: 34536>Connection reset by peer
I0825 11:49:35.628238 48391 thrift-util.cc:123] TAcceptQueueServer client died: ECONNRESET
I0825 11:49:35.634868 48525 thrift-util.cc:123] TAcceptQueueServer client died: ECONNRESET
I0825 11:49:35.629014 45244 thrift-util.cc:123] TAcceptQueueServer client died: ECONNRESET
I0825 11:49:35.626294 47869 thrift-util.cc:123] TSocket::read() recv() <Host: ::ffff:11.11.206.242 Port: 33466>Connection reset by peer
W0825 11:49:35.626111 43731 connection.cc:513] server connection from 11.11.206.242:32906 recv error: Network error: recv error: Connection reset by peer (error 104)
I0825 11:49:35.630913 48603 thrift-util.cc:123] TAcceptQueueServer client died: ECONNRESET
I0825 11:49:35.632350 48690 thrift-util.cc:123] TAcceptQueueServer client died: ECONNRESET
I0825 11:49:35.633738 48242 thrift-util.cc:123] TAcceptQueueServer client died: ECONNRESET
I0825 11:49:35.634104 45435 thrift-util.cc:123] TAcceptQueueServer client died: ECONNRESET
I0825 11:49:35.627451 48280 thrift-util.cc:123] TSocket::read() recv() <Host: ::ffff:11.11.206.242 Port: 34386>Connection reset by peer
I0825 11:49:35.626296 45342 thrift-util.cc:123] TSocket::read() recv() <Host: ::ffff:11.11.206.242 Port: 57076>Connection reset by peer
I0825 11:49:35.637981 47869 thrift-util.cc:123] TAcceptQueueServer client died: ECONNRESET
I0825 11:49:35.642400 45342 thrift-util.cc:123] TAcceptQueueServer client died: ECONNRESET
I0825 11:49:35.642184 48280 thrift-util.cc:123] TAcceptQueueServer client died: ECONNRESET
I0825 11:49:35.931277 55227 runtime-state.cc:170] Error from query 564078f8b576bb47:c0cdecdc00000000: Memory limit exceeded: Could not allocate string buffer of 80 bytes for ORC file 'hdfs://cluster1/apps/hive/warehouse/dw04_sjfx.db/app_auap_yk_ppl/000002_0'.
HDFS_SCAN_NODE (id=0) could not allocate 80.00 B without exceeding limit.
Error occurred on backend e4bdhpp025:22000 by fragment 564078f8b576bb47:c0cdecdc00000007
Memory left in process limit: 282.02 GB
Memory left in query limit: 74.35 KB
Query(564078f8b576bb47:c0cdecdc00000000): Limit=976.56 MB Reservation=0 ReservationLimit=781.25 MB OtherMemory=976.49 MB Total=976.49 MB Peak=976.49 MB
  Fragment 564078f8b576bb47:c0cdecdc00000000: Reservation=0 OtherMemory=17.62 MB Total=17.62 MB Peak=17.66 MB
    EXCHANGE_NODE (id=1): Reservation=16.99 MB OtherMemory=561.92 KB Total=17.54 MB Peak=17.59 MB
      KrpcDeferredRpcs: Total=561.92 KB Peak=611.37 KB
    PLAN_ROOT_SINK: Total=64.00 KB Peak=64.00 KB
      PLAN_ROOT_SINK Exprs: Total=64.00 KB Peak=64.00 KB
    CodeGen: Total=4.96 KB Peak=924.00 KB
  Fragment 564078f8b576bb47:c0cdecdc00000007: Reservation=0 OtherMemory=958.87 MB Total=958.87 MB Peak=958.87 MB
    HDFS_SCAN_NODE (id=0): Total=950.30 MB Peak=950.30 MB
      Exprs: Total=4.00 KB Peak=4.00 KB
    KrpcDataStreamSender (dst_id=1): Total=224.00 B Peak=224.00 B
    CodeGen: Total=211.00 B Peak=128.00 KB
I0825 11:49:35.933274 55227 hdfs-scan-node.cc:541] Scan node (id=0) ran into a parse error for scan range hdfs://cluster1/apps/hive/warehouse/dw04_sjfx.db/app_auap_yk_ppl/000002_0(190410345:102400). Processed 0 bytes.
I0825 11:49:35.933439 55226 runtime-state.cc:170] Error from query 564078f8b576bb47:c0cdecdc00000000: Memory limit exceeded: Failed to allocate tuple buffer
HDFS_SCAN_NODE (id=0) could not allocate 583.00 KB without exceeding limit.
Error occurred on backend e4bdhpp025:22000 by fragment 564078f8b576bb47:c0cdecdc00000007
Memory left in process limit: 282.02 GB
Memory left in query limit: 74.35 KB
Query(564078f8b576bb47:c0cdecdc00000000): Limit=976.56 MB Reservation=0 ReservationLimit=781.25 MB OtherMemory=976.49 MB Total=976.49 MB Peak=976.49 MB
  Fragment 564078f8b576bb47:c0cdecdc00000000: Reservation=0 OtherMemory=17.62 MB Total=17.62 MB Peak=17.66 MB
    EXCHANGE_NODE (id=1): Reservation=16.99 MB OtherMemory=561.92 KB Total=17.54 MB Peak=17.59 MB
      KrpcDeferredRpcs: Total=561.92 KB Peak=611.37 KB
    PLAN_ROOT_SINK: Total=64.00 KB Peak=64.00 KB
      PLAN_ROOT_SINK Exprs: Total=64.00 KB Peak=64.00 KB
    CodeGen: Total=4.96 KB Peak=924.00 KB
  Fragment 564078f8b576bb47:c0cdecdc00000007: Reservation=0 OtherMemory=958.87 MB Total=958.87 MB Peak=958.87 MB
    HDFS_SCAN_NODE (id=0): Total=950.30 MB Peak=950.30 MB
      Exprs: Total=4.00 KB Peak=4.00 KB
    KrpcDataStreamSender (dst_id=1): Total=224.00 B Peak=224.00 B
    CodeGen: Total=211.00 B Peak=128.00 KB
I0825 11:49:35.934518 55226 hdfs-scan-node.cc:541] Scan node (id=0) ran into a parse error for scan range hdfs://cluster1/apps/hive/warehouse/dw04_sjfx.db/app_auap_yk_ppl/000003_0(190414868:102400). Processed 0 bytes.
I0825 11:49:38.026093 56141 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:38.027529 56141 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:38.043180 56142 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:38.044479 56142 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:38.052037 56143 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:38.053282 56143 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:38.062619 56144 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:38.063480 56144 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:38.073662 56146 query-exec-mgr.cc:95] QueryState: query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:38.074330 56146 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:38.084161 56148 query-exec-mgr.cc:95] QueryState: query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:38.085108 56148 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:38.092509 56141 query-exec-mgr.cc:95] QueryState: query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:38.093189 56141 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:38.100749 55944 query-exec-mgr.cc:95] QueryState: query_id=b24f477464b4e6af:ff4672a00000000 refcnt=4
I0825 11:49:38.101336 55944 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=b24f477464b4e6af:ff4672a00000000 refcnt=4
I0825 11:49:38.109894 56144 query-exec-mgr.cc:95] QueryState: query_id=564078f8b576bb47:c0cdecdc00000000 refcnt=4
I0825 11:49:38.110334 56144 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=564078f8b576bb47:c0cdecdc00000000 refcnt=4
I0825 11:49:41.156244 54261 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:41.157179 54261 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:41.166535 56165 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:41.167322 56165 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:41.177680 56166 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:41.178444 56166 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:41.190608 56147 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:41.191332 56147 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:41.203289 54261 query-exec-mgr.cc:95] QueryState: query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:41.204046 54261 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:41.213701 56165 query-exec-mgr.cc:95] QueryState: query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:41.215029 56165 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:41.228318 56167 query-exec-mgr.cc:95] QueryState: query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:41.229539 56167 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:41.237604 56169 query-exec-mgr.cc:95] QueryState: query_id=b24f477464b4e6af:ff4672a00000000 refcnt=4
I0825 11:49:41.238237 56169 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=b24f477464b4e6af:ff4672a00000000 refcnt=4
I0825 11:49:41.247324 56168 query-exec-mgr.cc:95] QueryState: query_id=564078f8b576bb47:c0cdecdc00000000 refcnt=4
I0825 11:49:41.248697 56168 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=564078f8b576bb47:c0cdecdc00000000 refcnt=4
I0825 11:49:42.092362 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:49:42.093982 56194 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:49:42.095945 56194 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xac+\xd4!\x85UDO\x99{CN\xf1^\xb0\xa7",
      02: secret (string) = "\xdaTy-i\x99G\xbb\x95xash\xdf\xc7\n",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:49:42.183538 56194 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xac+\xd4!\x85UDO\x99{CN\xf1^\xb0\xa7",
      02: secret (string) = "\xdaTy-i\x99G\xbb\x95xash\xdf\xc7\n",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:49:42.184557 56194 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xac+\xd4!\x85UDO\x99{CN\xf1^\xb0\xa7",
      02: secret (string) = "\xdaTy-i\x99G\xbb\x95xash\xdf\xc7\n",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:49:42.187084 56194 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:42.203791 56194 Frontend.java:935] Analyzing query: use `dw04_sjfx`;
I0825 11:49:42.206990 56194 Frontend.java:947] Analysis finished.
I0825 11:49:42.267153 56194 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "L;\xe1\xacx\xcbN\xb5\x00\x00\x00\x00+C\xb6z",
      02: secret (string) = "L;\xe1\xacx\xcbN\xb5\x00\x00\x00\x00+C\xb6z",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:49:42.280133 56194 impala-hs2-server.cc:683] CloseOperation(): query_id=b54ecb78ace13b4c:7ab6432b00000000
I0825 11:49:42.280726 56194 impala-server.cc:1015] UnregisterQuery(): query_id=b54ecb78ace13b4c:7ab6432b00000000
I0825 11:49:42.281312 56194 impala-server.cc:1102] Cancel(): query_id=b54ecb78ace13b4c:7ab6432b00000000
I0825 11:49:42.385545 56194 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xac+\xd4!\x85UDO\x99{CN\xf1^\xb0\xa7",
      02: secret (string) = "\xdaTy-i\x99G\xbb\x95xash\xdf\xc7\n",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:49:42.386299 56194 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xac+\xd4!\x85UDO\x99{CN\xf1^\xb0\xa7",
      02: secret (string) = "\xdaTy-i\x99G\xbb\x95xash\xdf\xc7\n",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:49:42.387169 56194 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:42.402346 56194 Frontend.java:935] Analyzing query: set REQUEST_POOL = 'agilebi';
I0825 11:49:42.403157 56194 Frontend.java:947] Analysis finished.
I0825 11:49:42.406833 56194 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\x14\xa0\\0!\xa8M\xc3\x00\x00\x00\x00\x8eq\x05\x9e",
      02: secret (string) = "\x14\xa0\\0!\xa8M\xc3\x00\x00\x00\x00\x8eq\x05\x9e",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:42.483024 56194 impala-hs2-server.cc:683] CloseOperation(): query_id=c34da821305ca014:9e05718e00000000
I0825 11:49:42.483430 56194 impala-server.cc:1015] UnregisterQuery(): query_id=c34da821305ca014:9e05718e00000000
I0825 11:49:42.483783 56194 impala-server.cc:1102] Cancel(): query_id=c34da821305ca014:9e05718e00000000
I0825 11:49:42.597754 56194 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xac+\xd4!\x85UDO\x99{CN\xf1^\xb0\xa7",
      02: secret (string) = "\xdaTy-i\x99G\xbb\x95xash\xdf\xc7\n",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:49:42.598439 56194 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xac+\xd4!\x85UDO\x99{CN\xf1^\xb0\xa7",
      02: secret (string) = "\xdaTy-i\x99G\xbb\x95xash\xdf\xc7\n",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:49:42.599648 56194 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:42.620971 56194 Frontend.java:935] Analyzing query: set MEM_LIMIT = 1024000000;
I0825 11:49:42.623591 56194 Frontend.java:947] Analysis finished.
I0825 11:49:42.626843 56194 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\r\xcbWK\x91\xe7@\x0e\x00\x00\x00\x00\f\xfc\x12\v",
      02: secret (string) = "\r\xcbWK\x91\xe7@\x0e\x00\x00\x00\x00\f\xfc\x12\v",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:42.680667 56194 impala-hs2-server.cc:683] CloseOperation(): query_id=e40e7914b57cb0d:b12fc0c00000000
I0825 11:49:42.681463 56194 impala-server.cc:1015] UnregisterQuery(): query_id=e40e7914b57cb0d:b12fc0c00000000
I0825 11:49:42.681887 56194 impala-server.cc:1102] Cancel(): query_id=e40e7914b57cb0d:b12fc0c00000000
I0825 11:49:42.687155 56194 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xac+\xd4!\x85UDO\x99{CN\xf1^\xb0\xa7",
      02: secret (string) = "\xdaTy-i\x99G\xbb\x95xash\xdf\xc7\n",
    },
  },
  02: statement (string) = "DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_PPL`",
  04: runAsync (bool) = true,
}
I0825 11:49:42.687717 56194 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xac+\xd4!\x85UDO\x99{CN\xf1^\xb0\xa7",
      02: secret (string) = "\xdaTy-i\x99G\xbb\x95xash\xdf\xc7\n",
    },
  },
  02: statement (string) = "DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_PPL`",
  04: runAsync (bool) = true,
}
I0825 11:49:42.689085 56194 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:42.704008 56194 Frontend.java:935] Analyzing query: DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_PPL`
I0825 11:49:42.705358 56194 Frontend.java:947] Analysis finished.
I0825 11:49:42.759335 56194 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xb9\x06\x98Do\xc2A=\x00\x00\x00\x00\xd3\x13G\x8d",
      02: secret (string) = "\xb9\x06\x98Do\xc2A=\x00\x00\x00\x00\xd3\x13G\x8d",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:42.763538 56194 impala-hs2-server.cc:683] CloseOperation(): query_id=3d41c26f449806b9:8d4713d300000000
I0825 11:49:42.764245 56194 impala-server.cc:1015] UnregisterQuery(): query_id=3d41c26f449806b9:8d4713d300000000
I0825 11:49:42.764644 56194 impala-server.cc:1102] Cancel(): query_id=3d41c26f449806b9:8d4713d300000000
I0825 11:49:43.385288 56194 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xac+\xd4!\x85UDO\x99{CN\xf1^\xb0\xa7",
      02: secret (string) = "\xdaTy-i\x99G\xbb\x95xash\xdf\xc7\n",
    },
  },
  02: statement (string) = "select   `bi_177[...](15324)",
  04: runAsync (bool) = true,
}
I0825 11:49:43.386374 56194 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xac+\xd4!\x85UDO\x99{CN\xf1^\xb0\xa7",
      02: secret (string) = "\xdaTy-i\x99G\xbb\x95xash\xdf\xc7\n",
    },
  },
  02: statement (string) = "select   `bi_177[...](15324)",
  04: runAsync (bool) = true,
}
I0825 11:49:43.387259 56194 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:43.409905 56194 Frontend.java:935] Analyzing query: select   `bi_1777753835894362515`.`帐号` as `bi_4405066279117047118` , `bi_1777753835894362515`.`卡号` as `bi_10248578450533883095` , `bi_1777753835894362515`.`卡类型描述` as `bi_6246159538240244065` , `bi_1777753835894362515`.`是否为副卡` as `bi_13540389403478941567` , `bi_1777753835894362515`.`交易主要站点` as `bi_2740263195203761510` , `bi_1777753835894362515`.`个人卡消费过加油站站点数量` as `bi_3616459640308034135` , `bi_1777753835894362515`.`交易类型描述` as `bi_10331142289063080322` , `bi_1777753835894362515`.`商品类型` as `bi_8759647043076232228` , `bi_1777753835894362515`.`商品类型描述` as `bi_14353747127936749017` , `bi_1777753835894362515`.`发卡单位` as `bi_10646976700040736340` , `bi_1777753835894362515`.`发卡单位与销售单位是否一致` as `bi_3120723227421642544` , `bi_1777753835894362515`.`首次交易日期` as `bi_14455382331679438995` , `bi_1777753835894362515`.`最近交易日期` as `bi_5478771142720032093` , `bi_1777753835894362515`.`平均油量升数` as `bi_617034579827635996` , `bi_1777753835894362515`.`平均消费金额` as `bi_15112077538935800504` , `bi_1777753835894362515`.`平均折扣金额` as `bi_3277906557631314998` , `bi_1777753835894362515`.`平均余额` as `bi_15647197458875151506` , `bi_1777753835894362515`.`日均消费笔数` as `bi_7064249764713199839` , `bi_1777753835894362515`.`日均消费金额` as `bi_10854565843347455823` , `bi_1777753835894362515`.`单日消费次数过多次数` as `bi_2261074975467520775` , `bi_1777753835894362515`.`个人卡夜间消费总次数` as `bi_11404968094779050130` , `bi_1777753835894362515`.`个人卡夜间消费总金额` as `bi_15065943078847283073` , `bi_1777753835894362515`.`日均夜间消费笔数` as `bi_15868460132744503901` , `bi_1777753835894362515`.`日均夜间消费金额` as `bi_15516783331422952374` , `bi_1777753835894362515`.`单日夜间消费次数过多次数` as `bi_16171388146955820514` , `bi_1777753835894362515`.`睡眠次数` as `bi_17048143494310675370` , `bi_1777753835894362515`.`是否仍在睡眠` as `bi_15197978810704604447` , `bi_1777753835894362515`.`个人卡累计消费金额` as `bi_7591110132802393138` , `bi_1777753835894362515`.`个人卡消费金额方差` as `bi_160391765441068244` , `bi_1777753835894362515`.`个人卡累计消费次数` as `bi_4156841468949947680` , `bi_1777753835894362515`.`个人卡消费金额为小数次数` as `bi_9794343777229462837` , `bi_1777753835894362515`.`个人卡消费过油品类型数量` as `bi_10293590438327478000` , `bi_1777753835894362515`.`个人卡消费过汽油品类型数量` as `bi_1177732512630799779` , `bi_1777753835894362515`.`个人卡汽油消费次数占比` as `bi_11456242312036654846` , `bi_1777753835894362515`.`个人卡汽油单笔高额消费次数` as `bi_9834182397780633995` , `bi_1777753835894362515`.`个人卡柴油消费次数占比` as `bi_6459884238352011348` , `bi_1777753835894362515`.`个人卡天然气消费次数占比` as `bi_16651092651258988174` , `bi_1777753835894362515`.`ic卡大额非油消费次数` as `bi_7054304210906615051` , `bi_1777753835894362515`.`非油累计消费金额` as `bi_16397999138841287705` , `bi_1777753835894362515`.`非油与成品油消费金额比例` as `bi_4542996461810298499` , `bi_1777753835894362515`.`个人卡累计充值金额` as `bi_4841881326785682188` , `bi_1777753835894362515`.`单日充值次数过多次数` as `bi_9422150591649301309` , `bi_1777753835894362515`.`即消费且余额低的次数831743621` as `bi_16833265966592949464` , `bi_1777753835894362515`.`同一班次消费的次数` as `bi_11088153473180053847` , `bi_1777753835894362515`.`密码重置次数` as `bi_3598974696379994152` , `bi_1777753835894362515`.`笔折扣额的消费的次数_2085032453` as `bi_5097711375700122218` , `bi_1777753835894362515`.`个人卡余额充足时充钱的次数` as `bi_8205063281634656287` , `bi_1777753835894362515`.`是否曾频繁转账` as `bi_14482952946536492029` , `bi_1777753835894362515`.`是否异常加油卡` as `bi_8782608630523284142` , `bi_1777753835894362515`.`单位名称` as `bi_14261383855208495737` , `bi_1777753835894362515`.`所属` as `bi_7873307995921860050` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_1777753835894362515`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_8081399462078118933` , TRIM(`bi_1777753835894362515`.`交易主要站点`) as `bi_616911404683852598`   from (select   `bi_152610414374251569`.`帐号` as `帐号` , `bi_152610414374251569`.`卡号` as `卡号` , `bi_152610414374251569`.`卡类型描述` as `卡类型描述` , `bi_152610414374251569`.`是否为副卡` as `是否为副卡` , `bi_152610414374251569`.`交易主要站点` as `交易主要站点` , `bi_152610414374251569`.`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量` , `bi_152610414374251569`.`交易类型描述` as `交易类型描述` , `bi_152610414374251569`.`商品类型` as `商品类型` , `bi_152610414374251569`.`商品类型描述` as `商品类型描述` , `bi_152610414374251569`.`发卡单位` as `发卡单位` , `bi_152610414374251569`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `bi_152610414374251569`.`首次交易日期` as `首次交易日期` , `bi_152610414374251569`.`最近交易日期` as `最近交易日期` , `bi_152610414374251569`.`平均油量升数` as `平均油量升数` , `bi_152610414374251569`.`平均消费金额` as `平均消费金额` , `bi_152610414374251569`.`平均折扣金额` as `平均折扣金额` , `bi_152610414374251569`.`平均余额` as `平均余额` , `bi_152610414374251569`.`日均消费笔数` as `日均消费笔数` , `bi_152610414374251569`.`日均消费金额` as `日均消费金额` , `bi_152610414374251569`.`单日消费次数过多次数` as `单日消费次数过多次数` , `bi_152610414374251569`.`个人卡夜间消费总次数` as `个人卡夜间消费总次数` , `bi_152610414374251569`.`个人卡夜间消费总金额` as `个人卡夜间消费总金额` , `bi_152610414374251569`.`日均夜间消费笔数` as `日均夜间消费笔数` , `bi_152610414374251569`.`日均夜间消费金额` as `日均夜间消费金额` , `bi_152610414374251569`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `bi_152610414374251569`.`睡眠次数` as `睡眠次数` , `bi_152610414374251569`.`是否仍在睡眠` as `是否仍在睡眠` , `bi_152610414374251569`.`个人卡累计消费金额` as `个人卡累计消费金额` , `bi_152610414374251569`.`个人卡消费金额方差` as `个人卡消费金额方差` , `bi_152610414374251569`.`个人卡累计消费次数` as `个人卡累计消费次数` , `bi_152610414374251569`.`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数` , `bi_152610414374251569`.`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量` , `bi_152610414374251569`.`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量` , `bi_152610414374251569`.`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比` , `bi_152610414374251569`.`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数` , `bi_152610414374251569`.`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比` , `bi_152610414374251569`.`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比` , `bi_152610414374251569`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `bi_152610414374251569`.`非油累计消费金额` as `非油累计消费金额` , `bi_152610414374251569`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `bi_152610414374251569`.`个人卡累计充值金额` as `个人卡累计充值金额` , `bi_152610414374251569`.`单日充值次数过多次数` as `单日充值次数过多次数` , `bi_152610414374251569`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `bi_152610414374251569`.`同一班次消费的次数` as `同一班次消费的次数` , `bi_152610414374251569`.`密码重置次数` as `密码重置次数` , `bi_152610414374251569`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `bi_152610414374251569`.`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数` , `bi_152610414374251569`.`是否曾频繁转账` as `是否曾频繁转账` , `bi_152610414374251569`.`是否异常加油卡` as `是否异常加油卡` , `bi_152610414374251569`.`单位名称` as `单位名称` , `bi_152610414374251569`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`个人卡夜间消费总次数` as `个人卡夜间消费总次数`,`个人卡夜间消费总金额` as `个人卡夜间消费总金额`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`个人卡累计消费金额` as `个人卡累计消费金额`,`个人卡消费金额方差` as `个人卡消费金额方差`,`个人卡累计消费次数` as `个人卡累计消费次数`,`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数`,`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比`,`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`个人卡累计充值金额` as `个人卡累计充值金额`,`单日充值次数过多次数` as `单日充值次数过多次数`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`个人卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`个人卡夜间消费总次数`,`个人卡夜间消费总金额`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`个人卡累计消费金额`,`个人卡消费金额方差`,`个人卡累计消费次数`,`个人卡消费金额为小数次数`,`个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比`,`个人卡天然气消费次数占比`,`ic卡大额非油消费次数`,`非油累计消费金额`,`非油与成品油消费金额比例`,`个人卡累计充值金额`,`单日充值次数过多次数`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,     
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `个人卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`, 
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`, 
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`,
       `单日消费次数过多次数`, 
       `个人卡夜间消费总次数`,
       `个人卡夜间消费总金额`,
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`, 
       `睡眠次数`,
       `是否仍在睡眠`,
       `个人卡累计消费金额`,
       `加油卡消费金额方差` `个人卡消费金额方差`,
       `个人卡累计消费次数`,
       `加油卡消费金额为小数次数` `个人卡消费金额为小数次数`,
       `个人卡消费过油品类型数量`,
       `个人卡消费过汽油品类型数量`,
       `个人卡汽油消费次数占比`,
       `个人卡汽油单笔高额消费次数`,
       `个人卡柴油消费次数占比`,
       `个人卡天然气消费次数占比`,
       `IC卡大额非油消费次数`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `个人卡累计充值金额`,
       `单日充值次数过多次数`, 
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `个人卡余额充足时充钱的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM DW04_SJFX.APP_AUAP_YK_PPL) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `bi_152610414374251569`  
     ) `bi_1777753835894362515`
      limit 1200001 
I0825 11:49:43.440398 43810 krpc-data-stream-mgr.cc:407] Reduced stream ID cache from 28 items, to 24, eviction took: 0
I0825 11:49:43.758275 56194 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:49:43.759523 56194 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:49:44.216883 56194 Frontend.java:947] Analysis finished.
I0825 11:49:44.237999 56194 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:49:44.238556 56194 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:49:44.250959 56194 admission-controller.cc:508] Schedule for id=614cf0b79050a508:de0dc89200000000 in pool_name=root.agilebi cluster_mem_needed=6.68 GB PoolConfig: max_requests=500 max_queued=200 max_mem=800.00 GB
I0825 11:49:44.251503 56194 admission-controller.cc:513] Stats: agg_num_running=6, agg_num_queued=0, agg_mem_reserved=35.29 GB,  local_host(local_mem_admitted=30.52 GB, num_admitted_running=5, num_queued=0, backend_mem_reserved=5.72 GB)
I0825 11:49:44.251895 56194 admission-controller.cc:529] Admitted query id=614cf0b79050a508:de0dc89200000000
I0825 11:49:44.252269 56194 coordinator.cc:93] Exec() query_id=614cf0b79050a508:de0dc89200000000 stmt=select   `bi_1777753835894362515`.`帐号` as `bi_4405066279117047118` , `bi_1777753835894362515`.`卡号` as `bi_10248578450533883095` , `bi_1777753835894362515`.`卡类型描述` as `bi_6246159538240244065` , `bi_1777753835894362515`.`是否为副卡` as `bi_13540389403478941567` , `bi_1777753835894362515`.`交易主要站点` as `bi_2740263195203761510` , `bi_1777753835894362515`.`个人卡消费过加油站站点数量` as `bi_3616459640308034135` , `bi_1777753835894362515`.`交易类型描述` as `bi_10331142289063080322` , `bi_1777753835894362515`.`商品类型` as `bi_8759647043076232228` , `bi_1777753835894362515`.`商品类型描述` as `bi_14353747127936749017` , `bi_1777753835894362515`.`发卡单位` as `bi_10646976700040736340` , `bi_1777753835894362515`.`发卡单位与销售单位是否一致` as `bi_3120723227421642544` , `bi_1777753835894362515`.`首次交易日期` as `bi_14455382331679438995` , `bi_1777753835894362515`.`最近交易日期` as `bi_5478771142720032093` , `bi_1777753835894362515`.`平均油量升数` as `bi_617034579827635996` , `bi_1777753835894362515`.`平均消费金额` as `bi_15112077538935800504` , `bi_1777753835894362515`.`平均折扣金额` as `bi_3277906557631314998` , `bi_1777753835894362515`.`平均余额` as `bi_15647197458875151506` , `bi_1777753835894362515`.`日均消费笔数` as `bi_7064249764713199839` , `bi_1777753835894362515`.`日均消费金额` as `bi_10854565843347455823` , `bi_1777753835894362515`.`单日消费次数过多次数` as `bi_2261074975467520775` , `bi_1777753835894362515`.`个人卡夜间消费总次数` as `bi_11404968094779050130` , `bi_1777753835894362515`.`个人卡夜间消费总金额` as `bi_15065943078847283073` , `bi_1777753835894362515`.`日均夜间消费笔数` as `bi_15868460132744503901` , `bi_1777753835894362515`.`日均夜间消费金额` as `bi_15516783331422952374` , `bi_1777753835894362515`.`单日夜间消费次数过多次数` as `bi_16171388146955820514` , `bi_1777753835894362515`.`睡眠次数` as `bi_17048143494310675370` , `bi_1777753835894362515`.`是否仍在睡眠` as `bi_15197978810704604447` , `bi_1777753835894362515`.`个人卡累计消费金额` as `bi_7591110132802393138` , `bi_1777753835894362515`.`个人卡消费金额方差` as `bi_160391765441068244` , `bi_1777753835894362515`.`个人卡累计消费次数` as `bi_4156841468949947680` , `bi_1777753835894362515`.`个人卡消费金额为小数次数` as `bi_9794343777229462837` , `bi_1777753835894362515`.`个人卡消费过油品类型数量` as `bi_10293590438327478000` , `bi_1777753835894362515`.`个人卡消费过汽油品类型数量` as `bi_1177732512630799779` , `bi_1777753835894362515`.`个人卡汽油消费次数占比` as `bi_11456242312036654846` , `bi_1777753835894362515`.`个人卡汽油单笔高额消费次数` as `bi_9834182397780633995` , `bi_1777753835894362515`.`个人卡柴油消费次数占比` as `bi_6459884238352011348` , `bi_1777753835894362515`.`个人卡天然气消费次数占比` as `bi_16651092651258988174` , `bi_1777753835894362515`.`ic卡大额非油消费次数` as `bi_7054304210906615051` , `bi_1777753835894362515`.`非油累计消费金额` as `bi_16397999138841287705` , `bi_1777753835894362515`.`非油与成品油消费金额比例` as `bi_4542996461810298499` , `bi_1777753835894362515`.`个人卡累计充值金额` as `bi_4841881326785682188` , `bi_1777753835894362515`.`单日充值次数过多次数` as `bi_9422150591649301309` , `bi_1777753835894362515`.`即消费且余额低的次数831743621` as `bi_16833265966592949464` , `bi_1777753835894362515`.`同一班次消费的次数` as `bi_11088153473180053847` , `bi_1777753835894362515`.`密码重置次数` as `bi_3598974696379994152` , `bi_1777753835894362515`.`笔折扣额的消费的次数_2085032453` as `bi_5097711375700122218` , `bi_1777753835894362515`.`个人卡余额充足时充钱的次数` as `bi_8205063281634656287` , `bi_1777753835894362515`.`是否曾频繁转账` as `bi_14482952946536492029` , `bi_1777753835894362515`.`是否异常加油卡` as `bi_8782608630523284142` , `bi_1777753835894362515`.`单位名称` as `bi_14261383855208495737` , `bi_1777753835894362515`.`所属` as `bi_7873307995921860050` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_1777753835894362515`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_8081399462078118933` , TRIM(`bi_1777753835894362515`.`交易主要站点`) as `bi_616911404683852598`   from (select   `bi_152610414374251569`.`帐号` as `帐号` , `bi_152610414374251569`.`卡号` as `卡号` , `bi_152610414374251569`.`卡类型描述` as `卡类型描述` , `bi_152610414374251569`.`是否为副卡` as `是否为副卡` , `bi_152610414374251569`.`交易主要站点` as `交易主要站点` , `bi_152610414374251569`.`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量` , `bi_152610414374251569`.`交易类型描述` as `交易类型描述` , `bi_152610414374251569`.`商品类型` as `商品类型` , `bi_152610414374251569`.`商品类型描述` as `商品类型描述` , `bi_152610414374251569`.`发卡单位` as `发卡单位` , `bi_152610414374251569`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `bi_152610414374251569`.`首次交易日期` as `首次交易日期` , `bi_152610414374251569`.`最近交易日期` as `最近交易日期` , `bi_152610414374251569`.`平均油量升数` as `平均油量升数` , `bi_152610414374251569`.`平均消费金额` as `平均消费金额` , `bi_152610414374251569`.`平均折扣金额` as `平均折扣金额` , `bi_152610414374251569`.`平均余额` as `平均余额` , `bi_152610414374251569`.`日均消费笔数` as `日均消费笔数` , `bi_152610414374251569`.`日均消费金额` as `日均消费金额` , `bi_152610414374251569`.`单日消费次数过多次数` as `单日消费次数过多次数` , `bi_152610414374251569`.`个人卡夜间消费总次数` as `个人卡夜间消费总次数` , `bi_152610414374251569`.`个人卡夜间消费总金额` as `个人卡夜间消费总金额` , `bi_152610414374251569`.`日均夜间消费笔数` as `日均夜间消费笔数` , `bi_152610414374251569`.`日均夜间消费金额` as `日均夜间消费金额` , `bi_152610414374251569`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `bi_152610414374251569`.`睡眠次数` as `睡眠次数` , `bi_152610414374251569`.`是否仍在睡眠` as `是否仍在睡眠` , `bi_152610414374251569`.`个人卡累计消费金额` as `个人卡累计消费金额` , `bi_152610414374251569`.`个人卡消费金额方差` as `个人卡消费金额方差` , `bi_152610414374251569`.`个人卡累计消费次数` as `个人卡累计消费次数` , `bi_152610414374251569`.`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数` , `bi_152610414374251569`.`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量` , `bi_152610414374251569`.`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量` , `bi_152610414374251569`.`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比` , `bi_152610414374251569`.`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数` , `bi_152610414374251569`.`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比` , `bi_152610414374251569`.`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比` , `bi_152610414374251569`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `bi_152610414374251569`.`非油累计消费金额` as `非油累计消费金额` , `bi_152610414374251569`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `bi_152610414374251569`.`个人卡累计充值金额` as `个人卡累计充值金额` , `bi_152610414374251569`.`单日充值次数过多次数` as `单日充值次数过多次数` , `bi_152610414374251569`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `bi_152610414374251569`.`同一班次消费的次数` as `同一班次消费的次数` , `bi_152610414374251569`.`密码重置次数` as `密码重置次数` , `bi_152610414374251569`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `bi_152610414374251569`.`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数` , `bi_152610414374251569`.`是否曾频繁转账` as `是否曾频繁转账` , `bi_152610414374251569`.`是否异常加油卡` as `是否异常加油卡` , `bi_152610414374251569`.`单位名称` as `单位名称` , `bi_152610414374251569`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`个人卡夜间消费总次数` as `个人卡夜间消费总次数`,`个人卡夜间消费总金额` as `个人卡夜间消费总金额`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`个人卡累计消费金额` as `个人卡累计消费金额`,`个人卡消费金额方差` as `个人卡消费金额方差`,`个人卡累计消费次数` as `个人卡累计消费次数`,`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数`,`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比`,`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`个人卡累计充值金额` as `个人卡累计充值金额`,`单日充值次数过多次数` as `单日充值次数过多次数`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`个人卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`个人卡夜间消费总次数`,`个人卡夜间消费总金额`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`个人卡累计消费金额`,`个人卡消费金额方差`,`个人卡累计消费次数`,`个人卡消费金额为小数次数`,`个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比`,`个人卡天然气消费次数占比`,`ic卡大额非油消费次数`,`非油累计消费金额`,`非油与成品油消费金额比例`,`个人卡累计充值金额`,`单日充值次数过多次数`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,     
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `个人卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`, 
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`, 
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`,
       `单日消费次数过多次数`, 
       `个人卡夜间消费总次数`,
       `个人卡夜间消费总金额`,
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`, 
       `睡眠次数`,
       `是否仍在睡眠`,
       `个人卡累计消费金额`,
       `加油卡消费金额方差` `个人卡消费金额方差`,
       `个人卡累计消费次数`,
       `加油卡消费金额为小数次数` `个人卡消费金额为小数次数`,
       `个人卡消费过油品类型数量`,
       `个人卡消费过汽油品类型数量`,
       `个人卡汽油消费次数占比`,
       `个人卡汽油单笔高额消费次数`,
       `个人卡柴油消费次数占比`,
       `个人卡天然气消费次数占比`,
       `IC卡大额非油消费次数`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `个人卡累计充值金额`,
       `单日充值次数过多次数`, 
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `个人卡余额充足时充钱的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM DW04_SJFX.APP_AUAP_YK_PPL) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `bi_152610414374251569`  
     ) `bi_1777753835894362515`
      limit 1200001 
I0825 11:49:44.253083 56194 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:49:44.253377 56194 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:49:44.254019 56194 coordinator.cc:349] starting execution on 7 backends for query_id=614cf0b79050a508:de0dc89200000000
I0825 11:49:44.257197 43667 client-cache.cc:81] ReopenClient(): re-creating client for e4bdhpp018:22000
I0825 11:49:44.258617 44904 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=614cf0b79050a508:de0dc89200000000
I0825 11:49:44.259270 44904 query-exec-mgr.cc:46] StartQueryFInstances() query_id=614cf0b79050a508:de0dc89200000000 coord=e4bdhpp025:22000
I0825 11:49:44.260008 43667 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:44.263484 44904 query-state.cc:178] Buffer pool limit for 614cf0b79050a508:de0dc89200000000: 819200000
I0825 11:49:44.264248 43667 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:44.264287 44904 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 614cf0b79050a508:de0dc89200000000
I0825 11:49:44.264711 43667 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:44.265053 43667 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:44.265590 56224 query-state.cc:300] StartFInstances(): query_id=614cf0b79050a508:de0dc89200000000 #instances=2
I0825 11:49:44.266949 43667 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:44.267282 56224 query-state.cc:313] descriptor table for query=614cf0b79050a508:de0dc89200000000
tuples:
Tuple(id=0 size=583 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=576 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=576 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=STRING col_path=[10] offset=32 null=(offset=576 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[48] offset=48 null=(offset=576 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=STRING col_path=[39] offset=64 null=(offset=576 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=BIGINT col_path=[29] offset=352 null=(offset=578 mask=40) slot_idx=22 field_idx=-1), Slot(id=6 type=STRING col_path=[11] offset=80 null=(offset=576 mask=20) slot_idx=5 field_idx=-1), Slot(id=7 type=STRING col_path=[12] offset=96 null=(offset=576 mask=40) slot_idx=6 field_idx=-1), Slot(id=8 type=STRING col_path=[13] offset=112 null=(offset=576 mask=80) slot_idx=7 field_idx=-1), Slot(id=9 type=STRING col_path=[38] offset=128 null=(offset=577 mask=1) slot_idx=8 field_idx=-1), Slot(id=10 type=STRING col_path=[43] offset=144 null=(offset=577 mask=2) slot_idx=9 field_idx=-1), Slot(id=11 type=TIMESTAMP col_path=[15] offset=160 null=(offset=577 mask=4) slot_idx=10 field_idx=-1), Slot(id=12 type=TIMESTAMP col_path=[16] offset=176 null=(offset=577 mask=8) slot_idx=11 field_idx=-1), Slot(id=13 type=DECIMAL(16,2) col_path=[2] offset=360 null=(offset=578 mask=80) slot_idx=23 field_idx=-1), Slot(id=14 type=DECIMAL(17,2) col_path=[3] offset=368 null=(offset=579 mask=1) slot_idx=24 field_idx=-1), Slot(id=15 type=DECIMAL(17,2) col_path=[4] offset=376 null=(offset=579 mask=2) slot_idx=25 field_idx=-1), Slot(id=16 type=DECIMAL(17,2) col_path=[5] offset=384 null=(offset=579 mask=4) slot_idx=26 field_idx=-1), Slot(id=17 type=DOUBLE col_path=[6] offset=392 null=(offset=579 mask=8) slot_idx=27 field_idx=-1), Slot(id=18 type=DECIMAL(27,2) col_path=[7] offset=192 null=(offset=577 mask=10) slot_idx=12 field_idx=-1), Slot(id=19 type=BIGINT col_path=[25] offset=400 null=(offset=579 mask=10) slot_idx=28 field_idx=-1), Slot(id=20 type=BIGINT col_path=[27] offset=408 null=(offset=579 mask=20) slot_idx=29 field_idx=-1), Slot(id=21 type=DECIMAL(26,2) col_path=[28] offset=208 null=(offset=577 mask=20) slot_idx=13 field_idx=-1), Slot(id=22 type=DOUBLE col_path=[8] offset=416 null=(offset=579 mask=40) slot_idx=30 field_idx=-1), Slot(id=23 type=DECIMAL(27,2) col_path=[9] offset=224 null=(offset=577 mask=40) slot_idx=14 field_idx=-1), Slot(id=24 type=BIGINT col_path=[26] offset=424 null=(offset=579 mask=80) slot_idx=31 field_idx=-1), Slot(id=25 type=BIGINT col_path=[17] offset=432 null=(offset=580 mask=1) slot_idx=32 field_idx=-1), Slot(id=26 type=INT col_path=[18] offset=568 null=(offset=582 mask=2) slot_idx=49 field_idx=-1), Slot(id=27 type=DECIMAL(26,2) col_path=[41] offset=240 null=(offset=577 mask=80) slot_idx=15 field_idx=-1), Slot(id=28 type=DOUBLE col_path=[49] offset=440 null=(offset=580 mask=2) slot_idx=33 field_idx=-1), Slot(id=29 type=BIGINT col_path=[42] offset=448 null=(offset=580 mask=4) slot_idx=34 field_idx=-1), Slot(id=30 type=BIGINT col_path=[44] offset=456 null=(offset=580 mask=8) slot_idx=35 field_idx=-1), Slot(id=31 type=BIGINT col_path=[21] offset=464 null=(offset=580 mask=10) slot_idx=36 field_idx=-1), Slot(id=32 type=BIGINT col_path=[22] offset=472 null=(offset=580 mask=20) slot_idx=37 field_idx=-1), Slot(id=33 type=DOUBLE col_path=[45] offset=480 null=(offset=580 mask=40) slot_idx=38 field_idx=-1), Slot(id=34 type=BIGINT col_path=[20] offset=488 null=(offset=580 mask=80) slot_idx=39 field_idx=-1), Slot(id=35 type=DOUBLE col_path=[46] offset=496 null=(offset=581 mask=1) slot_idx=40 field_idx=-1), Slot(id=36 type=DOUBLE col_path=[47] offset=504 null=(offset=581 mask=2) slot_idx=41 field_idx=-1), Slot(id=37 type=BIGINT col_path=[19] offset=512 null=(offset=581 mask=4) slot_idx=42 field_idx=-1), Slot(id=38 type=DECIMAL(26,2) col_path=[30] offset=256 null=(offset=578 mask=1) slot_idx=16 field_idx=-1), Slot(id=39 type=DECIMAL(31,4) col_path=[31] offset=272 null=(offset=578 mask=2) slot_idx=17 field_idx=-1), Slot(id=40 type=DECIMAL(26,2) col_path=[23] offset=288 null=(offset=578 mask=4) slot_idx=18 field_idx=-1), Slot(id=41 type=BIGINT col_path=[24] offset=520 null=(offset=581 mask=8) slot_idx=43 field_idx=-1), Slot(id=42 type=BIGINT col_path=[32] offset=528 null=(offset=581 mask=10) slot_idx=44 field_idx=-1), Slot(id=43 type=BIGINT col_path=[33] offset=536 null=(offset=581 mask=20) slot_idx=45 field_idx=-1), Slot(id=44 type=BIGINT col_path=[40] offset=544 null=(offset=581 mask=40) slot_idx=46 field_idx=-1), Slot(id=45 type=BIGINT col_path=[34] offset=552 null=(offset=581 mask=80) slot_idx=47 field_idx=-1), Slot(id=46 type=BIGINT col_path=[35] offset=560 null=(offset=582 mask=1) slot_idx=48 field_idx=-1), Slot(id=47 type=INT col_path=[36] offset=572 null=(offset=582 mask=4) slot_idx=50 field_idx=-1), Slot(id=48 type=STRING col_path=[50] offset=304 null=(offset=578 mask=8) slot_idx=19 field_idx=-1), Slot(id=49 type=STRING col_path=[14] offset=320 null=(offset=578 mask=10) slot_idx=20 field_idx=-1), Slot(id=50 type=STRING col_path=[37] offset=336 null=(offset=578 mask=20) slot_idx=21 field_idx=-1)] tuple_path=[])
I0825 11:49:44.267489 43667 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:44.268224 43667 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:44.268779 56225 query-state.cc:395] Executing instance. instance_id=614cf0b79050a508:de0dc89200000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=6 #in-flight=26
I0825 11:49:44.268790 43667 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:44.269454 56226 query-state.cc:395] Executing instance. instance_id=614cf0b79050a508:de0dc89200000007 fragment_idx=1 per_fragment_instance_idx=6 coord_state_idx=6 #in-flight=27
I0825 11:49:44.270797 56226 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '614cf0b79050a508:de0dc89200000007': 190
I0825 11:49:44.272634 43667 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:44.274219 43667 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:44.274498 43667 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:44.274976 43667 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:44.275171 43667 client-cache.h:329] RPC client failed to connect: Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
 rpc: N6impala26TExecQueryFInstancesResultE
I0825 11:49:44.275344 43667 coordinator-backend-state.cc:182] ExecQueryFInstances rpc query_id=614cf0b79050a508:de0dc89200000000 failed: RPC client failed to connect: Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:44.275141 56224 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=614cf0b79050a508:de0dc89200000000 refcnt=4
I0825 11:49:44.275828 43667 client-cache.cc:170] Broken Connection, destroy client for e4bdhpp018:22000
I0825 11:49:44.277812 56194 coordinator.cc:362] started execution on 7 backends for query_id=614cf0b79050a508:de0dc89200000000
I0825 11:49:44.279747 56194 coordinator.cc:629] Cancel() query_id=614cf0b79050a508:de0dc89200000000
I0825 11:49:44.280017 56194 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=614cf0b79050a508:de0dc89200000000 backend=e4bdhpp010:22000
I0825 11:49:44.281330 56194 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=614cf0b79050a508:de0dc89200000000 backend=e4bdhpp014:22000
I0825 11:49:44.325449 56229 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:44.327601 56229 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:44.330555 56194 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=614cf0b79050a508:de0dc89200000000 backend=e4bdhpp015:22000
I0825 11:49:44.333048 56194 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=614cf0b79050a508:de0dc89200000000 backend=e4bdhpp021:22000
I0825 11:49:44.334117 56194 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=614cf0b79050a508:de0dc89200000000 backend=e4bdhpp023:22000
I0825 11:49:44.337466 56194 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=614cf0b79050a508:de0dc89200000000 backend=e4bdhpp025:22000
I0825 11:49:44.337713 44904 impala-internal-service.cc:63] CancelQueryFInstances(): query_id=614cf0b79050a508:de0dc89200000000
I0825 11:49:44.337910 44904 query-exec-mgr.cc:95] QueryState: query_id=614cf0b79050a508:de0dc89200000000 refcnt=4
I0825 11:49:44.338547 44904 query-state.cc:416] Cancel: query_id=614cf0b79050a508:de0dc89200000000
I0825 11:49:44.339030 44904 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=614cf0b79050a508:de0dc89200000007
I0825 11:49:44.339437 44904 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=614cf0b79050a508:de0dc89200000000
I0825 11:49:44.339854 44904 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=614cf0b79050a508:de0dc89200000000 node_id=1
I0825 11:49:44.340106 44904 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=614cf0b79050a508:de0dc89200000000 refcnt=4
I0825 11:49:44.341112 56194 coordinator.cc:639] CancelBackends() query_id=614cf0b79050a508:de0dc89200000000, tried to cancel 6 backends
I0825 11:49:44.341642 56194 coordinator.cc:783] Release admission control resources for query_id=614cf0b79050a508:de0dc89200000000
I0825 11:49:44.342729 56194 impala-server.cc:1015] UnregisterQuery(): query_id=614cf0b79050a508:de0dc89200000000
I0825 11:49:44.343077 56194 impala-server.cc:1102] Cancel(): query_id=614cf0b79050a508:de0dc89200000000
W0825 11:49:44.345865 43831 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
I0825 11:49:44.346254 45240 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): 614cf0b79050a508:de0dc89200000000
I0825 11:49:44.346166 56194 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=614cf0b79050a508:de0dc89200000000 refcnt=3
W0825 11:49:44.346758 43831 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297896886_BP-1820042964-11.11.206.232-1548063025113
I0825 11:49:44.347318 56226 query-state.cc:288] Cancelling fragment instances as directed by the coordinator. Returned status: ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): 614cf0b79050a508:de0dc89200000000
I0825 11:49:44.347932 56226 query-state.cc:416] Cancel: query_id=614cf0b79050a508:de0dc89200000000
W0825 11:49:44.347703 43864 ShortCircuitCache.java:773] ShortCircuitCache(0x45360bf1): failed to get 1297896886_BP-1820042964-11.11.206.232-1548063025113
I0825 11:49:44.349659 56233 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:44.351840 56233 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:44.354346 56232 hdfs-scan-node.cc:522] Error preparing scanner for scan range hdfs://cluster1/apps/hive/warehouse/dw04_sjfx.db/app_auap_yk_ppl/000000_0(190473070:102400).
I0825 11:49:44.356870 56231 hdfs-scan-node.cc:522] Error preparing scanner for scan range hdfs://cluster1/apps/hive/warehouse/dw04_sjfx.db/app_auap_yk_ppl/000003_0(190414868:102400).
I0825 11:49:44.358036 56226 query-state.cc:403] Instance completed. instance_id=614cf0b79050a508:de0dc89200000007 #in-flight=26 status=CANCELLED: Cancelled
I0825 11:49:44.358475 56226 query-state.cc:416] Cancel: query_id=614cf0b79050a508:de0dc89200000000
I0825 11:49:44.359313 56226 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=614cf0b79050a508:de0dc89200000000 refcnt=2
I0825 11:49:44.363262 56230 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:44.363878 56230 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:44.373140 56229 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:44.373944 56229 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:44.387517 56237 query-exec-mgr.cc:95] QueryState: query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:44.389551 56237 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:44.401038 56233 query-exec-mgr.cc:95] QueryState: query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:44.402009 56233 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:44.410449 56239 query-exec-mgr.cc:95] QueryState: query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:44.411831 56239 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:44.418381 56229 query-exec-mgr.cc:95] QueryState: query_id=b24f477464b4e6af:ff4672a00000000 refcnt=4
I0825 11:49:44.418877 56229 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=b24f477464b4e6af:ff4672a00000000 refcnt=4
I0825 11:49:44.428346 56240 query-exec-mgr.cc:95] QueryState: query_id=564078f8b576bb47:c0cdecdc00000000 refcnt=4
I0825 11:49:44.430310 56240 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=564078f8b576bb47:c0cdecdc00000000 refcnt=4
I0825 11:49:44.430931 45241 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): 614cf0b79050a508:de0dc89200000000
I0825 11:49:44.437784 45241 coordinator.cc:689] Backend completed:  host=e4bdhpp014:22000 remaining=6 query_id=b24f477464b4e6af:ff4672a00000000
I0825 11:49:44.438524 45241 coordinator-backend-state.cc:226] query_id=b24f477464b4e6af:ff4672a00000000: first in-progress backend: e4bdhpp010:22000
I0825 11:49:44.441277 56238 query-exec-mgr.cc:95] QueryState: query_id=614cf0b79050a508:de0dc89200000000 refcnt=2
I0825 11:49:44.441984 56238 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=614cf0b79050a508:de0dc89200000000 refcnt=2
I0825 11:49:44.478014 45243 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): 614cf0b79050a508:de0dc89200000000
I0825 11:49:44.513079 44904 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): 614cf0b79050a508:de0dc89200000000
I0825 11:49:44.514171 56225 query-state.cc:288] Cancelling fragment instances as directed by the coordinator. Returned status: ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): 614cf0b79050a508:de0dc89200000000
I0825 11:49:44.514415 56225 query-state.cc:416] Cancel: query_id=614cf0b79050a508:de0dc89200000000
I0825 11:49:44.517908 56225 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=614cf0b79050a508:de0dc89200000000, node=1
I0825 11:49:44.519394 56225 query-state.cc:403] Instance completed. instance_id=614cf0b79050a508:de0dc89200000000 #in-flight=25 status=CANCELLED: Cancelled
I0825 11:49:44.519706 56225 query-state.cc:416] Cancel: query_id=614cf0b79050a508:de0dc89200000000
I0825 11:49:44.520172 56225 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=614cf0b79050a508:de0dc89200000000 refcnt=1
I0825 11:49:44.646119 52773 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=254492881b613d0c:c335936b00000000
I0825 11:49:44.647137 52773 query-exec-mgr.cc:46] StartQueryFInstances() query_id=254492881b613d0c:c335936b00000000 coord=e4bdhpp023:22000
I0825 11:49:44.647617 52773 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:49:44.648931 52773 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:49:44.649387 52773 query-state.cc:178] Buffer pool limit for 254492881b613d0c:c335936b00000000: 819200000
I0825 11:49:44.650055 52773 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 254492881b613d0c:c335936b00000000
I0825 11:49:44.651371 56241 query-state.cc:300] StartFInstances(): query_id=254492881b613d0c:c335936b00000000 #instances=1
I0825 11:49:44.652375 56241 query-state.cc:313] descriptor table for query=254492881b613d0c:c335936b00000000
tuples:
Tuple(id=0 size=583 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=576 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=576 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=STRING col_path=[10] offset=32 null=(offset=576 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[48] offset=48 null=(offset=576 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=STRING col_path=[39] offset=64 null=(offset=576 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=BIGINT col_path=[29] offset=352 null=(offset=578 mask=40) slot_idx=22 field_idx=-1), Slot(id=6 type=STRING col_path=[11] offset=80 null=(offset=576 mask=20) slot_idx=5 field_idx=-1), Slot(id=7 type=STRING col_path=[12] offset=96 null=(offset=576 mask=40) slot_idx=6 field_idx=-1), Slot(id=8 type=STRING col_path=[13] offset=112 null=(offset=576 mask=80) slot_idx=7 field_idx=-1), Slot(id=9 type=STRING col_path=[38] offset=128 null=(offset=577 mask=1) slot_idx=8 field_idx=-1), Slot(id=10 type=STRING col_path=[43] offset=144 null=(offset=577 mask=2) slot_idx=9 field_idx=-1), Slot(id=11 type=TIMESTAMP col_path=[15] offset=160 null=(offset=577 mask=4) slot_idx=10 field_idx=-1), Slot(id=12 type=TIMESTAMP col_path=[16] offset=176 null=(offset=577 mask=8) slot_idx=11 field_idx=-1), Slot(id=13 type=DECIMAL(16,2) col_path=[2] offset=360 null=(offset=578 mask=80) slot_idx=23 field_idx=-1), Slot(id=14 type=DECIMAL(17,2) col_path=[3] offset=368 null=(offset=579 mask=1) slot_idx=24 field_idx=-1), Slot(id=15 type=DECIMAL(17,2) col_path=[4] offset=376 null=(offset=579 mask=2) slot_idx=25 field_idx=-1), Slot(id=16 type=DECIMAL(17,2) col_path=[5] offset=384 null=(offset=579 mask=4) slot_idx=26 field_idx=-1), Slot(id=17 type=DOUBLE col_path=[6] offset=392 null=(offset=579 mask=8) slot_idx=27 field_idx=-1), Slot(id=18 type=DECIMAL(27,2) col_path=[7] offset=192 null=(offset=577 mask=10) slot_idx=12 field_idx=-1), Slot(id=19 type=BIGINT col_path=[25] offset=400 null=(offset=579 mask=10) slot_idx=28 field_idx=-1), Slot(id=20 type=BIGINT col_path=[27] offset=408 null=(offset=579 mask=20) slot_idx=29 field_idx=-1), Slot(id=21 type=DECIMAL(26,2) col_path=[28] offset=208 null=(offset=577 mask=20) slot_idx=13 field_idx=-1), Slot(id=22 type=DOUBLE col_path=[8] offset=416 null=(offset=579 mask=40) slot_idx=30 field_idx=-1), Slot(id=23 type=DECIMAL(27,2) col_path=[9] offset=224 null=(offset=577 mask=40) slot_idx=14 field_idx=-1), Slot(id=24 type=BIGINT col_path=[26] offset=424 null=(offset=579 mask=80) slot_idx=31 field_idx=-1), Slot(id=25 type=BIGINT col_path=[17] offset=432 null=(offset=580 mask=1) slot_idx=32 field_idx=-1), Slot(id=26 type=INT col_path=[18] offset=568 null=(offset=582 mask=2) slot_idx=49 field_idx=-1), Slot(id=27 type=DECIMAL(26,2) col_path=[41] offset=240 null=(offset=577 mask=80) slot_idx=15 field_idx=-1), Slot(id=28 type=DOUBLE col_path=[49] offset=440 null=(offset=580 mask=2) slot_idx=33 field_idx=-1), Slot(id=29 type=BIGINT col_path=[42] offset=448 null=(offset=580 mask=4) slot_idx=34 field_idx=-1), Slot(id=30 type=BIGINT col_path=[44] offset=456 null=(offset=580 mask=8) slot_idx=35 field_idx=-1), Slot(id=31 type=BIGINT col_path=[21] offset=464 null=(offset=580 mask=10) slot_idx=36 field_idx=-1), Slot(id=32 type=BIGINT col_path=[22] offset=472 null=(offset=580 mask=20) slot_idx=37 field_idx=-1), Slot(id=33 type=DOUBLE col_path=[45] offset=480 null=(offset=580 mask=40) slot_idx=38 field_idx=-1), Slot(id=34 type=BIGINT col_path=[20] offset=488 null=(offset=580 mask=80) slot_idx=39 field_idx=-1), Slot(id=35 type=DOUBLE col_path=[46] offset=496 null=(offset=581 mask=1) slot_idx=40 field_idx=-1), Slot(id=36 type=DOUBLE col_path=[47] offset=504 null=(offset=581 mask=2) slot_idx=41 field_idx=-1), Slot(id=37 type=BIGINT col_path=[19] offset=512 null=(offset=581 mask=4) slot_idx=42 field_idx=-1), Slot(id=38 type=DECIMAL(26,2) col_path=[30] offset=256 null=(offset=578 mask=1) slot_idx=16 field_idx=-1), Slot(id=39 type=DECIMAL(31,4) col_path=[31] offset=272 null=(offset=578 mask=2) slot_idx=17 field_idx=-1), Slot(id=40 type=DECIMAL(26,2) col_path=[23] offset=288 null=(offset=578 mask=4) slot_idx=18 field_idx=-1), Slot(id=41 type=BIGINT col_path=[24] offset=520 null=(offset=581 mask=8) slot_idx=43 field_idx=-1), Slot(id=42 type=BIGINT col_path=[32] offset=528 null=(offset=581 mask=10) slot_idx=44 field_idx=-1), Slot(id=43 type=BIGINT col_path=[33] offset=536 null=(offset=581 mask=20) slot_idx=45 field_idx=-1), Slot(id=44 type=BIGINT col_path=[40] offset=544 null=(offset=581 mask=40) slot_idx=46 field_idx=-1), Slot(id=45 type=BIGINT col_path=[34] offset=552 null=(offset=581 mask=80) slot_idx=47 field_idx=-1), Slot(id=46 type=BIGINT col_path=[35] offset=560 null=(offset=582 mask=1) slot_idx=48 field_idx=-1), Slot(id=47 type=INT col_path=[36] offset=572 null=(offset=582 mask=4) slot_idx=50 field_idx=-1), Slot(id=48 type=STRING col_path=[50] offset=304 null=(offset=578 mask=8) slot_idx=19 field_idx=-1), Slot(id=49 type=STRING col_path=[14] offset=320 null=(offset=578 mask=10) slot_idx=20 field_idx=-1), Slot(id=50 type=STRING col_path=[37] offset=336 null=(offset=578 mask=20) slot_idx=21 field_idx=-1)] tuple_path=[])
I0825 11:49:44.653439 56242 query-state.cc:395] Executing instance. instance_id=254492881b613d0c:c335936b00000007 fragment_idx=1 per_fragment_instance_idx=6 coord_state_idx=6 #in-flight=26
I0825 11:49:44.654280 56242 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '254492881b613d0c:c335936b00000007': 190
I0825 11:49:44.670135 56241 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=254492881b613d0c:c335936b00000000 refcnt=2
I0825 11:49:44.723520 44439 impala-internal-service.cc:63] CancelQueryFInstances(): query_id=254492881b613d0c:c335936b00000000
I0825 11:49:44.724184 44439 query-exec-mgr.cc:95] QueryState: query_id=254492881b613d0c:c335936b00000000 refcnt=2
I0825 11:49:44.724684 44439 query-state.cc:416] Cancel: query_id=254492881b613d0c:c335936b00000000
I0825 11:49:44.725499 44439 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=254492881b613d0c:c335936b00000007
I0825 11:49:44.727699 44439 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=254492881b613d0c:c335936b00000000 refcnt=2
I0825 11:49:44.736022 56244 hdfs-scan-node.cc:522] Error preparing scanner for scan range hdfs://cluster1/apps/hive/warehouse/dw04_sjfx.db/app_auap_yk_ppl/000003_0(190414868:102400).
I0825 11:49:44.742736 56245 hdfs-scan-node.cc:522] Error preparing scanner for scan range hdfs://cluster1/apps/hive/warehouse/dw04_sjfx.db/app_auap_yk_ppl/000007_0(189043201:102400).
I0825 11:49:44.745646 56242 query-state.cc:403] Instance completed. instance_id=254492881b613d0c:c335936b00000007 #in-flight=25 status=CANCELLED: Cancelled
I0825 11:49:44.746310 56242 query-state.cc:416] Cancel: query_id=254492881b613d0c:c335936b00000000
I0825 11:49:44.747103 56242 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=254492881b613d0c:c335936b00000000 refcnt=1
I0825 11:49:45.715423 43937 impala-server.cc:1635] Query ab479bb9665197df:11f307500000000: Cancelled due to unreachable impalad(s): e4bdhpp018:22000
I0825 11:49:45.716199 43937 impala-server.cc:1635] Query b24f477464b4e6af:ff4672a00000000: Cancelled due to unreachable impalad(s): e4bdhpp018:22000
I0825 11:49:45.716428 43926 impala-server.cc:1102] Cancel(): query_id=ab479bb9665197df:11f307500000000
I0825 11:49:45.717000 43937 impala-server.cc:1635] Query cd4c8d2a10c6a92f:533303c600000000: Cancelled due to unreachable impalad(s): e4bdhpp018:22000
I0825 11:49:45.717216 43927 impala-server.cc:1102] Cancel(): query_id=b24f477464b4e6af:ff4672a00000000
I0825 11:49:45.717180 43926 coordinator.cc:629] Cancel() query_id=ab479bb9665197df:11f307500000000
I0825 11:49:45.717713 43937 impala-server.cc:1635] Query d84822ce8430f20f:5a97b74100000000: Cancelled due to unreachable impalad(s): e4bdhpp018:22000
I0825 11:49:45.718219 43926 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=ab479bb9665197df:11f307500000000 backend=e4bdhpp014:22000
I0825 11:49:45.718681 43937 impala-server.cc:1635] Query f24d8195a19648d2:a704969300000000: Cancelled due to unreachable impalad(s): e4bdhpp018:22000
I0825 11:49:45.717860 43928 impala-server.cc:1102] Cancel(): query_id=cd4c8d2a10c6a92f:533303c600000000
I0825 11:49:45.719332 43937 impala-server.cc:1635] Query 3d41395d29a26d74:9a4d2a3d00000000: Cancelled due to unreachable impalad(s): e4bdhpp018:22000
I0825 11:49:45.717898 43927 coordinator.cc:629] Cancel() query_id=b24f477464b4e6af:ff4672a00000000
I0825 11:49:45.718824 43929 impala-server.cc:1102] Cancel(): query_id=d84822ce8430f20f:5a97b74100000000
I0825 11:49:45.719496 43930 impala-server.cc:1102] Cancel(): query_id=f24d8195a19648d2:a704969300000000
I0825 11:49:45.719796 43937 impala-server.cc:1635] Query 564078f8b576bb47:c0cdecdc00000000: Cancelled due to unreachable impalad(s): e4bdhpp018:22000
I0825 11:49:45.719594 43928 coordinator.cc:629] Cancel() query_id=cd4c8d2a10c6a92f:533303c600000000
I0825 11:49:45.720083 43927 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=b24f477464b4e6af:ff4672a00000000 backend=e4bdhpp010:22000
I0825 11:49:45.720492 43930 coordinator.cc:629] Cancel() query_id=f24d8195a19648d2:a704969300000000
I0825 11:49:45.720285 43929 coordinator.cc:629] Cancel() query_id=d84822ce8430f20f:5a97b74100000000
I0825 11:49:45.720916 43928 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=cd4c8d2a10c6a92f:533303c600000000 backend=e4bdhpp014:22000
I0825 11:49:45.721645 43929 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=d84822ce8430f20f:5a97b74100000000 backend=e4bdhpp014:22000
I0825 11:49:45.720671 43937 impala-server.cc:1635] Query 5e4ad2c4759ffeb2:96e6fbfa00000000: Cancelled due to unreachable impalad(s): e4bdhpp018:22000
I0825 11:49:45.721330 43930 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=f24d8195a19648d2:a704969300000000 backend=e4bdhpp014:22000
I0825 11:49:45.722039 43927 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=b24f477464b4e6af:ff4672a00000000 backend=e4bdhpp015:22000
I0825 11:49:45.727630 43929 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=d84822ce8430f20f:5a97b74100000000 backend=e4bdhpp015:22000
I0825 11:49:45.726001 43937 impala-server.cc:1635] Query 624e79009a7bc60a:a73c218100000000: Cancelled due to unreachable impalad(s): e4bdhpp018:22000
I0825 11:49:45.722541 43926 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=ab479bb9665197df:11f307500000000 backend=e4bdhpp015:22000
I0825 11:49:45.729727 43927 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=b24f477464b4e6af:ff4672a00000000 backend=e4bdhpp018:22000
I0825 11:49:45.731123 43927 client-cache.cc:81] ReopenClient(): re-creating client for e4bdhpp018:22000
I0825 11:49:45.733245 43926 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=ab479bb9665197df:11f307500000000 backend=e4bdhpp018:22000
I0825 11:49:45.734110 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.734841 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.735404 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.735803 43927 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:45.736481 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.737876 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.738238 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.738981 43926 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:45.739323 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.756105 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.756402 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.757344 43927 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:45.757421 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.758260 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.759327 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.759691 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.760390 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.759249 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.761009 43926 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:45.760776 43927 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:45.761550 43927 client-cache.h:329] RPC client failed to connect: Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
 rpc: N6impala28TCancelQueryFInstancesResultE
I0825 11:49:45.761911 43927 client-cache.cc:170] Broken Connection, destroy client for e4bdhpp018:22000
I0825 11:49:45.763023 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.763754 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.763932 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.764801 43926 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:45.765594 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.766284 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.766729 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.766930 43927 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:45.767560 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.768955 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.769342 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.775705 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.776453 43926 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:45.776543 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.777065 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.778823 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.778859 43927 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:45.780774 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.781371 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.782048 43926 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:45.784557 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.785471 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.785326 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.785848 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.785805 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.787358 43927 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:45.787556 44439 impala-internal-service.cc:63] CancelQueryFInstances(): query_id=cd48b8c9bb5c6ee3:fdb9f14d00000000
I0825 11:49:45.786506 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.788518 44439 query-exec-mgr.cc:95] QueryState: query_id=cd48b8c9bb5c6ee3:fdb9f14d00000000 refcnt=2
I0825 11:49:45.789247 44439 query-state.cc:416] Cancel: query_id=cd48b8c9bb5c6ee3:fdb9f14d00000000
I0825 11:49:45.788949 43926 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:45.790139 44439 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=cd48b8c9bb5c6ee3:fdb9f14d00000002
I0825 11:49:45.791306 44439 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd48b8c9bb5c6ee3:fdb9f14d00000000 refcnt=2
I0825 11:49:45.790683 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.791365 52907 impala-server.cc:1015] UnregisterQuery(): query_id=d84822ce8430f20f:5a97b74100000000
I0825 11:49:45.793237 52907 impala-server.cc:1102] Cancel(): query_id=d84822ce8430f20f:5a97b74100000000
I0825 11:49:45.793305 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.794986 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.795583 43927 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:45.796600 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.798606 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.799477 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.798724 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.800729 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.800046 43926 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:45.801232 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.803570 43927 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:45.803968 52773 impala-internal-service.cc:63] CancelQueryFInstances(): query_id=b741a2d6f09052d9:8993c4e700000000
I0825 11:49:45.804630 52773 query-exec-mgr.cc:95] QueryState: query_id=b741a2d6f09052d9:8993c4e700000000 refcnt=2
I0825 11:49:45.805114 52773 query-state.cc:416] Cancel: query_id=b741a2d6f09052d9:8993c4e700000000
I0825 11:49:45.805379 52773 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=b741a2d6f09052d9:8993c4e700000002
I0825 11:49:45.805894 52773 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=b741a2d6f09052d9:8993c4e700000000 refcnt=2
I0825 11:49:45.805357 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.808167 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.808367 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.809386 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.809957 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.809614 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.810781 43927 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:45.812158 43927 coordinator-backend-state.cc:373] CancelQueryFInstances query_id= b24f477464b4e6af:ff4672a00000000 failed to connect to e4bdhpp018:22000 :Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.811820 43926 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:45.812639 43927 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=b24f477464b4e6af:ff4672a00000000 backend=e4bdhpp021:22000
I0825 11:49:45.815637 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.816465 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.814656 43927 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=b24f477464b4e6af:ff4672a00000000 backend=e4bdhpp023:22000
I0825 11:49:45.817112 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.817881 43926 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:45.820267 43926 coordinator-backend-state.cc:373] CancelQueryFInstances query_id= ab479bb9665197df:11f307500000000 failed to connect to e4bdhpp018:22000 :Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.823740 43927 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=b24f477464b4e6af:ff4672a00000000 backend=e4bdhpp025:22000
I0825 11:49:45.821427 43926 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=ab479bb9665197df:11f307500000000 backend=e4bdhpp021:22000
I0825 11:49:45.832048 44904 impala-internal-service.cc:63] CancelQueryFInstances(): query_id=b24f477464b4e6af:ff4672a00000000
I0825 11:49:45.832600 44904 query-exec-mgr.cc:95] QueryState: query_id=b24f477464b4e6af:ff4672a00000000 refcnt=4
I0825 11:49:45.832942 44904 query-state.cc:416] Cancel: query_id=b24f477464b4e6af:ff4672a00000000
I0825 11:49:45.833528 44904 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=b24f477464b4e6af:ff4672a00000007
I0825 11:49:45.834162 44904 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=b24f477464b4e6af:ff4672a00000000
I0825 11:49:45.834869 43926 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=ab479bb9665197df:11f307500000000 backend=e4bdhpp023:22000
I0825 11:49:45.835019 44904 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=b24f477464b4e6af:ff4672a00000000 node_id=1
I0825 11:49:45.835696 44904 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=b24f477464b4e6af:ff4672a00000000 refcnt=4
I0825 11:49:45.836146 43927 coordinator.cc:639] CancelBackends() query_id=b24f477464b4e6af:ff4672a00000000, tried to cancel 6 backends
I0825 11:49:45.836606 43927 coordinator.cc:783] Release admission control resources for query_id=b24f477464b4e6af:ff4672a00000000
I0825 11:49:45.837714 55162 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=b24f477464b4e6af:ff4672a00000000, node=1
I0825 11:49:45.838822 43926 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=ab479bb9665197df:11f307500000000 backend=e4bdhpp025:22000
I0825 11:49:45.839022 43927 impala-server.cc:1102] Cancel(): query_id=3d41395d29a26d74:9a4d2a3d00000000
I0825 11:49:45.839160 55135 impala-server.cc:1015] UnregisterQuery(): query_id=b24f477464b4e6af:ff4672a00000000
I0825 11:49:45.840658 44904 impala-internal-service.cc:63] CancelQueryFInstances(): query_id=ab479bb9665197df:11f307500000000
I0825 11:49:45.840606 43927 coordinator.cc:629] Cancel() query_id=3d41395d29a26d74:9a4d2a3d00000000
I0825 11:49:45.841151 44904 query-exec-mgr.cc:95] QueryState: query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:45.840948 55135 impala-server.cc:1102] Cancel(): query_id=b24f477464b4e6af:ff4672a00000000
I0825 11:49:45.841661 44904 query-state.cc:416] Cancel: query_id=ab479bb9665197df:11f307500000000
I0825 11:49:45.841549 43927 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=3d41395d29a26d74:9a4d2a3d00000000 backend=e4bdhpp014:22000
I0825 11:49:45.842635 44904 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=ab479bb9665197df:11f307500000006
I0825 11:49:45.842937 45240 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): b24f477464b4e6af:ff4672a00000000
I0825 11:49:45.843227 44904 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=ab479bb9665197df:11f307500000000
I0825 11:49:45.843925 44439 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): b24f477464b4e6af:ff4672a00000000
I0825 11:49:45.844314 44904 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=ab479bb9665197df:11f307500000000 node_id=1
I0825 11:49:45.843945 55163 query-state.cc:288] Cancelling fragment instances as directed by the coordinator. Returned status: ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): b24f477464b4e6af:ff4672a00000000
I0825 11:49:45.845706 55163 query-state.cc:416] Cancel: query_id=b24f477464b4e6af:ff4672a00000000
I0825 11:49:45.845562 44904 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=ab479bb9665197df:11f307500000000 refcnt=4
I0825 11:49:45.846496 43926 coordinator.cc:639] CancelBackends() query_id=ab479bb9665197df:11f307500000000, tried to cancel 6 backends
I0825 11:49:45.847086 43926 coordinator.cc:783] Release admission control resources for query_id=ab479bb9665197df:11f307500000000
I0825 11:49:45.849272 55162 query-state.cc:403] Instance completed. instance_id=b24f477464b4e6af:ff4672a00000000 #in-flight=24 status=CANCELLED: Cancelled
I0825 11:49:45.849315 43926 impala-server.cc:1102] Cancel(): query_id=564078f8b576bb47:c0cdecdc00000000
I0825 11:49:45.850097 55162 query-state.cc:416] Cancel: query_id=b24f477464b4e6af:ff4672a00000000
I0825 11:49:45.850137 43927 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=3d41395d29a26d74:9a4d2a3d00000000 backend=e4bdhpp015:22000
I0825 11:49:45.850643 43926 coordinator.cc:629] Cancel() query_id=564078f8b576bb47:c0cdecdc00000000
I0825 11:49:45.850857 55162 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=b24f477464b4e6af:ff4672a00000000 refcnt=3
I0825 11:49:45.851495 43926 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=564078f8b576bb47:c0cdecdc00000000 backend=e4bdhpp010:22000
I0825 11:49:45.851202 53122 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=ab479bb9665197df:11f307500000000, node=1
I0825 11:49:45.852706 43926 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=564078f8b576bb47:c0cdecdc00000000 backend=e4bdhpp014:22000
I0825 11:49:45.853299 43927 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=3d41395d29a26d74:9a4d2a3d00000000 backend=e4bdhpp018:22000
I0825 11:49:45.855939 43926 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=564078f8b576bb47:c0cdecdc00000000 backend=e4bdhpp015:22000
I0825 11:49:45.859591 43926 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=564078f8b576bb47:c0cdecdc00000000 backend=e4bdhpp018:22000
I0825 11:49:45.861225 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.861897 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.862183 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.862587 43927 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:45.865339 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.866048 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.866518 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.866684 43927 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:45.868608 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.870039 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.870219 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.870391 43927 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:45.872454 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.874207 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.874462 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.874748 53122 query-state.cc:403] Instance completed. instance_id=ab479bb9665197df:11f307500000000 #in-flight=23 status=CANCELLED: Cancelled
I0825 11:49:45.874781 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.875190 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.876251 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.875479 53122 query-state.cc:416] Cancel: query_id=ab479bb9665197df:11f307500000000
I0825 11:49:45.877979 53122 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=ab479bb9665197df:11f307500000000 refcnt=3
I0825 11:49:45.877606 43926 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:45.875589 43927 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:45.881669 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.882195 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.882822 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.883193 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.883226 43926 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:45.884429 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.884907 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.885407 43927 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:45.886572 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.887614 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.887997 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.889204 43926 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:45.888667 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.890084 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.891438 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.893731 43927 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:45.898141 44439 impala-internal-service.cc:63] CancelQueryFInstances(): query_id=714ba4da209a8519:5f10c97500000000
I0825 11:49:45.898775 44439 query-exec-mgr.cc:95] QueryState: query_id=714ba4da209a8519:5f10c97500000000 refcnt=2
I0825 11:49:45.900389 44439 query-state.cc:416] Cancel: query_id=714ba4da209a8519:5f10c97500000000
I0825 11:49:45.900626 44439 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=714ba4da209a8519:5f10c97500000002
I0825 11:49:45.901289 55135 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=b24f477464b4e6af:ff4672a00000000 refcnt=2
I0825 11:49:45.901342 44439 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=714ba4da209a8519:5f10c97500000000 refcnt=2
I0825 11:49:45.907259 52773 impala-internal-service.cc:63] CancelQueryFInstances(): query_id=204f9bc9a05faaff:3a46cbcf00000000
I0825 11:49:45.908018 52773 query-exec-mgr.cc:95] QueryState: query_id=204f9bc9a05faaff:3a46cbcf00000000 refcnt=2
I0825 11:49:45.909097 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.909091 52773 query-state.cc:416] Cancel: query_id=204f9bc9a05faaff:3a46cbcf00000000
I0825 11:49:45.909837 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.910197 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.909953 52773 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=204f9bc9a05faaff:3a46cbcf00000002
I0825 11:49:45.912235 52773 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=204f9bc9a05faaff:3a46cbcf00000000 refcnt=2
I0825 11:49:45.911062 43926 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:45.913707 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.914844 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.915022 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.915329 43927 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:45.916039 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.917519 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.918031 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.918444 43926 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:45.918587 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.919695 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.920490 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.920766 43927 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:45.921626 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.922479 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.922930 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.923272 43926 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:45.926826 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.929069 49904 query-state.cc:288] Cancelling fragment instances as directed by the coordinator. Returned status: ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): 714ba4da209a8519:5f10c97500000000
I0825 11:49:45.929119 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.929358 49904 query-state.cc:416] Cancel: query_id=714ba4da209a8519:5f10c97500000000
I0825 11:49:45.930274 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.931914 43927 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:45.932559 51034 query-state.cc:288] Cancelling fragment instances as directed by the coordinator. Returned status: ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): 204f9bc9a05faaff:3a46cbcf00000000
I0825 11:49:45.935927 51034 query-state.cc:416] Cancel: query_id=204f9bc9a05faaff:3a46cbcf00000000
I0825 11:49:45.935478 43927 coordinator-backend-state.cc:373] CancelQueryFInstances query_id= 3d41395d29a26d74:9a4d2a3d00000000 failed to connect to e4bdhpp018:22000 :Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.934360 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.937292 43927 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=3d41395d29a26d74:9a4d2a3d00000000 backend=e4bdhpp021:22000
I0825 11:49:45.937860 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.940184 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.940515 43926 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:45.942286 43927 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=3d41395d29a26d74:9a4d2a3d00000000 backend=e4bdhpp023:22000
I0825 11:49:45.943886 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.944783 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.945237 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.945675 43926 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:45.946882 56262 hdfs-scan-node.cc:522] Error preparing scanner for scan range hdfs://cluster1/apps/hive/warehouse/dw04.db/app_gsms_hos_cgdd/000195_0(34950135:102400).
I0825 11:49:45.949563 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:45.950500 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.951913 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:45.952559 43927 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=3d41395d29a26d74:9a4d2a3d00000000 backend=e4bdhpp025:22000
I0825 11:49:45.953765 45240 impala-internal-service.cc:63] CancelQueryFInstances(): query_id=3d41395d29a26d74:9a4d2a3d00000000
I0825 11:49:45.954164 45240 query-exec-mgr.cc:95] QueryState: query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:45.954619 45240 query-state.cc:416] Cancel: query_id=3d41395d29a26d74:9a4d2a3d00000000
I0825 11:49:45.953269 43926 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:45.954907 45240 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=3d41395d29a26d74:9a4d2a3d00000006
I0825 11:49:45.955312 45240 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=3d41395d29a26d74:9a4d2a3d00000000
I0825 11:49:45.955197 43926 coordinator-backend-state.cc:373] CancelQueryFInstances query_id= 564078f8b576bb47:c0cdecdc00000000 failed to connect to e4bdhpp018:22000 :Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:45.956043 45240 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=3d41395d29a26d74:9a4d2a3d00000000 node_id=1
I0825 11:49:45.956482 45240 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=4
I0825 11:49:45.956104 43926 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=564078f8b576bb47:c0cdecdc00000000 backend=e4bdhpp023:22000
I0825 11:49:45.957414 43927 coordinator.cc:639] CancelBackends() query_id=3d41395d29a26d74:9a4d2a3d00000000, tried to cancel 6 backends
I0825 11:49:45.958110 43927 coordinator.cc:783] Release admission control resources for query_id=3d41395d29a26d74:9a4d2a3d00000000
I0825 11:49:45.959931 53027 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=3d41395d29a26d74:9a4d2a3d00000000, node=1
I0825 11:49:45.960692 43927 impala-server.cc:1102] Cancel(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000
I0825 11:49:45.961084 43926 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=564078f8b576bb47:c0cdecdc00000000 backend=e4bdhpp025:22000
I0825 11:49:45.961730 43927 coordinator.cc:629] Cancel() query_id=5e4ad2c4759ffeb2:96e6fbfa00000000
I0825 11:49:45.962468 44904 impala-internal-service.cc:63] CancelQueryFInstances(): query_id=564078f8b576bb47:c0cdecdc00000000
I0825 11:49:45.961982 53027 query-state.cc:403] Instance completed. instance_id=3d41395d29a26d74:9a4d2a3d00000000 #in-flight=22 status=CANCELLED: Cancelled
I0825 11:49:45.962700 43927 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 backend=e4bdhpp014:22000
I0825 11:49:45.962963 44904 query-exec-mgr.cc:95] QueryState: query_id=564078f8b576bb47:c0cdecdc00000000 refcnt=4
I0825 11:49:45.963949 44904 query-state.cc:416] Cancel: query_id=564078f8b576bb47:c0cdecdc00000000
I0825 11:49:45.963344 53027 query-state.cc:416] Cancel: query_id=3d41395d29a26d74:9a4d2a3d00000000
I0825 11:49:45.964207 44904 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=564078f8b576bb47:c0cdecdc00000007
I0825 11:49:45.964596 53027 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=3
I0825 11:49:45.965000 44904 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=564078f8b576bb47:c0cdecdc00000000
I0825 11:49:45.966075 44904 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=564078f8b576bb47:c0cdecdc00000000 node_id=1
I0825 11:49:45.966696 44904 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=564078f8b576bb47:c0cdecdc00000000 refcnt=4
I0825 11:49:45.967041 43927 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 backend=e4bdhpp015:22000
I0825 11:49:45.968436 55214 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=564078f8b576bb47:c0cdecdc00000000, node=1
I0825 11:49:45.967373 43926 coordinator.cc:639] CancelBackends() query_id=564078f8b576bb47:c0cdecdc00000000, tried to cancel 6 backends
I0825 11:49:45.969640 43926 coordinator.cc:783] Release admission control resources for query_id=564078f8b576bb47:c0cdecdc00000000
I0825 11:49:45.971997 43926 impala-server.cc:1102] Cancel(): query_id=624e79009a7bc60a:a73c218100000000
I0825 11:49:45.972324 43926 coordinator.cc:629] Cancel() query_id=624e79009a7bc60a:a73c218100000000
I0825 11:49:45.971972 43927 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 backend=e4bdhpp018:22000
I0825 11:49:45.973109 43926 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=624e79009a7bc60a:a73c218100000000 backend=e4bdhpp014:22000
I0825 11:49:45.977895 43926 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=624e79009a7bc60a:a73c218100000000 backend=e4bdhpp015:22000
I0825 11:49:45.981071 43926 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=624e79009a7bc60a:a73c218100000000 backend=e4bdhpp018:22000
I0825 11:49:45.983871 52961 impala-server.cc:1015] UnregisterQuery(): query_id=ab479bb9665197df:11f307500000000
I0825 11:49:45.984267 52961 impala-server.cc:1102] Cancel(): query_id=ab479bb9665197df:11f307500000000
I0825 11:49:46.001091 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.002426 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.002941 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.003522 43926 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:46.003876 55214 query-state.cc:403] Instance completed. instance_id=564078f8b576bb47:c0cdecdc00000000 #in-flight=21 status=CANCELLED: Cancelled
I0825 11:49:46.004829 55214 query-state.cc:416] Cancel: query_id=564078f8b576bb47:c0cdecdc00000000
I0825 11:49:46.005246 55214 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=564078f8b576bb47:c0cdecdc00000000 refcnt=3
I0825 11:49:46.007755 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.008638 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.009060 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.009541 43926 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:46.012913 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.013772 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.014519 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.015087 43926 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:46.032619 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.033520 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.034507 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.035929 43927 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:46.039227 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.040061 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.040558 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.041105 43927 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:46.044956 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.046056 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.046540 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.047571 43927 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:46.060220 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.061414 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.062115 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.062564 43926 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:46.065840 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.066561 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.067312 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.067036 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.068202 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.068487 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.068830 43926 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:46.069363 43927 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:46.072705 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.073498 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.073560 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.074187 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.075031 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.074867 43926 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:46.075443 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.075965 43927 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:46.078037 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.078802 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.079249 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.079823 43927 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:46.081063 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.082051 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.083061 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.083600 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.083596 43926 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:46.084385 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.084911 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.085709 43927 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:46.087306 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.089071 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.088922 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.090395 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.090400 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.090847 43926 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:46.091053 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.091787 43927 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:46.094456 43926 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.094908 43926 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.096163 43926 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.096045 43927 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.096701 43926 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:46.097558 55135 impala-hs2-server.cc:683] CloseOperation(): query_id=b24f477464b4e6af:ff4672a00000000
I0825 11:49:46.097262 43927 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.097942 43926 coordinator-backend-state.cc:373] CancelQueryFInstances query_id= 624e79009a7bc60a:a73c218100000000 failed to connect to e4bdhpp018:22000 :Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.098480 43927 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.098707 43926 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=624e79009a7bc60a:a73c218100000000 backend=e4bdhpp023:22000
I0825 11:49:46.099159 43927 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:46.099804 43927 coordinator-backend-state.cc:373] CancelQueryFInstances query_id= 5e4ad2c4759ffeb2:96e6fbfa00000000 failed to connect to e4bdhpp018:22000 :Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.100252 43927 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 backend=e4bdhpp023:22000
I0825 11:49:46.101935 43926 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=624e79009a7bc60a:a73c218100000000 backend=e4bdhpp025:22000
I0825 11:49:46.102383 45240 impala-internal-service.cc:63] CancelQueryFInstances(): query_id=624e79009a7bc60a:a73c218100000000
I0825 11:49:46.102576 45240 query-exec-mgr.cc:95] QueryState: query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:46.102718 45240 query-state.cc:416] Cancel: query_id=624e79009a7bc60a:a73c218100000000
I0825 11:49:46.102857 45240 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=624e79009a7bc60a:a73c218100000002
I0825 11:49:46.103032 45240 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=624e79009a7bc60a:a73c218100000000
I0825 11:49:46.103145 45240 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=624e79009a7bc60a:a73c218100000000 node_id=1
I0825 11:49:46.103324 45240 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=4
I0825 11:49:46.103714 43926 coordinator.cc:639] CancelBackends() query_id=624e79009a7bc60a:a73c218100000000, tried to cancel 5 backends
I0825 11:49:46.104195 43926 coordinator.cc:783] Release admission control resources for query_id=624e79009a7bc60a:a73c218100000000
I0825 11:49:46.105154 55135 impala-hs2-server.cc:503] GetCatalogs(): request=TGetCatalogsReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "N\x18\x95\xa9\xb6\x90H\x0f\x93!\xd8\xf3v\x10E\x01",
      02: secret (string) = "\xc1\x12D4nXF+\xa8\x99\xda\xe8t\xb9\xd8O",
    },
  },
}
I0825 11:49:46.117704 50722 query-state.cc:288] Cancelling fragment instances as directed by the coordinator. Returned status: ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): b741a2d6f09052d9:8993c4e700000000
I0825 11:49:46.117794 51309 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=624e79009a7bc60a:a73c218100000000, node=1
I0825 11:49:46.118405 50722 query-state.cc:416] Cancel: query_id=b741a2d6f09052d9:8993c4e700000000
I0825 11:49:46.117893 50448 impala-server.cc:1015] UnregisterQuery(): query_id=624e79009a7bc60a:a73c218100000000
I0825 11:49:46.119110 50448 impala-server.cc:1102] Cancel(): query_id=624e79009a7bc60a:a73c218100000000
I0825 11:49:46.138017 44439 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): 624e79009a7bc60a:a73c218100000000
I0825 11:49:46.144069 56267 hdfs-scan-node.cc:522] Error preparing scanner for scan range hdfs://cluster1/apps/hive/warehouse/dw04.db/app_gsms_hos_cgdd/000019_0(34992124:102400).
I0825 11:49:46.147356 52961 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=ab479bb9665197df:11f307500000000 refcnt=2
I0825 11:49:46.151499 55135 impala-hs2-server.cc:516] GetCatalogs(): return_val=TGetCatalogsResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "e\xad\xfcA{\xffB\x1c\x00\x00\x00\x00\xfcJ\xda\x96",
      02: secret (string) = "e\xad\xfcA{\xffB\x1c\x00\x00\x00\x00\xfcJ\xda\x96",
    },
    02: operationType (i32) = 2,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:46.152420 44904 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): 624e79009a7bc60a:a73c218100000000
I0825 11:49:46.152534 55135 impala-hs2-server.cc:683] CloseOperation(): query_id=1c42ff7b41fcad65:96da4afc00000000
I0825 11:49:46.152989 51310 query-state.cc:288] Cancelling fragment instances as directed by the coordinator. Returned status: ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): 624e79009a7bc60a:a73c218100000000
I0825 11:49:46.153139 55135 impala-server.cc:1015] UnregisterQuery(): query_id=1c42ff7b41fcad65:96da4afc00000000
I0825 11:49:46.153672 55135 impala-server.cc:1102] Cancel(): query_id=1c42ff7b41fcad65:96da4afc00000000
I0825 11:49:46.153554 51310 query-state.cc:416] Cancel: query_id=624e79009a7bc60a:a73c218100000000
I0825 11:49:46.155439 51309 query-state.cc:403] Instance completed. instance_id=624e79009a7bc60a:a73c218100000000 #in-flight=20 status=CANCELLED: Cancelled
I0825 11:49:46.156137 51309 query-state.cc:416] Cancel: query_id=624e79009a7bc60a:a73c218100000000
I0825 11:49:46.156345 51309 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=3
I0825 11:49:46.158366 52773 impala-internal-service.cc:63] CancelQueryFInstances(): query_id=cd4c1202c157df1d:d37511b300000000
I0825 11:49:46.159138 52773 query-exec-mgr.cc:95] QueryState: query_id=cd4c1202c157df1d:d37511b300000000 refcnt=2
I0825 11:49:46.159694 52773 query-state.cc:416] Cancel: query_id=cd4c1202c157df1d:d37511b300000000
I0825 11:49:46.160368 52773 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=cd4c1202c157df1d:d37511b300000006
I0825 11:49:46.160683 52773 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c1202c157df1d:d37511b300000000 refcnt=2
I0825 11:49:46.196719 55138 impala-server.cc:1015] UnregisterQuery(): query_id=564078f8b576bb47:c0cdecdc00000000
I0825 11:49:46.197358 55138 impala-server.cc:1102] Cancel(): query_id=564078f8b576bb47:c0cdecdc00000000
I0825 11:49:46.200417 52918 impala-server.cc:1015] UnregisterQuery(): query_id=3d41395d29a26d74:9a4d2a3d00000000
I0825 11:49:46.200721 52918 impala-server.cc:1102] Cancel(): query_id=3d41395d29a26d74:9a4d2a3d00000000
I0825 11:49:46.264794 52918 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=2
I0825 11:49:46.272330 55138 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=564078f8b576bb47:c0cdecdc00000000 refcnt=2
I0825 11:49:46.290987 43929 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=d84822ce8430f20f:5a97b74100000000 backend=e4bdhpp018:22000
I0825 11:49:46.293355 43929 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.293776 43929 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.294226 43929 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.294425 43929 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:46.296743 43929 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.297526 43929 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.297969 43929 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.298421 43929 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:46.300999 43929 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.301416 43929 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.301560 43929 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.301767 52961 impala-hs2-server.cc:683] CloseOperation(): query_id=ab479bb9665197df:11f307500000000
I0825 11:49:46.301962 43929 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:46.302529 52961 impala-hs2-server.cc:503] GetCatalogs(): request=TGetCatalogsReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xfc}\x1f\xabp\xacM\x1b\x99D\xa1P\x99\x19\x12\x1b",
      02: secret (string) = "\x1au\xe6\xbd\x81\xf4C8\x83=\x1d\xafk\xe3\xa9\xf0",
    },
  },
}
I0825 11:49:46.303499 43929 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.309646 43929 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.309821 43929 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.310019 43929 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:46.311823 43929 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.312129 43929 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.312546 43929 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.312803 43929 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:46.314811 43929 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.315122 43929 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.315454 43929 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.315819 43929 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:46.318570 52961 impala-hs2-server.cc:516] GetCatalogs(): return_val=TGetCatalogsResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xb9\xbe\x8c\xed+YKd\x00\x00\x00\x00H\x12\xe1d",
      02: secret (string) = "\xb9\xbe\x8c\xed+YKd\x00\x00\x00\x00H\x12\xe1d",
    },
    02: operationType (i32) = 2,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:46.319595 52961 impala-hs2-server.cc:683] CloseOperation(): query_id=644b592bed8cbeb9:64e1124800000000
I0825 11:49:46.319777 52961 impala-server.cc:1015] UnregisterQuery(): query_id=644b592bed8cbeb9:64e1124800000000
I0825 11:49:46.320206 52961 impala-server.cc:1102] Cancel(): query_id=644b592bed8cbeb9:64e1124800000000
I0825 11:49:46.322345 53201 query-state.cc:288] Cancelling fragment instances as directed by the coordinator. Returned status: ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): cd4c1202c157df1d:d37511b300000000
I0825 11:49:46.323196 53201 query-state.cc:416] Cancel: query_id=cd4c1202c157df1d:d37511b300000000
I0825 11:49:46.324733 52918 impala-hs2-server.cc:683] CloseOperation(): query_id=3d41395d29a26d74:9a4d2a3d00000000
I0825 11:49:46.326421 52918 impala-hs2-server.cc:503] GetCatalogs(): request=TGetCatalogsReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "I\xf42\x147^M\x94\x83\x13\x93y\x05aZ\xc2",
      02: secret (string) = "\x9e[$\x93\xe0eOP\xae\xad\x18\x19qS\x01\b",
    },
  },
}
I0825 11:49:46.334256 43929 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.335434 43929 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.335987 43929 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.336474 43929 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:46.339542 43929 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.340222 43929 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.340229 51442 query-state.cc:288] Cancelling fragment instances as directed by the coordinator. Returned status: ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): cd48b8c9bb5c6ee3:fdb9f14d00000000
I0825 11:49:46.340783 43929 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.341102 51442 query-state.cc:416] Cancel: query_id=cd48b8c9bb5c6ee3:fdb9f14d00000000
I0825 11:49:46.341353 43929 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:46.342156 55138 impala-hs2-server.cc:683] CloseOperation(): query_id=564078f8b576bb47:c0cdecdc00000000
I0825 11:49:46.343003 55138 impala-hs2-server.cc:503] GetCatalogs(): request=TGetCatalogsReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\xe8w\xcb&\x05wC\x12\x9b\x86Og\xc1\x04\xf3Y",
      02: secret (string) = "\x192m\x8f\xac\\M\x97\xb4y5/nR'\xd6",
    },
  },
}
I0825 11:49:46.344532 43929 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.346767 43929 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.347393 43929 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.347828 43929 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:46.348381 43929 coordinator-backend-state.cc:373] CancelQueryFInstances query_id= d84822ce8430f20f:5a97b74100000000 failed to connect to e4bdhpp018:22000 :Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.349023 43929 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=d84822ce8430f20f:5a97b74100000000 backend=e4bdhpp021:22000
I0825 11:49:46.350508 43929 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=d84822ce8430f20f:5a97b74100000000 backend=e4bdhpp023:22000
I0825 11:49:46.353976 43929 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=d84822ce8430f20f:5a97b74100000000 backend=e4bdhpp025:22000
I0825 11:49:46.354625 44904 impala-internal-service.cc:63] CancelQueryFInstances(): query_id=d84822ce8430f20f:5a97b74100000000
I0825 11:49:46.354924 50448 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=2
I0825 11:49:46.354986 44904 query-exec-mgr.cc:95] QueryState: query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:46.355471 44904 query-state.cc:416] Cancel: query_id=d84822ce8430f20f:5a97b74100000000
I0825 11:49:46.355767 44904 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=d84822ce8430f20f:5a97b74100000006
I0825 11:49:46.356158 44904 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=d84822ce8430f20f:5a97b74100000000
I0825 11:49:46.356804 44904 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=d84822ce8430f20f:5a97b74100000000 node_id=1
I0825 11:49:46.357118 44904 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d84822ce8430f20f:5a97b74100000000 refcnt=4
I0825 11:49:46.357563 50448 impala-hs2-server.cc:683] CloseOperation(): query_id=624e79009a7bc60a:a73c218100000000
I0825 11:49:46.357965 43929 coordinator.cc:639] CancelBackends() query_id=d84822ce8430f20f:5a97b74100000000, tried to cancel 6 backends
I0825 11:49:46.358233 52918 impala-hs2-server.cc:516] GetCatalogs(): return_val=TGetCatalogsResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xf1\xe9\xaf\x84\x0f\xafL\xe2\x00\x00\x00\x00\xae\x0e\xb3\x1e",
      02: secret (string) = "\xf1\xe9\xaf\x84\x0f\xafL\xe2\x00\x00\x00\x00\xae\x0e\xb3\x1e",
    },
    02: operationType (i32) = 2,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:46.358532 43929 coordinator.cc:783] Release admission control resources for query_id=d84822ce8430f20f:5a97b74100000000
I0825 11:49:46.359352 52918 impala-hs2-server.cc:683] CloseOperation(): query_id=e24caf0f84afe9f1:1eb30eae00000000
I0825 11:49:46.359898 52918 impala-server.cc:1015] UnregisterQuery(): query_id=e24caf0f84afe9f1:1eb30eae00000000
I0825 11:49:46.360159 52918 impala-server.cc:1102] Cancel(): query_id=e24caf0f84afe9f1:1eb30eae00000000
I0825 11:49:46.362893 45240 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): d84822ce8430f20f:5a97b74100000000
I0825 11:49:46.363349 52924 query-state.cc:288] Cancelling fragment instances as directed by the coordinator. Returned status: ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): d84822ce8430f20f:5a97b74100000000
I0825 11:49:46.363831 52924 query-state.cc:416] Cancel: query_id=d84822ce8430f20f:5a97b74100000000
I0825 11:49:46.367916 44439 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): d84822ce8430f20f:5a97b74100000000
I0825 11:49:46.376801 44904 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): d84822ce8430f20f:5a97b74100000000
I0825 11:49:46.378990 52923 query-state.cc:288] Cancelling fragment instances as directed by the coordinator. Returned status: ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): d84822ce8430f20f:5a97b74100000000
I0825 11:49:46.379494 52923 query-state.cc:416] Cancel: query_id=d84822ce8430f20f:5a97b74100000000
I0825 11:49:46.380180 50448 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "l\x99I\xc3\x86\x9fA\xa9\x88\xa3\xb9\x9e\xc4\x9c\xda?",
      02: secret (string) = "\a|DW\xd7\xddB\x0f\x8at>\xbe\x1b\a\xa7\xb7",
    },
  },
}
I0825 11:49:46.380394 52923 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=d84822ce8430f20f:5a97b74100000000, node=1
I0825 11:49:46.380456 55138 impala-hs2-server.cc:516] GetCatalogs(): return_val=TGetCatalogsResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xbb\xc2\"\xef\xccFH\x9d\x00\x00\x00\x00\" 5\xf5",
      02: secret (string) = "\xbb\xc2\"\xef\xccFH\x9d\x00\x00\x00\x00\" 5\xf5",
    },
    02: operationType (i32) = 2,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:46.381275 50448 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:54726 closed, closing 2 associated session(s)
I0825 11:49:46.381245 55688 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): d84822ce8430f20f:5a97b74100000000
I0825 11:49:46.381337 52923 query-state.cc:403] Instance completed. instance_id=d84822ce8430f20f:5a97b74100000000 #in-flight=19 status=CANCELLED: Cancelled
I0825 11:49:46.381852 55138 impala-hs2-server.cc:683] CloseOperation(): query_id=9d4846ccef22c2bb:f535202200000000
I0825 11:49:46.383095 55138 impala-server.cc:1015] UnregisterQuery(): query_id=9d4846ccef22c2bb:f535202200000000
I0825 11:49:46.383255 55138 impala-server.cc:1102] Cancel(): query_id=9d4846ccef22c2bb:f535202200000000
I0825 11:49:46.382966 52923 query-state.cc:416] Cancel: query_id=d84822ce8430f20f:5a97b74100000000
I0825 11:49:46.384049 52923 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d84822ce8430f20f:5a97b74100000000 refcnt=3
I0825 11:49:46.416420 52773 impala-internal-service.cc:63] CancelQueryFInstances(): query_id=9f402daf3559339b:461883ed00000000
I0825 11:49:46.416785 52773 query-exec-mgr.cc:95] QueryState: query_id=9f402daf3559339b:461883ed00000000 refcnt=2
I0825 11:49:46.416968 52773 query-state.cc:416] Cancel: query_id=9f402daf3559339b:461883ed00000000
I0825 11:49:46.417390 52773 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=9f402daf3559339b:461883ed00000002
I0825 11:49:46.417739 52773 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=9f402daf3559339b:461883ed00000000 refcnt=2
I0825 11:49:46.433771 43928 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=cd4c8d2a10c6a92f:533303c600000000 backend=e4bdhpp015:22000
I0825 11:49:46.435396 56271 hdfs-scan-node.cc:522] Error preparing scanner for scan range hdfs://cluster1/apps/hive/warehouse/dw04.db/app_gsms_hos_cgdd/000038_0(34883389:102400).
I0825 11:49:46.437045 43928 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=cd4c8d2a10c6a92f:533303c600000000 backend=e4bdhpp018:22000
I0825 11:49:46.438911 43928 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.439488 43928 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.439867 43928 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.439985 43928 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:46.441951 43928 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.442406 43928 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.442839 43928 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.443182 43928 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:46.444412 50874 query-state.cc:288] Cancelling fragment instances as directed by the coordinator. Returned status: ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): 9f402daf3559339b:461883ed00000000
I0825 11:49:46.444638 50874 query-state.cc:416] Cancel: query_id=9f402daf3559339b:461883ed00000000
I0825 11:49:46.445570 43928 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.446432 43928 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.446846 43928 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.447121 43928 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:46.450668 43928 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.451558 43928 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.452584 43928 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.453019 43928 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:46.456316 43928 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.457444 43928 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.457861 43928 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.458264 43928 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:46.461632 43928 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.461923 43928 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.462195 43928 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.462383 43928 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:46.488803 43928 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.489681 43928 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.490542 43928 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.491358 43928 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:46.494103 43928 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.494799 43928 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.495257 43928 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.495714 43928 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:46.496263 56266 hdfs-scan-node.cc:522] Error preparing scanner for scan range hdfs://cluster1/apps/hive/warehouse/dw04.db/app_gsms_hos_cgdd/000140_0(34908431:102400).
I0825 11:49:46.498986 43928 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.499673 43928 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.500445 43928 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.501104 43928 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:46.501497 43928 coordinator-backend-state.cc:373] CancelQueryFInstances query_id= cd4c8d2a10c6a92f:533303c600000000 failed to connect to e4bdhpp018:22000 :Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.501842 43928 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=cd4c8d2a10c6a92f:533303c600000000 backend=e4bdhpp023:22000
I0825 11:49:46.503993 43928 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=cd4c8d2a10c6a92f:533303c600000000 backend=e4bdhpp025:22000
I0825 11:49:46.504702 45240 impala-internal-service.cc:63] CancelQueryFInstances(): query_id=cd4c8d2a10c6a92f:533303c600000000
I0825 11:49:46.505100 45240 query-exec-mgr.cc:95] QueryState: query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:46.505442 45240 query-state.cc:416] Cancel: query_id=cd4c8d2a10c6a92f:533303c600000000
I0825 11:49:46.505841 45240 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=cd4c8d2a10c6a92f:533303c600000002
I0825 11:49:46.506227 45240 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=cd4c8d2a10c6a92f:533303c600000000
I0825 11:49:46.506847 45240 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=cd4c8d2a10c6a92f:533303c600000000 node_id=1
I0825 11:49:46.507033 45240 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=4
I0825 11:49:46.507622 43928 coordinator.cc:639] CancelBackends() query_id=cd4c8d2a10c6a92f:533303c600000000, tried to cancel 5 backends
I0825 11:49:46.508031 43928 coordinator.cc:783] Release admission control resources for query_id=cd4c8d2a10c6a92f:533303c600000000
I0825 11:49:46.510597 50417 impala-server.cc:1015] UnregisterQuery(): query_id=cd4c8d2a10c6a92f:533303c600000000
I0825 11:49:46.510826 50417 impala-server.cc:1102] Cancel(): query_id=cd4c8d2a10c6a92f:533303c600000000
I0825 11:49:46.510933 50950 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=cd4c8d2a10c6a92f:533303c600000000, node=1
I0825 11:49:46.512661 52907 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d84822ce8430f20f:5a97b74100000000 refcnt=2
I0825 11:49:46.521255 56273 hdfs-scan-node.cc:522] Error preparing scanner for scan range hdfs://cluster1/apps/hive/warehouse/dw04.db/app_gsms_hos_cgdd/000083_0(35000960:102400).
I0825 11:49:46.524529 52907 impala-hs2-server.cc:683] CloseOperation(): query_id=d84822ce8430f20f:5a97b74100000000
I0825 11:49:46.525499 52907 impala-hs2-server.cc:503] GetCatalogs(): request=TGetCatalogsReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "T\x9d@\xc6\bZ@\xe4\xb4%\xcc\bJ\x02Lr",
      02: secret (string) = "\xf5\xa4\xfa\xeey\x10E\x9a\xa4@\xcf\xb6?/\xd40",
    },
  },
}
I0825 11:49:46.527225 50950 query-state.cc:403] Instance completed. instance_id=cd4c8d2a10c6a92f:533303c600000000 #in-flight=18 status=CANCELLED: Cancelled
I0825 11:49:46.527365 50950 query-state.cc:416] Cancel: query_id=cd4c8d2a10c6a92f:533303c600000000
I0825 11:49:46.527626 50950 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=3
I0825 11:49:46.529150 45240 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): cd4c8d2a10c6a92f:533303c600000000
I0825 11:49:46.529598 50951 query-state.cc:288] Cancelling fragment instances as directed by the coordinator. Returned status: ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): cd4c8d2a10c6a92f:533303c600000000
I0825 11:49:46.529949 50951 query-state.cc:416] Cancel: query_id=cd4c8d2a10c6a92f:533303c600000000
I0825 11:49:46.535915 44439 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): cd4c8d2a10c6a92f:533303c600000000
I0825 11:49:46.545447 50417 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=2
I0825 11:49:46.549180 52907 impala-hs2-server.cc:516] GetCatalogs(): return_val=TGetCatalogsResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\t \xf8\x91\xa0\xbbJM\x00\x00\x00\x00\xaa\xef\xa6\xca",
      02: secret (string) = "\t \xf8\x91\xa0\xbbJM\x00\x00\x00\x00\xaa\xef\xa6\xca",
    },
    02: operationType (i32) = 2,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:46.550282 52907 impala-hs2-server.cc:683] CloseOperation(): query_id=4d4abba091f82009:caa6efaa00000000
I0825 11:49:46.550428 50417 impala-hs2-server.cc:683] CloseOperation(): query_id=cd4c8d2a10c6a92f:533303c600000000
I0825 11:49:46.550606 52907 impala-server.cc:1015] UnregisterQuery(): query_id=4d4abba091f82009:caa6efaa00000000
I0825 11:49:46.550834 52907 impala-server.cc:1102] Cancel(): query_id=4d4abba091f82009:caa6efaa00000000
I0825 11:49:46.565200 52773 impala-internal-service.cc:63] CancelQueryFInstances(): query_id=e140be5932aa70b9:74083d7a00000000
I0825 11:49:46.565438 52773 query-exec-mgr.cc:95] QueryState: query_id=e140be5932aa70b9:74083d7a00000000 refcnt=2
I0825 11:49:46.565572 52773 query-state.cc:416] Cancel: query_id=e140be5932aa70b9:74083d7a00000000
I0825 11:49:46.565740 52773 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=e140be5932aa70b9:74083d7a00000002
I0825 11:49:46.565824 52773 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e140be5932aa70b9:74083d7a00000000 refcnt=2
I0825 11:49:46.577497 50417 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\v\x14r\xad\xe7\"K\x0f\x88\xac\x007.\x97]\x81",
      02: secret (string) = "\x99?@\x90\xb1\x1eC\x84\x87\xf6ri#\x99\xe4q",
    },
  },
}
I0825 11:49:46.578102 50417 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:54358 closed, closing 2 associated session(s)
I0825 11:49:46.586915 56276 hdfs-scan-node.cc:522] Error preparing scanner for scan range hdfs://cluster1/apps/hive/warehouse/dw04.db/app_gsms_hos_cgdd/000103_0(35001192:102400).
I0825 11:49:46.591132 53124 query-state.cc:403] Instance completed. instance_id=ab479bb9665197df:11f307500000006 #in-flight=17 status=CANCELLED: Cancelled
I0825 11:49:46.591217 53124 query-state.cc:416] Cancel: query_id=ab479bb9665197df:11f307500000000
I0825 11:49:46.591356 53124 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=ab479bb9665197df:11f307500000000 refcnt=1
I0825 11:49:46.593789 50853 query-state.cc:288] Cancelling fragment instances as directed by the coordinator. Returned status: ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): e140be5932aa70b9:74083d7a00000000
I0825 11:49:46.594173 50853 query-state.cc:416] Cancel: query_id=e140be5932aa70b9:74083d7a00000000
I0825 11:49:46.596155 55163 query-state.cc:403] Instance completed. instance_id=b24f477464b4e6af:ff4672a00000007 #in-flight=16 status=CANCELLED: Cancelled
I0825 11:49:46.596251 55163 query-state.cc:416] Cancel: query_id=b24f477464b4e6af:ff4672a00000000
I0825 11:49:46.596338 55163 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=b24f477464b4e6af:ff4672a00000000 refcnt=1
I0825 11:49:46.643494 49904 query-state.cc:403] Instance completed. instance_id=714ba4da209a8519:5f10c97500000002 #in-flight=15 status=CANCELLED: Cancelled
I0825 11:49:46.643762 49904 query-state.cc:416] Cancel: query_id=714ba4da209a8519:5f10c97500000000
I0825 11:49:46.643929 49904 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=714ba4da209a8519:5f10c97500000000 refcnt=1
I0825 11:49:46.667467 43927 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 backend=e4bdhpp025:22000
I0825 11:49:46.667909 44904 impala-internal-service.cc:63] CancelQueryFInstances(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000
I0825 11:49:46.668018 44904 query-exec-mgr.cc:95] QueryState: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:46.668126 44904 query-state.cc:416] Cancel: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000
I0825 11:49:46.668280 44904 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=5e4ad2c4759ffeb2:96e6fbfa00000002
I0825 11:49:46.668363 44904 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=5e4ad2c4759ffeb2:96e6fbfa00000000
I0825 11:49:46.668431 44904 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=5e4ad2c4759ffeb2:96e6fbfa00000000 node_id=1
I0825 11:49:46.668560 44904 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=4
I0825 11:49:46.668766 43927 coordinator.cc:639] CancelBackends() query_id=5e4ad2c4759ffeb2:96e6fbfa00000000, tried to cancel 5 backends
I0825 11:49:46.668998 43927 coordinator.cc:783] Release admission control resources for query_id=5e4ad2c4759ffeb2:96e6fbfa00000000
I0825 11:49:46.669440 50582 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=5e4ad2c4759ffeb2:96e6fbfa00000000, node=1
I0825 11:49:46.670142 56279 hdfs-scan-node.cc:522] Error preparing scanner for scan range hdfs://cluster1/apps/hive/warehouse/dw04.db/app_gsms_hos_cgdd/000022_0(34816859:102400).
I0825 11:49:46.670295 50282 impala-server.cc:1015] UnregisterQuery(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000
I0825 11:49:46.670594 50282 impala-server.cc:1102] Cancel(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000
I0825 11:49:46.671651 44128 authentication.cc:446] Successfully authenticated principal "impala/e4bdhpp014@PANEL.COM" on an internal connection
I0825 11:49:46.672287 44904 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): 5e4ad2c4759ffeb2:96e6fbfa00000000
I0825 11:49:46.673107 50583 query-state.cc:288] Cancelling fragment instances as directed by the coordinator. Returned status: ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): 5e4ad2c4759ffeb2:96e6fbfa00000000
I0825 11:49:46.673187 50583 query-state.cc:416] Cancel: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000
I0825 11:49:46.674001 50582 query-state.cc:403] Instance completed. instance_id=5e4ad2c4759ffeb2:96e6fbfa00000000 #in-flight=14 status=CANCELLED: Cancelled
I0825 11:49:46.674070 50582 query-state.cc:416] Cancel: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000
I0825 11:49:46.674176 50582 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=3
I0825 11:49:46.675689 44439 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): 5e4ad2c4759ffeb2:96e6fbfa00000000
I0825 11:49:46.685773 50282 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=2
I0825 11:49:46.690542 50282 impala-hs2-server.cc:683] CloseOperation(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000
I0825 11:49:46.717828 43930 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=f24d8195a19648d2:a704969300000000 backend=e4bdhpp015:22000
I0825 11:49:46.719702 43930 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=f24d8195a19648d2:a704969300000000 backend=e4bdhpp018:22000
I0825 11:49:46.720145 43930 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.720346 43930 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.720443 43930 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.720504 43930 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:46.721237 43930 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.721328 50282 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "/\xdf\xac\xbcKoB\x0f\xa7\b\xe2\xde8p[\xc9",
      02: secret (string) = "B\xc8\xa4\"\xb5\xd3Go\xb3\xeb\xf272\x00\x00{",
    },
  },
}
I0825 11:49:46.721372 43930 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.721441 43930 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.721515 43930 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:46.721829 50282 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:52532 closed, closing 2 associated session(s)
I0825 11:49:46.722148 43930 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.722285 43930 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.722378 43930 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.722417 43930 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:46.722955 43930 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.723073 43930 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.723130 43930 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.723191 43930 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:46.723716 43930 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.723845 43930 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.723903 43930 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.723996 43930 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:46.724627 43930 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.724748 43930 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.724784 43930 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.724828 43930 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:46.725432 43930 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.725616 43930 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.725701 43930 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.725775 43930 thrift-client.cc:100] (Attempt 1 of 3)
I0825 11:49:46.726513 43930 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.726790 43930 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.726866 43930 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.726971 43930 thrift-client.cc:100] (Attempt 2 of 3)
I0825 11:49:46.727664 43930 thrift-util.cc:123] TSocket::open() connect() <Host: e4bdhpp018 Port: 22000>Connection refused
I0825 11:49:46.727771 43930 thrift-client.cc:78] Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.727824 43930 thrift-client.cc:94] Unable to connect to e4bdhpp018:22000
I0825 11:49:46.727865 43930 thrift-client.cc:100] (Attempt 3 of 3)
I0825 11:49:46.727905 43930 coordinator-backend-state.cc:373] CancelQueryFInstances query_id= f24d8195a19648d2:a704969300000000 failed to connect to e4bdhpp018:22000 :Couldn't open transport for e4bdhpp018:22000 (connect() failed: Connection refused)
I0825 11:49:46.727954 43930 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=f24d8195a19648d2:a704969300000000 backend=e4bdhpp023:22000
I0825 11:49:46.728592 43930 coordinator-backend-state.cc:352] sending CancelQueryFInstances rpc for query_id=f24d8195a19648d2:a704969300000000 backend=e4bdhpp025:22000
I0825 11:49:46.728709 45240 impala-internal-service.cc:63] CancelQueryFInstances(): query_id=f24d8195a19648d2:a704969300000000
I0825 11:49:46.728778 45240 query-exec-mgr.cc:95] QueryState: query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:46.728837 45240 query-state.cc:416] Cancel: query_id=f24d8195a19648d2:a704969300000000
I0825 11:49:46.728927 45240 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=f24d8195a19648d2:a704969300000002
I0825 11:49:46.728967 45240 krpc-data-stream-mgr.cc:324] cancelling all streams for fragment_instance_id=f24d8195a19648d2:a704969300000000
I0825 11:49:46.729053 45240 krpc-data-stream-recvr.cc:557] cancelled stream: fragment_instance_id=f24d8195a19648d2:a704969300000000 node_id=1
I0825 11:49:46.729122 45240 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=4
I0825 11:49:46.729239 43930 coordinator.cc:639] CancelBackends() query_id=f24d8195a19648d2:a704969300000000, tried to cancel 5 backends
I0825 11:49:46.729295 43930 coordinator.cc:783] Release admission control resources for query_id=f24d8195a19648d2:a704969300000000
I0825 11:49:46.730290 50047 impala-server.cc:1015] UnregisterQuery(): query_id=f24d8195a19648d2:a704969300000000
I0825 11:49:46.730288 50065 krpc-data-stream-mgr.cc:293] DeregisterRecvr(): fragment_instance_id=f24d8195a19648d2:a704969300000000, node=1
I0825 11:49:46.730361 50047 impala-server.cc:1102] Cancel(): query_id=f24d8195a19648d2:a704969300000000
I0825 11:49:46.732578 50065 query-state.cc:403] Instance completed. instance_id=f24d8195a19648d2:a704969300000000 #in-flight=13 status=CANCELLED: Cancelled
I0825 11:49:46.732607 50065 query-state.cc:416] Cancel: query_id=f24d8195a19648d2:a704969300000000
I0825 11:49:46.732623 50065 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=3
I0825 11:49:46.733014 45240 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): f24d8195a19648d2:a704969300000000
I0825 11:49:46.733099 50066 query-state.cc:288] Cancelling fragment instances as directed by the coordinator. Returned status: ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): f24d8195a19648d2:a704969300000000
I0825 11:49:46.733127 50066 query-state.cc:416] Cancel: query_id=f24d8195a19648d2:a704969300000000
I0825 11:49:46.735599 45241 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): f24d8195a19648d2:a704969300000000
I0825 11:49:46.741742 52773 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): f24d8195a19648d2:a704969300000000
I0825 11:49:46.759657 50047 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=2
I0825 11:49:46.770597 50047 impala-hs2-server.cc:683] CloseOperation(): query_id=f24d8195a19648d2:a704969300000000
I0825 11:49:46.781744 50047 impala-hs2-server.cc:366] CloseSession(): request=TCloseSessionReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "k2\xe7\x80\xf6\xafDf\xa6.\xd6/\xf6\r\xa0\x9b",
      02: secret (string) = "\x9b\x14bi;\xdbJI\xbdD\xda\xdc4\x00Pc",
    },
  },
}
I0825 11:49:46.782243 50047 impala-server.cc:1796] Connection from client ::ffff:11.11.237.129:49142 closed, closing 2 associated session(s)
I0825 11:49:46.812778 52924 query-state.cc:403] Instance completed. instance_id=d84822ce8430f20f:5a97b74100000006 #in-flight=12 status=CANCELLED: Cancelled
I0825 11:49:46.812896 52924 query-state.cc:416] Cancel: query_id=d84822ce8430f20f:5a97b74100000000
I0825 11:49:46.812922 52924 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=d84822ce8430f20f:5a97b74100000000 refcnt=1
I0825 11:49:46.843192 50722 query-state.cc:403] Instance completed. instance_id=b741a2d6f09052d9:8993c4e700000002 #in-flight=11 status=CANCELLED: Cancelled
I0825 11:49:46.843267 50722 query-state.cc:416] Cancel: query_id=b741a2d6f09052d9:8993c4e700000000
I0825 11:49:46.843294 50722 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=b741a2d6f09052d9:8993c4e700000000 refcnt=1
I0825 11:49:46.846813 56277 hdfs-scan-node.cc:522] Error preparing scanner for scan range hdfs://cluster1/apps/hive/warehouse/dw04.db/app_gsms_hos_cgdd/000002_0(34902343:102400).
I0825 11:49:46.846818 56278 hdfs-scan-node.cc:522] Error preparing scanner for scan range hdfs://cluster1/apps/hive/warehouse/dw04.db/app_gsms_hos_cgdd/000096_0(34832881:102400).
I0825 11:49:46.868755 51442 query-state.cc:403] Instance completed. instance_id=cd48b8c9bb5c6ee3:fdb9f14d00000002 #in-flight=10 status=CANCELLED: Cancelled
I0825 11:49:46.868867 51442 query-state.cc:416] Cancel: query_id=cd48b8c9bb5c6ee3:fdb9f14d00000000
I0825 11:49:46.868893 51442 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd48b8c9bb5c6ee3:fdb9f14d00000000 refcnt=1
I0825 11:49:46.877118 53029 query-state.cc:403] Instance completed. instance_id=3d41395d29a26d74:9a4d2a3d00000006 #in-flight=9 status=CANCELLED: Cancelled
I0825 11:49:46.877213 53029 query-state.cc:416] Cancel: query_id=3d41395d29a26d74:9a4d2a3d00000000
I0825 11:49:46.877243 53029 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=3d41395d29a26d74:9a4d2a3d00000000 refcnt=1
I0825 11:49:46.887667 55215 query-state.cc:403] Instance completed. instance_id=564078f8b576bb47:c0cdecdc00000007 #in-flight=8 status=CANCELLED: Cancelled
I0825 11:49:46.887717 55215 query-state.cc:416] Cancel: query_id=564078f8b576bb47:c0cdecdc00000000
I0825 11:49:46.887737 55215 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=564078f8b576bb47:c0cdecdc00000000 refcnt=1
I0825 11:49:46.892642 51034 query-state.cc:403] Instance completed. instance_id=204f9bc9a05faaff:3a46cbcf00000002 #in-flight=7 status=CANCELLED: Cancelled
I0825 11:49:46.892681 51034 query-state.cc:416] Cancel: query_id=204f9bc9a05faaff:3a46cbcf00000000
I0825 11:49:46.892709 51034 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=204f9bc9a05faaff:3a46cbcf00000000 refcnt=1
I0825 11:49:46.894194 56274 hdfs-scan-node.cc:522] Error preparing scanner for scan range hdfs://cluster1/apps/hive/warehouse/dw04.db/app_gsms_hos_cgdd/000168_0(34895734:102400).
I0825 11:49:46.908974 50951 query-state.cc:403] Instance completed. instance_id=cd4c8d2a10c6a92f:533303c600000002 #in-flight=6 status=CANCELLED: Cancelled
I0825 11:49:46.909037 50951 query-state.cc:416] Cancel: query_id=cd4c8d2a10c6a92f:533303c600000000
I0825 11:49:46.909061 50951 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=cd4c8d2a10c6a92f:533303c600000000 refcnt=1
I0825 11:49:46.914746 50874 query-state.cc:403] Instance completed. instance_id=9f402daf3559339b:461883ed00000002 #in-flight=5 status=CANCELLED: Cancelled
I0825 11:49:46.914825 50874 query-state.cc:416] Cancel: query_id=9f402daf3559339b:461883ed00000000
I0825 11:49:46.914857 50874 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=9f402daf3559339b:461883ed00000000 refcnt=1
I0825 11:49:46.914865 50853 query-state.cc:403] Instance completed. instance_id=e140be5932aa70b9:74083d7a00000002 #in-flight=4 status=CANCELLED: Cancelled
I0825 11:49:46.914906 50853 query-state.cc:416] Cancel: query_id=e140be5932aa70b9:74083d7a00000000
I0825 11:49:46.914909 50066 query-state.cc:403] Instance completed. instance_id=f24d8195a19648d2:a704969300000002 #in-flight=3 status=CANCELLED: Cancelled
I0825 11:49:46.914944 50853 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=e140be5932aa70b9:74083d7a00000000 refcnt=1
I0825 11:49:46.914958 50066 query-state.cc:416] Cancel: query_id=f24d8195a19648d2:a704969300000000
I0825 11:49:46.914991 50066 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=f24d8195a19648d2:a704969300000000 refcnt=1
I0825 11:49:46.916353 50583 query-state.cc:403] Instance completed. instance_id=5e4ad2c4759ffeb2:96e6fbfa00000002 #in-flight=2 status=CANCELLED: Cancelled
I0825 11:49:46.916389 50583 query-state.cc:416] Cancel: query_id=5e4ad2c4759ffeb2:96e6fbfa00000000
I0825 11:49:46.916422 50583 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=5e4ad2c4759ffeb2:96e6fbfa00000000 refcnt=1
I0825 11:49:46.919098 51310 query-state.cc:403] Instance completed. instance_id=624e79009a7bc60a:a73c218100000002 #in-flight=1 status=CANCELLED: Cancelled
I0825 11:49:46.919147 51310 query-state.cc:416] Cancel: query_id=624e79009a7bc60a:a73c218100000000
I0825 11:49:46.919178 51310 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=624e79009a7bc60a:a73c218100000000 refcnt=1
I0825 11:49:48.600230 44130 authentication.cc:479] Successfully authenticated client user "apprc@PANEL.COM"
I0825 11:49:48.600775 56311 impala-hs2-server.cc:270] OpenSession(): username=
I0825 11:49:48.601397 56311 impala-hs2-server.cc:379] GetInfo(): request=TGetInfoReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x9f\xf6Q\xbe\xc2\x9dH\x7f\x92=\xca\x7f\x96\xb4n\xc1",
      02: secret (string) = "D\xefI@\xfdHD*\xb9\xb2`\x12\x03\x1a\xb3 ",
    },
  },
  02: infoType (i32) = 18,
}
I0825 11:49:48.626705 56311 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x9f\xf6Q\xbe\xc2\x9dH\x7f\x92=\xca\x7f\x96\xb4n\xc1",
      02: secret (string) = "D\xefI@\xfdHD*\xb9\xb2`\x12\x03\x1a\xb3 ",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:49:48.626988 56311 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x9f\xf6Q\xbe\xc2\x9dH\x7f\x92=\xca\x7f\x96\xb4n\xc1",
      02: secret (string) = "D\xefI@\xfdHD*\xb9\xb2`\x12\x03\x1a\xb3 ",
    },
  },
  02: statement (string) = "use `dw04_sjfx`;",
  04: runAsync (bool) = true,
}
I0825 11:49:48.627538 56311 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:48.629796 56311 Frontend.java:935] Analyzing query: use `dw04_sjfx`;
I0825 11:49:48.630039 56311 Frontend.java:947] Analysis finished.
I0825 11:49:48.667834 56311 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "e\x83XR~\xa5Bu\x00\x00\x00\x00 \xaa\x03\xf4",
      02: secret (string) = "e\x83XR~\xa5Bu\x00\x00\x00\x00 \xaa\x03\xf4",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = false,
  },
}
I0825 11:49:48.678740 56311 impala-hs2-server.cc:683] CloseOperation(): query_id=7542a57e52588365:f403aa2000000000
I0825 11:49:48.678814 56311 impala-server.cc:1015] UnregisterQuery(): query_id=7542a57e52588365:f403aa2000000000
I0825 11:49:48.678841 56311 impala-server.cc:1102] Cancel(): query_id=7542a57e52588365:f403aa2000000000
I0825 11:49:48.701264 56311 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x9f\xf6Q\xbe\xc2\x9dH\x7f\x92=\xca\x7f\x96\xb4n\xc1",
      02: secret (string) = "D\xefI@\xfdHD*\xb9\xb2`\x12\x03\x1a\xb3 ",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:49:48.701340 56311 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x9f\xf6Q\xbe\xc2\x9dH\x7f\x92=\xca\x7f\x96\xb4n\xc1",
      02: secret (string) = "D\xefI@\xfdHD*\xb9\xb2`\x12\x03\x1a\xb3 ",
    },
  },
  02: statement (string) = "set REQUEST_POOL = 'agilebi';",
  04: runAsync (bool) = true,
}
I0825 11:49:48.701763 56311 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:48.704020 56311 Frontend.java:935] Analyzing query: set REQUEST_POOL = 'agilebi';
I0825 11:49:48.704221 56311 Frontend.java:947] Analysis finished.
I0825 11:49:48.704581 56311 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "r\xb7\x90@\x8d\fAM\x00\x00\x00\x00\xe5\xed\xcc\xe6",
      02: secret (string) = "r\xb7\x90@\x8d\fAM\x00\x00\x00\x00\xe5\xed\xcc\xe6",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:48.706749 56311 impala-hs2-server.cc:683] CloseOperation(): query_id=4d410c8d4090b772:e6ccede500000000
I0825 11:49:48.706792 56311 impala-server.cc:1015] UnregisterQuery(): query_id=4d410c8d4090b772:e6ccede500000000
I0825 11:49:48.706816 56311 impala-server.cc:1102] Cancel(): query_id=4d410c8d4090b772:e6ccede500000000
I0825 11:49:48.721803 56311 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x9f\xf6Q\xbe\xc2\x9dH\x7f\x92=\xca\x7f\x96\xb4n\xc1",
      02: secret (string) = "D\xefI@\xfdHD*\xb9\xb2`\x12\x03\x1a\xb3 ",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:49:48.721909 56311 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x9f\xf6Q\xbe\xc2\x9dH\x7f\x92=\xca\x7f\x96\xb4n\xc1",
      02: secret (string) = "D\xefI@\xfdHD*\xb9\xb2`\x12\x03\x1a\xb3 ",
    },
  },
  02: statement (string) = "set MEM_LIMIT = 1024000000;",
  04: runAsync (bool) = true,
}
I0825 11:49:48.722121 56311 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 2147483648,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:48.724320 56311 Frontend.java:935] Analyzing query: set MEM_LIMIT = 1024000000;
I0825 11:49:48.724463 56311 Frontend.java:947] Analysis finished.
I0825 11:49:48.724772 56311 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "Y\x1c\x91\xa7'\xaaK\xb0\x00\x00\x00\x00X\xcb\xcef",
      02: secret (string) = "Y\x1c\x91\xa7'\xaaK\xb0\x00\x00\x00\x00X\xcb\xcef",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:48.790673 56311 impala-hs2-server.cc:683] CloseOperation(): query_id=b04baa27a7911c59:66cecb5800000000
I0825 11:49:48.790926 56311 impala-server.cc:1015] UnregisterQuery(): query_id=b04baa27a7911c59:66cecb5800000000
I0825 11:49:48.790948 56311 impala-server.cc:1102] Cancel(): query_id=b04baa27a7911c59:66cecb5800000000
I0825 11:49:48.795367 56311 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x9f\xf6Q\xbe\xc2\x9dH\x7f\x92=\xca\x7f\x96\xb4n\xc1",
      02: secret (string) = "D\xefI@\xfdHD*\xb9\xb2`\x12\x03\x1a\xb3 ",
    },
  },
  02: statement (string) = "DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_PPL`",
  04: runAsync (bool) = true,
}
I0825 11:49:48.795511 56311 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x9f\xf6Q\xbe\xc2\x9dH\x7f\x92=\xca\x7f\x96\xb4n\xc1",
      02: secret (string) = "D\xefI@\xfdHD*\xb9\xb2`\x12\x03\x1a\xb3 ",
    },
  },
  02: statement (string) = "DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_PPL`",
  04: runAsync (bool) = true,
}
I0825 11:49:48.795894 56311 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:48.798270 56311 Frontend.java:935] Analyzing query: DESCRIBE `DW04_SJFX`.`APP_AUAP_YK_PPL`
I0825 11:49:48.798660 56311 Frontend.java:947] Analysis finished.
I0825 11:49:48.835176 56311 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "j\x04@\xc0\x03\xa6M!\x00\x00\x00\x00'\xbbr ",
      02: secret (string) = "j\x04@\xc0\x03\xa6M!\x00\x00\x00\x00'\xbbr ",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:48.837550 56311 impala-hs2-server.cc:683] CloseOperation(): query_id=214da603c040046a:2072bb2700000000
I0825 11:49:48.837641 56311 impala-server.cc:1015] UnregisterQuery(): query_id=214da603c040046a:2072bb2700000000
I0825 11:49:48.837704 56311 impala-server.cc:1102] Cancel(): query_id=214da603c040046a:2072bb2700000000
I0825 11:49:48.915060 44439 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=bf45854cdaf2f77d:39d9b0100000000
I0825 11:49:48.915271 44439 query-exec-mgr.cc:46] StartQueryFInstances() query_id=bf45854cdaf2f77d:39d9b0100000000 coord=e4bdhpp023:22000
I0825 11:49:48.915351 44439 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:49:48.915380 44439 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:49:48.915412 44439 query-state.cc:178] Buffer pool limit for bf45854cdaf2f77d:39d9b0100000000: 819200000
I0825 11:49:48.915486 44439 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query bf45854cdaf2f77d:39d9b0100000000
I0825 11:49:48.915757 56319 query-state.cc:300] StartFInstances(): query_id=bf45854cdaf2f77d:39d9b0100000000 #instances=1
I0825 11:49:48.916069 56319 query-state.cc:313] descriptor table for query=bf45854cdaf2f77d:39d9b0100000000
tuples:
Tuple(id=0 size=583 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=576 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=576 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=STRING col_path=[10] offset=32 null=(offset=576 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[48] offset=48 null=(offset=576 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=STRING col_path=[39] offset=64 null=(offset=576 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=BIGINT col_path=[29] offset=352 null=(offset=578 mask=40) slot_idx=22 field_idx=-1), Slot(id=6 type=STRING col_path=[11] offset=80 null=(offset=576 mask=20) slot_idx=5 field_idx=-1), Slot(id=7 type=STRING col_path=[12] offset=96 null=(offset=576 mask=40) slot_idx=6 field_idx=-1), Slot(id=8 type=STRING col_path=[13] offset=112 null=(offset=576 mask=80) slot_idx=7 field_idx=-1), Slot(id=9 type=STRING col_path=[38] offset=128 null=(offset=577 mask=1) slot_idx=8 field_idx=-1), Slot(id=10 type=STRING col_path=[43] offset=144 null=(offset=577 mask=2) slot_idx=9 field_idx=-1), Slot(id=11 type=TIMESTAMP col_path=[15] offset=160 null=(offset=577 mask=4) slot_idx=10 field_idx=-1), Slot(id=12 type=TIMESTAMP col_path=[16] offset=176 null=(offset=577 mask=8) slot_idx=11 field_idx=-1), Slot(id=13 type=DECIMAL(16,2) col_path=[2] offset=360 null=(offset=578 mask=80) slot_idx=23 field_idx=-1), Slot(id=14 type=DECIMAL(17,2) col_path=[3] offset=368 null=(offset=579 mask=1) slot_idx=24 field_idx=-1), Slot(id=15 type=DECIMAL(17,2) col_path=[4] offset=376 null=(offset=579 mask=2) slot_idx=25 field_idx=-1), Slot(id=16 type=DECIMAL(17,2) col_path=[5] offset=384 null=(offset=579 mask=4) slot_idx=26 field_idx=-1), Slot(id=17 type=DOUBLE col_path=[6] offset=392 null=(offset=579 mask=8) slot_idx=27 field_idx=-1), Slot(id=18 type=DECIMAL(27,2) col_path=[7] offset=192 null=(offset=577 mask=10) slot_idx=12 field_idx=-1), Slot(id=19 type=BIGINT col_path=[25] offset=400 null=(offset=579 mask=10) slot_idx=28 field_idx=-1), Slot(id=20 type=BIGINT col_path=[27] offset=408 null=(offset=579 mask=20) slot_idx=29 field_idx=-1), Slot(id=21 type=DECIMAL(26,2) col_path=[28] offset=208 null=(offset=577 mask=20) slot_idx=13 field_idx=-1), Slot(id=22 type=DOUBLE col_path=[8] offset=416 null=(offset=579 mask=40) slot_idx=30 field_idx=-1), Slot(id=23 type=DECIMAL(27,2) col_path=[9] offset=224 null=(offset=577 mask=40) slot_idx=14 field_idx=-1), Slot(id=24 type=BIGINT col_path=[26] offset=424 null=(offset=579 mask=80) slot_idx=31 field_idx=-1), Slot(id=25 type=BIGINT col_path=[17] offset=432 null=(offset=580 mask=1) slot_idx=32 field_idx=-1), Slot(id=26 type=INT col_path=[18] offset=568 null=(offset=582 mask=2) slot_idx=49 field_idx=-1), Slot(id=27 type=DECIMAL(26,2) col_path=[41] offset=240 null=(offset=577 mask=80) slot_idx=15 field_idx=-1), Slot(id=28 type=DOUBLE col_path=[49] offset=440 null=(offset=580 mask=2) slot_idx=33 field_idx=-1), Slot(id=29 type=BIGINT col_path=[42] offset=448 null=(offset=580 mask=4) slot_idx=34 field_idx=-1), Slot(id=30 type=BIGINT col_path=[44] offset=456 null=(offset=580 mask=8) slot_idx=35 field_idx=-1), Slot(id=31 type=BIGINT col_path=[21] offset=464 null=(offset=580 mask=10) slot_idx=36 field_idx=-1), Slot(id=32 type=BIGINT col_path=[22] offset=472 null=(offset=580 mask=20) slot_idx=37 field_idx=-1), Slot(id=33 type=DOUBLE col_path=[45] offset=480 null=(offset=580 mask=40) slot_idx=38 field_idx=-1), Slot(id=34 type=BIGINT col_path=[20] offset=488 null=(offset=580 mask=80) slot_idx=39 field_idx=-1), Slot(id=35 type=DOUBLE col_path=[46] offset=496 null=(offset=581 mask=1) slot_idx=40 field_idx=-1), Slot(id=36 type=DOUBLE col_path=[47] offset=504 null=(offset=581 mask=2) slot_idx=41 field_idx=-1), Slot(id=37 type=BIGINT col_path=[19] offset=512 null=(offset=581 mask=4) slot_idx=42 field_idx=-1), Slot(id=38 type=DECIMAL(26,2) col_path=[30] offset=256 null=(offset=578 mask=1) slot_idx=16 field_idx=-1), Slot(id=39 type=DECIMAL(31,4) col_path=[31] offset=272 null=(offset=578 mask=2) slot_idx=17 field_idx=-1), Slot(id=40 type=DECIMAL(26,2) col_path=[23] offset=288 null=(offset=578 mask=4) slot_idx=18 field_idx=-1), Slot(id=41 type=BIGINT col_path=[24] offset=520 null=(offset=581 mask=8) slot_idx=43 field_idx=-1), Slot(id=42 type=BIGINT col_path=[32] offset=528 null=(offset=581 mask=10) slot_idx=44 field_idx=-1), Slot(id=43 type=BIGINT col_path=[33] offset=536 null=(offset=581 mask=20) slot_idx=45 field_idx=-1), Slot(id=44 type=BIGINT col_path=[40] offset=544 null=(offset=581 mask=40) slot_idx=46 field_idx=-1), Slot(id=45 type=BIGINT col_path=[34] offset=552 null=(offset=581 mask=80) slot_idx=47 field_idx=-1), Slot(id=46 type=BIGINT col_path=[35] offset=560 null=(offset=582 mask=1) slot_idx=48 field_idx=-1), Slot(id=47 type=INT col_path=[36] offset=572 null=(offset=582 mask=4) slot_idx=50 field_idx=-1), Slot(id=48 type=STRING col_path=[50] offset=304 null=(offset=578 mask=8) slot_idx=19 field_idx=-1), Slot(id=49 type=STRING col_path=[14] offset=320 null=(offset=578 mask=10) slot_idx=20 field_idx=-1), Slot(id=50 type=STRING col_path=[37] offset=336 null=(offset=578 mask=20) slot_idx=21 field_idx=-1)] tuple_path=[])
I0825 11:49:48.916249 56320 query-state.cc:395] Executing instance. instance_id=bf45854cdaf2f77d:39d9b0100000006 fragment_idx=1 per_fragment_instance_idx=5 coord_state_idx=5 #in-flight=2
I0825 11:49:48.916378 56320 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance 'bf45854cdaf2f77d:39d9b0100000006': 190
I0825 11:49:48.916954 56319 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=bf45854cdaf2f77d:39d9b0100000000 refcnt=2
W0825 11:49:48.943604 43831 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:49:48.943840 43831 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297896886_BP-1820042964-11.11.206.232-1548063025113
I0825 11:49:48.980690 56311 impala-hs2-server.cc:407] ExecuteStatement(): request=TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x9f\xf6Q\xbe\xc2\x9dH\x7f\x92=\xca\x7f\x96\xb4n\xc1",
      02: secret (string) = "D\xefI@\xfdHD*\xb9\xb2`\x12\x03\x1a\xb3 ",
    },
  },
  02: statement (string) = "select   `bi_177[...](15324)",
  04: runAsync (bool) = true,
}
I0825 11:49:48.980791 56311 impala-hs2-server.cc:223] TExecuteStatementReq: TExecuteStatementReq {
  01: sessionHandle (struct) = TSessionHandle {
    01: sessionId (struct) = THandleIdentifier {
      01: guid (string) = "\x9f\xf6Q\xbe\xc2\x9dH\x7f\x92=\xca\x7f\x96\xb4n\xc1",
      02: secret (string) = "D\xefI@\xfdHD*\xb9\xb2`\x12\x03\x1a\xb3 ",
    },
  },
  02: statement (string) = "select   `bi_177[...](15324)",
  04: runAsync (bool) = true,
}
I0825 11:49:48.981139 56311 impala-hs2-server.cc:260] TClientRequest.queryOptions: TQueryOptions {
  01: abort_on_error (bool) = false,
  02: max_errors (i32) = 100,
  03: disable_codegen (bool) = false,
  04: batch_size (i32) = 0,
  05: num_nodes (i32) = 0,
  06: max_scan_range_length (i64) = 0,
  07: num_scanner_threads (i32) = 0,
  08: max_io_buffers (i32) = 0,
  09: allow_unsupported_formats (bool) = false,
  10: default_order_by_limit (i64) = -1,
  11: debug_action (string) = "",
  12: mem_limit (i64) = 1024000000,
  13: abort_on_default_limit_exceeded (bool) = false,
  15: hbase_caching (i32) = 0,
  16: hbase_cache_blocks (bool) = false,
  17: parquet_file_size (i64) = 0,
  18: explain_level (i32) = 1,
  19: sync_ddl (bool) = false,
  20: request_pool (string) = "agilebi",
  23: disable_cached_reads (bool) = false,
  24: disable_outermost_topn (bool) = false,
  25: rm_initial_mem (i64) = 0,
  26: query_timeout_s (i32) = 0,
  28: appx_count_distinct (bool) = false,
  29: disable_unsafe_spills (bool) = false,
  31: exec_single_node_rows_threshold (i32) = 100,
  32: optimize_partition_key_scans (bool) = false,
  33: replica_preference (i32) = 0,
  34: schedule_random_replica (bool) = false,
  35: scan_node_codegen_threshold (i64) = 1800000,
  36: disable_streaming_preaggregations (bool) = false,
  37: runtime_filter_mode (i32) = 2,
  38: runtime_bloom_filter_size (i32) = 1048576,
  39: runtime_filter_wait_time_ms (i32) = 0,
  40: disable_row_runtime_filtering (bool) = false,
  41: max_num_runtime_filters (i32) = 10,
  42: parquet_annotate_strings_utf8 (bool) = false,
  43: parquet_fallback_schema_resolution (i32) = 0,
  45: s3_skip_insert_staging (bool) = true,
  46: runtime_filter_min_size (i32) = 1048576,
  47: runtime_filter_max_size (i32) = 16777216,
  48: prefetch_mode (i32) = 1,
  49: strict_mode (bool) = false,
  50: scratch_limit (i64) = -1,
  51: enable_expr_rewrites (bool) = true,
  52: decimal_v2 (bool) = false,
  53: parquet_dictionary_filtering (bool) = true,
  54: parquet_array_resolution (i32) = 2,
  55: parquet_read_statistics (bool) = true,
  56: default_join_distribution_mode (i32) = 0,
  57: disable_codegen_rows_threshold (i32) = 50000,
  58: default_spillable_buffer_size (i64) = 2097152,
  59: min_spillable_buffer_size (i64) = 65536,
  60: max_row_size (i64) = 524288,
  61: idle_session_timeout (i32) = 0,
  62: compute_stats_min_sample_size (i64) = 1073741824,
  63: exec_time_limit_s (i32) = 0,
  64: shuffle_distinct_exprs (bool) = true,
}
I0825 11:49:48.983798 56311 Frontend.java:935] Analyzing query: select   `bi_1777753835894362515`.`帐号` as `bi_4405066279117047118` , `bi_1777753835894362515`.`卡号` as `bi_10248578450533883095` , `bi_1777753835894362515`.`卡类型描述` as `bi_6246159538240244065` , `bi_1777753835894362515`.`是否为副卡` as `bi_13540389403478941567` , `bi_1777753835894362515`.`交易主要站点` as `bi_2740263195203761510` , `bi_1777753835894362515`.`个人卡消费过加油站站点数量` as `bi_3616459640308034135` , `bi_1777753835894362515`.`交易类型描述` as `bi_10331142289063080322` , `bi_1777753835894362515`.`商品类型` as `bi_8759647043076232228` , `bi_1777753835894362515`.`商品类型描述` as `bi_14353747127936749017` , `bi_1777753835894362515`.`发卡单位` as `bi_10646976700040736340` , `bi_1777753835894362515`.`发卡单位与销售单位是否一致` as `bi_3120723227421642544` , `bi_1777753835894362515`.`首次交易日期` as `bi_14455382331679438995` , `bi_1777753835894362515`.`最近交易日期` as `bi_5478771142720032093` , `bi_1777753835894362515`.`平均油量升数` as `bi_617034579827635996` , `bi_1777753835894362515`.`平均消费金额` as `bi_15112077538935800504` , `bi_1777753835894362515`.`平均折扣金额` as `bi_3277906557631314998` , `bi_1777753835894362515`.`平均余额` as `bi_15647197458875151506` , `bi_1777753835894362515`.`日均消费笔数` as `bi_7064249764713199839` , `bi_1777753835894362515`.`日均消费金额` as `bi_10854565843347455823` , `bi_1777753835894362515`.`单日消费次数过多次数` as `bi_2261074975467520775` , `bi_1777753835894362515`.`个人卡夜间消费总次数` as `bi_11404968094779050130` , `bi_1777753835894362515`.`个人卡夜间消费总金额` as `bi_15065943078847283073` , `bi_1777753835894362515`.`日均夜间消费笔数` as `bi_15868460132744503901` , `bi_1777753835894362515`.`日均夜间消费金额` as `bi_15516783331422952374` , `bi_1777753835894362515`.`单日夜间消费次数过多次数` as `bi_16171388146955820514` , `bi_1777753835894362515`.`睡眠次数` as `bi_17048143494310675370` , `bi_1777753835894362515`.`是否仍在睡眠` as `bi_15197978810704604447` , `bi_1777753835894362515`.`个人卡累计消费金额` as `bi_7591110132802393138` , `bi_1777753835894362515`.`个人卡消费金额方差` as `bi_160391765441068244` , `bi_1777753835894362515`.`个人卡累计消费次数` as `bi_4156841468949947680` , `bi_1777753835894362515`.`个人卡消费金额为小数次数` as `bi_9794343777229462837` , `bi_1777753835894362515`.`个人卡消费过油品类型数量` as `bi_10293590438327478000` , `bi_1777753835894362515`.`个人卡消费过汽油品类型数量` as `bi_1177732512630799779` , `bi_1777753835894362515`.`个人卡汽油消费次数占比` as `bi_11456242312036654846` , `bi_1777753835894362515`.`个人卡汽油单笔高额消费次数` as `bi_9834182397780633995` , `bi_1777753835894362515`.`个人卡柴油消费次数占比` as `bi_6459884238352011348` , `bi_1777753835894362515`.`个人卡天然气消费次数占比` as `bi_16651092651258988174` , `bi_1777753835894362515`.`ic卡大额非油消费次数` as `bi_7054304210906615051` , `bi_1777753835894362515`.`非油累计消费金额` as `bi_16397999138841287705` , `bi_1777753835894362515`.`非油与成品油消费金额比例` as `bi_4542996461810298499` , `bi_1777753835894362515`.`个人卡累计充值金额` as `bi_4841881326785682188` , `bi_1777753835894362515`.`单日充值次数过多次数` as `bi_9422150591649301309` , `bi_1777753835894362515`.`即消费且余额低的次数831743621` as `bi_16833265966592949464` , `bi_1777753835894362515`.`同一班次消费的次数` as `bi_11088153473180053847` , `bi_1777753835894362515`.`密码重置次数` as `bi_3598974696379994152` , `bi_1777753835894362515`.`笔折扣额的消费的次数_2085032453` as `bi_5097711375700122218` , `bi_1777753835894362515`.`个人卡余额充足时充钱的次数` as `bi_8205063281634656287` , `bi_1777753835894362515`.`是否曾频繁转账` as `bi_14482952946536492029` , `bi_1777753835894362515`.`是否异常加油卡` as `bi_8782608630523284142` , `bi_1777753835894362515`.`单位名称` as `bi_14261383855208495737` , `bi_1777753835894362515`.`所属` as `bi_7873307995921860050` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_1777753835894362515`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_8081399462078118933` , TRIM(`bi_1777753835894362515`.`交易主要站点`) as `bi_616911404683852598`   from (select   `bi_152610414374251569`.`帐号` as `帐号` , `bi_152610414374251569`.`卡号` as `卡号` , `bi_152610414374251569`.`卡类型描述` as `卡类型描述` , `bi_152610414374251569`.`是否为副卡` as `是否为副卡` , `bi_152610414374251569`.`交易主要站点` as `交易主要站点` , `bi_152610414374251569`.`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量` , `bi_152610414374251569`.`交易类型描述` as `交易类型描述` , `bi_152610414374251569`.`商品类型` as `商品类型` , `bi_152610414374251569`.`商品类型描述` as `商品类型描述` , `bi_152610414374251569`.`发卡单位` as `发卡单位` , `bi_152610414374251569`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `bi_152610414374251569`.`首次交易日期` as `首次交易日期` , `bi_152610414374251569`.`最近交易日期` as `最近交易日期` , `bi_152610414374251569`.`平均油量升数` as `平均油量升数` , `bi_152610414374251569`.`平均消费金额` as `平均消费金额` , `bi_152610414374251569`.`平均折扣金额` as `平均折扣金额` , `bi_152610414374251569`.`平均余额` as `平均余额` , `bi_152610414374251569`.`日均消费笔数` as `日均消费笔数` , `bi_152610414374251569`.`日均消费金额` as `日均消费金额` , `bi_152610414374251569`.`单日消费次数过多次数` as `单日消费次数过多次数` , `bi_152610414374251569`.`个人卡夜间消费总次数` as `个人卡夜间消费总次数` , `bi_152610414374251569`.`个人卡夜间消费总金额` as `个人卡夜间消费总金额` , `bi_152610414374251569`.`日均夜间消费笔数` as `日均夜间消费笔数` , `bi_152610414374251569`.`日均夜间消费金额` as `日均夜间消费金额` , `bi_152610414374251569`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `bi_152610414374251569`.`睡眠次数` as `睡眠次数` , `bi_152610414374251569`.`是否仍在睡眠` as `是否仍在睡眠` , `bi_152610414374251569`.`个人卡累计消费金额` as `个人卡累计消费金额` , `bi_152610414374251569`.`个人卡消费金额方差` as `个人卡消费金额方差` , `bi_152610414374251569`.`个人卡累计消费次数` as `个人卡累计消费次数` , `bi_152610414374251569`.`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数` , `bi_152610414374251569`.`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量` , `bi_152610414374251569`.`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量` , `bi_152610414374251569`.`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比` , `bi_152610414374251569`.`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数` , `bi_152610414374251569`.`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比` , `bi_152610414374251569`.`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比` , `bi_152610414374251569`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `bi_152610414374251569`.`非油累计消费金额` as `非油累计消费金额` , `bi_152610414374251569`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `bi_152610414374251569`.`个人卡累计充值金额` as `个人卡累计充值金额` , `bi_152610414374251569`.`单日充值次数过多次数` as `单日充值次数过多次数` , `bi_152610414374251569`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `bi_152610414374251569`.`同一班次消费的次数` as `同一班次消费的次数` , `bi_152610414374251569`.`密码重置次数` as `密码重置次数` , `bi_152610414374251569`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `bi_152610414374251569`.`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数` , `bi_152610414374251569`.`是否曾频繁转账` as `是否曾频繁转账` , `bi_152610414374251569`.`是否异常加油卡` as `是否异常加油卡` , `bi_152610414374251569`.`单位名称` as `单位名称` , `bi_152610414374251569`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`个人卡夜间消费总次数` as `个人卡夜间消费总次数`,`个人卡夜间消费总金额` as `个人卡夜间消费总金额`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`个人卡累计消费金额` as `个人卡累计消费金额`,`个人卡消费金额方差` as `个人卡消费金额方差`,`个人卡累计消费次数` as `个人卡累计消费次数`,`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数`,`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比`,`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`个人卡累计充值金额` as `个人卡累计充值金额`,`单日充值次数过多次数` as `单日充值次数过多次数`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`个人卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`个人卡夜间消费总次数`,`个人卡夜间消费总金额`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`个人卡累计消费金额`,`个人卡消费金额方差`,`个人卡累计消费次数`,`个人卡消费金额为小数次数`,`个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比`,`个人卡天然气消费次数占比`,`ic卡大额非油消费次数`,`非油累计消费金额`,`非油与成品油消费金额比例`,`个人卡累计充值金额`,`单日充值次数过多次数`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,     
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `个人卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`, 
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`, 
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`,
       `单日消费次数过多次数`, 
       `个人卡夜间消费总次数`,
       `个人卡夜间消费总金额`,
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`, 
       `睡眠次数`,
       `是否仍在睡眠`,
       `个人卡累计消费金额`,
       `加油卡消费金额方差` `个人卡消费金额方差`,
       `个人卡累计消费次数`,
       `加油卡消费金额为小数次数` `个人卡消费金额为小数次数`,
       `个人卡消费过油品类型数量`,
       `个人卡消费过汽油品类型数量`,
       `个人卡汽油消费次数占比`,
       `个人卡汽油单笔高额消费次数`,
       `个人卡柴油消费次数占比`,
       `个人卡天然气消费次数占比`,
       `IC卡大额非油消费次数`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `个人卡累计充值金额`,
       `单日充值次数过多次数`, 
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `个人卡余额充足时充钱的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM DW04_SJFX.APP_AUAP_YK_PPL) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `bi_152610414374251569`  
     ) `bi_1777753835894362515`
      limit 1200001 
I0825 11:49:49.008476 56311 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:49:49.008574 56311 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:49:49.038913 56311 Frontend.java:947] Analysis finished.
I0825 11:49:49.040616 56311 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:49:49.040664 56311 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:49:49.044829 56311 admission-controller.cc:508] Schedule for id=1740a34154333dc7:9669bbc900000000 in pool_name=root.agilebi cluster_mem_needed=5.72 GB PoolConfig: max_requests=500 max_queued=200 max_mem=800.00 GB
I0825 11:49:49.044915 56311 admission-controller.cc:513] Stats: agg_num_running=1, agg_num_queued=0, agg_mem_reserved=7.63 GB,  local_host(local_mem_admitted=0, num_admitted_running=0, num_queued=0, backend_mem_reserved=1.91 GB)
I0825 11:49:49.044950 56311 admission-controller.cc:529] Admitted query id=1740a34154333dc7:9669bbc900000000
I0825 11:49:49.044981 56311 coordinator.cc:93] Exec() query_id=1740a34154333dc7:9669bbc900000000 stmt=select   `bi_1777753835894362515`.`帐号` as `bi_4405066279117047118` , `bi_1777753835894362515`.`卡号` as `bi_10248578450533883095` , `bi_1777753835894362515`.`卡类型描述` as `bi_6246159538240244065` , `bi_1777753835894362515`.`是否为副卡` as `bi_13540389403478941567` , `bi_1777753835894362515`.`交易主要站点` as `bi_2740263195203761510` , `bi_1777753835894362515`.`个人卡消费过加油站站点数量` as `bi_3616459640308034135` , `bi_1777753835894362515`.`交易类型描述` as `bi_10331142289063080322` , `bi_1777753835894362515`.`商品类型` as `bi_8759647043076232228` , `bi_1777753835894362515`.`商品类型描述` as `bi_14353747127936749017` , `bi_1777753835894362515`.`发卡单位` as `bi_10646976700040736340` , `bi_1777753835894362515`.`发卡单位与销售单位是否一致` as `bi_3120723227421642544` , `bi_1777753835894362515`.`首次交易日期` as `bi_14455382331679438995` , `bi_1777753835894362515`.`最近交易日期` as `bi_5478771142720032093` , `bi_1777753835894362515`.`平均油量升数` as `bi_617034579827635996` , `bi_1777753835894362515`.`平均消费金额` as `bi_15112077538935800504` , `bi_1777753835894362515`.`平均折扣金额` as `bi_3277906557631314998` , `bi_1777753835894362515`.`平均余额` as `bi_15647197458875151506` , `bi_1777753835894362515`.`日均消费笔数` as `bi_7064249764713199839` , `bi_1777753835894362515`.`日均消费金额` as `bi_10854565843347455823` , `bi_1777753835894362515`.`单日消费次数过多次数` as `bi_2261074975467520775` , `bi_1777753835894362515`.`个人卡夜间消费总次数` as `bi_11404968094779050130` , `bi_1777753835894362515`.`个人卡夜间消费总金额` as `bi_15065943078847283073` , `bi_1777753835894362515`.`日均夜间消费笔数` as `bi_15868460132744503901` , `bi_1777753835894362515`.`日均夜间消费金额` as `bi_15516783331422952374` , `bi_1777753835894362515`.`单日夜间消费次数过多次数` as `bi_16171388146955820514` , `bi_1777753835894362515`.`睡眠次数` as `bi_17048143494310675370` , `bi_1777753835894362515`.`是否仍在睡眠` as `bi_15197978810704604447` , `bi_1777753835894362515`.`个人卡累计消费金额` as `bi_7591110132802393138` , `bi_1777753835894362515`.`个人卡消费金额方差` as `bi_160391765441068244` , `bi_1777753835894362515`.`个人卡累计消费次数` as `bi_4156841468949947680` , `bi_1777753835894362515`.`个人卡消费金额为小数次数` as `bi_9794343777229462837` , `bi_1777753835894362515`.`个人卡消费过油品类型数量` as `bi_10293590438327478000` , `bi_1777753835894362515`.`个人卡消费过汽油品类型数量` as `bi_1177732512630799779` , `bi_1777753835894362515`.`个人卡汽油消费次数占比` as `bi_11456242312036654846` , `bi_1777753835894362515`.`个人卡汽油单笔高额消费次数` as `bi_9834182397780633995` , `bi_1777753835894362515`.`个人卡柴油消费次数占比` as `bi_6459884238352011348` , `bi_1777753835894362515`.`个人卡天然气消费次数占比` as `bi_16651092651258988174` , `bi_1777753835894362515`.`ic卡大额非油消费次数` as `bi_7054304210906615051` , `bi_1777753835894362515`.`非油累计消费金额` as `bi_16397999138841287705` , `bi_1777753835894362515`.`非油与成品油消费金额比例` as `bi_4542996461810298499` , `bi_1777753835894362515`.`个人卡累计充值金额` as `bi_4841881326785682188` , `bi_1777753835894362515`.`单日充值次数过多次数` as `bi_9422150591649301309` , `bi_1777753835894362515`.`即消费且余额低的次数831743621` as `bi_16833265966592949464` , `bi_1777753835894362515`.`同一班次消费的次数` as `bi_11088153473180053847` , `bi_1777753835894362515`.`密码重置次数` as `bi_3598974696379994152` , `bi_1777753835894362515`.`笔折扣额的消费的次数_2085032453` as `bi_5097711375700122218` , `bi_1777753835894362515`.`个人卡余额充足时充钱的次数` as `bi_8205063281634656287` , `bi_1777753835894362515`.`是否曾频繁转账` as `bi_14482952946536492029` , `bi_1777753835894362515`.`是否异常加油卡` as `bi_8782608630523284142` , `bi_1777753835894362515`.`单位名称` as `bi_14261383855208495737` , `bi_1777753835894362515`.`所属` as `bi_7873307995921860050` , CAST(REGEXP_EXTRACT(REGEXP_EXTRACT(`bi_1777753835894362515`.`发卡单位`,'^[\\\s\\\S]{0,6}',0),'[\\\s\\\S]{0,2}$',0) AS string) as `bi_8081399462078118933` , TRIM(`bi_1777753835894362515`.`交易主要站点`) as `bi_616911404683852598`   from (select   `bi_152610414374251569`.`帐号` as `帐号` , `bi_152610414374251569`.`卡号` as `卡号` , `bi_152610414374251569`.`卡类型描述` as `卡类型描述` , `bi_152610414374251569`.`是否为副卡` as `是否为副卡` , `bi_152610414374251569`.`交易主要站点` as `交易主要站点` , `bi_152610414374251569`.`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量` , `bi_152610414374251569`.`交易类型描述` as `交易类型描述` , `bi_152610414374251569`.`商品类型` as `商品类型` , `bi_152610414374251569`.`商品类型描述` as `商品类型描述` , `bi_152610414374251569`.`发卡单位` as `发卡单位` , `bi_152610414374251569`.`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致` , `bi_152610414374251569`.`首次交易日期` as `首次交易日期` , `bi_152610414374251569`.`最近交易日期` as `最近交易日期` , `bi_152610414374251569`.`平均油量升数` as `平均油量升数` , `bi_152610414374251569`.`平均消费金额` as `平均消费金额` , `bi_152610414374251569`.`平均折扣金额` as `平均折扣金额` , `bi_152610414374251569`.`平均余额` as `平均余额` , `bi_152610414374251569`.`日均消费笔数` as `日均消费笔数` , `bi_152610414374251569`.`日均消费金额` as `日均消费金额` , `bi_152610414374251569`.`单日消费次数过多次数` as `单日消费次数过多次数` , `bi_152610414374251569`.`个人卡夜间消费总次数` as `个人卡夜间消费总次数` , `bi_152610414374251569`.`个人卡夜间消费总金额` as `个人卡夜间消费总金额` , `bi_152610414374251569`.`日均夜间消费笔数` as `日均夜间消费笔数` , `bi_152610414374251569`.`日均夜间消费金额` as `日均夜间消费金额` , `bi_152610414374251569`.`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数` , `bi_152610414374251569`.`睡眠次数` as `睡眠次数` , `bi_152610414374251569`.`是否仍在睡眠` as `是否仍在睡眠` , `bi_152610414374251569`.`个人卡累计消费金额` as `个人卡累计消费金额` , `bi_152610414374251569`.`个人卡消费金额方差` as `个人卡消费金额方差` , `bi_152610414374251569`.`个人卡累计消费次数` as `个人卡累计消费次数` , `bi_152610414374251569`.`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数` , `bi_152610414374251569`.`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量` , `bi_152610414374251569`.`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量` , `bi_152610414374251569`.`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比` , `bi_152610414374251569`.`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数` , `bi_152610414374251569`.`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比` , `bi_152610414374251569`.`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比` , `bi_152610414374251569`.`ic卡大额非油消费次数` as `ic卡大额非油消费次数` , `bi_152610414374251569`.`非油累计消费金额` as `非油累计消费金额` , `bi_152610414374251569`.`非油与成品油消费金额比例` as `非油与成品油消费金额比例` , `bi_152610414374251569`.`个人卡累计充值金额` as `个人卡累计充值金额` , `bi_152610414374251569`.`单日充值次数过多次数` as `单日充值次数过多次数` , `bi_152610414374251569`.`充值后立即消费且余额低的次数` as `即消费且余额低的次数831743621` , `bi_152610414374251569`.`同一班次消费的次数` as `同一班次消费的次数` , `bi_152610414374251569`.`密码重置次数` as `密码重置次数` , `bi_152610414374251569`.`紧跟一笔近似于上笔折扣额的消费的次数` as `笔折扣额的消费的次数_2085032453` , `bi_152610414374251569`.`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数` , `bi_152610414374251569`.`是否曾频繁转账` as `是否曾频繁转账` , `bi_152610414374251569`.`是否异常加油卡` as `是否异常加油卡` , `bi_152610414374251569`.`单位名称` as `单位名称` , `bi_152610414374251569`.`所属` as `所属`   from (select `帐号` as `帐号`,`卡号` as `卡号`,`卡类型描述` as `卡类型描述`,`是否为副卡` as `是否为副卡`,`交易主要站点` as `交易主要站点`,`个人卡消费过加油站站点数量` as `个人卡消费过加油站站点数量`,`交易类型描述` as `交易类型描述`,`商品类型` as `商品类型`,`商品类型描述` as `商品类型描述`,`发卡单位` as `发卡单位`,`发卡单位与销售单位是否一致` as `发卡单位与销售单位是否一致`,`首次交易日期` as `首次交易日期`,`最近交易日期` as `最近交易日期`,`平均油量升数` as `平均油量升数`,`平均消费金额` as `平均消费金额`,`平均折扣金额` as `平均折扣金额`,`平均余额` as `平均余额`,`日均消费笔数` as `日均消费笔数`,`日均消费金额` as `日均消费金额`,`单日消费次数过多次数` as `单日消费次数过多次数`,`个人卡夜间消费总次数` as `个人卡夜间消费总次数`,`个人卡夜间消费总金额` as `个人卡夜间消费总金额`,`日均夜间消费笔数` as `日均夜间消费笔数`,`日均夜间消费金额` as `日均夜间消费金额`,`单日夜间消费次数过多次数` as `单日夜间消费次数过多次数`,`睡眠次数` as `睡眠次数`,`是否仍在睡眠` as `是否仍在睡眠`,`个人卡累计消费金额` as `个人卡累计消费金额`,`个人卡消费金额方差` as `个人卡消费金额方差`,`个人卡累计消费次数` as `个人卡累计消费次数`,`个人卡消费金额为小数次数` as `个人卡消费金额为小数次数`,`个人卡消费过油品类型数量` as `个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量` as `个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比` as `个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数` as `个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比` as `个人卡柴油消费次数占比`,`个人卡天然气消费次数占比` as `个人卡天然气消费次数占比`,`ic卡大额非油消费次数` as `ic卡大额非油消费次数`,`非油累计消费金额` as `非油累计消费金额`,`非油与成品油消费金额比例` as `非油与成品油消费金额比例`,`个人卡累计充值金额` as `个人卡累计充值金额`,`单日充值次数过多次数` as `单日充值次数过多次数`,`充值后立即消费且余额低的次数` as `充值后立即消费且余额低的次数`,`同一班次消费的次数` as `同一班次消费的次数`,`密码重置次数` as `密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数` as `紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数` as `个人卡余额充足时充钱的次数`,`是否曾频繁转账` as `是否曾频繁转账`,`是否异常加油卡` as `是否异常加油卡`,`单位名称` as `单位名称`,`所属` as `所属` from ( select `帐号`,`卡号`,`卡类型描述`,`是否为副卡`,`交易主要站点`,`个人卡消费过加油站站点数量`,`交易类型描述`,`商品类型`,`商品类型描述`,`发卡单位`,`发卡单位与销售单位是否一致`,`首次交易日期`,`最近交易日期`,`平均油量升数`,`平均消费金额`,`平均折扣金额`,`平均余额`,`日均消费笔数`,`日均消费金额`,`单日消费次数过多次数`,`个人卡夜间消费总次数`,`个人卡夜间消费总金额`,`日均夜间消费笔数`,`日均夜间消费金额`,`单日夜间消费次数过多次数`,`睡眠次数`,`是否仍在睡眠`,`个人卡累计消费金额`,`个人卡消费金额方差`,`个人卡累计消费次数`,`个人卡消费金额为小数次数`,`个人卡消费过油品类型数量`,`个人卡消费过汽油品类型数量`,`个人卡汽油消费次数占比`,`个人卡汽油单笔高额消费次数`,`个人卡柴油消费次数占比`,`个人卡天然气消费次数占比`,`ic卡大额非油消费次数`,`非油累计消费金额`,`非油与成品油消费金额比例`,`个人卡累计充值金额`,`单日充值次数过多次数`,`充值后立即消费且余额低的次数`,`同一班次消费的次数`,`密码重置次数`,`紧跟一笔近似于上笔折扣额的消费的次数`,`个人卡余额充足时充钱的次数`,`是否曾频繁转账`,`是否异常加油卡`,`单位名称`,`所属` from (SELECT `帐号`,
       `卡号`,     
       `卡类型描述`, 
       `是否为副卡`,
       `交易主要站点`,
       `个人卡消费过加油站站点数量`,
       `交易类型描述`, 
       `商品类型`, 
       `商品类型描述`,
       `发卡单位`,
       `发卡单位与销售单位是否一致`,
       `首次交易日期`, 
       `最近交易日期`,
       `平均油量升数`, 
       `平均消费金额`, 
       `平均折扣金额`, 
       `平均余额`,
       `日均消费笔数`,
       `日均消费金额`,
       `单日消费次数过多次数`, 
       `个人卡夜间消费总次数`,
       `个人卡夜间消费总金额`,
       `日均夜间消费笔数`, 
       `日均夜间消费金额`,
       `单日夜间消费次数过多次数`, 
       `睡眠次数`,
       `是否仍在睡眠`,
       `个人卡累计消费金额`,
       `加油卡消费金额方差` `个人卡消费金额方差`,
       `个人卡累计消费次数`,
       `加油卡消费金额为小数次数` `个人卡消费金额为小数次数`,
       `个人卡消费过油品类型数量`,
       `个人卡消费过汽油品类型数量`,
       `个人卡汽油消费次数占比`,
       `个人卡汽油单笔高额消费次数`,
       `个人卡柴油消费次数占比`,
       `个人卡天然气消费次数占比`,
       `IC卡大额非油消费次数`,
       `非油累计消费金额`, 
       `非油与成品油消费金额比例`,
       `个人卡累计充值金额`,
       `单日充值次数过多次数`, 
       `充值后立即消费且余额低的次数`,
       `同一班次消费的次数`,
       `密码重置次数`,
       `紧跟一笔近似于上笔折扣额的消费的次数`,
       `个人卡余额充足时充钱的次数`,
       `是否曾频繁转账`,
       `是否异常加油卡`,
       `单位名称`,
       `所属`
  FROM DW04_SJFX.APP_AUAP_YK_PPL) temp_sub_query_table   where ( `单位名称` IN ('广东销售分公司') )
    ) `temp_sql_wrapper_table` ) `bi_152610414374251569`  
     ) `bi_1777753835894362515`
      limit 1200001 
I0825 11:49:49.045094 56311 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:49:49.045136 56311 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:49:49.045354 56311 coordinator.cc:349] starting execution on 6 backends for query_id=1740a34154333dc7:9669bbc900000000
I0825 11:49:49.046301 44904 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=1740a34154333dc7:9669bbc900000000
I0825 11:49:49.046372 44904 query-exec-mgr.cc:46] StartQueryFInstances() query_id=1740a34154333dc7:9669bbc900000000 coord=e4bdhpp025:22000
I0825 11:49:49.046401 44904 query-state.cc:178] Buffer pool limit for 1740a34154333dc7:9669bbc900000000: 819200000
I0825 11:49:49.046470 44904 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 1740a34154333dc7:9669bbc900000000
I0825 11:49:49.046787 56409 query-state.cc:300] StartFInstances(): query_id=1740a34154333dc7:9669bbc900000000 #instances=2
I0825 11:49:49.047036 56409 query-state.cc:313] descriptor table for query=1740a34154333dc7:9669bbc900000000
tuples:
Tuple(id=0 size=583 slots=[Slot(id=0 type=STRING col_path=[0] offset=0 null=(offset=576 mask=1) slot_idx=0 field_idx=-1), Slot(id=1 type=STRING col_path=[1] offset=16 null=(offset=576 mask=2) slot_idx=1 field_idx=-1), Slot(id=2 type=STRING col_path=[10] offset=32 null=(offset=576 mask=4) slot_idx=2 field_idx=-1), Slot(id=3 type=STRING col_path=[48] offset=48 null=(offset=576 mask=8) slot_idx=3 field_idx=-1), Slot(id=4 type=STRING col_path=[39] offset=64 null=(offset=576 mask=10) slot_idx=4 field_idx=-1), Slot(id=5 type=BIGINT col_path=[29] offset=352 null=(offset=578 mask=40) slot_idx=22 field_idx=-1), Slot(id=6 type=STRING col_path=[11] offset=80 null=(offset=576 mask=20) slot_idx=5 field_idx=-1), Slot(id=7 type=STRING col_path=[12] offset=96 null=(offset=576 mask=40) slot_idx=6 field_idx=-1), Slot(id=8 type=STRING col_path=[13] offset=112 null=(offset=576 mask=80) slot_idx=7 field_idx=-1), Slot(id=9 type=STRING col_path=[38] offset=128 null=(offset=577 mask=1) slot_idx=8 field_idx=-1), Slot(id=10 type=STRING col_path=[43] offset=144 null=(offset=577 mask=2) slot_idx=9 field_idx=-1), Slot(id=11 type=TIMESTAMP col_path=[15] offset=160 null=(offset=577 mask=4) slot_idx=10 field_idx=-1), Slot(id=12 type=TIMESTAMP col_path=[16] offset=176 null=(offset=577 mask=8) slot_idx=11 field_idx=-1), Slot(id=13 type=DECIMAL(16,2) col_path=[2] offset=360 null=(offset=578 mask=80) slot_idx=23 field_idx=-1), Slot(id=14 type=DECIMAL(17,2) col_path=[3] offset=368 null=(offset=579 mask=1) slot_idx=24 field_idx=-1), Slot(id=15 type=DECIMAL(17,2) col_path=[4] offset=376 null=(offset=579 mask=2) slot_idx=25 field_idx=-1), Slot(id=16 type=DECIMAL(17,2) col_path=[5] offset=384 null=(offset=579 mask=4) slot_idx=26 field_idx=-1), Slot(id=17 type=DOUBLE col_path=[6] offset=392 null=(offset=579 mask=8) slot_idx=27 field_idx=-1), Slot(id=18 type=DECIMAL(27,2) col_path=[7] offset=192 null=(offset=577 mask=10) slot_idx=12 field_idx=-1), Slot(id=19 type=BIGINT col_path=[25] offset=400 null=(offset=579 mask=10) slot_idx=28 field_idx=-1), Slot(id=20 type=BIGINT col_path=[27] offset=408 null=(offset=579 mask=20) slot_idx=29 field_idx=-1), Slot(id=21 type=DECIMAL(26,2) col_path=[28] offset=208 null=(offset=577 mask=20) slot_idx=13 field_idx=-1), Slot(id=22 type=DOUBLE col_path=[8] offset=416 null=(offset=579 mask=40) slot_idx=30 field_idx=-1), Slot(id=23 type=DECIMAL(27,2) col_path=[9] offset=224 null=(offset=577 mask=40) slot_idx=14 field_idx=-1), Slot(id=24 type=BIGINT col_path=[26] offset=424 null=(offset=579 mask=80) slot_idx=31 field_idx=-1), Slot(id=25 type=BIGINT col_path=[17] offset=432 null=(offset=580 mask=1) slot_idx=32 field_idx=-1), Slot(id=26 type=INT col_path=[18] offset=568 null=(offset=582 mask=2) slot_idx=49 field_idx=-1), Slot(id=27 type=DECIMAL(26,2) col_path=[41] offset=240 null=(offset=577 mask=80) slot_idx=15 field_idx=-1), Slot(id=28 type=DOUBLE col_path=[49] offset=440 null=(offset=580 mask=2) slot_idx=33 field_idx=-1), Slot(id=29 type=BIGINT col_path=[42] offset=448 null=(offset=580 mask=4) slot_idx=34 field_idx=-1), Slot(id=30 type=BIGINT col_path=[44] offset=456 null=(offset=580 mask=8) slot_idx=35 field_idx=-1), Slot(id=31 type=BIGINT col_path=[21] offset=464 null=(offset=580 mask=10) slot_idx=36 field_idx=-1), Slot(id=32 type=BIGINT col_path=[22] offset=472 null=(offset=580 mask=20) slot_idx=37 field_idx=-1), Slot(id=33 type=DOUBLE col_path=[45] offset=480 null=(offset=580 mask=40) slot_idx=38 field_idx=-1), Slot(id=34 type=BIGINT col_path=[20] offset=488 null=(offset=580 mask=80) slot_idx=39 field_idx=-1), Slot(id=35 type=DOUBLE col_path=[46] offset=496 null=(offset=581 mask=1) slot_idx=40 field_idx=-1), Slot(id=36 type=DOUBLE col_path=[47] offset=504 null=(offset=581 mask=2) slot_idx=41 field_idx=-1), Slot(id=37 type=BIGINT col_path=[19] offset=512 null=(offset=581 mask=4) slot_idx=42 field_idx=-1), Slot(id=38 type=DECIMAL(26,2) col_path=[30] offset=256 null=(offset=578 mask=1) slot_idx=16 field_idx=-1), Slot(id=39 type=DECIMAL(31,4) col_path=[31] offset=272 null=(offset=578 mask=2) slot_idx=17 field_idx=-1), Slot(id=40 type=DECIMAL(26,2) col_path=[23] offset=288 null=(offset=578 mask=4) slot_idx=18 field_idx=-1), Slot(id=41 type=BIGINT col_path=[24] offset=520 null=(offset=581 mask=8) slot_idx=43 field_idx=-1), Slot(id=42 type=BIGINT col_path=[32] offset=528 null=(offset=581 mask=10) slot_idx=44 field_idx=-1), Slot(id=43 type=BIGINT col_path=[33] offset=536 null=(offset=581 mask=20) slot_idx=45 field_idx=-1), Slot(id=44 type=BIGINT col_path=[40] offset=544 null=(offset=581 mask=40) slot_idx=46 field_idx=-1), Slot(id=45 type=BIGINT col_path=[34] offset=552 null=(offset=581 mask=80) slot_idx=47 field_idx=-1), Slot(id=46 type=BIGINT col_path=[35] offset=560 null=(offset=582 mask=1) slot_idx=48 field_idx=-1), Slot(id=47 type=INT col_path=[36] offset=572 null=(offset=582 mask=4) slot_idx=50 field_idx=-1), Slot(id=48 type=STRING col_path=[50] offset=304 null=(offset=578 mask=8) slot_idx=19 field_idx=-1), Slot(id=49 type=STRING col_path=[14] offset=320 null=(offset=578 mask=10) slot_idx=20 field_idx=-1), Slot(id=50 type=STRING col_path=[37] offset=336 null=(offset=578 mask=20) slot_idx=21 field_idx=-1)] tuple_path=[])
I0825 11:49:49.047297 56410 query-state.cc:395] Executing instance. instance_id=1740a34154333dc7:9669bbc900000000 fragment_idx=0 per_fragment_instance_idx=0 coord_state_idx=5 #in-flight=3
I0825 11:49:49.047391 56412 query-state.cc:395] Executing instance. instance_id=1740a34154333dc7:9669bbc900000006 fragment_idx=1 per_fragment_instance_idx=5 coord_state_idx=5 #in-flight=4
I0825 11:49:49.047545 56412 hdfs-scan-node.cc:160] Max row batch queue size for scan node '0' in fragment instance '1740a34154333dc7:9669bbc900000006': 190
I0825 11:49:49.048149 56409 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=1740a34154333dc7:9669bbc900000000 refcnt=4
I0825 11:49:49.076431 56311 coordinator.cc:362] started execution on 6 backends for query_id=1740a34154333dc7:9669bbc900000000
I0825 11:49:49.078379 56311 impala-hs2-server.cc:475] ExecuteStatement(): return_val=TExecuteStatementResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: operationHandle (struct) = TOperationHandle {
    01: operationId (struct) = THandleIdentifier {
      01: guid (string) = "\xc7=3TA\xa3@\x17\x00\x00\x00\x00\xc9\xbbi\x96",
      02: secret (string) = "\xc7=3TA\xa3@\x17\x00\x00\x00\x00\xc9\xbbi\x96",
    },
    02: operationType (i32) = 0,
    03: hasResultSet (bool) = true,
  },
}
I0825 11:49:49.334619 56311 impala-hs2-server.cc:709] GetResultSetMetadata(): query_id=1740a34154333dc7:9669bbc900000000
I0825 11:49:49.335256 56311 impala-hs2-server.cc:743] GetResultSetMetadata(): return_val=TGetResultSetMetadataResp {
  01: status (struct) = TStatus {
    01: statusCode (i32) = 0,
  },
  02: schema (struct) = TTableSchema {
    01: columns (list) = list<struct>[53] {
      [0] = TColumnDesc {
        01: columnName (string) = "bi_4405066279117047118",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 0,
      },
      [1] = TColumnDesc {
        01: columnName (string) = "bi_10248578450533883095",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 1,
      },
      [2] = TColumnDesc {
        01: columnName (string) = "bi_6246159538240244065",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 2,
      },
      [3] = TColumnDesc {
        01: columnName (string) = "bi_13540389403478941567",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 3,
      },
      [4] = TColumnDesc {
        01: columnName (string) = "bi_2740263195203761510",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 4,
      },
      [5] = TColumnDesc {
        01: columnName (string) = "bi_3616459640308034135",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 5,
      },
      [6] = TColumnDesc {
        01: columnName (string) = "bi_10331142289063080322",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 6,
      },
      [7] = TColumnDesc {
        01: columnName (string) = "bi_8759647043076232228",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 7,
      },
      [8] = TColumnDesc {
        01: columnName (string) = "bi_14353747127936749017",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 8,
      },
      [9] = TColumnDesc {
        01: columnName (string) = "bi_10646976700040736340",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 9,
      },
      [10] = TColumnDesc {
        01: columnName (string) = "bi_3120723227421642544",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 10,
      },
      [11] = TColumnDesc {
        01: columnName (string) = "bi_14455382331679438995",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 11,
      },
      [12] = TColumnDesc {
        01: columnName (string) = "bi_5478771142720032093",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 8,
              },
            },
          },
        },
        03: position (i32) = 12,
      },
      [13] = TColumnDesc {
        01: columnName (string) = "bi_617034579827635996",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 16,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 13,
      },
      [14] = TColumnDesc {
        01: columnName (string) = "bi_15112077538935800504",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 14,
      },
      [15] = TColumnDesc {
        01: columnName (string) = "bi_3277906557631314998",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 15,
      },
      [16] = TColumnDesc {
        01: columnName (string) = "bi_15647197458875151506",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 17,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 16,
      },
      [17] = TColumnDesc {
        01: columnName (string) = "bi_7064249764713199839",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 17,
      },
      [18] = TColumnDesc {
        01: columnName (string) = "bi_10854565843347455823",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 27,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 18,
      },
      [19] = TColumnDesc {
        01: columnName (string) = "bi_2261074975467520775",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 19,
      },
      [20] = TColumnDesc {
        01: columnName (string) = "bi_11404968094779050130",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 20,
      },
      [21] = TColumnDesc {
        01: columnName (string) = "bi_15065943078847283073",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 21,
      },
      [22] = TColumnDesc {
        01: columnName (string) = "bi_15868460132744503901",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 22,
      },
      [23] = TColumnDesc {
        01: columnName (string) = "bi_15516783331422952374",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 27,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 23,
      },
      [24] = TColumnDesc {
        01: columnName (string) = "bi_16171388146955820514",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 24,
      },
      [25] = TColumnDesc {
        01: columnName (string) = "bi_17048143494310675370",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 25,
      },
      [26] = TColumnDesc {
        01: columnName (string) = "bi_15197978810704604447",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 26,
      },
      [27] = TColumnDesc {
        01: columnName (string) = "bi_7591110132802393138",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 27,
      },
      [28] = TColumnDesc {
        01: columnName (string) = "bi_160391765441068244",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 28,
      },
      [29] = TColumnDesc {
        01: columnName (string) = "bi_4156841468949947680",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 29,
      },
      [30] = TColumnDesc {
        01: columnName (string) = "bi_9794343777229462837",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 30,
      },
      [31] = TColumnDesc {
        01: columnName (string) = "bi_10293590438327478000",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 31,
      },
      [32] = TColumnDesc {
        01: columnName (string) = "bi_1177732512630799779",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 32,
      },
      [33] = TColumnDesc {
        01: columnName (string) = "bi_11456242312036654846",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 33,
      },
      [34] = TColumnDesc {
        01: columnName (string) = "bi_9834182397780633995",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 34,
      },
      [35] = TColumnDesc {
        01: columnName (string) = "bi_6459884238352011348",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 35,
      },
      [36] = TColumnDesc {
        01: columnName (string) = "bi_16651092651258988174",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 6,
              },
            },
          },
        },
        03: position (i32) = 36,
      },
      [37] = TColumnDesc {
        01: columnName (string) = "bi_7054304210906615051",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 37,
      },
      [38] = TColumnDesc {
        01: columnName (string) = "bi_16397999138841287705",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 38,
      },
      [39] = TColumnDesc {
        01: columnName (string) = "bi_4542996461810298499",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 31,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 4,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 39,
      },
      [40] = TColumnDesc {
        01: columnName (string) = "bi_4841881326785682188",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 15,
                02: typeQualifiers (struct) = TTypeQualifiers {
                  01: qualifiers (map) = map<string,struct>[2] {
                    "precision" -> TTypeQualifierValue {
                      01: i32Value (i32) = 26,
                    },
                    "scale" -> TTypeQualifierValue {
                      01: i32Value (i32) = 2,
                    },
                  },
                },
              },
            },
          },
        },
        03: position (i32) = 40,
      },
      [41] = TColumnDesc {
        01: columnName (string) = "bi_9422150591649301309",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 41,
      },
      [42] = TColumnDesc {
        01: columnName (string) = "bi_16833265966592949464",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 42,
      },
      [43] = TColumnDesc {
        01: columnName (string) = "bi_11088153473180053847",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 43,
      },
      [44] = TColumnDesc {
        01: columnName (string) = "bi_3598974696379994152",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 44,
      },
      [45] = TColumnDesc {
        01: columnName (string) = "bi_5097711375700122218",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 45,
      },
      [46] = TColumnDesc {
        01: columnName (string) = "bi_8205063281634656287",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 4,
              },
            },
          },
        },
        03: position (i32) = 46,
      },
      [47] = TColumnDesc {
        01: columnName (string) = "bi_14482952946536492029",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 3,
              },
            },
          },
        },
        03: position (i32) = 47,
      },
      [48] = TColumnDesc {
        01: columnName (string) = "bi_8782608630523284142",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 48,
      },
      [49] = TColumnDesc {
        01: columnName (string) = "bi_14261383855208495737",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 49,
      },
      [50] = TColumnDesc {
        01: columnName (string) = "bi_7873307995921860050",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 50,
      },
      [51] = TColumnDesc {
        01: columnName (string) = "bi_8081399462078118933",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 51,
      },
      [52] = TColumnDesc {
        01: columnName (string) = "bi_616911404683852598",
        02: typeDesc (struct) = TTypeDesc {
          01: types (list) = list<struct>[1] {
            [0] = TTypeEntry {
              01: primitiveEntry (struct) = TPrimitiveTypeEntry {
                01: type (i32) = 7,
              },
            },
          },
        },
        03: position (i32) = 52,
      },
    },
  },
}
I0825 11:49:50.466317 56710 query-exec-mgr.cc:95] QueryState: query_id=1740a34154333dc7:9669bbc900000000 refcnt=4
I0825 11:49:50.466629 56710 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=1740a34154333dc7:9669bbc900000000 refcnt=4
W0825 11:49:51.212859 43862 DomainSocketFactory.java:171] error creating DomainSocket
Java exception follows:
java.net.ConnectException: connect(2) error: Permission denied when trying to connect to '/var/lib/hadoop-hdfs/dn_socket'
	at org.apache.hadoop.net.unix.DomainSocket.connect0(Native Method)
	at org.apache.hadoop.net.unix.DomainSocket.connect(DomainSocket.java:250)
	at org.apache.hadoop.hdfs.shortcircuit.DomainSocketFactory.createSocket(DomainSocketFactory.java:167)
	at org.apache.hadoop.hdfs.BlockReaderFactory.nextDomainPeer(BlockReaderFactory.java:824)
	at org.apache.hadoop.hdfs.BlockReaderFactory.createShortCircuitReplicaInfo(BlockReaderFactory.java:532)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.create(ShortCircuitCache.java:804)
	at org.apache.hadoop.hdfs.shortcircuit.ShortCircuitCache.fetchOrCreate(ShortCircuitCache.java:738)
	at org.apache.hadoop.hdfs.BlockReaderFactory.getBlockReaderLocal(BlockReaderFactory.java:485)
	at org.apache.hadoop.hdfs.BlockReaderFactory.build(BlockReaderFactory.java:355)
	at org.apache.hadoop.hdfs.DFSInputStream.blockSeekTo(DFSInputStream.java:666)
	at org.apache.hadoop.hdfs.DFSInputStream.readWithStrategy(DFSInputStream.java:903)
	at org.apache.hadoop.hdfs.DFSInputStream.read(DFSInputStream.java:980)
	at org.apache.hadoop.fs.FSDataInputStream.read(FSDataInputStream.java:147)
W0825 11:49:51.213196 43862 ShortCircuitCache.java:829] ShortCircuitCache(0x45360bf1): failed to load 1297896886_BP-1820042964-11.11.206.232-1548063025113
I0825 11:49:52.710572 56323 runtime-state.cc:170] Error from query bf45854cdaf2f77d:39d9b0100000000: Memory limit exceeded: Failed to allocate memory required by ORC library
HDFS_SCAN_NODE (id=0) could not allocate 8.00 KB without exceeding limit.
Error occurred on backend e4bdhpp025:22000 by fragment bf45854cdaf2f77d:39d9b0100000006
Memory left in process limit: 285.45 GB
Memory left in query limit: 7.75 KB
Query(bf45854cdaf2f77d:39d9b0100000000): Limit=976.56 MB Reservation=0 ReservationLimit=781.25 MB OtherMemory=976.55 MB Total=976.55 MB Peak=976.55 MB
  Fragment bf45854cdaf2f77d:39d9b0100000006: Reservation=0 OtherMemory=976.55 MB Total=976.55 MB Peak=976.55 MB
    HDFS_SCAN_NODE (id=0): Total=974.98 MB Peak=974.98 MB
      Exprs: Total=4.00 KB Peak=4.00 KB
    KrpcDataStreamSender (dst_id=1): Total=224.00 B Peak=224.00 B
    CodeGen: Total=211.00 B Peak=128.00 KB
I0825 11:49:52.710808 56322 runtime-state.cc:170] Error from query bf45854cdaf2f77d:39d9b0100000000: Memory limit exceeded: Could not allocate string buffer of 128 bytes for ORC file 'hdfs://cluster1/apps/hive/warehouse/dw04_sjfx.db/app_auap_yk_ppl/000006_0'.
HDFS_SCAN_NODE (id=0) could not allocate 128.00 B without exceeding limit.
Error occurred on backend e4bdhpp025:22000 by fragment bf45854cdaf2f77d:39d9b0100000006
Memory left in process limit: 285.45 GB
Memory left in query limit: 7.75 KB
Query(bf45854cdaf2f77d:39d9b0100000000): Limit=976.56 MB Reservation=0 ReservationLimit=781.25 MB OtherMemory=976.55 MB Total=976.55 MB Peak=976.55 MB
  Fragment bf45854cdaf2f77d:39d9b0100000006: Reservation=0 OtherMemory=976.55 MB Total=976.55 MB Peak=976.55 MB
    HDFS_SCAN_NODE (id=0): Total=974.98 MB Peak=974.98 MB
      Exprs: Total=4.00 KB Peak=4.00 KB
    KrpcDataStreamSender (dst_id=1): Total=224.00 B Peak=224.00 B
    CodeGen: Total=211.00 B Peak=128.00 KB
I0825 11:49:52.710933 56322 hdfs-scan-node.cc:541] Scan node (id=0) ran into a parse error for scan range hdfs://cluster1/apps/hive/warehouse/dw04_sjfx.db/app_auap_yk_ppl/000006_0(190302352:102400). Processed 0 bytes.
I0825 11:49:58.658031 43810 krpc-data-stream-mgr.cc:407] Reduced stream ID cache from 34 items, to 33, eviction took: 0
I0825 11:49:58.659055 43938 thrift-util.cc:123] TSocket::write_partial() send() <Host: ::ffff:11.11.206.233 Port: 59290>Broken pipe
I0825 11:49:58.660092 43938 thrift-util.cc:123] TAcceptQueueServer client died: write() send(): Broken pipe
I0825 11:49:58.660746 51940 impala-server.cc:1200] ReportExecStatus(): Received report for unknown query ID (probably closed or cancelled): 614cf0b79050a508:de0dc89200000000
I0825 11:49:58.661126 44439 impala-internal-service.cc:44] ExecQueryFInstances(): query_id=5b4b7e3389e2f70e:a14a264f00000000
I0825 11:49:58.669520 44439 query-exec-mgr.cc:46] StartQueryFInstances() query_id=5b4b7e3389e2f70e:a14a264f00000000 coord=e4bdhpp023:22000
I0825 11:49:58.669754 44439 query-state.cc:156] Using query memory limit from query options: 976.56 MB
I0825 11:49:58.671483 44439 mem-tracker.cc:191] Using query memory limit: 976.56 MB
I0825 11:49:58.671553 44439 query-state.cc:178] Buffer pool limit for 5b4b7e3389e2f70e:a14a264f00000000: 819200000
I0825 11:49:58.671679 44439 initial-reservations.cc:60] Successfully claimed initial reservations (0) for query 5b4b7e3389e2f70e:a14a264f00000000
I0825 11:49:58.671865 57142 query-state.cc:300] StartFInstances(): query_id=5b4b7e3389e2f70e:a14a264f00000000 #instances=1
I0825 11:49:58.672948 57143 query-exec-mgr.cc:95] QueryState: query_id=1740a34154333dc7:9669bbc900000000 refcnt=4
I0825 11:49:58.673758 57143 query-exec-mgr.cc:155] ReleaseQueryState(): query_id=1740a34154333dc7:9669bbc900000000 refcnt=4
Wrote minidump to /var/log/impala/minidumps/impalad/bcb3b28e-764c-4621-a086eebe-5c20a65c.dmp
